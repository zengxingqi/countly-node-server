;/*globals MobileDashboardView,_,CountlyHelpers,countlyTotalUsers,Handlebars,countlyView,jQuery,$,app,countlyGlobal,countlySession,countlyCommon,countlyLocation,countlyDeviceDetails,countlyCarrier */
window.MobileDashboardView = countlyView.extend({
    selectedView: "#draw-total-sessions",
    selectedMap: "#map-list-sessions",
    origLangs: {},
    initialize: function() {
        this.curMap = "map-list-sessions";
        this.template = Handlebars.compile($("#dashboard-template").html());
    },
    beforeRender: function() {
        this.maps = {
            "map-list-sessions": {id: 'total', label: jQuery.i18n.map["sidebar.analytics.sessions"], type: 'number', metric: "t"},
            "map-list-users": {id: 'total', label: jQuery.i18n.map["sidebar.analytics.users"], type: 'number', metric: "u"},
            "map-list-new": {id: 'total', label: jQuery.i18n.map["common.table.new-users"], type: 'number', metric: "n"}
        };
        return $.when(countlySession.initialize(), countlyCarrier.initialize(), countlyDeviceDetails.initialize(), countlyTotalUsers.initialize("users"), countlyTotalUsers.initialize("countries")).then(function() {});
    },
    afterRender: function() {
        if (countlyGlobal.config.use_google) {
            var self = this;
            countlyLocation.drawGeoChart({height: 330, metric: self.maps[self.curMap]});
        }
    },
    pageScript: function() {
        $("#total-user-estimate-ind").on("click", function() {
            CountlyHelpers.alert($("#total-user-estimate-exp").html(), "black");
        });

        var self = this;
        $("#big-numbers-container").find(".big-numbers .inner").click(function() {
            $("#big-numbers-container").find(".big-numbers").removeClass("active");
            $(this).parent(".big-numbers").addClass("active");

            var elID = $(this).find('.select').attr("id");

            if (self.selectedView === "#" + elID) {
                return true;
            }

            self.selectedView = "#" + elID;
            self.drawGraph();
        });

        if (countlyGlobal.config.use_google) {
            this.countryList();
            $(".map-list").find(".data-type-selector-group .selector").click(function() {
                $(".map-list").find(".data-type-selector-group .selector").removeClass("active");
                $(this).addClass("active");
                self.curMap = $(this).attr("id");
                self.selectedMap = "#" + self.curMap;
                countlyLocation.refreshGeoChart(self.maps[self.curMap]);
                self.countryList();
            });
        }

        app.localize();
    },
    drawGraph: function() {
        var sessionDP = {};

        switch (this.selectedView) {
        case "#draw-total-users":
            sessionDP = countlySession.getUserDPActive();
            break;
        case "#draw-new-users":
            sessionDP = countlySession.getUserDPNew();
            break;
        case "#draw-total-sessions":
            sessionDP = countlySession.getSessionDPTotal();
            break;
        case "#draw-time-spent":
            sessionDP = countlySession.getDurationDPAvg();
            break;
        case "#draw-total-time-spent":
            sessionDP = countlySession.getDurationDP();
            break;
        case "#draw-avg-events-served":
            sessionDP = countlySession.getEventsDPAvg();
            break;
        }

        _.defer(function() {
            countlyCommon.drawTimeGraph(sessionDP.chartDP, "#dashboard-graph");
        });
    },
    renderCommon: function(isRefresh, isDateChange) {
        var sessionData = countlySession.getSessionData(),
            locationData = countlyLocation.getLocationData({maxCountries: 10});

        this.locationData = locationData;
        sessionData["page-title"] = countlyCommon.getDateRange();
        sessionData.usage = [
            {
                "title": jQuery.i18n.map["common.total-sessions"],
                "material-icon": "timeline",
                "data": sessionData.usage['total-sessions'],
                "id": "draw-total-sessions",
                "help": "dashboard.total-sessions"
            },
            {
                "title": jQuery.i18n.map["common.total-users"],
                "ion-icon": "ion-person-stalker",
                "data": sessionData.usage['total-users'],
                "id": "draw-total-users",
                "help": "dashboard.total-users"
            },
            {
                "title": jQuery.i18n.map["common.new-users"],
                "ion-icon": "ion-person-add",
                "data": sessionData.usage['new-users'],
                "id": "draw-new-users",
                "help": "dashboard.new-users"
            },
            {
                "title": jQuery.i18n.map["dashboard.time-spent"],
                "ion-icon": "ion-android-time",
                "data": sessionData.usage['total-duration'],
                "id": "draw-total-time-spent",
                "help": "dashboard.total-time-spent"
            },
            {
                "title": jQuery.i18n.map["dashboard.avg-time-spent"],
                "material-icon": "timelapse",
                "data": sessionData.usage['avg-duration-per-session'],
                "id": "draw-time-spent",
                "help": "dashboard.avg-time-spent2"
            },
            {
                "title": jQuery.i18n.map["dashboard.avg-reqs-received"],
                "material-icon": "compare_arrows",
                "data": sessionData.usage['avg-events'],
                "id": "draw-avg-events-served",
                "help": "dashboard.avg-reqs-received"
            }
        ];
        sessionData.bars = [
            {
                "title": jQuery.i18n.map["common.bar.top-platform"],
                "data": countlyDeviceDetails.getBarsWPercentageOfTotal("os"),
                "help": "dashboard.top-platforms"
            },
            {
                "title": jQuery.i18n.map["common.bar.top-resolution"],
                "data": countlyDeviceDetails.getBarsWPercentageOfTotal("resolutions"),
                "help": "dashboard.top-resolutions"
            },
            {
                "title": jQuery.i18n.map["common.bar.top-carrier"],
                "data": countlyCarrier.getBarsWPercentageOfTotal(),
                "help": "dashboard.top-carriers"
            },
            {
                "title": jQuery.i18n.map["common.bar.top-users"],
                "data": countlySession.getTopUserBars(),
                "help": "dashboard.top-users"
            }
        ];

        this.templateData = sessionData;

        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));

            $('.data-type-selector-group').find('div').removeClass('active');
            $(this.selectedMap).addClass('active');

            if (!countlyGlobal.config.use_google) {
                $(".map-list.geo-switch").hide();
            }
            $(this.selectedView).parents(".big-numbers").addClass("active");
            this.pageScript();

            if (!isDateChange) {
                this.drawGraph();
            }
        }
        if (!countlyGlobal.config.use_google) {
            this.countryTable(isRefresh);
        }
    },
    restart: function() {
        this.refresh(true);
    },
    refresh: function(isFromIdle) {

        var self = this;
        $.when(this.beforeRender()).then(function() {
            if (app.activeView !== self) {
                return false;
            }
            self.renderCommon(true);

            var newPage = $("<div>" + self.template(self.templateData) + "</div>");
            $(".dashboard-summary").replaceWith(newPage.find(".dashboard-summary"));
            $(".widget-header .title").replaceWith(newPage.find(".widget-header .title"));

            $("#big-numbers-container").find(".big-numbers").each(function(i, el) {
                var newEl = $(newPage.find("#big-numbers-container .big-numbers")[i]);

                if (isFromIdle) {
                    $(el).find(".number").replaceWith(newEl.find(".number"));
                }
                else {
                    var currNumberEl = $(el).find(".number .value"),
                        currNumberVal = parseFloat(currNumberEl.text()) || 0,
                        currNumPost = currNumberEl.text().replace(currNumberVal, ''),
                        targetValue = parseFloat(newEl.find(".number .value").text()),
                        targetPost = newEl.find(".number .value").text().replace(targetValue, '');

                    if (targetValue !== currNumberVal) {
                        if (targetValue < currNumberVal || (targetPost.length && targetPost !== currNumPost)) {
                            $(el).find(".number").replaceWith(newEl.find(".number"));
                        }
                        else {
                            jQuery({someValue: currNumberVal, currEl: currNumberEl}).animate({someValue: targetValue}, {
                                duration: 2000,
                                easing: 'easeInOutQuint',
                                step: function() {
                                    if ((targetValue + "").indexOf(".") === -1) {
                                        this.currEl.text(Math.round(this.someValue) + targetPost);
                                    }
                                    else {
                                        this.currEl.text(parseFloat((this.someValue).toFixed(1)) + targetPost);
                                    }
                                }
                            });
                        }
                    }
                }

                $(el).find(".trend").replaceWith(newEl.find(".trend"));
                $(el).find(".spark").replaceWith(newEl.find(".spark"));
            });

            self.drawGraph();

            $(".usparkline").peity("bar", { width: "100%", height: "30", colour: "#83C986", strokeColour: "#83C986", strokeWidth: 2 });
            $(".dsparkline").peity("bar", { width: "100%", height: "30", colour: "#DB6E6E", strokeColour: "#DB6E6E", strokeWidth: 2 });

            if (newPage.find("#map-list-right").length === 0) {
                $("#map-list-right").remove();
            }

            if ($("#map-list-right").length) {
                $("#map-list-right").replaceWith(newPage.find("#map-list-right"));
            }
            else {
                $(".widget.map-list").prepend(newPage.find("#map-list-right"));
            }

            self.pageScript();
        });
    },
    countryList: function() {
        var self = this;
        $("#map-list-right").empty();
        var country;
        for (var i = 0; i < self.locationData.length; i++) {
            country = self.locationData[i];
            $("#map-list-right").append('<div class="map-list-item">' +
                '<div class="flag" style="background-image:url(\'' + countlyGlobal.cdn + 'images/flags/' + country.code + '.png\');"></div>' +
                '<div class="country-name">' + country.country + '</div>' +
                '<div class="total">' + country[self.maps[self.curMap].metric] + '</div>' +
            '</div>');
        }

        if (self.locationData.length === 0) {
            $("#geo-chart-outer").addClass("empty");
        }
        else {
            $("#geo-chart-outer").removeClass("empty");
        }
    },
    countryTable: function(refresh) {
        var self = this;
        if (!refresh) {
            $(".map-list").after('<table id="countries-alternative" class="d-table help-zone-vb" cellpadding="0" cellspacing="0"></table>');
            this.country_dtable = $('#countries-alternative').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": self.locationData,
                "iDisplayLength": 10,
                "aoColumns": [
                    { "mData": "country_flag", "sType": "string", "sTitle": jQuery.i18n.map["countries.table.country"]},
                    { "mData": "t", "sType": "numeric", "sTitle": jQuery.i18n.map["common.table.total-sessions"]},
                    { "mData": "u", "sType": "numeric", "sTitle": jQuery.i18n.map["common.table.total-users"]},
                    { "mData": "n", "sType": "numeric", "sTitle": jQuery.i18n.map["common.table.new-users"]}
                ]
            }));
            this.country_dtable.stickyTableHeaders();
            this.country_dtable.fnSort([ [1, 'desc'] ]);
            $("#countries-alternative_wrapper .dataTable-top .search-table-data").hide();
            $("#countries-alternative_wrapper .dataTable-top .save-table-data").hide();
            $("#countries-alternative_wrapper .dataTable-top .dataTables_paginate").hide();
            $("#countries-alternative_wrapper .dataTable-top .DTTT_container").hide();
            $("#countries-alternative_wrapper .dataTable-top").append("<div style='font:13px Ubuntu,Helvetica,sans-serif; color:#636363; margin-right:10px; padding: 10px; float: right;'><a href='#/analytics/countries'>" + jQuery.i18n.map["common.go-to-countries"] + "&nbsp;&nbsp;&nbsp;<i class='fa fa-chevron-right' aria-hidden='true'></i></a></div>");
            $("#countries-alternative_wrapper .dataTable-top").append("<div style='font:15px Ubuntu,Helvetica,sans-serif; color:#636363; margin-left:10px; margin-top: 8px; text-transform: uppercase;'>" + jQuery.i18n.map["sidebar.analytics.countries"] + "</div>");
        }
        else {
            CountlyHelpers.refreshTable(self.country_dtable, countlyLocation.getLocationData({maxCountries: 10}));
        }
    },
    destroy: function() {
        $("#content-top").html("");
    }
});

app.addAppType("mobile", MobileDashboardView);

app.addAppManagementSwitchCallback(function(appId, type) {
    if (type === "mobile") {
        jQuery.i18n.map["revenue.tooltip"] = jQuery.i18n.map["mobile.revenue.tooltip"];
        jQuery.i18n.map["placeholder.iap-event-key"] = jQuery.i18n.map["mobile.placeholder.iap-event-key"];
        jQuery.i18n.map["placeholder.iap-help"] = jQuery.i18n.map["mobile.placeholder.iap-help"];
        jQuery.i18n.map["management-applications.iap-event"] = jQuery.i18n.map["mobile.management-applications.iap-event"];
    }
    else if (app.appTypes.mobile.origLangs["revenue.tooltip"]) {
        jQuery.i18n.map["revenue.tooltip"] = app.appTypes.mobile.origLangs["revenue.tooltip"];
        jQuery.i18n.map["placeholder.iap-event-key"] = app.appTypes.mobile.origLangs["placeholder.iap-event-key"];
        jQuery.i18n.map["placeholder.iap-help"] = app.appTypes.mobile.origLangs["placeholder.iap-help"];
        jQuery.i18n.map["management-applications.iap-event"] = app.appTypes.mobile.origLangs["management-applications.iap-event"];
    }
});

$(document).ready(function() {
    var menu = '<a href="#/analytics/platforms" class="item">' +
		'<div class="logo platforms"></div>' +
		'<div class="text" data-localize="sidebar.analytics.platforms"></div>' +
	'</a>';
    $('#mobile-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/carriers" class="item">' +
		'<div class="logo carrier"></div>' +
		'<div class="text" data-localize="sidebar.analytics.carriers"></div>' +
	'</a>';
    $('#mobile-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/versions" class="item">' +
		'<div class="logo app-versions"></div>' +
		'<div class="text" data-localize="sidebar.analytics.app-versions"></div>' +
	'</a>';
    $('#mobile-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/resolutions" class="item">' +
		'<div class="logo resolutions"></div>' +
		'<div class="text" data-localize="sidebar.analytics.resolutions"></div>' +
	'</a>';
    $('#mobile-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/devices" class="item">' +
		'<div class="logo devices"></div>' +
		'<div class="text" data-localize="sidebar.analytics.devices"></div>' +
	'</a>';
    $('#mobile-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/countries" class="item">' +
		'<div class="logo country"></div>' +
		'<div class="text" data-localize="sidebar.analytics.countries"></div>' +
	'</a>';
    $('#mobile-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/sessions" class="item">' +
		'<div class="logo sessions"></div>' +
		'<div class="text" data-localize="sidebar.analytics.sessions"></div>' +
	'</a>';
    $('#mobile-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/users" class="item">' +
		'<div class="logo users"></div>' +
		'<div class="text" data-localize="sidebar.analytics.users"></div>' +
	'</a>';
    $('#mobile-type #analytics-submenu').prepend(menu);

    $("#mobile-type #engagement-menu").show();

    menu = '<a href="#/analytics/loyalty" class="item">' +
                    '<div class="logo loyalty"></div>' +
                    '<div class="text" data-localize="sidebar.analytics.user-loyalty"></div>' +
                '</a>' +
                '<a href="#/analytics/frequency" class="item">' +
                    '<div class="logo frequency"></div>' +
                    '<div class="text" data-localize="sidebar.analytics.session-frequency"></div>' +
                '</a>' +
                '<a href="#/analytics/durations" class="item">' +
                    '<div class="logo durations"></div>' +
                    '<div class="text" data-localize="sidebar.engagement.durations"></div>' +
                '</a>';
    $('#mobile-type #engagement-submenu').append(menu);

    app.addAppSwitchCallback(function(appId) {
        if (countlyGlobal.apps[appId].type === "mobile") {
            //revenue = IAP
            jQuery.i18n.map["revenue.iap"] = jQuery.i18n.map["mobile.revenue.iap"];
            jQuery.i18n.map["systemlogs.action.iap_updated"] = jQuery.i18n.map["mobile.systemlogs.action.iap_updated"];
        }
        app.appTypes.mobile.origLangs = {
            "revenue.tooltip": jQuery.i18n.map["revenue.tooltip"],
            "placeholder.iap-event-key": jQuery.i18n.map["placeholder.iap-event-key"],
            "placeholder.iap-help": jQuery.i18n.map["placeholder.iap-help"],
            "management-applications.iap-event": jQuery.i18n.map["management-applications.iap-event"]
        };
    });
});;/*global countlyCommon, countlyGlobal, jQuery*/

(function(countlyWebDashboard, $) {

    //Private Properties
    var _users = [],
        _appId = "";

    //Public Methods
    countlyWebDashboard.initialize = function(isRefresh) {
        if (_appId !== countlyCommon.ACTIVE_APP_ID) {
            countlyWebDashboard.reset();
            _appId = countlyCommon.ACTIVE_APP_ID;
        }
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r,
            data: {
                "api_key": countlyGlobal.member.api_key,
                "app_id": countlyCommon.ACTIVE_APP_ID,
                "method": "latest_users",
                "display_loader": !isRefresh
            },
            dataType: "jsonp",
            success: function(json) {
                _users = json;
            }
        });
    };

    countlyWebDashboard.refresh = countlyWebDashboard.initialize;

    countlyWebDashboard.reset = function() {
        _users = [];
    };

    countlyWebDashboard.getLatestUsers = function() {
        return _users;
    };

}(window.countlyWebDashboard = window.countlyWebDashboard || {}, jQuery));;/*global CountlyHelpers, countlyView, _, WebDashboardView, countlyLocation, countlyDeviceDetails, countlyTotalUsers, countlyBrowser, countlySources, countlyWebDashboard, countlyCommon, countlyGlobal, countlySession, Handlebars, app, $, jQuery*/

window.WebDashboardView = countlyView.extend({
    selectedView: "#draw-total-sessions",
    selectedMap: "#map-list-sessions",
    initialize: function() {
        this.curMap = "map-list-sessions";
        this.template = Handlebars.compile($("#dashboard-template").html());
    },
    beforeRender: function(isRefresh) {
        this.maps = {
            "map-list-sessions": {id: 'total', label: jQuery.i18n.map["sidebar.analytics.sessions"], type: 'number', metric: "t"},
            "map-list-users": {id: 'total', label: jQuery.i18n.map["sidebar.analytics.users"], type: 'number', metric: "u"},
            "map-list-new": {id: 'total', label: jQuery.i18n.map["common.table.new-users"], type: 'number', metric: "n"}
        };
        var defs = [countlySession.initialize(), countlyDeviceDetails.initialize(), countlyWebDashboard.initialize(isRefresh), countlyTotalUsers.initialize("users"), countlyTotalUsers.initialize("countries")];
        if (typeof window.countlyBrowser !== "undefined") {
            defs.push(countlyBrowser.initialize());
        }
        if (typeof window.countlySources !== "undefined") {
            defs.push(countlySources.initialize());
        }

        return $.when.apply($, defs).then(function() {});
    },
    afterRender: function() {
        if (countlyGlobal.config.use_google) {
            var self = this;
            countlyLocation.drawGeoChart({height: 330, metric: self.maps[self.curMap]});
        }
    },
    pageScript: function() {
        $("#total-user-estimate-ind").on("click", function() {
            CountlyHelpers.alert($("#total-user-estimate-exp").html(), "black");
        });

        var self = this;
        $("#big-numbers-container").find(".big-numbers .inner").click(function() {
            $("#big-numbers-container").find(".big-numbers").removeClass("active");
            $(this).parent(".big-numbers").addClass("active");

            var elID = $(this).find('.select').attr("id");

            if (self.selectedView === "#" + elID) {
                return true;
            }

            self.selectedView = "#" + elID;
            self.drawGraph();
        });

        if (countlyGlobal.config.use_google) {
            this.countryList();
            $(".map-list").find(".data-type-selector-group .selector").click(function() {
                $(".map-list").find(".data-type-selector-group .selector").removeClass("active");
                $(this).addClass("active");
                self.curMap = $(this).attr("id");
                self.selectedMap = "#" + self.curMap;
                countlyLocation.refreshGeoChart(self.maps[self.curMap]);
                self.countryList();
            });
        }

        app.localize();
    },
    drawGraph: function() {
        var sessionDP = {};

        switch (this.selectedView) {
        case "#draw-total-users":
            sessionDP = countlySession.getUserDPActive();
            break;
        case "#draw-new-users":
            sessionDP = countlySession.getUserDPNew();
            break;
        case "#draw-total-sessions":
            sessionDP = countlySession.getSessionDPTotal();
            break;
        case "#draw-time-spent":
            sessionDP = countlySession.getDurationDPAvg();
            break;
        case "#draw-total-time-spent":
            sessionDP = countlySession.getDurationDP();
            break;
        case "#draw-avg-events-served":
            sessionDP = countlySession.getEventsDPAvg();
            break;
        }

        _.defer(function() {
            countlyCommon.drawTimeGraph(sessionDP.chartDP, "#dashboard-graph");
        });
    },
    renderCommon: function(isRefresh, isDateChange) {
        var sessionData = countlySession.getSessionData(),
            locationData = countlyLocation.getLocationData({maxCountries: 7});

        this.locationData = locationData;
        sessionData["page-title"] = countlyCommon.getDateRange();
        sessionData.usage = [
            {
                "title": jQuery.i18n.map["common.total-sessions"],
                "material-icon": "timeline",
                "data": sessionData.usage['total-sessions'],
                "id": "draw-total-sessions",
                "help": "dashboard.total-sessions"
            },
            {
                "title": jQuery.i18n.map["common.total-users"],
                "ion-icon": "ion-person-stalker",
                "data": sessionData.usage['total-users'],
                "id": "draw-total-users",
                "help": "dashboard.total-users"
            },
            {
                "title": jQuery.i18n.map["common.new-users"],
                "ion-icon": "ion-person-add",
                "data": sessionData.usage['new-users'],
                "id": "draw-new-users",
                "help": "dashboard.new-users"
            },
            {
                "title": jQuery.i18n.map["dashboard.time-spent"],
                "ion-icon": "ion-android-time",
                "data": sessionData.usage['total-duration'],
                "id": "draw-total-time-spent",
                "help": "dashboard.total-time-spent"
            },
            {
                "title": jQuery.i18n.map["dashboard.avg-time-spent"],
                "material-icon": "timelapse",
                "data": sessionData.usage['avg-duration-per-session'],
                "id": "draw-time-spent",
                "help": "dashboard.avg-time-spent2"
            },
            {
                "title": jQuery.i18n.map["dashboard.avg-reqs-received"],
                "material-icon": "compare_arrows",
                "data": sessionData.usage['avg-events'],
                "id": "draw-avg-events-served",
                "help": "dashboard.avg-reqs-received"
            }
        ];
        sessionData.bars = [
            {
                "title": jQuery.i18n.map["common.bar.top-platform"],
                "data": countlyDeviceDetails.getBarsWPercentageOfTotal("os"),
                "help": "dashboard.top-platforms"
            },
            {
                "title": jQuery.i18n.map["common.bar.top-sources"],
                "data": (typeof countlySources !== "undefined") ? countlySources.getBarsWPercentageOfTotal() : [],
                "help": "dashboard.top-sources"
            },
            {
                "title": jQuery.i18n.map["common.bar.top-browsers"],
                "data": (typeof countlyBrowser !== "undefined") ? countlyBrowser.getBarsWPercentageOfTotal() : [],
                "help": "dashboard.top-browsers"
            },
            {
                "title": jQuery.i18n.map["common.bar.top-users"],
                "data": countlySession.getTopUserBars(),
                "help": "dashboard.top-users"
            }
        ];

        this.templateData = sessionData;

        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));

            $('.data-type-selector-group').find('div').removeClass('active');
            $(this.selectedMap).addClass('active');

            if (!countlyGlobal.config.use_google) {
                $(".map-list.geo-switch").hide();
            }
            $(".map-list").after('<table id="last-visitors" class="d-table help-zone-vb" cellpadding="0" cellspacing="0"></table>');
            var users = countlyWebDashboard.getLatestUsers();
            var sort = 3;
            var columns = [
                {
                    "mData": function(row) {
                        var img = (!row.cc) ? "unknown" : (row.cc + "").toLowerCase();
                        var name = (!row.cc) ? jQuery.i18n.map["common.unknown"] : row.cc + "";
                        var c = '<div class="flag" style="margin-top: 2px; background-image: url(images/flags/' + img + '.png);"></div>' + name;
                        if (row.cty && row.cty !== jQuery.i18n.map["common.unknown"]) {
                            c += " (" + row.cty + ")";
                        }
                        return c;
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map["countries.table.country"],
                    "bSortable": false,
                    "sClass": "break web-15"
                },
                {
                    "mData": function(row) {
                        return (!row.p) ? jQuery.i18n.map["common.unknown"] : row.p;
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map["platforms.table.platform"],
                    "bSortable": false
                }
            ];

            if (users[0] && users[0].brw) {
                columns.push({
                    "mData": function(row) {
                        return (!row.brw) ? jQuery.i18n.map["common.unknown"] : row.brw;
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map["web.browser"],
                    "bSortable": false
                });
                sort++;
            }

            if (users[0] && users[0].lv) {
                columns.push({
                    "mData": function(row) {
                        return (!row.lv) ? jQuery.i18n.map["common.unknown"] : row.lv;
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map["web.views.view"],
                    "bSortable": false,
                    "sClass": "trim web-20"
                });
                sort++;
            }

            if (users[0] && users[0].src) {
                columns.push({
                    "mData": function(row) {
                        if (!row.src) {
                            return jQuery.i18n.map["common.unknown"];
                        }
                        else {
                            row.src = row.src.replace(/&#46;/g, ".").replace(/&amp;#46;/g, '.'); if (row.src.indexOf("http") === 0) {
                                return "<a href='" + row.src + "' target='_blank'>" + ((typeof countlySources !== "undefined") ? countlySources.getSourceName(row.src) : row.src) + "</a>";
                            }
                            else {
                                return (typeof countlySources !== "undefined") ? countlySources.getSourceName(row.src) : row.src;
                            }
                        }
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map["web.from-source"],
                    "bSortable": false,
                    "sClass": "break web-20"
                });
                sort++;
            }

            columns.push({
                "mData": function(row) {
                    return (!row.sc) ? 0 : row.sc;
                },
                "sType": "numeric",
                "sTitle": jQuery.i18n.map["web.total-sessions"],
                "bSortable": false
            },
            {
                "mData": function(row, type) {
                    if (type === "display") {
                        return (row.ls) ? countlyCommon.formatTimeAgo(row.ls) : jQuery.i18n.map["web.never"];
                    }
                    else {
                        return (row.ls) ? row.ls : 0;
                    }
                },
                "sType": "format-ago",
                "sTitle": jQuery.i18n.map["web.last-seen"],
                "bSortable": false
            },
            {
                "mData": function(row) {
                    return countlyCommon.formatTime((row.tsd) ? parseInt(row.tsd) : 0);
                },
                "sType": "numeric",
                "sTitle": jQuery.i18n.map["web.time-spent"],
                "bSortable": false
            });

            this.latestdtable = $('#last-visitors').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": users,
                "iDisplayLength": 10,
                "aoColumns": columns
            }));
            this.latestdtable.stickyTableHeaders();
            this.latestdtable.fnSort([ [sort, 'desc'] ]);
            $("#last-visitors_wrapper .dataTable-top .search-table-data").hide();
            $("#last-visitors_wrapper .dataTable-top .save-table-data").hide();
            $("#last-visitors_wrapper .dataTable-top").append("<div style='font:15px Ubuntu,Helvetica,sans-serif; color:#636363; margin-left:10px; margin-top: 8px; text-transform: uppercase;'>" + jQuery.i18n.map["web.latest-visitors"] + "</div>");

            $(this.selectedView).parents(".big-numbers").addClass("active");
            this.pageScript();

            if (!isDateChange) {
                this.drawGraph();
            }
        }
        if (!countlyGlobal.config.use_google) {
            this.countryTable(isRefresh);
        }
    },
    restart: function() {
        this.refresh(true);
    },
    refresh: function(isFromIdle) {

        var self = this;
        $.when(this.beforeRender(true)).then(function() {
            if (app.activeView !== self) {
                return false;
            }
            self.renderCommon(true);

            CountlyHelpers.refreshTable(self.latestdtable, countlyWebDashboard.getLatestUsers());

            var newPage = $("<div>" + self.template(self.templateData) + "</div>");
            $(".dashboard-summary").replaceWith(newPage.find(".dashboard-summary"));
            $(".widget-header .title").replaceWith(newPage.find(".widget-header .title"));

            $("#big-numbers-container").find(".big-numbers").each(function(i, el) {
                var newEl = $(newPage.find("#big-numbers-container .big-numbers")[i]);

                if (isFromIdle) {
                    $(el).find(".number").replaceWith(newEl.find(".number"));
                }
                else {
                    var currNumberEl = $(el).find(".number .value"),
                        currNumberVal = parseFloat(currNumberEl.text()) || 0,
                        currNumPost = currNumberEl.text().replace(currNumberVal, ''),
                        targetValue = parseFloat(newEl.find(".number .value").text()),
                        targetPost = newEl.find(".number .value").text().replace(targetValue, '');

                    if (targetValue !== currNumberVal) {
                        if (targetValue < currNumberVal || (targetPost.length && targetPost !== currNumPost)) {
                            $(el).find(".number").replaceWith(newEl.find(".number"));
                        }
                        else {
                            jQuery({someValue: currNumberVal, currEl: currNumberEl}).animate({someValue: targetValue}, {
                                duration: 2000,
                                easing: 'easeInOutQuint',
                                step: function() {
                                    if ((targetValue + "").indexOf(".") === -1) {
                                        this.currEl.text(Math.round(this.someValue) + targetPost);
                                    }
                                    else {
                                        this.currEl.text(parseFloat((this.someValue).toFixed(1)) + targetPost);
                                    }
                                }
                            });
                        }
                    }
                }

                $(el).find(".trend").replaceWith(newEl.find(".trend"));
                $(el).find(".spark").replaceWith(newEl.find(".spark"));
            });

            self.drawGraph();

            $(".usparkline").peity("bar", { width: "100%", height: "30", colour: "#83C986", strokeColour: "#83C986", strokeWidth: 2 });
            $(".dsparkline").peity("bar", { width: "100%", height: "30", colour: "#DB6E6E", strokeColour: "#DB6E6E", strokeWidth: 2 });

            if (newPage.find("#map-list-right").length === 0) {
                $("#map-list-right").remove();
            }

            if ($("#map-list-right").length) {
                $("#map-list-right").replaceWith(newPage.find("#map-list-right"));
            }
            else {
                $(".widget.map-list").prepend(newPage.find("#map-list-right"));
            }

            self.pageScript();
        });
    },
    countryList: function() {
        var self = this;
        $("#map-list-right").empty();
        var country;
        for (var i = 0; i < self.locationData.length; i++) {
            country = self.locationData[i];
            $("#map-list-right").append('<div class="map-list-item">' +
                '<div class="flag" style="background-image:url(\'' + countlyGlobal.cdn + 'images/flags/' + country.code + '.png\');"></div>' +
                '<div class="country-name">' + country.country + '</div>' +
                '<div class="total">' + country[self.maps[self.curMap].metric] + '</div>' +
            '</div>');
        }

        if (self.locationData.length === 0) {
            $("#geo-chart-outer").addClass("empty");
        }
        else {
            $("#geo-chart-outer").removeClass("empty");
        }
    },
    countryTable: function(refresh) {
        var self = this;
        if (!refresh) {
            $(".map-list").after('<table id="countries-alternative" class="d-table help-zone-vb" cellpadding="0" cellspacing="0"></table>');
            this.country_dtable = $('#countries-alternative').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": self.locationData,
                "iDisplayLength": 10,
                "aoColumns": [
                    { "mData": "country_flag", "sType": "string", "sTitle": jQuery.i18n.map["countries.table.country"]},
                    { "mData": "t", "sType": "numeric", "sTitle": jQuery.i18n.map["common.table.total-sessions"]},
                    { "mData": "u", "sType": "numeric", "sTitle": jQuery.i18n.map["common.table.total-users"]},
                    { "mData": "n", "sType": "numeric", "sTitle": jQuery.i18n.map["common.table.new-users"]}
                ]
            }));
            this.country_dtable.stickyTableHeaders();
            this.country_dtable.fnSort([ [1, 'desc'] ]);
            $("#countries-alternative_wrapper .dataTable-top .search-table-data").hide();
            $("#countries-alternative_wrapper .dataTable-top .save-table-data").hide();
            $("#countries-alternative_wrapper .dataTable-top .dataTables_paginate").hide();
            $("#countries-alternative_wrapper .dataTable-top .DTTT_container").hide();
            $("#countries-alternative_wrapper .dataTable-top").append("<div style='font:13px Ubuntu,Helvetica,sans-serif; color:#636363; margin-right:10px; padding: 10px; float: right;'><a href='#/analytics/countries'>" + jQuery.i18n.map["common.go-to-countries"] + "&nbsp;&nbsp;&nbsp;<i class='fa fa-chevron-right' aria-hidden='true'></i></a></div>");
            $("#countries-alternative_wrapper .dataTable-top").append("<div style='font:15px Ubuntu,Helvetica,sans-serif; color:#636363; margin-left:10px; margin-top: 8px; text-transform: uppercase;'>" + jQuery.i18n.map["sidebar.analytics.countries"] + "</div>");
        }
        else {
            CountlyHelpers.refreshTable(self.country_dtable, countlyLocation.getLocationData({maxCountries: 10}));
        }
    },
    destroy: function() {
        $("#content-top").html("");
    }
});

app.addAppType("web", WebDashboardView);

app.addAppSetting("app_domain", {
    toDisplay: function(appId, elem) {
        $(elem).text(countlyGlobal.apps[appId].app_domain);
    },
    toInput: function(appId, elem) {
        $(elem).val(countlyGlobal.apps[appId].app_domain);
    },
    toSave: function(appId, args, elem) {
        var domainEvent = $(elem).val();
        args.app_domain = domainEvent;
    },
    toInject: function() {
        var addApp = '<tr class="appmng-domain">' +
            '<td>' +
                '<span data-localize="management-applications.app-domain"></span>' +
            '</td>' +
            '<td>' +
                '<input type="text" value="" class="app-write-settings" data-id="app_domain" placeholder="Enter website domain..." data-localize="placeholder.app-domain-key" id="app-add-app-domain"></span>' +
            '</td>' +
        '</tr>';

        $("#add-new-app table .table-add").before(addApp);

        var editApp = '<tr class="appmng-domain">' +
            '<td>' +
                '<span data-localize="management-applications.app-domain"></span>' +
            '</td>' +
            '<td id="app-edit-domain">' +
                '<div class="read app-read-settings" data-id="app_domain"></div>' +
                '<div class="edit">' +
                    '<input type="text" value="" class="app-write-settings" data-id="app_domain" data-localize="placeholder.app-domain-key" id="app-edit-app-domain"></span>' +
                '</div>' +
            '</td>' +
        '</tr>';

        $(".app-details table .table-edit").before(editApp);
    }
});

app.addPageScript("/manage/apps", function() {
    var appId = countlyCommon.ACTIVE_APP_ID;
    if (!countlyGlobal.apps[appId] || countlyGlobal.apps[appId].type === "web") {
        $(".appmng-domain").show();
    }
    else {
        $(".appmng-domain").hide();
    }
});

app.addAppManagementSwitchCallback(function(appId, type) {
    if (type === "web") {
        $(".appmng-domain").show();
    }
    else {
        $(".appmng-domain").hide();
    }
});

$(document).ready(function() {
    var menu = '<a href="#/analytics/platforms" class="item">' +
		'<div class="logo platforms"></div>' +
		'<div class="text" data-localize="sidebar.analytics.platforms"></div>' +
	'</a>';
    $('#web-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/versions" class="item">' +
		'<div class="logo app-versions"></div>' +
		'<div class="text" data-localize="sidebar.analytics.versions"></div>' +
	'</a>';
    $('#web-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/resolutions" class="item">' +
		'<div class="logo resolutions"></div>' +
		'<div class="text" data-localize="sidebar.analytics.resolutions"></div>' +
	'</a>';
    $('#web-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/devices" class="item">' +
		'<div class="logo devices"></div>' +
		'<div class="text" data-localize="sidebar.analytics.devices"></div>' +
	'</a>';
    $('#web-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/countries" class="item">' +
		'<div class="logo country"></div>' +
		'<div class="text" data-localize="sidebar.analytics.countries"></div>' +
	'</a>';
    $('#web-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/sessions" class="item">' +
		'<div class="logo sessions"></div>' +
		'<div class="text" data-localize="sidebar.analytics.sessions"></div>' +
	'</a>';
    $('#web-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/users" class="item">' +
		'<div class="logo users"></div>' +
		'<div class="text" data-localize="sidebar.analytics.users"></div>' +
	'</a>';
    $('#web-type #analytics-submenu').prepend(menu);

    $("#web-type #engagement-menu").show();

    menu = '<a href="#/analytics/loyalty" class="item">' +
                    '<div class="logo loyalty"></div>' +
                    '<div class="text" data-localize="sidebar.analytics.user-loyalty"></div>' +
                '</a>' +
                '<a href="#/analytics/frequency" class="item">' +
                    '<div class="logo frequency"></div>' +
                    '<div class="text" data-localize="sidebar.analytics.session-frequency"></div>' +
                '</a>' +
                '<a href="#/analytics/durations" class="item">' +
                    '<div class="logo durations"></div>' +
                    '<div class="text" data-localize="sidebar.engagement.durations"></div>' +
                '</a>';
    $('#web-type #engagement-submenu').append(menu);

    app.addAppSwitchCallback(function(appId) {
        if (countlyGlobal.apps[appId].type === "web") {
            //views = page views
            jQuery.i18n.map["drill.lv"] = jQuery.i18n.map["web.drill.lv"];
            jQuery.i18n.map["views.title"] = jQuery.i18n.map["web.views.title"];
            jQuery.i18n.map["views.view"] = jQuery.i18n.map["web.views.view"];
            //crashes = errors
            jQuery.i18n.map["crashes.title"] = jQuery.i18n.map["web.crashes.title"];
            jQuery.i18n.map["crashes.unresolved-crashes"] = jQuery.i18n.map["web.crashes.unresolved-crashes"];
            jQuery.i18n.map["crashes.groupid"] = jQuery.i18n.map["web.crashes.groupid"];
            jQuery.i18n.map["crashes.crashed"] = jQuery.i18n.map["web.crashes.crashed"];
            jQuery.i18n.map["crashes.last-crash"] = jQuery.i18n.map["web.crashes.last-crash"];
            jQuery.i18n.map["crashes.online"] = jQuery.i18n.map["web.crashes.online"];
            jQuery.i18n.map["crashes.muted"] = jQuery.i18n.map["web.crashes.muted"];
            jQuery.i18n.map["crashes.background"] = jQuery.i18n.map["web.crashes.background"];
            jQuery.i18n.map["crashes.back-to-crashes"] = jQuery.i18n.map["web.crashes.back-to-crashes"];
            jQuery.i18n.map["crashes.back-to-crash"] = jQuery.i18n.map["web.crashes.back-to-crash"];
            jQuery.i18n.map["crashes.crashes-by"] = jQuery.i18n.map["web.crashes.crashes-by"];
            jQuery.i18n.map["crashes.unique"] = jQuery.i18n.map["web.crashes.unique"];
            jQuery.i18n.map["crashes.rate"] = jQuery.i18n.map["web.crashes.rate"];
            jQuery.i18n.map["crashes.top-crash"] = jQuery.i18n.map["web.crashes.top-crash"];
            jQuery.i18n.map["crashes.new-crashes"] = jQuery.i18n.map["web.crashes.new-crashes"];
            jQuery.i18n.map["crashes.fatality"] = jQuery.i18n.map["web.crashes.fatality"];
            jQuery.i18n.map["crashes.nonfatal-crashes"] = jQuery.i18n.map["web.crashes.nonfatal-crashes"];
            jQuery.i18n.map["crashes.confirm-delete"] = jQuery.i18n.map["web.crashes.confirm-delete"];
            jQuery.i18n.map["drill.crash"] = jQuery.i18n.map["web.drill.crash"];
            jQuery.i18n.map["drill.crash-segments"] = jQuery.i18n.map["web.drill.crash-segments"];
            jQuery.i18n.map["userdata.crashes"] = jQuery.i18n.map["web.userdata.crashes"];
            //users = visitors
            jQuery.i18n.map["common.total-users"] = jQuery.i18n.map["web.common.total-users"];
            jQuery.i18n.map["common.new-users"] = jQuery.i18n.map["web.common.new-users"];
            jQuery.i18n.map["common.returning-users"] = jQuery.i18n.map["web.common.returning-users"];
            jQuery.i18n.map["common.number-of-users"] = jQuery.i18n.map["web.common.number-of-users"];
            jQuery.i18n.map["common.table.total-users"] = jQuery.i18n.map["web.common.table.total-users"];
            jQuery.i18n.map["common.table.new-users"] = jQuery.i18n.map["web.common.table.new-users"];
            jQuery.i18n.map["common.table.returning-users"] = jQuery.i18n.map["web.common.table.returning-users"];
            jQuery.i18n.map["common.bar.top-users"] = jQuery.i18n.map["web.common.bar.top-users"];
            jQuery.i18n.map["sidebar.analytics.users"] = jQuery.i18n.map["web.sidebar.analytics.users"];
            jQuery.i18n.map["sidebar.analytics.user-loyalty"] = jQuery.i18n.map["web.sidebar.analytics.user-loyalty"];
            jQuery.i18n.map["users.title"] = jQuery.i18n.map["web.users.title"];
            jQuery.i18n.map["crashes.users"] = jQuery.i18n.map["web.crashes.users"];
            jQuery.i18n.map["crashes.affected-users"] = jQuery.i18n.map["web.crashes.affected-users"];
            jQuery.i18n.map["crashes.public-users"] = jQuery.i18n.map["web.crashes.public-users"];
            jQuery.i18n.map["drill.users"] = jQuery.i18n.map["web.drill.users"];
            jQuery.i18n.map["drill.times-users"] = jQuery.i18n.map["web.drill.times-users"];
            jQuery.i18n.map["drill.sum-users"] = jQuery.i18n.map["web.drill.sum-users"];
            jQuery.i18n.map["funnels.total-users"] = jQuery.i18n.map["web.funnels.total-users"];
            jQuery.i18n.map["funnels.users"] = jQuery.i18n.map["web.funnels.users"];
            jQuery.i18n.map["common.online-users"] = jQuery.i18n.map["web.common.online-users"];
            jQuery.i18n.map["live.new-users"] = jQuery.i18n.map["web.live.new-users"];
            jQuery.i18n.map["populator.amount-users"] = jQuery.i18n.map["web.populator.amount-users"];
            jQuery.i18n.map["sidebar.engagement.retention"] = jQuery.i18n.map["web.sidebar.engagement.retention"];
            jQuery.i18n.map["retention.users-first-session"] = jQuery.i18n.map["web.retention.users-first-session"];
            jQuery.i18n.map["userdata.title"] = jQuery.i18n.map["web.userdata.title"];
            jQuery.i18n.map["userdata.users"] = jQuery.i18n.map["web.userdata.users"];
            jQuery.i18n.map["userdata.user"] = jQuery.i18n.map["web.userdata.user"];
            jQuery.i18n.map["userdata.back-to-list"] = jQuery.i18n.map["web.userdata.back-to-list"];
            jQuery.i18n.map["userdata.no-users"] = jQuery.i18n.map["web.userdata.no-users"];
            jQuery.i18n.map["attribution.per-user"] = jQuery.i18n.map["web.attribution.per-user"];
            jQuery.i18n.map["attribution.user-conversion"] = jQuery.i18n.map["web.attribution.user-conversion"];
            jQuery.i18n.map["attribution.organic"] = jQuery.i18n.map["web.attribution.organic"];
            jQuery.i18n.map["reports.total_users"] = jQuery.i18n.map["web.reports.total_users"];
            jQuery.i18n.map["reports.new_users"] = jQuery.i18n.map["web.reports.new_users"];
            jQuery.i18n.map["reports.paying_users"] = jQuery.i18n.map["web.reports.paying_users"];
            jQuery.i18n.map["reports.messaging_users"] = jQuery.i18n.map["web.reports.messaging_users"];
            jQuery.i18n.map["reports.returning_users"] = jQuery.i18n.map["web.reports.returning_users"];
            jQuery.i18n.map["common.per-user"] = jQuery.i18n.map["web.common.per-user"];
            jQuery.i18n.map["common.per-paying-user"] = jQuery.i18n.map["web.common.per-paying-user"];
            jQuery.i18n.map["common.users"] = jQuery.i18n.map["web.common.users"];
            jQuery.i18n.map["attribution.installs"] = jQuery.i18n.map["web.attribution.installs"];
            jQuery.i18n.map["attribution.cost-install"] = jQuery.i18n.map["web.attribution.cost-install"];
            jQuery.i18n.map["sources.title"] = jQuery.i18n.map["web.sources.title"];
            jQuery.i18n.map["sources.source"] = jQuery.i18n.map["web.sources.source"];

        }
    });
});;;/*global $, jQuery, CountlyHelpers, countlyLocation, _, DesktopDashboardView, countlyGlobal, countlyView, Handlebars, countlySession, countlyDeviceDetails, countlyTotalUsers, countlyLanguage, countlySession, countlyCommon, app */
window.DesktopDashboardView = countlyView.extend({
    selectedView: "#draw-total-sessions",
    selectedMap: "#map-list-sessions",
    initialize: function() {
        this.curMap = "map-list-sessions";
        this.template = Handlebars.compile($("#dashboard-template").html());
    },
    beforeRender: function() {
        this.maps = {
            "map-list-sessions": {id: 'total', label: jQuery.i18n.map["sidebar.analytics.sessions"], type: 'number', metric: "t"},
            "map-list-users": {id: 'total', label: jQuery.i18n.map["sidebar.analytics.users"], type: 'number', metric: "u"},
            "map-list-new": {id: 'total', label: jQuery.i18n.map["common.table.new-users"], type: 'number', metric: "n"}
        };
        var defs = [countlySession.initialize(), countlyDeviceDetails.initialize(), countlyTotalUsers.initialize("users"), countlyTotalUsers.initialize("countries")];
        if (typeof window.countlyLanguage !== "undefined") {
            defs.push(countlyLanguage.initialize());
        }

        return $.when.apply($, defs).then(function() {});
    },
    afterRender: function() {
        if (countlyGlobal.config.use_google) {
            var self = this;
            countlyLocation.drawGeoChart({height: 330, metric: self.maps[self.curMap]});
        }
    },
    pageScript: function() {
        $("#total-user-estimate-ind").on("click", function() {
            CountlyHelpers.alert($("#total-user-estimate-exp").html(), "black");
        });

        var self = this;
        $("#big-numbers-container").find(".big-numbers .inner").click(function() {
            $("#big-numbers-container").find(".big-numbers").removeClass("active");
            $(this).parent(".big-numbers").addClass("active");

            var elID = $(this).find('.select').attr("id");

            if (self.selectedView === "#" + elID) {
                return true;
            }

            self.selectedView = "#" + elID;
            self.drawGraph();
        });

        if (countlyGlobal.config.use_google) {
            this.countryList();
            $(".map-list").find(".data-type-selector-group .selector").click(function() {
                $(".map-list").find(".data-type-selector-group .selector").removeClass("active");
                $(this).addClass("active");
                self.curMap = $(this).attr("id");
                self.selectedMap = "#" + self.curMap;
                countlyLocation.refreshGeoChart(self.maps[self.curMap]);
                self.countryList();
            });
        }

        app.localize();
    },
    drawGraph: function() {
        var sessionDP = {};

        switch (this.selectedView) {
        case "#draw-total-users":
            sessionDP = countlySession.getUserDPActive();
            break;
        case "#draw-new-users":
            sessionDP = countlySession.getUserDPNew();
            break;
        case "#draw-total-sessions":
            sessionDP = countlySession.getSessionDPTotal();
            break;
        case "#draw-time-spent":
            sessionDP = countlySession.getDurationDPAvg();
            break;
        case "#draw-total-time-spent":
            sessionDP = countlySession.getDurationDP();
            break;
        case "#draw-avg-events-served":
            sessionDP = countlySession.getEventsDPAvg();
            break;
        }

        _.defer(function() {
            countlyCommon.drawTimeGraph(sessionDP.chartDP, "#dashboard-graph");
        });
    },
    renderCommon: function(isRefresh, isDateChange) {
        var sessionData = countlySession.getSessionData(),
            locationData = countlyLocation.getLocationData({maxCountries: 10});

        this.locationData = locationData;
        sessionData["page-title"] = countlyCommon.getDateRange();
        sessionData.usage = [
            {
                "title": jQuery.i18n.map["common.total-sessions"],
                "material-icon": "timeline",
                "data": sessionData.usage['total-sessions'],
                "id": "draw-total-sessions",
                "help": "dashboard.total-sessions"
            },
            {
                "title": jQuery.i18n.map["common.total-users"],
                "ion-icon": "ion-person-stalker",
                "data": sessionData.usage['total-users'],
                "id": "draw-total-users",
                "help": "dashboard.total-users"
            },
            {
                "title": jQuery.i18n.map["common.new-users"],
                "ion-icon": "ion-person-add",
                "data": sessionData.usage['new-users'],
                "id": "draw-new-users",
                "help": "dashboard.new-users"
            },
            {
                "title": jQuery.i18n.map["dashboard.time-spent"],
                "ion-icon": "ion-android-time",
                "data": sessionData.usage['total-duration'],
                "id": "draw-total-time-spent",
                "help": "dashboard.total-time-spent"
            },
            {
                "title": jQuery.i18n.map["dashboard.avg-time-spent"],
                "material-icon": "timelapse",
                "data": sessionData.usage['avg-duration-per-session'],
                "id": "draw-time-spent",
                "help": "dashboard.avg-time-spent2"
            },
            {
                "title": jQuery.i18n.map["dashboard.avg-reqs-received"],
                "material-icon": "compare_arrows",
                "data": sessionData.usage['avg-events'],
                "id": "draw-avg-events-served",
                "help": "dashboard.avg-reqs-received"
            }
        ];
        sessionData.bars = [
            {
                "title": jQuery.i18n.map["common.bar.top-platform"],
                "data": countlyDeviceDetails.getBarsWPercentageOfTotal("os"),
                "help": "dashboard.top-platforms"
            },
            {
                "title": jQuery.i18n.map["common.bar.top-resolution"],
                "data": countlyDeviceDetails.getBarsWPercentageOfTotal("resolutions"),
                "help": "dashboard.top-resolutions"
            },
            {
                "title": jQuery.i18n.map["common.bar.top-users"],
                "data": countlySession.getTopUserBars(),
                "help": "dashboard.top-users"
            },
            {
                "title": jQuery.i18n.map["common.bar.top-languages"],
                "data": (typeof countlyLanguage !== "undefined") ? countlyLanguage.getBarsWPercentageOfTotal() : [],
                "help": "dashboard.top-languages"
            }
        ];

        this.templateData = sessionData;

        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));

            $('.data-type-selector-group').find('div').removeClass('active');
            $(this.selectedMap).addClass('active');

            if (!countlyGlobal.config.use_google) {
                $(".map-list.geo-switch").hide();
            }
            $(this.selectedView).parents(".big-numbers").addClass("active");
            this.pageScript();

            if (!isDateChange) {
                this.drawGraph();
            }
        }
        if (!countlyGlobal.config.use_google) {
            this.countryTable(isRefresh);
        }
    },
    restart: function() {
        this.refresh(true);
    },
    refresh: function(isFromIdle) {

        var self = this;
        $.when(this.beforeRender()).then(function() {
            if (app.activeView !== self) {
                return false;
            }
            self.renderCommon(true);

            var newPage = $("<div>" + self.template(self.templateData) + "</div>");
            $(".dashboard-summary").replaceWith(newPage.find(".dashboard-summary"));
            $(".widget-header .title").replaceWith(newPage.find(".widget-header .title"));

            $("#big-numbers-container").find(".big-numbers").each(function(i, el) {
                var newEl = $(newPage.find("#big-numbers-container .big-numbers")[i]);

                if (isFromIdle) {
                    $(el).find(".number").replaceWith(newEl.find(".number"));
                }
                else {
                    var currNumberEl = $(el).find(".number .value"),
                        currNumberVal = parseFloat(currNumberEl.text()) || 0,
                        currNumPost = currNumberEl.text().replace(currNumberVal, ''),
                        targetValue = parseFloat(newEl.find(".number .value").text()),
                        targetPost = newEl.find(".number .value").text().replace(targetValue, '');

                    if (targetValue !== currNumberVal) {
                        if (targetValue < currNumberVal || (targetPost.length && targetPost !== currNumPost)) {
                            $(el).find(".number").replaceWith(newEl.find(".number"));
                        }
                        else {
                            jQuery({someValue: currNumberVal, currEl: currNumberEl}).animate({someValue: targetValue}, {
                                duration: 2000,
                                easing: 'easeInOutQuint',
                                step: function() {
                                    if ((targetValue + "").indexOf(".") === -1) {
                                        this.currEl.text(Math.round(this.someValue) + targetPost);
                                    }
                                    else {
                                        this.currEl.text(parseFloat((this.someValue).toFixed(1)) + targetPost);
                                    }
                                }
                            });
                        }
                    }
                }

                $(el).find(".trend").replaceWith(newEl.find(".trend"));
                $(el).find(".spark").replaceWith(newEl.find(".spark"));
            });

            self.drawGraph();

            $(".usparkline").peity("bar", { width: "100%", height: "30", colour: "#83C986", strokeColour: "#83C986", strokeWidth: 2 });
            $(".dsparkline").peity("bar", { width: "100%", height: "30", colour: "#DB6E6E", strokeColour: "#DB6E6E", strokeWidth: 2 });

            if (newPage.find("#map-list-right").length === 0) {
                $("#map-list-right").remove();
            }

            if ($("#map-list-right").length) {
                $("#map-list-right").replaceWith(newPage.find("#map-list-right"));
            }
            else {
                $(".widget.map-list").prepend(newPage.find("#map-list-right"));
            }

            self.pageScript();
        });
    },
    countryList: function() {
        var self = this;
        $("#map-list-right").empty();
        var country;
        for (var i = 0; i < self.locationData.length; i++) {
            country = self.locationData[i];
            $("#map-list-right").append('<div class="map-list-item">' +
                '<div class="flag" style="background-image:url(\'' + countlyGlobal.cdn + 'images/flags/' + country.code + '.png\');"></div>' +
                '<div class="country-name">' + country.country + '</div>' +
                '<div class="total">' + country[self.maps[self.curMap].metric] + '</div>' +
            '</div>');
        }

        if (self.locationData.length === 0) {
            $("#geo-chart-outer").addClass("empty");
        }
        else {
            $("#geo-chart-outer").removeClass("empty");
        }
    },
    countryTable: function(refresh) {
        var self = this;
        if (!refresh) {
            $(".map-list").after('<table id="countries-alternative" class="d-table help-zone-vb" cellpadding="0" cellspacing="0"></table>');
            this.country_dtable = $('#countries-alternative').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": self.locationData,
                "iDisplayLength": 10,
                "aoColumns": [
                    { "mData": "country_flag", "sType": "string", "sTitle": jQuery.i18n.map["countries.table.country"]},
                    { "mData": "t", "sType": "numeric", "sTitle": jQuery.i18n.map["common.table.total-sessions"]},
                    { "mData": "u", "sType": "numeric", "sTitle": jQuery.i18n.map["common.table.total-users"]},
                    { "mData": "n", "sType": "numeric", "sTitle": jQuery.i18n.map["common.table.new-users"]}
                ]
            }));
            this.country_dtable.stickyTableHeaders();
            this.country_dtable.fnSort([ [1, 'desc'] ]);
            $("#countries-alternative_wrapper .dataTable-top .search-table-data").hide();
            $("#countries-alternative_wrapper .dataTable-top .save-table-data").hide();
            $("#countries-alternative_wrapper .dataTable-top .dataTables_paginate").hide();
            $("#countries-alternative_wrapper .dataTable-top .DTTT_container").hide();
            $("#countries-alternative_wrapper .dataTable-top").append("<div style='font:13px Ubuntu,Helvetica,sans-serif; color:#636363; margin-right:10px; padding: 10px; float: right;'><a href='#/analytics/countries'>" + jQuery.i18n.map["common.go-to-countries"] + "&nbsp;&nbsp;&nbsp;<i class='fa fa-chevron-right' aria-hidden='true'></i></a></div>");
            $("#countries-alternative_wrapper .dataTable-top").append("<div style='font:15px Ubuntu,Helvetica,sans-serif; color:#636363; margin-left:10px; margin-top: 8px; text-transform: uppercase;'>" + jQuery.i18n.map["sidebar.analytics.countries"] + "</div>");
        }
        else {
            CountlyHelpers.refreshTable(self.country_dtable, countlyLocation.getLocationData({maxCountries: 10}));
        }
    },
    destroy: function() {
        $("#content-top").html("");
    }
});

app.addAppType("desktop", DesktopDashboardView);

$(document).ready(function() {
    var menu = '<a href="#/analytics/platforms" class="item">' +
		'<div class="logo platforms"></div>' +
		'<div class="text" data-localize="sidebar.analytics.platforms"></div>' +
	'</a>';
    $('#desktop-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/versions" class="item">' +
		'<div class="logo app-versions"></div>' +
		'<div class="text" data-localize="sidebar.analytics.app-versions"></div>' +
	'</a>';
    $('#desktop-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/resolutions" class="item">' +
		'<div class="logo resolutions"></div>' +
		'<div class="text" data-localize="sidebar.analytics.resolutions"></div>' +
	'</a>';
    $('#desktop-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/countries" class="item">' +
		'<div class="logo country"></div>' +
		'<div class="text" data-localize="sidebar.analytics.countries"></div>' +
	'</a>';
    $('#desktop-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/sessions" class="item">' +
		'<div class="logo sessions"></div>' +
		'<div class="text" data-localize="sidebar.analytics.sessions"></div>' +
	'</a>';
    $('#desktop-type #analytics-submenu').prepend(menu);

    menu = '<a href="#/analytics/users" class="item">' +
		'<div class="logo users"></div>' +
		'<div class="text" data-localize="sidebar.analytics.users"></div>' +
	'</a>';
    $('#desktop-type #analytics-submenu').prepend(menu);

    $("#desktop-type #engagement-menu").show();

    menu = '<a href="#/analytics/loyalty" class="item">' +
                    '<div class="logo loyalty"></div>' +
                    '<div class="text" data-localize="sidebar.analytics.user-loyalty"></div>' +
                '</a>' +
                '<a href="#/analytics/frequency" class="item">' +
                    '<div class="logo frequency"></div>' +
                    '<div class="text" data-localize="sidebar.analytics.session-frequency"></div>' +
                '</a>' +
                '<a href="#/analytics/durations" class="item">' +
                    '<div class="logo durations"></div>' +
                    '<div class="text" data-localize="sidebar.engagement.durations"></div>' +
                '</a>';
    $('#desktop-type #engagement-submenu').append(menu);


});;/*global countlyCommon,countlyGlobal,jQuery */
(function(countlyPlugins, $) {

    //Private Properties
    var _pluginsData = {};
    var _configsData = {};
    var _userConfigsData = {};
    var _themeList = [];

    //Public Methods
    countlyPlugins.initialize = function() {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o/plugins",
            data: {
                api_key: countlyGlobal.member.api_key
            },
            success: function(json) {
                _pluginsData = json;
            }
        });
    };

    countlyPlugins.toggle = function(plugins, callback) {
        $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/i/plugins",
            data: {
                plugin: JSON.stringify(plugins),
                api_key: countlyGlobal.member.api_key
            },
            success: function(json) {
                if (callback) {
                    callback(json);
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                var ret = textStatus + " ";
                ret += xhr.status + ": " + $(xhr.responseText).text();
                if (errorThrown) {
                    ret += errorThrown + "\n";
                }
                if (callback) {
                    callback(ret);
                }
            }
        });
    };

    countlyPlugins.initializeConfigs = function() {
        return $.when(
            $.ajax({
                type: "GET",
                url: countlyCommon.API_URL + "/o/themes",
                data: {
                    api_key: countlyGlobal.member.api_key
                },
                success: function(json) {
                    _themeList = json;
                }
            }),
            $.ajax({
                type: "GET",
                url: countlyCommon.API_URL + "/o/configs",
                data: {
                    api_key: countlyGlobal.member.api_key
                },
                success: function(json) {
                    _configsData = json;
                }
            })
        ).then(function() {
            return true;
        });
    };

    countlyPlugins.updateConfigs = function(configs, callback) {
        $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/i/configs",
            data: {
                configs: JSON.stringify(configs),
                api_key: countlyGlobal.member.api_key
            },
            success: function(json) {
                _configsData = json;
                if (callback) {
                    callback(null, json);
                }
            },
            error: function(json) {
                if (callback) {
                    callback(true, json);
                }
            }
        });
    };

    countlyPlugins.initializeUserConfigs = function() {
        return $.when(
            $.ajax({
                type: "GET",
                url: countlyCommon.API_URL + "/o/themes",
                data: {
                    api_key: countlyGlobal.member.api_key
                },
                success: function(json) {
                    _themeList = json;
                }
            }),
            $.ajax({
                type: "GET",
                url: countlyCommon.API_URL + "/o/userconfigs",
                data: {
                    api_key: countlyGlobal.member.api_key
                },
                success: function(json) {
                    _userConfigsData = json;
                }
            })
        ).then(function() {
            return true;
        });
    };

    countlyPlugins.updateUserConfigs = function(configs, callback) {
        $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/i/userconfigs",
            data: {
                configs: JSON.stringify(configs),
                api_key: countlyGlobal.member.api_key
            },
            success: function(json) {
                _userConfigsData = json;
                if (callback) {
                    callback(null, json);
                }
            },
            error: function(json) {
                if (callback) {
                    callback(true, json);
                }
            }
        });
    };

    countlyPlugins.getData = function() {
        return _pluginsData;
    };

    countlyPlugins.getConfigsData = function() {
        return _configsData;
    };

    countlyPlugins.getUserConfigsData = function() {
        return _userConfigsData;
    };

    countlyPlugins.getThemeList = function() {
        return _themeList;
    };

}(window.countlyPlugins = window.countlyPlugins || {}, jQuery));;/*global countlyView,_,$,store,countlyPlugins,Handlebars,jQuery,countlyGlobal,app,countlyCommon,CountlyHelpers,countlyManagementView,ConfigurationsView,PluginsView */
window.PluginsView = countlyView.extend({
    initialize: function() {
        this.filter = (store.get("countly_pluginsfilter")) ? store.get("countly_pluginsfilter") : "plugins-all";
    },
    beforeRender: function() {
        if (this.template) {
            return $.when(countlyPlugins.initialize()).then(function() { });
        }
        else {
            var self = this;
            return $.when($.get(countlyGlobal.path + '/plugins/templates/plugins.html', function(src) {
                self.template = Handlebars.compile(src);
            }), countlyPlugins.initialize()).then(function() { });
        }
    },
    renderCommon: function(isRefresh) {

        var pluginsData = countlyPlugins.getData();
        this.templateData = {
            "page-title": jQuery.i18n.map["plugins.title"]
        };

        var self = this;

        if (!isRefresh) {

            $(this.el).html(this.template(this.templateData));
            $("#" + this.filter).addClass("selected").addClass("active");

            $.fn.dataTableExt.afnFiltering.push(function(oSettings, aData) {
                if (!$(oSettings.nTable).hasClass("plugins-filter")) {
                    return true;
                }

                if (self.filter === "plugins-enabled") {
                    return aData[1];
                }

                if (self.filter === "plugins-disabled") {
                    return !aData[1];
                }

                return true;
            });

            this.dtable = $('#plugins-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": pluginsData,
                "bPaginate": false,
                "aoColumns": [
                    {
                        "mData": function(row) {
                            if (row.enabled) {
                                return jQuery.i18n.map[row.code + ".plugin-title"] || jQuery.i18n.map[row.code + ".title"] || row.title;
                            }
                            else {
                                return row.title;
                            }
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["plugins.name"]
                    },
                    {
                        "mData": function(row, type) {
                            if (type === "display") {
                                var disabled = (row.prepackaged) ? 'disabled' : '';
                                var input = '<div class="on-off-switch ' + disabled + '">';

                                if (row.enabled) {
                                    input += '<input type="checkbox" class="on-off-switch-checkbox" id="plugin-' + row.code + '" checked ' + disabled + '>';
                                }
                                else {
                                    input += '<input type="checkbox" class="on-off-switch-checkbox" id="plugin-' + row.code + '" ' + disabled + '>';
                                }

                                input += '<label class="on-off-switch-label" for="plugin-' + row.code + '"></label>';
                                input += '<span class="text">' + jQuery.i18n.map["plugins.enable"] + '</span>';

                                return input;
                            }
                            else {
                                return row.enabled;
                            }
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["plugins.state"],
                        "sClass": "shrink"
                    },
                    {
                        "mData": function(row) {
                            if (row.enabled) {
                                return jQuery.i18n.map[row.code + ".plugin-description"] || jQuery.i18n.map[row.code + ".description"] || row.description;
                            }
                            else {
                                return row.description;
                            }
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["plugins.description"],
                        "bSortable": false,
                        "sClass": "light"
                    },
                    {
                        "mData": function(row) {
                            return row.version;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["plugins.version"],
                        "sClass": "center",
                        "bSortable": false
                    },
                    {
                        "mData": function(row) {
                            if (row.homepage !== "") {
                                return '<a class="plugin-link" href="' + row.homepage + '" target="_blank"><i class="ion-android-open"></i></a>';
                            }
                            else {
                                return "";
                            }
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["plugins.homepage"],
                        "sClass": "shrink center",
                        "bSortable": false
                    }
                ]
            }));
            this.dtable.stickyTableHeaders();
            this.dtable.fnSort([[0, 'asc']]);

            /*
             Make header sticky if scroll is more than the height of header
             This is done in order to make Apply Changes button visible
             */
            var navigationTop = $("#sticky-plugin-header").offset().top;
            var tableHeaderTop = $("#plugins-table").find("thead").offset().top;

            $(window).on("scroll", function() {
                var topBarHeight = $("#top-bar").outerHeight();
                var $fixedHeader = $("#sticky-plugin-header");

                if ($(this).scrollTop() > navigationTop - topBarHeight) {
                    var width = $("#content-container").width();
                    $fixedHeader.addClass("fixed");
                    $fixedHeader.css({ width: width });

                    if (topBarHeight) {
                        $fixedHeader.css({ top: topBarHeight });
                    }
                    else {
                        $fixedHeader.css({ top: 0 });
                    }
                }
                else {
                    $fixedHeader.removeClass("fixed");
                    $fixedHeader.css({ width: "" });
                }

                if (($(this).scrollTop() + $fixedHeader.outerHeight()) > tableHeaderTop) {
                    $(".sticky-header").removeClass("hide");
                }
                else {
                    $(".sticky-header").addClass("hide");
                }

            });

            $(window).on("resize", function() {
                var $fixedHeader = $("#sticky-plugin-header");

                if ($fixedHeader.hasClass("fixed")) {
                    var width = $("#content-container").width();
                    $fixedHeader.css({ width: width });
                }
            });
        }
    },
    refresh: function(Refreshme) {
        if (Refreshme) {
            var self = this;
            return $.when(this.beforeRender()).then(function() {
                if (app.activeView !== self) {
                    return false;
                }
                CountlyHelpers.refreshTable(self.dtable, countlyPlugins.getData());
                app.localize();
            });
        }
    },
    togglePlugin: function(plugins) {
        var overlay = $("#overlay").clone();
        $("body").append(overlay);
        overlay.show();
        var loader = $(this.el).find("#loader");
        loader.show();
        countlyPlugins.toggle(plugins, function(res) {
            var msg = { clearAll: true };
            if (res === "Success" || res === "Errors") {
                var seconds = 10;
                if (res === "Success") {
                    msg.title = jQuery.i18n.map["plugins.success"];
                    msg.message = jQuery.i18n.map["plugins.restart"] + " " + seconds + " " + jQuery.i18n.map["plugins.seconds"];
                    msg.info = jQuery.i18n.map["plugins.finish"];
                    msg.delay = seconds * 1000;
                }
                else if (res === "Errors") {
                    msg.title = jQuery.i18n.map["plugins.errors"];
                    msg.message = jQuery.i18n.map["plugins.errors-msg"];
                    msg.info = jQuery.i18n.map["plugins.restart"] + " " + seconds + " " + jQuery.i18n.map["plugins.seconds"];
                    msg.sticky = true;
                    msg.type = "error";
                }
                setTimeout(function() {
                    window.location.reload(true);
                }, seconds * 1000);
            }
            else {
                overlay.hide();
                loader.hide();
                msg.title = jQuery.i18n.map["plugins.error"];
                msg.message = res;
                msg.info = jQuery.i18n.map["plugins.retry"];
                msg.sticky = true;
                msg.type = "error";
            }
            CountlyHelpers.notify(msg);
        });
    },
    filterPlugins: function(filter) {
        this.filter = filter;
        store.set("countly_pluginsfilter", filter);
        $("#" + this.filter).addClass("selected").addClass("active");
        this.dtable.fnDraw();
    }
});

window.ConfigurationsView = countlyView.extend({
    userConfig: false,
    initialize: function() {
        this.predefinedInputs = {};
        this.predefinedLabels = {
        };
        this.configsData = {};
        this.cache = {};
        this.changes = {};

        //register some common system config inputs
        this.registerInput("apps.category", function() {
            return null;
            // var categories = app.manageAppsView.getAppCategories();
            // var select = '<div class="cly-select" id="apps.category">' +
            //     '<div class="select-inner">' +
            //     '<div class="text-container">';
            // if (!categories[value]) {
            //     select += '<div class="text"></div>';
            // }
            // else {
            //     select += '<div class="text">' + categories[value] + '</div>';
            // }
            // select += '</div>' +
            //     '<div class="right combo"></div>' +
            //     '</div>' +
            //     '<div class="select-items square">' +
            //     '<div>';

            // for (var i in categories) {
            //     select += '<div data-value="' + i + '" class="segmentation-option item">' + categories[i] + '</div>';
            // }

            // select += '</div>' +
            //     '</div>' +
            //     '</div>';
            // return select;
        });

        this.registerInput("apps.country", function(value) {
            var zones = app.manageAppsView.getTimeZones();
            var select = '<div class="cly-select" id="apps.country">' +
                '<div class="select-inner">' +
                '<div class="text-container">';
            if (!zones[value]) {
                select += '<div class="text"></div>';
            }
            else {
                select += '<div class="text"><div class="flag" style="background-image:url(images/flags/' + value.toLowerCase() + '.png)"></div>' + zones[value].n + '</div>';
            }

            select += '</div>' +
                '<div class="right combo"></div>' +
                '</div>' +
                '<div class="select-items square">' +
                '<div>';

            for (var i in zones) {
                select += '<div data-value="' + i + '" class="segmentation-option item"><div class="flag" style="background-image:url(images/flags/' + i.toLowerCase() + '.png)"></div>' + zones[i].n + '</div>';
            }

            select += '</div>' +
                '</div>' +
                '</div>';
            return select;
        });

        this.registerInput("frontend.theme", function(value) {
            var themes = countlyPlugins.getThemeList();
            var select = '<div class="cly-select" id="frontend.theme">' +
                '<div class="select-inner">' +
                '<div class="text-container">';
            if (value && value.length) {
                select += '<div class="text">' + value + '</div>';
            }
            else {
                select += '<div class="text" data-localize="configs.no-theme">' + jQuery.i18n.map["configs.no-theme"] + '</div>';
            }

            select += '</div>' +
                '<div class="right combo"></div>' +
                '</div>' +
                '<div class="select-items square">' +
                '<div>';

            for (var i = 0; i < themes.length; i++) {
                if (themes[i] === "") {
                    select += '<div data-value="" class="segmentation-option item" data-localize="configs.no-theme">' + jQuery.i18n.map["configs.no-theme"] + '</div>';
                }
                else {
                    select += '<div data-value="' + themes[i] + '" class="segmentation-option item">' + themes[i] + '</div>';
                }
            }

            select += '</div>' +
                '</div>' +
                '</div>';
            return select;
        });

        //register some common system config inputs
        this.registerInput("logs.default", function(value) {
            var categories = ['debug', 'info', 'warn', 'error'];
            var select = '<div class="cly-select" id="logs.default">' +
                '<div class="select-inner">' +
                '<div class="text-container">';
            if (value && value.length) {
                select += '<div class="text" data-localize="configs.logs.' + value + '">' + jQuery.i18n.map["configs.logs." + value] + '</div>';
            }
            else {
                select += '<div class="text" data-localzie="configs.logs.warn">' + jQuery.i18n.map["configs.logs.warn"] + '</div>';
            }
            select += '</div>' +
                '<div class="right combo"></div>' +
                '</div>' +
                '<div class="select-items square">' +
                '<div>';

            for (var i = 0; i < categories.length; i++) {
                select += '<div data-value="' + categories[i] + '" class="segmentation-option item" data-localize="configs.logs.' + categories[i] + '">' + jQuery.i18n.map["configs.logs." + categories[i]] + '</div>';
            }

            select += '</div>' +
                '</div>' +
                '</div>';
            return select;
        });

        this.registerInput("security.dashboard_additional_headers", function(value) {
            return '<textarea rows="5" style="width:100%" id="security.dashboard_additional_headers">' + (value || "") + '</textarea>';
        });

        this.registerInput("security.api_additional_headers", function(value) {
            return '<textarea rows="5" style="width:100%" id="security.api_additional_headers">' + (value || "") + '</textarea>';
        });

        this.registerInput("apps.timezone", function() {
            return null;
        });
    },
    beforeRender: function() {
        if (this.template) {
            if (this.userConfig) {
                return $.when(countlyPlugins.initializeUserConfigs()).then(function() { });
            }
            else {
                return $.when(countlyPlugins.initializeConfigs()).then(function() { });
            }
        }
        else {
            var self = this;
            if (this.userConfig) {
                return $.when($.get(countlyGlobal.path + '/plugins/templates/configurations.html', function(src) {
                    self.template = Handlebars.compile(src);
                }), countlyPlugins.initializeUserConfigs()).then(function() { });
            }
            else {
                return $.when($.get(countlyGlobal.path + '/plugins/templates/configurations.html', function(src) {
                    self.template = Handlebars.compile(src);
                }), countlyPlugins.initializeConfigs()).then(function() { });
            }
        }
    },
    renderCommon: function(isRefresh) {
        if (this.reset) {
            $("#new-install-overlay").show();
        }
        if (this.userConfig) {
            this.configsData = countlyPlugins.getUserConfigsData();
        }
        else {
            this.configsData = countlyPlugins.getConfigsData();
        }


        this.searchKeys = this.getSearchKeys(this.configsData);
        this.navTitles = this.setNavTitles(this.configsData);
        this.selectedNav = this.navTitles.coreTitles[0];

        var configsHTML;
        var self = this;
        var title = jQuery.i18n.map["plugins.configs"];

        if (this.userConfig) {
            title = jQuery.i18n.map["plugins.user-configs"];
        }
        if (this.namespace && this.configsData[this.namespace]) {
            this.selectedNav = this.navTitles.coreTitles.find(function(x) {
                return x.key === self.namespace;
            }) || this.navTitles.pluginTitles.find(function(x) {
                return x.key === self.namespace;
            });
            configsHTML = this.generateConfigsTable(this.configsData);
        }
        else {
            if (this.selectedNav && !this.userConfig) {
                app.navigate("/manage/configurations/" + this.selectedNav.key);
            }
            configsHTML = this.generateConfigsTable(this.configsData);
        }

        this.templateData = {
            "page-title": title,
            "configs": configsHTML,
            "namespace": this.namespace,
            "user": this.userConfig,
            "reset": this.reset,
            "navTitles": this.navTitles,
            "selectedNav": this.selectedNav
        };

        if (this.success) {
            CountlyHelpers.notify({
                title: jQuery.i18n.map["configs.changed"],
                message: jQuery.i18n.map["configs.saved"]
            });
            this.success = false;
            if (this.userConfig) {
                app.noHistory("#/manage/user-settings");
                self.configsData = JSON.parse(JSON.stringify(self.cache));
                $("#configs-apply-changes").hide();
                self.changes = {};
            }
            else {
                app.noHistory("#/manage/configurations/" + this.selectedNav.key);
            }
        }
        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));


            if (this.userConfig) {
                $('#configs-title-bar').hide();
                $('#config-title').html(jQuery.i18n.map['plugins.user-configs']);
                $('#config-table-container').addClass('user-settings-table');
            }
            else {
                $('#configs-table-widget').css('marginLeft', '200px');
                $('#nav-item-' + this.selectedNav.key).addClass('selected');
            }


            this.changes = {};
            this.cache = JSON.parse(JSON.stringify(this.configsData));

            $(".configs #username").val(countlyGlobal.member.username);
            $(".configs #api-key").val(countlyGlobal.member.api_key);

            $("#configs-back").click(function() {
                app.back('/manage/configurations');
            });

            $('.on-off-switch input').on("change", function() {
                var isChecked = $(this).is(":checked"),
                    attrID = $(this).attr("id");

                self.updateConfig(attrID, isChecked);
            });

            $(".configs input").keyup(function() {
                var id = $(this).attr("id");
                var value = $(this).val();
                if ($(this).attr("type") === "number") {
                    value = parseFloat(value);
                }
                self.updateConfig(id, value);
            });

            $(".configs textarea").keyup(function() {
                var id = $(this).attr("id");
                var value = $(this).val();
                self.updateConfig(id, value);
            });

            $(".configs .segmentation-option").on("click", function() {
                var id = $(this).closest(".cly-select").attr("id");
                var value = $(this).data("value");
                self.updateConfig(id, value);
            });

            $('.configs .user-config-select').on('cly-multi-select-change', function() {
                var id = $(this).closest('.cly-multi-select').attr('id');
                var _user = self.configsData[id.split('.')[0]][id.split('.')[1]];

                var value = $(this).data("value");
                var newUserValues = {};
                for (var i in _user) {
                    newUserValues[i] = value.indexOf(i) >= 0;
                }

                self.updateConfig(id, newUserValues);
            });

            $(".configs #username").off("keyup").on("keyup", _.throttle(function() {
                if (!($(this).val().length) || $("#menu-username").text() === $(this).val()) {
                    $(".username-check").remove();
                    return false;
                }

                if ($(this).val() === countlyGlobal.member.username) {
                    $(".username-check").remove();
                    return false;
                }

                $(this).next(".required").remove();

                var existSpan = $("<span class='username-check red-text' data-localize='management-users.username.exists'>").html(jQuery.i18n.map["management-users.username.exists"]),
                    notExistSpan = $("<span class='username-check green-text'>").html("&#10004;"),
                    data = {};

                data.username = $(this).val();
                data._csrf = countlyGlobal.csrf_token;

                var eventContext = $(this);
                $.ajax({
                    type: "POST",
                    url: countlyGlobal.path + "/users/check/username",
                    data: data,
                    success: function(result) {
                        $(".username-check").remove();
                        if (result) {
                            eventContext.after(notExistSpan.clone());
                        }
                        else {
                            eventContext.after(existSpan.clone());
                        }
                    }
                });
            }, 300));

            $(".configs #new_pwd").off("keyup").on("keyup", _.throttle(function() {
                $(".password-check").remove();
                var error = CountlyHelpers.validatePassword($(this).val());
                if (error) {
                    var invalidSpan = $("<div class='password-check red-text'>").html(error);
                    $(this).after(invalidSpan.clone());
                    return false;
                }
            }, 300));

            $(".configs #re_new_pwd").off("keyup").on("keyup", _.throttle(function() {
                $(".password-check").remove();
                var error = CountlyHelpers.validatePassword($(this).val());
                if (error) {
                    var invalidSpan = $("<div class='password-check red-text'>").html(error);
                    $(this).after(invalidSpan.clone());
                    return false;
                }
            }, 300));

            $(".configs #usersettings_regenerate").click(function() {
                $(".configs #api-key").val(CountlyHelpers.generatePassword(32, true)).trigger("keyup");
            });

            $('.config-container').off('click').on('click', function() {
                var key = $(this).attr('id').replace('nav-item-', '');
                app.navigate("/manage/configurations/" + key);

                self.selectedNav = self.navTitles.coreTitles.find(function(x) {
                    return x.key === key;
                }) || self.navTitles.pluginTitles.find(function(x) {
                    return x.key === key;
                });
                self.templateData.selectedNav = self.selectedNav;

                $('.config-container').removeClass('selected');
                $('#nav-item-' + self.selectedNav.key).addClass('selected');

                $('.config-table-row').hide();
                $('.config-table-row-header').hide();
                $('#config-title').html(self.selectedNav.label);
                $('#config-table-row-' + self.selectedNav.key).show();
                $('#config-table-row-header-' + self.selectedNav.key).show();
                $('.config-table-details-row').show();

                $('#config-table-container').removeClass('title-rows-enable');
                $('#config-table-container').addClass('title-rows-hidden');
                $('#empty-search-result').hide();
                $('#search-box').val("");
            });

            $(".configs .account-settings .input input").keyup(function() {
                $("#configs-apply-changes").removeClass("settings-changes");
                $(".configs .account-settings .input input").each(function() {
                    var id = $(this).attr("id");
                    switch (id) {
                    case "username":
                        if (this.value !== $("#menu-username").text()) {
                            $("#configs-apply-changes").addClass("settings-changes");
                        }
                        break;
                    case "api-key":
                        if (this.value !== $("#user-api-key").val()) {
                            $("#configs-apply-changes").addClass("settings-changes");
                        }
                        break;
                    default:
                        if (this.value !== "") {
                            $("#configs-apply-changes").addClass("settings-changes");
                        }
                        break;
                    }
                    if ($("#configs-apply-changes").hasClass("settings-changes")) {
                        $("#configs-apply-changes").show();
                    }
                    else if (!$("#configs-apply-changes").hasClass("configs-changes")) {
                        $("#configs-apply-changes").hide();
                    }
                });
            });
            $("#configs-apply-changes").click(function() {
                if (self.userConfig) {
                    $(".username-check.green-text").remove();
                    if ($(".red-text").length) {
                        CountlyHelpers.notify({
                            title: jQuery.i18n.map["user-settings.please-correct-input"],
                            message: jQuery.i18n.map["configs.not-saved"],
                            type: "error"
                        });
                        return false;
                    }
                    var username = $(".configs #username").val(),
                        old_pwd = $(".configs #old_pwd").val(),
                        new_pwd = $(".configs #new_pwd").val(),
                        re_new_pwd = $(".configs #re_new_pwd").val(),
                        api_key = $(".configs #api-key").val();

                    var ignoreError = false;

                    if ((new_pwd.length && re_new_pwd.length) || api_key.length || username.length) {
                        ignoreError = true;
                    }

                    if ((new_pwd.length || re_new_pwd.length) && !old_pwd.length) {
                        CountlyHelpers.notify({
                            title: jQuery.i18n.map["configs.not-saved"],
                            message: jQuery.i18n.map["user-settings.old-password-match"],
                            type: "error"
                        });
                        return true;
                    }

                    if (new_pwd !== re_new_pwd) {
                        CountlyHelpers.notify({
                            title: jQuery.i18n.map["configs.not-saved"],
                            message: jQuery.i18n.map["user-settings.password-match"],
                            type: "error"
                        });
                        return true;
                    }

                    if (new_pwd.length && new_pwd === old_pwd) {
                        CountlyHelpers.notify({
                            title: jQuery.i18n.map["configs.not-saved"],
                            message: jQuery.i18n.map["user-settings.password-not-old"],
                            type: "error"
                        });
                        return true;
                    }

                    if (api_key.length !== 32) {
                        CountlyHelpers.notify({
                            title: jQuery.i18n.map["configs.not-saved"],
                            message: jQuery.i18n.map["user-settings.api-key-length"],
                            type: "error"
                        });
                        return true;
                    }

                    $.ajax({
                        type: "POST",
                        url: countlyGlobal.path + "/user/settings",
                        data: {
                            "username": username,
                            "old_pwd": old_pwd,
                            "new_pwd": new_pwd,
                            "api_key": api_key,
                            _csrf: countlyGlobal.csrf_token
                        },
                        success: function(result) {
                            if (result === "username-exists") {
                                CountlyHelpers.notify({
                                    title: jQuery.i18n.map["configs.not-saved"],
                                    message: jQuery.i18n.map["management-users.username.exists"],
                                    type: "error"
                                });
                                return true;
                            }
                            else if (!result) {
                                CountlyHelpers.notify({
                                    title: jQuery.i18n.map["configs.not-saved"],
                                    message: jQuery.i18n.map["user-settings.alert"],
                                    type: "error"
                                });
                                return true;
                            }
                            else {
                                if (!isNaN(parseInt(result))) {
                                    $("#new-install-overlay").fadeOut();
                                    countlyGlobal.member.password_changed = parseInt(result);
                                }
                                else if (typeof result === "string") {
                                    CountlyHelpers.notify({
                                        title: jQuery.i18n.map["configs.not-saved"],
                                        message: jQuery.i18n.map[result],
                                        type: "error"
                                    });
                                    return true;
                                }
                                $("#user-api-key").val(api_key);
                                $(".configs #old_pwd").val("");
                                $(".configs #new_pwd").val("");
                                $(".configs #re_new_pwd").val("");
                                $("#menu-username").text(username);
                                $("#user-api-key").val(api_key);
                                countlyGlobal.member.username = username;
                                countlyGlobal.member.api_key = api_key;
                            }
                            if (Object.keys(self.changes).length) {
                                countlyPlugins.updateUserConfigs(self.changes, function(err) {
                                    if (err && !ignoreError) {
                                        CountlyHelpers.notify({
                                            title: jQuery.i18n.map["configs.not-saved"],
                                            message: jQuery.i18n.map["configs.not-changed"],
                                            type: "error"
                                        });
                                    }
                                    else {
                                        location.hash = "#/manage/user-settings/success";
                                        window.location.reload(true);
                                    }
                                });
                            }
                            else {
                                CountlyHelpers.notify({
                                    title: jQuery.i18n.map["configs.changed"],
                                    message: jQuery.i18n.map["configs.saved"]
                                });
                                $("#configs-apply-changes").hide();
                            }
                        }
                    });
                }
                else {
                    countlyPlugins.updateConfigs(self.changes, function(err) {
                        if (err) {
                            CountlyHelpers.notify({
                                title: jQuery.i18n.map["configs.not-saved"],
                                message: jQuery.i18n.map["configs.not-changed"],
                                type: "error"
                            });
                        }
                        else {
                            location.hash = "#/manage/configurations/success/" + self.selectedNav.key;
                            window.location.reload(true);
                        }
                    });
                }
            });


            $('#search-box').off('input').on('input', function() {
                var searchKey = $(this).val().toLowerCase();

                if (searchKey.length === 0) {
                    $('#nav-item-' + self.selectedNav.key).trigger('click');
                    return;
                }

                var searchResult = self.searchKeys.filter(function(item) {
                    return item.searchKeys.indexOf(searchKey.toLowerCase()) >= 0;
                });

                var configGroups = [];
                searchResult.forEach(function(result) {
                    var group = {
                        key: result.key,
                        rows: result.subItems.filter(function(field) {
                            return field.searchKeys.indexOf(searchKey.toLowerCase()) >= 0;
                        })
                    };
                    configGroups.push(group);
                });

                $('.config-container').removeClass('selected');
                $('#config-title').html('RESULTS FOR: "' + searchKey + '"');
                $('#config-table-container').removeClass('title-rows-hidden');
                $('#config-table-container').addClass('title-rows-enable');
                self.showSearchResult(configGroups);

                if (configGroups.length === 0) {
                    $('#empty-search-result').show();
                }
                else {
                    $('#empty-search-result').hide();
                }
            });

            if (countlyGlobal.member.global_admin) {
                $(".user-row").show();
            }

            /*
                Make header sticky if scroll is more than the height of header
                This is done in order to make Apply Changes button visible
             */
            // var navigationTop = $("#sticky-config-header").offset().top;


            $(window).on("resize", function() {
                var $fixedHeader = $("#sticky-config-header");

                if ($fixedHeader.hasClass("fixed")) {
                    var width = $("#content-container").width();
                    $fixedHeader.css({ width: width });
                }
            });
        }
    },
    updateConfig: function(id, value) {
        var configs = id.split(".");

        //update cache
        var data = this.cache;
        for (var i = 0; i < configs.length; i++) {
            if (typeof data[configs[i]] === "undefined") {
                break;
            }
            else if (i === configs.length - 1) {
                data[configs[i]] = value;
            }
            else {
                data = data[configs[i]];
            }
        }

        //add to changes
        data = this.changes;
        for (i = 0; i < configs.length; i++) {
            if (i === configs.length - 1) {
                data[configs[i]] = value;
            }
            else if (typeof data[configs[i]] === "undefined") {
                data[configs[i]] = {};
            }
            data = data[configs[i]];
        }
        $("#configs-apply-changes").removeClass("configs-changes");
        if (JSON.stringify(this.configsData) !== JSON.stringify(this.cache)) {
            $("#configs-apply-changes").addClass("configs-changes");
        }
        else {
            this.changes = {};
        }

        if ($("#configs-apply-changes").hasClass("configs-changes")) {
            $("#configs-apply-changes").show();
        }
        else if (!$("#configs-apply-changes").hasClass("settings-changes")) {
            $("#configs-apply-changes").hide();
        }
    },
    getSearchKeys: function(data) {

        var result = Object.keys(data).reduce(function(prev, key) {
            var dataItem = data[key];
            var searchItem = {};

            var searcKeyItems = Object.keys(dataItem).reduce(function(subPrev, subKey) {
                var titleText = jQuery.i18n.map["configs." + key + "-" + subKey] || jQuery.i18n.map[key + "." + subKey] || jQuery.i18n.map[key + "." + subKey.replace(/\_/g, '-')] || jQuery.i18n.map["userdata." + subKey] || subKey; // eslint-disable-line no-useless-escape
                var helpText = jQuery.i18n.map["configs.help." + key + "-" + subKey] || "";

                var searchItems = titleText + "," + helpText + "," + subKey + ",";

                subPrev.subItems.push({
                    key: subKey,
                    searchKeys: searchItems.toLowerCase()
                });

                subPrev.wholeList += searchItems.toLowerCase();

                return subPrev;
            }, { wholeList: "", subItems: [] });

            searchItem.searchKeys = searcKeyItems.wholeList;
            searchItem.subItems = searcKeyItems.subItems;
            delete searchItem.subItems.wholeList;
            searchItem.key = key;

            prev.push(searchItem);
            return prev;
        }, []);
        return result;
    },
    generateConfigsTable: function(configsData, id) {
        id = id || "";
        var first = true;
        if (id !== "") {
            first = false;
        }
        var configsHTML = "";
        if (!first) {
            configsHTML += "<table class='d-table help-zone-vb' cellpadding='0' cellspacing='0'>";
        }

        var objectKeys = Object.keys(configsData);

        if (id === ".logs") {
            objectKeys.splice(objectKeys.indexOf("default"), 1);
            objectKeys.unshift('default');
        }

        for (var a in objectKeys) {
            var i = objectKeys[a];
            if (typeof configsData[i] === "object" && i !== "_user") {
                if (configsData[i] !== null) {
                    var label = this.getInputLabel((id + "." + i).substring(1), i);
                    if (label) {
                        var display = i === this.selectedNav.key ? this.userConfig ? "table-row" : "block" : this.userConfig ? "table-row" : "none";

                        // var category = "CORE";
                        var relatedNav = this.navTitles.coreTitles.find(function(x) { // eslint-disable-line no-loop-func
                            return x.key === i;
                        });
                        if (!relatedNav) {
                            // category = "PLUGINS";
                            relatedNav = this.navTitles.pluginTitles.find(function(x) { // eslint-disable-line no-loop-func
                                return x.key === i;
                            });
                        }
                        configsHTML += "<tr id='config-table-row-" + i + "' style='display:" + display + "' class='config-table-row'>";

                        if (this.userConfig) {
                            configsHTML += "<td>" + relatedNav.label + "</td>";
                        }

                        configsHTML += "<td>" + this.generateConfigsTable(configsData[i], id + "." + i) + "</td>";
                        configsHTML += "</tr>";
                    }

                }
                else {
                    var input = this.getInputByType((id + "." + i).substring(1), "");
                    var detailsLabel = this.getInputLabel((id + "." + i).substring(1), i);
                    if (input && detailsLabel) {
                        configsHTML += "<tr id='config-row-" + i + "-" + id.replace(".", "") + "' class='config-table-details-row'><td>" + detailsLabel + "</td><td>" + input + "</td></tr>";
                    }
                }
            }
            else if (i === "_user") {
                var hasSelectedData = Object.keys(configsData[i]).some(function(key) { // eslint-disable-line no-loop-func
                    return configsData[i][key];
                });
                var userLevelLabel = '<div data-localize="' + jQuery.i18n.map["configs.user-level-configuration"] + '">' + jQuery.i18n.map["configs.user-level-configuration"] + '</div><span class="config-help" data-localize="' + jQuery.i18n.map["configs.help.user-level-configuration"] + '">' + jQuery.i18n.map["configs.help.user-level-configuration"] + '</span>';

                var userLevelInput = '<div class="cly-multi-select user-config-select ' + (hasSelectedData ? 'selection-exists' : '') + '" id="' + id.substring(1) + '._user" style="width: 100%; box-sizing: border-box;">';
                userLevelInput += '<div class="select-inner">';
                userLevelInput += '<div class="text-container">';
                userLevelInput += '<div class="text">';
                userLevelInput += '<div class="default-text"></div>';
                for (var c in configsData[i]) {
                    if (configsData[i][c]) {
                        userLevelInput += '<div class="selection" data-value="' + c + '">' + this.getLabelName((id + "." + c).substring(1), c).text + '<div class="remove"><i class="ion-android-close"></i></div></div>';
                    }
                }
                userLevelInput += '</div>';
                userLevelInput += '</div>';
                userLevelInput += '<div class="right combo"></div>';
                userLevelInput += '</div>';
                userLevelInput += '<div class="select-items square" style="width: 100%;"><div>';
                for (var d in configsData[i]) {
                    userLevelInput += '<div data-value="' + d + '" class="item ' + (configsData[i][d] ? 'selected' : '') + '">' + this.getLabelName((id + "." + d).substring(1), d).text + '</div>';
                }
                userLevelInput += '</div></div>';
                userLevelInput += '</div>';

                configsHTML += "<tr id='config-row-" + i + "-user-conf' class='config-table-details-row user-row' style='display:none'><td>" + userLevelLabel + "</td><td>" + userLevelInput + "</td></tr>";
            }
            else {
                var inputElse = this.getInputByType((id + "." + i).substring(1), configsData[i]);
                var labelElse = this.getInputLabel((id + "." + i).substring(1), i);
                if (inputElse && labelElse) {
                    configsHTML += "<tr id='config-row-" + i + "-" + id.replace(".", "") + "' class='config-table-details-row'><td>" + labelElse + "</td><td>" + inputElse + "</td></tr>";
                }
            }
        }
        if (!first) {
            configsHTML += "</table>";
        }



        return configsHTML;
    },
    getLabelName: function(id, value) {
        var ns = id.split(".")[0];
        if (ns !== "frontend" && ns !== "api" && ns !== "apps" && ns !== "logs" && ns !== "security" && countlyGlobal.plugins.indexOf(ns) === -1) {
            return null;
        }

        if (typeof this.predefinedLabels[id] !== "undefined") {
            return { dataLocalize: this.predefinedLabels[id], text: jQuery.i18n.map[this.predefinedLabels[id]] };
        }
        else if (jQuery.i18n.map["configs." + id]) {
            return { dataLocalize: 'configs." + id + "', text: jQuery.i18n.map["configs." + id] };
        }
        else if (jQuery.i18n.map["configs." + id.replace(".", "-")]) {
            return { dataLocalize: 'configs." + id.replace(".", "-") + "', text: jQuery.i18n.map["configs." + id.replace(".", "-")] };
        }
        else if (jQuery.i18n.map[id]) {
            return { dataLocalize: id, text: jQuery.i18n.map[id] };
        }
        else if (jQuery.i18n.map[id.replace(".", "-")]) {
            return { dataLocalize: '" + id.replace(".", "-") + "', text: jQuery.i18n.map[id.replace(".", "-")] };
        }
        else {
            return { text: value };
        }
    },
    getInputLabel: function(id, value, asLabel) {
        var ns = id.split(".")[0];
        if (ns !== "frontend" && ns !== "api" && ns !== "apps" && ns !== "logs" && ns !== "security" && countlyGlobal.plugins.indexOf(ns) === -1) {
            return null;
        }
        var ret = "";
        if (jQuery.i18n.map["configs.help." + id]) {
            ret = "<span class='config-help' data-localize='configs.help." + id + "'>" + jQuery.i18n.map["configs.help." + id] + "</span>";
        }
        else if (jQuery.i18n.map["configs.help." + id.replace(".", "-")]) {
            ret = "<span class='config-help' data-localize='configs.help." + id.replace(".", "-") + "'>" + jQuery.i18n.map["configs.help." + id.replace(".", "-")] + "</span>";
        }

        var labelNameItem = this.getLabelName(id, value);
        if (asLabel) {
            return "<label data-localize='" + labelNameItem.dataLocalize + "'>" + labelNameItem.text + "</label>" + ret;
        }
        else {
            return "<div data-localize='" + labelNameItem.dataLocalize + "'>" + labelNameItem.text + "</div>" + ret;
        }
    },
    getInputByType: function(id, value) {
        if (this.predefinedInputs[id]) {
            return this.predefinedInputs[id](value);
        }
        else if (typeof value === "boolean") {
            var input = '<div class="on-off-switch">';

            if (value) {
                input += '<input type="checkbox" name="on-off-switch" class="on-off-switch-checkbox" id="' + id + '" checked>';
            }
            else {
                input += '<input type="checkbox" name="on-off-switch" class="on-off-switch-checkbox" id="' + id + '">';
            }

            input += '<label class="on-off-switch-label" for="' + id + '"></label>';
            input += '<span class="text">' + jQuery.i18n.map["plugins.enable"] + '</span>';
            input += "</div>";
            return input;
        }
        else if (typeof value === "number") {
            return "<input type='number' id='" + id + "' value='" + value + "' max='2147483647' min='0' onkeyup='this.value= (parseInt(this.value) > 2147483647) ? 2147483647 : this.value;'/>";
        }
        else {
            return "<input type='text' id='" + id + "' value='" + value + "'/>";
        }
    },
    getLabel: function(id) {
        if (countlyGlobal.plugins.indexOf(id) === -1) {
            return jQuery.i18n.map["configs." + id];
        }

        var ret = "";
        if (jQuery.i18n.map["configs.help." + id]) {
            ret = jQuery.i18n.map["configs.help." + id];
        }
        else if (jQuery.i18n.map["configs.help." + id.replace(".", "-")]) {
            ret = jQuery.i18n.map["configs.help." + id.replace(".", "-")];
        }
        if (typeof this.predefinedLabels[id] !== "undefined") {
            return jQuery.i18n.map[this.predefinedLabels[id]] + ret;
        }
        else if (jQuery.i18n.map["configs." + id]) {
            return jQuery.i18n.map["configs." + id] + ret;
        }
        else if (jQuery.i18n.map["configs." + id.replace(".", "-")]) {
            return jQuery.i18n.map["configs." + id.replace(".", "-")] + ret;
        }
        else if (jQuery.i18n.map[id]) {
            return jQuery.i18n.map[id] + ret;
        }
        else if (jQuery.i18n.map[id.replace(".", "-")]) {
            return jQuery.i18n.map[id.replace(".", "-")] + ret;
        }
        else {
            return id + ret;
        }
    },
    setNavTitles: function(configdata) {

        var pluginTitles = [], coreTitles = [];

        var self = this;
        var coreDefaults = ['frontend', 'security', 'api', 'apps', 'logs'];

        Object.keys(configdata).forEach(function(key) {
            if (coreDefaults.indexOf(key) >= 0) {
                coreTitles.push({ key: key, label: self.getLabel(key) });
            }
            else if (countlyGlobal.plugins.indexOf(key) >= 0) {
                pluginTitles.push({ key: key, label: self.getLabel(key) });
            }
        });

        coreTitles = coreTitles.sort(function(a, b) {
            return a > b;
        });
        pluginTitles = pluginTitles.sort(function(a, b) {
            return a > b;
        });

        return {
            coreTitles: coreTitles,
            pluginTitles: pluginTitles
        };
    },
    showSearchResult: function(results) {
        $('.config-table-row-header').hide();
        $('.config-table-row').hide();
        $('.config-table-details-row').hide();

        results.forEach(function(result) {
            $('#config-table-row-header-' + result.key).show();
            $('#config-table-row-' + result.key).show();

            result.rows.forEach(function(row) {
                $('#config-row-' + row.key + '-' + result.key).show();
            });
        });
    },
    registerInput: function(id, callback) {
        this.predefinedInputs[id] = callback;
    },
    registerLabel: function(id, html) {
        this.predefinedLabels[id] = html;
    },
    refresh: function() {
    }
});

//register views
app.pluginsView = new PluginsView();
app.configurationsView = new ConfigurationsView();

if (countlyGlobal.member.global_admin) {
    var showInAppManagment = {"api": {"safe": true, "session_duration_limit": true, "city_data": true, "event_limit": true, "event_segmentation_limit": true, "event_segmentation_value_limit": true, "metric_limit": true, "session_cooldown": true, "total_users": true, "prevent_duplicate_requests": true, "metric_changes": true}};
    var configManagementPromise = null;
    for (var key in showInAppManagment) {
        app.addAppManagementView(key, jQuery.i18n.map['configs.' + key], countlyManagementView.extend({
            key: key,
            initialize: function() {
                this.plugin = this.key;
            },
            generateTemplate: function(id) {
                var fields = '';
                this.configsData = countlyPlugins.getConfigsData();
                id = this.key || id;
                this.cache = {};
                this.templateData = {};

                var appConfigData = this.config();
                for (var i in showInAppManagment[id]) {
                    if (showInAppManagment[id][i] === true) {
                        var myvalue = "";
                        if (appConfigData && typeof appConfigData[i] !== "undefined") {
                            myvalue = appConfigData[i];
                        }
                        else if (typeof this.configsData[id][i] !== "undefined") {
                            myvalue = this.configsData[id][i];
                        }
                        this.templateData[i] = myvalue;
                        var input = app.configurationsView.getInputByType((id + "." + i), myvalue);
                        var label = app.configurationsView.getInputLabel((id + "." + i), i, true);
                        if (input && label) {
                            fields += ('<div id="config-row-' + i + "-" + id.replace(".", "") + '" class="mgmt-plugins-row help-zone-vs" data-help-localize="help.mgmt-plugins.push.ios.type">' +
                                    '   <div>' + label + '</div>' +
                                    '   <div>' + input + '</div>' +
                                    '</div>');
                        }
                    }
                }
                return fields;
            },
            doOnChange: function(name, value) {
                if (name) {
                    name = name.substring(this.key.length + 1);
                    if (name && countlyCommon.dot(this.templateData, name) !== value) {
                        countlyCommon.dot(this.templateData, name, value);
                    }

                    if (this.isSaveAvailable()) {
                        this.el.find('.icon-button').show();
                    }
                    else {
                        this.el.find('.icon-button').hide();
                    }
                    this.onChange(name, value);
                }
            },
            beforeRender: function() { // eslint-disable-line no-loop-func
                var self = this;
                if (!configManagementPromise) {
                    configManagementPromise = $.when(countlyPlugins.initializeConfigs());
                }
                return $.when(configManagementPromise).then(function() {
                    configManagementPromise = null;
                    self.template = Handlebars.compile(self.generateTemplate(self.key));
                    self.savedTemplateData = JSON.stringify(self.templateData);
                }).then(function() {});
            }
        }));
    }

    app.route('/manage/plugins', 'plugins', function() {
        this.renderWhenReady(this.pluginsView);
    });

    app.route('/manage/configurations', 'configurations', function() {
        this.configurationsView.namespace = null;
        this.configurationsView.reset = false;
        this.configurationsView.userConfig = false;
        this.configurationsView.success = false;
        this.renderWhenReady(this.configurationsView);
    });

    app.route('/manage/configurations/:namespace', 'configurations_namespace', function(namespace) {
        if (namespace === "reset") {
            this.configurationsView.namespace = null;
            this.configurationsView.reset = true;
            this.configurationsView.userConfig = false;
            this.configurationsView.success = false;
            this.renderWhenReady(this.configurationsView);
        }
        else {
            this.configurationsView.namespace = namespace;
            this.configurationsView.reset = false;
            this.configurationsView.userConfig = false;
            this.configurationsView.success = false;
            this.renderWhenReady(this.configurationsView);
        }
    });

    app.route('/manage/configurations/:status/:namespace', 'configurations_namespace', function(status, namespace) {
        if (status === "success") {
            this.configurationsView.namespace = namespace;
            this.configurationsView.reset = false;
            this.configurationsView.userConfig = false;
            this.configurationsView.success = true;
            this.renderWhenReady(this.configurationsView);
        }
    });
}

app.route('/manage/user-settings', 'user-settings', function() {
    this.configurationsView.namespace = null;
    this.configurationsView.reset = false;
    this.configurationsView.userConfig = true;
    this.configurationsView.success = false;
    this.renderWhenReady(this.configurationsView);
});

app.route('/manage/user-settings/:namespace', 'user-settings_namespace', function(namespace) {
    if (namespace === "reset") {
        this.configurationsView.reset = true;
        this.configurationsView.success = false;
        this.configurationsView.namespace = null;
    }
    else if (namespace === "success") {
        this.configurationsView.reset = false;
        this.configurationsView.success = true;
        this.configurationsView.namespace = null;
    }
    else {
        this.configurationsView.reset = false;
        this.configurationsView.success = false;
        this.configurationsView.namespace = namespace;
    }
    this.configurationsView.userConfig = true;
    this.renderWhenReady(this.configurationsView);
});

app.addPageScript("/manage/plugins", function() {
    $("#plugins-selector").find(">.button").click(function() {
        if ($(this).hasClass("selected")) {
            return true;
        }

        $(".plugins-selector").removeClass("selected").removeClass("active");
        var filter = $(this).attr("id");

        app.activeView.filterPlugins(filter);
    });

    var plugins = _.clone(countlyGlobal.plugins);

    $("#plugins-table").on("change", ".on-off-switch input", function() {
        var $checkBox = $(this),
            plugin = $checkBox.attr("id").replace(/^plugin-/, '');

        if ($checkBox.is(":checked")) {
            plugins.push(plugin);
            plugins = _.uniq(plugins);
        }
        else {
            plugins = _.without(plugins, plugin);
        }

        if (_.difference(countlyGlobal.plugins, plugins).length === 0 &&
            _.difference(plugins, countlyGlobal.plugins).length === 0) {
            $(".btn-plugin-enabler").hide();
        }
        else {
            $(".btn-plugin-enabler").show();
        }
    });

    $(document).on("click", ".btn-plugin-enabler", function() {
        var pluginsEnabler = {};

        $("#plugins-table").find(".on-off-switch input").each(function() {
            var plugin = this.id.toString().replace(/^plugin-/, ''),
                state = ($(this).is(":checked")) ? true : false;

            pluginsEnabler[plugin] = state;
        });

        var text = jQuery.i18n.map["plugins.confirm"];
        var msg = { title: jQuery.i18n.map["plugins.processing"], message: jQuery.i18n.map["plugins.wait"], info: jQuery.i18n.map["plugins.hold-on"], sticky: true };
        CountlyHelpers.confirm(text, "popStyleGreen popStyleGreenWide", function(result) {
            if (!result) {
                return true;
            }
            CountlyHelpers.notify(msg);
            app.activeView.togglePlugin(pluginsEnabler);
        }, [jQuery.i18n.map["common.no-dont-continue"], jQuery.i18n.map["plugins.yes-i-want-to-apply-changes"]], { title: jQuery.i18n.map["plugins-apply-changes-to-plugins"], image: "apply-changes-to-plugins" });
    });
});

$(document).ready(function() {
    if (countlyGlobal.member && countlyGlobal.member.global_admin) {
        var menu = '<a href="#/manage/plugins" class="item">' +
            '<div class="logo-icon fa fa-puzzle-piece"></div>' +
            '<div class="text" data-localize="plugins.title"></div>' +
            '</a>';
        if ($('#management-submenu .help-toggle').length) {
            $('#management-submenu .help-toggle').before(menu);
        }

        menu = '<a href="#/manage/configurations" class="item">' +
            '<div class="logo-icon fa fa-wrench"></div>' +
            '<div class="text" data-localize="plugins.configs"></div>' +
            '</a>';
        if ($('#management-submenu .help-toggle').length) {
            $('#management-submenu .help-toggle').before(menu);
        }
    }
});;/*global countlyDensity, CountlyHelpers, jQuery*/
window.countlyDensity = {};
countlyDensity.checkOS = function(os, density) {
    var lastIndex = density.toUpperCase().lastIndexOf("DPI");
    if (os.toLowerCase() === "android" && lastIndex !== -1 && lastIndex === density.length - 3) {
        return true;
    }
    if (os.toLowerCase() === "ios" && density[0] === "@") {
        return true;
    }
    return false;
};
CountlyHelpers.createMetricModel(window.countlyDensity = window.countlyDensity || {}, {name: "density", estOverrideMetric: "densities"}, jQuery);;/*global $, jQuery, countlyCommon, countlyDeviceDetails, countlyGlobal, countlyView, countlyTotalUsers, countlyDensity, Handlebars, app, addDrill, CountlyHelpers, DensityView*/
window.DensityView = countlyView.extend({
    initialize: function() {

    },
    activePlatform: {},
    beforeRender: function() {
        if (this.template) {
            return $.when(countlyDeviceDetails.initialize(), countlyTotalUsers.initialize("densities"), countlyDensity.initialize()).then(function() {});
        }
        else {
            var self = this;
            return $.when($.get(countlyGlobal.path + '/density/templates/density.html', function(src) {
                self.template = Handlebars.compile(src);
            }), countlyDeviceDetails.initialize(), countlyTotalUsers.initialize("densities"), countlyDensity.initialize()).then(function() {});
        }
    },
    pageScript: function() {
        var self = this;
        $(".density-segmentation .segmentation-option").on("click", function() {
            self.activePlatform[countlyCommon.ACTIVE_APP_ID] = $(this).data("value");
            self.refresh();
        });
        app.localize();
    },
    renderCommon: function(isRefresh) {
        var platformData = countlyDeviceDetails.getPlatformData();
        platformData.chartData.sort(function(a, b) {
            return (a.os_ > b.os_) ? 1 : ((b.os_ > a.os_) ? -1 : 0);
        });

        var chartHTML = "";

        if (platformData && platformData.chartDP && platformData.chartDP.dp && platformData.chartDP.dp.length) {
            for (var i = 0; i < platformData.chartDP.dp.length; i++) {
                chartHTML += '<div class="hsb-container"><div class="label">' + platformData.chartDP.dp[i].label + '</div><div class="chart"><svg id="hsb-platform' + i + '"></svg></div></div>';
            }
        }
        if (!this.activePlatform[countlyCommon.ACTIVE_APP_ID]) {
            this.activePlatform[countlyCommon.ACTIVE_APP_ID] = (platformData.chartData[0]) ? platformData.chartData[0].os_ : "";
        }

        this.templateData = {
            "page-title": jQuery.i18n.map["density.title"],
            "logo-class": "densities",
            "chartHTML": chartHTML,
            "chart-helper": "density.chart",
            "table-helper": "",
            "active-platform": this.activePlatform[countlyCommon.ACTIVE_APP_ID],
            "platforms": platformData.chartData
        };

        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            if (typeof addDrill !== "undefined") {
                $(".widget-header .left .title").first().after(addDrill("up.dnst"));
            }
            this.pageScript();

            countlyCommon.drawHorizontalStackedBars(platformData.chartDP.dp, "#hsb-platforms");

            if (platformData && platformData.chartDP) {
                for (var chartDPIndex = 0; chartDPIndex < platformData.chartDP.dp.length; chartDPIndex++) {
                    var tmpOsVersion = countlyDensity.getOSSegmentedData(platformData.chartDP.dp[chartDPIndex].label);

                    countlyCommon.drawHorizontalStackedBars(tmpOsVersion.chartDP.dp, "#hsb-platform" + chartDPIndex, chartDPIndex);
                }
            }

            var oSVersionData = countlyDensity.getOSSegmentedData(this.activePlatform[countlyCommon.ACTIVE_APP_ID]);

            this.dtable = $('#dataTableOne').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": oSVersionData.chartData,
                "aoColumns": [
                    { "mData": "density", "sTitle": jQuery.i18n.map["density.table.density"] },
                    {
                        "mData": "t",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-sessions"]
                    },
                    {
                        "mData": "u",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-users"]
                    },
                    {
                        "mData": "n",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.new-users"]
                    }
                ]
            }));

            $("#dataTableOne").stickyTableHeaders();
        }
    },
    refresh: function() {
        var self = this;
        $.when(this.beforeRender()).then(function() {
            if (app.activeView !== self) {
                return false;
            }
            self.renderCommon(true);
            var oSVersionData = countlyDensity.getOSSegmentedData(self.activePlatform[countlyCommon.ACTIVE_APP_ID]),
                platformData = countlyDeviceDetails.getPlatformData(),
                newPage = $("<div>" + self.template(self.templateData) + "</div>");

            $(self.el).find(".widget-content").replaceWith(newPage.find(".widget-content"));
            $(self.el).find(".dashboard-summary").replaceWith(newPage.find(".dashboard-summary"));
            $(self.el).find(".density-widget").replaceWith(newPage.find(".density-widget"));

            if (platformData && platformData.chartDP) {
                for (var i = 0; i < platformData.chartDP.dp.length; i++) {
                    var tmpOsVersion = countlyDensity.getOSSegmentedData(platformData.chartDP.dp[i].label);

                    countlyCommon.drawHorizontalStackedBars(tmpOsVersion.chartDP.dp, "#hsb-platform" + i, i);
                }
            }

            CountlyHelpers.refreshTable(self.dtable, oSVersionData.chartData);

            self.pageScript();
        });
    }
});
//register views
app.densityView = new DensityView();

app.route("/analytics/density", 'desity', function() {
    this.renderWhenReady(this.densityView);
});

$(document).ready(function() {
    var menu = '<a href="#/analytics/density" class="item">' +
		'<div class="logo densities"></div>' +
		'<div class="text" data-localize="sidebar.analytics.densities"></div>' +
	'</a>';
    $('#mobile-type #analytics-submenu').append(menu);
    $('#web-type #analytics-submenu').append(menu);
});;/*global $, jQuery, CountlyHelpers, countlyCommon*/
(function() {
    var langmap;
    $.ajax({
        type: "GET",
        url: countlyCommon.API_PARTS.data.r + "/langmap",
        dataType: "json",
        data: {"preventRequestAbort": true},
        success: function(json) {
            langmap = json;
        }
    });

    /**
    * Get language name from language code
    * @param {string} code - language code
    * @returns {string} language name
    */
    function getLanguageName(code) {
        if (langmap && langmap[code]) {
            return langmap[code].englishName;
        }
        else {
            return code;
        }
    }

    CountlyHelpers.createMetricModel(window.countlyLanguage = window.countlyLanguage || {getLanguageName: getLanguageName}, {name: "langs", estOverrideMetric: "languages"}, jQuery, getLanguageName);
}());;/*global $, countlyTotalUsers, countlyLanguage, jQuery, app, LanguageView, countlyGlobalLang, Handlebars, countlyView, addDrill, countlyCommon, CountlyHelpers*/
window.LanguageView = countlyView.extend({
    beforeRender: function() {
        return $.when(countlyLanguage.initialize(), countlyTotalUsers.initialize("languages")).then(function() {});
    },
    renderCommon: function(isRefresh) {
        var languageData = countlyLanguage.getData();

        this.templateData = {
            "page-title": jQuery.i18n.map["languages.title"],
            "logo-class": "languages",
            "graph-type-double-pie": true,
            "pie-titles": {
                "left": jQuery.i18n.map["common.total-users"],
                "right": jQuery.i18n.map["common.new-users"]
            },
            "chart-helper": "languages.chart",
            "table-helper": ""
        };

        languageData.chartData.forEach(function(row) {
            if (row.language in countlyGlobalLang.languages) {
                row.language = countlyGlobalLang.languages[row.language].englishName;
            }
        });

        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            if (typeof addDrill !== "undefined") {
                $(".widget-header .left .title").after(addDrill("up.la"));
            }
            countlyCommon.drawGraph(languageData.chartDPTotal, "#dashboard-graph", "pie");
            countlyCommon.drawGraph(languageData.chartDPNew, "#dashboard-graph2", "pie");

            this.dtable = $('.d-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": languageData.chartData,
                "aoColumns": [
                    { "mData": "langs", "sTitle": jQuery.i18n.map["languages.table.language"] },
                    {
                        "mData": "t",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-sessions"]
                    },
                    {
                        "mData": "u",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-users"]
                    },
                    {
                        "mData": "n",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.new-users"]
                    }
                ]
            }));

            $(".d-table").stickyTableHeaders();
        }
    },
    refresh: function() {
        var self = this;
        $.when(this.beforeRender()).then(function() {
            if (app.activeView !== self) {
                return false;
            }
            self.renderCommon(true);
            var languageData = countlyLanguage.getData();
            countlyCommon.drawGraph(languageData.chartDPTotal, "#dashboard-graph", "pie");
            countlyCommon.drawGraph(languageData.chartDPNew, "#dashboard-graph2", "pie");

            CountlyHelpers.refreshTable(self.dtable, languageData.chartData);
            app.localize();
        });
    }
});

//register views
app.languageView = new LanguageView();

app.route("/analytics/languages", "languages", function() {
    this.renderWhenReady(this.languageView);
});

$(document).ready(function() {
    Handlebars.registerHelper('languageTitle', function(context) {
        return countlyGlobalLang.languages[context];
    });

    var menu = '<a href="#/analytics/languages" class="item">' +
		'<div class="logo languages"></div>' +
		'<div class="text" data-localize="sidebar.analytics.languages"></div>' +
	'</a>';
    $('.sidebar-menu:not(#iot-type) #analytics-submenu').append(menu);
});;/*global CountlyHelpers, jQuery, countlyBrowser, countlyCommon, _*/
CountlyHelpers.createMetricModel(window.countlyBrowser = window.countlyBrowser || {}, {name: "browser", estOverrideMetric: "browsers"}, jQuery);

countlyBrowser.getBrowserData = function() {
    var chartData = countlyCommon.extractTwoLevelData(countlyBrowser.getDb(), countlyBrowser.getMeta("browser"), countlyBrowser.clearObject, [
        {
            name: "browser",
            func: function(rangeArr) {
                return rangeArr;
            }
        },
        { "name": "t" },
        { "name": "u" },
        { "name": "n" }
    ], "browsers");
    chartData.chartData = countlyCommon.mergeMetricsByName(chartData.chartData, "browser");
    var browserNames = _.pluck(chartData.chartData, 'browser'),
        browserTotal = _.pluck(chartData.chartData, 'u'),
        chartData2 = [];

    for (var i = 0; i < browserNames.length; i++) {
        chartData2[i] = {
            data: [
                [0, browserTotal[i]]
            ],
            label: browserNames[i]
        };
    }

    chartData.chartDP = {};
    chartData.chartDP.dp = chartData2;

    return chartData;
};

countlyBrowser.getSegmentedData = function(browser) {
    browser = browser.toLowerCase();
    var metric = "browser_version";
    var versionData = {};
    versionData = countlyCommon.extractTwoLevelData(countlyBrowser.getDb(), countlyBrowser.getMeta(metric), countlyBrowser.clearObject, [
        {
            name: metric,
            func: function(rangeArr) {
                var parts = (rangeArr).split("]_");
                if (parts.length > 2) {
                    //remove duplicates, only single prefix
                    rangeArr = parts[0] + "]_" + parts[parts.length - 1];
                }
                return rangeArr;
            }
        },
        { "name": "t" },
        { "name": "u" },
        { "name": "n" }
    ], metric);
    versionData.chartData = countlyCommon.mergeMetricsByName(versionData.chartData, metric);
    var versionTotal = _.pluck(versionData.chartData, 'u'),
        chartData2 = [];
    if (versionData.chartData) {
        for (var i = 0; i < versionData.chartData.length; i++) {
            var shouldDelete = true;
            if (versionData.chartData[i][metric].indexOf("[" + browser + "]_") === 0) {
                shouldDelete = false;
                versionData.chartData[i][metric] = versionData.chartData[i][metric].replace("[" + browser + "]_", "").replace(/:/g, ".");
            }
            if (shouldDelete) {
                delete versionData.chartData[i];
            }
        }
    }

    versionData.chartData = _.compact(versionData.chartData);

    var versionNames = _.pluck(versionData.chartData, metric);

    for (var versionNameIndex = 0; versionNameIndex < versionNames.length; versionNameIndex++) {
        chartData2[chartData2.length] = {
            data: [
                [0, versionTotal[versionNameIndex]]
            ],
            label: versionNames[versionNameIndex]
        };
    }

    versionData.chartDP = {};
    versionData.chartDP.dp = chartData2;

    return versionData;
};

countlyBrowser.fixBrowserVersion = function(val, data) {
    var browsers = data || countlyBrowser.getMeta("browser");
    for (var i = 0; i < browsers.length; i++) {
        if (browsers[i] && val.indexOf("[" + browsers[i].toLowerCase() + "]_") === 0) {
            return browsers[i] + " " + val.replace(new RegExp("\\[" + browsers[i].toLowerCase() + "\\]_", "g"), "").replace(/:/g, ".");
        }
    }
    return val;
};

countlyBrowser.getBrowserVersionData = function(browser) {
    browser = browser.toLowerCase();
    var data = countlyBrowser.getData(true, false, "browser_version").chartData;
    var ret = [];
    for (var i = 0; i < data.length; i++) {
        if (data[i].browser_version.indexOf("[" + browser + "]_") === 0) {
            data[i].browser_version = data[i].browser_version.replace(new RegExp("\\[" + browser + "\\]_", "g"), "").replace(/:/g, ".");
            ret.push(data[i]);
        }
    }
    return ret;
};;/*global countlyView, $, countlyBrowser, countlyTotalUsers, countlyCommon, jQuery, CountlyHelpers, BrowserView, app, addDrill*/
window.BrowserView = countlyView.extend({
    activeSegment: {},
    beforeRender: function() {
        return $.when(countlyBrowser.initialize(), countlyTotalUsers.initialize("browsers")).then(function() {});
    },
    renderCommon: function(isRefresh) {
        var self = this;
        var data = countlyBrowser.getBrowserData();

        var chartHTML = "";
        var versionData = {};
        if (data && data.chartDP && data.chartDP.dp && data.chartDP.dp.length) {
            chartHTML += '<div class="hsb-container top"><div class="label">Platforms</div><div class="chart"><svg id="hsb-platforms"></svg></div></div>';

            for (var i = 0; i < data.chartDP.dp.length; i++) {
                var tmpVersion = countlyBrowser.getSegmentedData(data.chartDP.dp[i].label);
                if (tmpVersion.chartData.length) {
                    versionData[data.chartDP.dp[i].label] = tmpVersion;
                    chartHTML += '<div class="hsb-container"><div class="label">' + data.chartDP.dp[i].label + '</div><div class="chart"><svg id="hsb-platform' + i + '"></svg></div></div>';
                }
            }
        }

        if (!this.activeSegment[countlyCommon.ACTIVE_APP_ID]) {
            this.activeSegment[countlyCommon.ACTIVE_APP_ID] = (data.chartData[0]) ? data.chartData[0].browser : "";
        }

        var segments = [];
        for (var chartDataIndex = 0; chartDataIndex < data.chartData.length; chartDataIndex++) {
            segments.push({name: data.chartData[chartDataIndex].browser, value: data.chartData[chartDataIndex].browser.toLowerCase()});
        }

        this.templateData = {
            "page-title": jQuery.i18n.map["browser.title"],
            "segment-title": jQuery.i18n.map["browser.table.browser-version"],
            "font-logo-class": "fa-globe",
            "chartHTML": chartHTML,
            "isChartEmpty": (chartHTML) ? false : true,
            "chart-helper": "browser.chart",
            "table-helper": "",
            "two-tables": true,
            "active-segment": this.activeSegment[countlyCommon.ACTIVE_APP_ID],
            "segmentation": segments
        };

        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            if (typeof addDrill !== "undefined") {
                $("#content .widget:first .widget-header .left .title").after(addDrill("up.brw"));
            }

            this.dtable = $('#dataTableOne').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": data.chartData,
                "aoColumns": [
                    { "mData": "browser", sType: "session-duration", "sTitle": jQuery.i18n.map["browser.table.browser"] },
                    {
                        "mData": "t",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-sessions"]
                    },
                    {
                        "mData": "u",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-users"]
                    },
                    {
                        "mData": "n",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.new-users"]
                    }
                ]
            }));
            this.dtable.fnSort([ [1, 'desc'] ]);
            $("#dataTableOne").stickyTableHeaders();

            $(".segmentation-widget .segmentation-option").on("click", function() {
                self.activeSegment[countlyCommon.ACTIVE_APP_ID] = $(this).data("value");
                self.refresh();
            });

            countlyCommon.drawHorizontalStackedBars(data.chartDP.dp, "#hsb-platforms");

            if (data && data.chartDP) {
                for (var chartDPIndex = 0; chartDPIndex < data.chartDP.dp.length; chartDPIndex++) {
                    if (versionData[data.chartDP.dp[chartDPIndex].label]) {
                        countlyCommon.drawHorizontalStackedBars(versionData[data.chartDP.dp[chartDPIndex].label].chartDP.dp, "#hsb-platform" + chartDPIndex, chartDPIndex);
                    }
                }
            }

            this.dtableTwo = $('#dataTableTwo').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": countlyBrowser.getBrowserVersionData(self.activeSegment[countlyCommon.ACTIVE_APP_ID]),
                "aoColumns": [
                    { "mData": "browser_version", "sTitle": jQuery.i18n.map["platforms.table.platform-version"] },
                    {
                        "mData": "t",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-sessions"]
                    },
                    {
                        "mData": "u",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-users"]
                    },
                    {
                        "mData": "n",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.new-users"]
                    }
                ]
            }));
            this.dtableTwo.fnSort([ [1, 'desc'] ]);
            $("#dataTableTwo").stickyTableHeaders();
        }
    },
    refresh: function() {
        var self = this;
        $.when(this.beforeRender()).then(function() {
            if (app.activeView !== self) {
                return false;
            }
            self.renderCommon(true);
            var data = countlyBrowser.getBrowserData();

            var newPage = $("<div>" + self.template(self.templateData) + "</div>");

            $(self.el).find(".dashboard-summary").replaceWith(newPage.find(".dashboard-summary"));

            countlyCommon.drawHorizontalStackedBars(data.chartDP.dp, "#hsb-platforms");

            if (data && data.chartDP) {
                for (var i = 0; i < data.chartDP.dp.length; i++) {
                    var tmpVersion = countlyBrowser.getSegmentedData(data.chartDP.dp[i].label);
                    if (tmpVersion.chartData.length) {
                        countlyCommon.drawHorizontalStackedBars(tmpVersion.chartDP.dp, "#hsb-platform" + i, i);
                    }
                }
            }

            CountlyHelpers.refreshTable(self.dtable, data.chartData);
            CountlyHelpers.refreshTable(self.dtableTwo, countlyBrowser.getBrowserVersionData(self.activeSegment[countlyCommon.ACTIVE_APP_ID]));
        });
    }
});

//register views
app.browserView = new BrowserView();

app.route("/analytics/browser", 'browser', function() {
    this.renderWhenReady(this.browserView);
});

$(document).ready(function() {
    var menu = '<a href="#/analytics/browser" class="item">' +
		'<div class="logo-icon fa fa-globe"></div>' +
		'<div class="text" data-localize="browser.title"></div>' +
	'</a>';
    $('#web-type #analytics-submenu').append(menu);
});;/*global 
    CountlyHelpers,
    countlyGlobal,
    countlyCommon,
    jQuery,
    countlySources,
    $,
 */
(function() {
    var stores;
    $.ajax({
        type: "GET",
        url: countlyCommon.API_PARTS.data.r + "/sources",
        data: {"preventGlobalAbort": true},
        dataType: "json",
        success: function(json) {
            stores = json;
        }
    });

    /**
	 * get source readable name
	 * @param {string} code source code
     * @param {string} data not use yet
     * @param {boolean} separate include sperator or not, default to false
	 * @return {string} - source name
	 */
    function getSourceName(code, data, separate) {
        code = countlyCommon.decode(code + "");
        if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === "mobile") {
            //ignore incorrect Android values, which are numbers
            if (!isNaN(parseFloat(code)) && isFinite(code)) {
                return jQuery.i18n.map["common.unknown"];
            }
            if (separate) {
                return code;
            }
            if (stores && stores[code]) {
                return stores[code];
            }
            else {
                for (var i in stores) {
                    if (code.indexOf(i) === 0) {
                        return stores[i];
                    }
                }
                return code;
            }
        }
        else {
            if (code.indexOf("://") === -1 && code.indexOf(".") === -1) {
                if (separate) {
                    return code;
                }
                return jQuery.i18n.map["sources.direct"];
            }
            else if (separate) {
                return code;
            }
            code = code.replace("://www.", "://");
            /*eslint-disable */
            var matches = code.match(/^https?\:\/\/([^\/?#]+)(?:[\/?#]|$)/i);
            /*eslint-enable */
            var domain = matches && matches[1] || code;
            return domain.split("/")[0];
        }
    }

    window.countlySources = window.countlySources || {};
    window.countlySources.getSourceName = getSourceName;
    countlySources.initializeKeywords = function(isRefresh) {
        var self = this;
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r + "/keywords",
            data: {
                "api_key": countlyGlobal.member.api_key,
                "app_id": countlyCommon.ACTIVE_APP_ID,
                "period": countlyCommon.getPeriodForAjax(),
                "display_loader": !isRefresh
            },
            success: function(json) {
                self._keywords = json;
            }
        });
    };
    countlySources.getKeywords = function() {
        var data = JSON.parse(JSON.stringify(this._keywords));
        for (var i = 0; i < this._keywords.length; i++) {
            data[i]._id = countlyCommon.decode(data[i]._id.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '').toLowerCase());
        }
        return countlyCommon.mergeMetricsByName(data, "_id");
    };

    CountlyHelpers.createMetricModel(window.countlySources, {name: "sources", estOverrideMetric: "sources"}, jQuery, getSourceName);
}());;/*global 
    CountlyHelpers,
    countlyGlobal,
    countlyView,
    countlySources,
    countlyCommon,
    addDrill,
    jQuery,
    $,
    app,
    KeywordsView,
    SourcesView
 */
window.SourcesView = countlyView.extend({
    beforeRender: function() {
        this.dataMap = {};
        return $.when(countlySources.initialize(true)).then(function() {});
    },
    renderCommon: function(isRefresh) {
        this.updateDataMap();
        this.templateData = {
            "page-title": jQuery.i18n.map["sources.title"],
            "font-logo-class": "fa-crosshairs",
            "graph-type-double-pie": true,
            "pie-titles": {
                "left": jQuery.i18n.map["common.total-users"],
                "right": jQuery.i18n.map["common.new-users"]
            },
            "chart-helper": "sources.chart"
        };

        if (!isRefresh) {
            var data = countlySources.getData();
            $(this.el).html(this.template(this.templateData));
            if (typeof addDrill !== "undefined") {
                $(".widget-header .left .title").after(addDrill("up.src"));
            }
            this.dtable = $('.d-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": data.chartData,
                "fnRowCallback": function(nRow, aData) {
                    $(nRow).attr("id", aData.sources.replace(/\./g, '-').replace(/ /g, '_').replace(/[^\w]/g, ''));
                },
                "aoColumns": [
                    CountlyHelpers.expandRowIconColumn(),
                    {
                        "mData": "sources",
                        sType: "string",
                        "sTitle": jQuery.i18n.map["sources.source"],
                        "mRender": function(sourceData) {
                            return sourceData;
                        },
                        "sClass": "break source-40"
                    },
                    {
                        "mData": "t",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-sessions"],
                        "sClass": "source-20"
                    },
                    {
                        "mData": "u",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-users"],
                        "sClass": "source-20"
                    },
                    {
                        "mData": "n",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.new-users"],
                        "sClass": "source-20"
                    }
                ]
            }));

            this.dtable.stickyTableHeaders();
            this.dtable.fnSort([ [2, 'desc'] ]);
            this.dtable.addClass("source-table");
            countlyCommon.drawGraph(data.chartDPTotal, "#dashboard-graph", "pie");
            countlyCommon.drawGraph(data.chartDPNew, "#dashboard-graph2", "pie");

            CountlyHelpers.expandRows(this.dtable, this.expandTable, this);
        }
    },
    refresh: function() {},
    dateChanged: function() { //called when user changes the date selected
        var self = this;
        $.when(this.beforeRender()).then(function() {
            if (app.activeView !== self) {
                return false;
            }
            self.renderCommon(true);

            var newPage = $("<div>" + self.template(self.templateData) + "</div>");

            $(self.el).find(".dashboard-summary").replaceWith(newPage.find(".dashboard-summary"));

            var data = countlySources.getData();

            countlyCommon.drawGraph(data.chartDPTotal, "#dashboard-graph", "pie");
            countlyCommon.drawGraph(data.chartDPNew, "#dashboard-graph2", "pie");
            CountlyHelpers.refreshTable(self.dtable, data.chartData);
            CountlyHelpers.reopenRows(self.dtable, self.expandTable, self);
        });
    },
    expandTable: function(d, self) {
        // `d` is the original data object for the row
        var str = '';
        if (d && d.sources && self.dataMap[d.sources]) {
            str += '<div class="datatablesubrow">' +
				'<table cellpadding="5" cellspacing="0" border="0" class="subtable">';
            str += '<tr>';
            str += '<th class="source-40">' + jQuery.i18n.map["sources.source"] + '</th>';
            str += '<th class="source-20">' + jQuery.i18n.map["common.table.total-sessions"] + '</th>';
            str += '<th class="source-20">' + jQuery.i18n.map["common.table.total-users"] + '</th>';
            str += '<th class="source-20">' + jQuery.i18n.map["common.table.new-users"] + '</th>';
            str += '</tr>';
            for (var i in self.dataMap[d.sources]) {
                str += '<tr>';
                if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === "mobile" || self.dataMap[d.sources][i].sources.indexOf("://") === -1) {
                    str += '<td class="source-40">' + self.dataMap[d.sources][i].sources + '</td>';
                }
                else {
                    str += '<td class="source-40"><a href="' + self.dataMap[d.sources][i].sources + '" target="_blank">' + self.dataMap[d.sources][i].sources + '</a></td>';
                }
                str += '<td class="source-20">' + self.dataMap[d.sources][i].t + '</td>';
                str += '<td class="source-20">' + self.dataMap[d.sources][i].u + '</td>';
                str += '<td class="source-20">' + self.dataMap[d.sources][i].n + '</td>';
                str += '</tr>';
            }
            str += '</table>' +
			'</div>';
        }
        return str;
    },
    updateDataMap: function() {
        var cleanData = countlySources.getData(true).chartData;
        var source;
        for (var i in cleanData) {
            source = countlySources.getSourceName(cleanData[i].sources);
            if (!this.dataMap[source]) {
                this.dataMap[source] = {};
            }
            this.dataMap[source][cleanData[i].sources] = cleanData[i];
        }
    }
});

window.KeywordsView = countlyView.extend({
    beforeRender: function() {
        return $.when(countlySources.initializeKeywords()).then(function() {});
    },
    renderCommon: function(isRefresh) {
        this.templateData = {
            "page-title": jQuery.i18n.map["keywords.title"],
            "font-logo-class": "fa-crosshairs"
        };

        if (!isRefresh) {
            var data = countlySources.getKeywords();
            $(this.el).html(this.template(this.templateData));
            this.dtable = $('.d-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": data,
                "aoColumns": [
                    { "mData": "_id", sType: "string", "sTitle": jQuery.i18n.map["keywords.title"], "sClass": "break source-40" },
                    {
                        "mData": "t",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-sessions"],
                        "sClass": "source-20"
                    },
                    {
                        "mData": "u",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.total-users"],
                        "sClass": "source-20"
                    },
                    {
                        "mData": "n",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.table.new-users"],
                        "sClass": "source-20"
                    }
                ]
            }));

            this.dtable.stickyTableHeaders();
            this.dtable.fnSort([ [1, 'desc'] ]);
            $(".widget-content").hide();
            $("#dataTableOne_wrapper").css({"margin-top": "-16px"});
        }
    },
    refresh: function() {},
    dateChanged: function() { //called when user changes the date selected
        var self = this;
        $.when(this.beforeRender()).then(function() {
            if (app.activeView !== self) {
                return false;
            }
            self.renderCommon(true);

            var newPage = $("<div>" + self.template(self.templateData) + "</div>");

            $(self.el).find(".dashboard-summary").replaceWith(newPage.find(".dashboard-summary"));

            var data = countlySources.getKeywords();
            CountlyHelpers.refreshTable(self.dtable, data);
        });
    }
});

//register views
app.sourcesView = new SourcesView();
app.keywordsView = new KeywordsView();

app.route("/analytics/sources", 'sources', function() {
    this.renderWhenReady(this.sourcesView);
});

app.route("/analytics/keywords", 'keywords', function() {
    this.renderWhenReady(this.keywordsView);
});

$(document).ready(function() {
    var menu = '<a href="#/analytics/sources" class="item">' +
		'<div class="logo-icon fa fa-crosshairs"></div>' +
		'<div class="text" data-localize="sources.title"></div>' +
	'</a>';
    $('#web-type #analytics-submenu').append(menu);
    $('#mobile-type #analytics-submenu').append(menu);

    var menu2 = '<a href="#/analytics/keywords" class="item">' +
		'<div class="logo-icon fa fa-crosshairs"></div>' +
		'<div class="text" data-localize="keywords.title"></div>' +
	'</a>';
    $('#web-type #analytics-submenu').append(menu2);
});;/*global CountlyHelpers, countlyCommon, $, countlyGlobal, countlySession, jQuery*/

(function() {
    window.countlyViews = window.countlyViews || {};
    CountlyHelpers.createMetricModel(window.countlyViews, {name: "views"}, jQuery);
    var countlyViews = window.countlyViews;
    //Private Properties
    var _actionData = {},
        _activeAppKey = 0,
        _initialized = false,
        _segment = null,
        _segments = [],
        _domains = [],
        _name = "views",
        _period = null;

    //Public Methods
    countlyViews.initialize = function() {
        if (_initialized && _period === countlyCommon.getPeriodForAjax() && _activeAppKey === countlyCommon.ACTIVE_APP_KEY) {
            return this.refresh();
        }

        _period = countlyCommon.getPeriodForAjax();

        if (!countlyCommon.DEBUG) {
            _activeAppKey = countlyCommon.ACTIVE_APP_KEY;
            _initialized = true;

            return $.when(
                $.ajax({
                    type: "GET",
                    url: countlyCommon.API_PARTS.data.r,
                    data: {
                        "api_key": countlyGlobal.member.api_key,
                        "app_id": countlyCommon.ACTIVE_APP_ID,
                        "method": "get_view_segments",
                        "period": _period
                    },
                    dataType: "jsonp",
                    success: function(json) {
                        if (json && json.segments) {
                            for (var i = 0; i < json.segments.length; i++) {
                                json.segments[i] = countlyCommon.decode(json.segments[i]);
                            }
                            _segments = json.segments;
                            _domains = json.domains;
                        }
                    }
                }),
                $.ajax({
                    type: "GET",
                    url: countlyCommon.API_PARTS.data.r,
                    data: {
                        "api_key": countlyGlobal.member.api_key,
                        "app_id": countlyCommon.ACTIVE_APP_ID,
                        "method": _name,
                        "segmentation": _segment,
                        "period": _period
                    },
                    dataType: "jsonp",
                    success: function(json) {
                        countlyViews.setDb(json);
                    }
                })
            ).then(function() {
                return true;
            });
        }
        else {
            return true;
        }
    };

    countlyViews.refresh = function() {
        if (!countlyCommon.DEBUG) {

            if (_activeAppKey !== countlyCommon.ACTIVE_APP_KEY) {
                _activeAppKey = countlyCommon.ACTIVE_APP_KEY;
                return this.initialize();
            }

            if (!_initialized) {
                return this.initialize();
            }

            return $.when(
                $.ajax({
                    type: "GET",
                    url: countlyCommon.API_PARTS.data.r,
                    data: {
                        "api_key": countlyGlobal.member.api_key,
                        "app_id": countlyCommon.ACTIVE_APP_ID,
                        "method": "get_view_segments",
                        "period": _period,
                        "display_loader": false
                    },
                    dataType: "jsonp",
                    success: function(json) {
                        if (json && json.segments) {
                            for (var i = 0; i < json.segments.length; i++) {
                                json.segments[i] = countlyCommon.decode(json.segments[i]);
                            }
                            _segments = json.segments;
                            _domains = json.domains;
                        }
                    }
                }),
                $.ajax({
                    type: "GET",
                    url: countlyCommon.API_PARTS.data.r,
                    data: {
                        "api_key": countlyGlobal.member.api_key,
                        "app_id": countlyCommon.ACTIVE_APP_ID,
                        "method": _name,
                        "segmentation": _segment,
                        "action": "refresh"
                    },
                    dataType: "jsonp",
                    success: function(json) {
                        countlyViews.extendDb(json);
                    }
                })
            ).then(function() {
                return true;
            });
        }
        else {
            return true;
        }
    };

    countlyViews._reset = countlyViews.reset;
    countlyViews.reset = function() {
        _actionData = {};
        _segment = null;
        _initialized = false;
        _segments = [];
        _domains = [];
        countlyViews._reset();
    };

    countlyViews.setSegment = function(segment) {
        _segment = countlyCommon.decode(segment);
    };

    countlyViews.getSegments = function() {
        return _segments;
    };

    countlyViews.getDomains = function() {
        return _domains;
    };

    countlyViews.loadActionsData = function(view) {
        _period = countlyCommon.getPeriodForAjax();

        return $.when(
            $.ajax({
                type: "GET",
                url: countlyCommon.API_PARTS.data.r,
                data: {
                    "api_key": countlyGlobal.member.api_key,
                    "app_id": countlyCommon.ACTIVE_APP_ID,
                    "method": "get_view_segments",
                    "period": _period
                },
                dataType: "jsonp",
                success: function(json) {
                    if (json && json.segments) {
                        for (var i = 0; i < json.segments.length; i++) {
                            json.segments[i] = countlyCommon.decode(json.segments[i]);
                        }
                        _segments = json.segments;
                    }
                }
            }),
            $.ajax({
                type: "GET",
                url: countlyCommon.API_PARTS.data.r + "/actions",
                data: {
                    "api_key": countlyGlobal.member.api_key,
                    "app_id": countlyCommon.ACTIVE_APP_ID,
                    "view": view,
                    "segment": _segment,
                    "period": _period
                },
                dataType: "json",
                success: function(json) {
                    _actionData = json;
                }
            })
        ).then(function() {
            return true;
        });
    };

    countlyViews.testUrl = function(url, callback) {
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r + "/urltest",
            data: {
                "url": url
            },
            dataType: "json",
            success: function(json) {
                if (callback) {
                    callback(json.result);
                }
            }
        });
    };

    countlyViews.getActionsData = function() {
        return _actionData;
    };

    countlyViews.getChartData = function(path, metric, name) {
        var chartData = [
                { data: [], label: name, color: '#DDDDDD', mode: "ghost" },
                { data: [], label: name, color: '#333933' }
            ],
            dataProps = [
                {
                    name: "p" + metric,
                    func: function(dataObj) {
                        return dataObj[metric];
                    },
                    period: "previous"
                },
                { name: metric}
            ];

        return countlyCommon.extractChartData(countlyViews.getDb(), countlyViews.clearObject, chartData, dataProps, countlyCommon.encode(path));
    };

    countlyViews.getData = function() {

        var chartData = countlyCommon.extractTwoLevelData(countlyViews.getDb(), countlyViews.getMeta(), countlyViews.clearObject, [
            {
                name: _name,
                func: function(rangeArr) {
                    return countlyCommon.decode(rangeArr);
                }
            },
            { "name": "u" },
            { "name": "t" },
            { "name": "s" },
            { "name": "b" },
            { "name": "e" },
            { "name": "d" },
            { "name": "n" }
        ]);

        chartData.chartData = countlyCommon.mergeMetricsByName(chartData.chartData, _name);

        return chartData;
    };

    countlyViews.setWidgetData = function(data) {
        countlyViews.setDb(data);
    };

    countlyViews.clearObject = function(obj) {
        if (obj) {
            if (!obj.u) {
                obj.u = 0;
            }
            if (!obj.t) {
                obj.t = 0;
            }
            if (!obj.n) {
                obj.n = 0;
            }
            if (!obj.s) {
                obj.s = 0;
            }
            if (!obj.e) {
                obj.e = 0;
            }
            if (!obj.b) {
                obj.b = 0;
            }
            if (!obj.d) {
                obj.d = 0;
            }
        }
        else {
            obj = {"u": 0, "t": 0, "n": 0, "s": 0, "e": 0, "b": 0, "d": 0};
        }
        return obj;
    };

    countlyViews.getViewFrequencyData = function() {
        var _Db = countlyViews.getDb();
        countlyViews.setDb(countlySession.getDb());
        var data = countlyViews.getRangeData("vc", "v-ranges", countlyViews.explainFrequencyRange, getRange());
        countlyViews.setDb(_Db);
        return data;
    };

    var getRange = function() {
        var visits = jQuery.i18n.map["views.visits"].toLowerCase();
        return [
            "1 - 2 " + visits,
            "3 - 5 " + visits,
            "6 - 10 " + visits,
            "11 - 15 " + visits,
            "16 - 30 " + visits,
            "31 - 50 " + visits,
            "51 - 100 " + visits,
            "> 100 " + visits
        ];
    };

    countlyViews.explainFrequencyRange = function(index) {
        return getRange()[index];
    };

    countlyViews.getFrequencyIndex = function(value) {
        return getRange().indexOf(value);
    };

})();;'use strict';

if (typeof module !== 'undefined') {
    module.exports = simpleheat;
}
/**
 * Function to create heatmap instance
 * @param  {string} canvas - canvas DOM identifier
 * @returns {instance} simpleheat - Returns heatmap instance
 */
function simpleheat(canvas) {
    if (!(this instanceof simpleheat)) {
        return new simpleheat(canvas);
    }

    this._canvas = canvas = typeof canvas === 'string' ? document.getElementById(canvas) : canvas;

    this._ctx = canvas.getContext('2d');
    this._width = canvas.width;
    this._height = canvas.height;

    this._max = 1;
    this._data = [];
}

simpleheat.prototype = {

    defaultRadius: 25,

    defaultGradient: {
        0.4: 'blue',
        0.6: 'cyan',
        0.7: 'lime',
        0.8: 'yellow',
        1.0: 'red'
    },

    data: function(data) {
        this._data = data;
        return this;
    },

    max: function(max) {
        this._max = max;
        return this;
    },

    viewPortSize: function(data) {
        this._viewPortHeight = data.height;
    },

    add: function(point) {
        this._data.push(point);
        return this;
    },

    clear: function() {
        this._data = [];
        return this;
    },

    radius: function(r, blur) {
        blur = blur === undefined ? 15 : blur;

        // create a grayscale blurred circle image that we'll use for drawing points
        var circle = this._circle = document.createElement('canvas'),
            ctx = circle.getContext('2d'),
            r2 = this._r = r + blur;

        circle.width = circle.height = r2 * 2;

        ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;
        ctx.shadowBlur = blur;
        ctx.shadowColor = 'black';

        ctx.beginPath();
        ctx.arc(-r2, -r2, r, 0, Math.PI * 2, true);
        ctx.closePath();
        ctx.fill();

        return this;
    },

    resize: function() {
        this._width = this._canvas.width;
        this._height = this._canvas.height;
    },

    gradient: function(grad) {
        // create a 256x1 gradient that we'll use to turn a grayscale heatmap into a colored one
        var canvas = document.createElement('canvas'),
            ctx = canvas.getContext('2d'),
            gradient = ctx.createLinearGradient(0, 0, 0, 256);

        canvas.width = 1;
        canvas.height = 256;

        for (var i in grad) {
            gradient.addColorStop(i, grad[i]);
        }

        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, 1, 256);

        this._grad = ctx.getImageData(0, 0, 1, 256).data;

        return this;
    },

    draw: function(minOpacity) {
        if (!this._circle) {
            this.radius(this.defaultRadius);
        }

        if (!this._grad) {
            this.gradient(this.defaultGradient);
        }

        var ctx = this._ctx;

        ctx.clearRect(0, 0, this._width, this._height);

        // draw a grayscale heatmap by putting a blurred circle at each data point
        for (var i = 0, len = this._data.length, p; i < len; i++) {
            p = this._data[i];
            ctx.globalAlpha = Math.max(p[2] / this._max, minOpacity === undefined ? 0.05 : minOpacity);
            ctx.drawImage(this._circle, p[0] - this._r, p[1] - this._r);
        }

        // colorize the heatmap, using opacity value of each pixel to get the right color from our gradient
        var colored = ctx.getImageData(0, 0, this._width, this._height);
        this._colorize(colored.data, this._grad);
        ctx.putImageData(colored, 0, 0);

        return this;
    },

    _colorize: function(pixels, gradient) {
        for (var i = 0, len = pixels.length, j; i < len; i += 4) {
            j = pixels[i + 3] * 4; // get gradient color from opacity value

            if (j) {
                pixels[i] = gradient[j];
                pixels[i + 1] = gradient[j + 1];
                pixels[i + 2] = gradient[j + 2];
            }
        }
    },

    _colorStops: [
        {
            "stop": 100,
            "range": [100, 90],
            "color": "rgba(253, 36, 5, 0.7)"
        },
        {
            "stop": 90,
            "range": [90, 80],
            "color": "rgba(255, 212, 32, 0.7) "
        },
        {
            "stop": 80,
            "range": [80, 70],
            "color": "rgba(217, 253, 40, 0.7)"
        },
        {
            "stop": 70,
            "range": [70, 60],
            "color": "rgba(71, 254, 41, 0.7)"
        },
        {
            "stop": 60,
            "range": [60, 50],
            "color": "rgba(0, 255, 130, 0.7)"
        },
        {
            "stop": 50,
            "range": [50, 40],
            "color": "rgba(0, 255, 205, 0.7)"
        },
        {
            "stop": 40,
            "range": [40, 30],
            "color": "rgba(1, 169, 251, 0.7)"
        },
        {
            "stop": 30,
            "range": [30, 20],
            "color": "rgba(0, 41, 229, 0.7)"
        },
        {
            "stop": 20,
            "range": [20, 10],
            "color": "rgba(40, 40, 89, 0.7)"
        },
        {
            "stop": 10,
            "range": [10, 0],
            "color": "rgba(50, 49, 58, 0.7)"
        }
    ],

    highest: function(data) {
        this._highest = data;
        return this;
    },

    setPosition: function() {

        this._colorStops.forEach(function(obj) {
            delete obj.y;
            delete obj.position;
            delete obj.zeroY;
            delete obj.hundredY;
            delete obj.percentage;
        });

        var addedColorStop = [];
        if (this._data[0] === 0) {
            //NO ONE SAW THE WEBSITE YET   
            this._colorStops[this._colorStops.length - 1].position = 0;
            this._colorStops[this._colorStops.length - 1].zeroY = 0;
            this._colorStops[this._colorStops.length - 1].percentage = 0;
            var originalColor = this._colorStops[this._colorStops.length - 1].color;
            this._colorStops[this._colorStops.length - 1].color = "rgba(255, 255, 255, 0.7)";
            this._colorStops[this._colorStops.length - 1].originalColor = originalColor;
        }
        else if (this._data[0] === this._data[this._data.length - 1]) {

            //EVERYONE SCROLLED TILL BOTTOM
            this._colorStops[0].position = 0;
            this._colorStops[0].hundredY = this._height;
            this._colorStops[0].percentage = 100;

        }
        else {
            var j = 0;
            for (var i = 0; i < this._colorStops.length; i++) {
                var range = this._colorStops[i].range;
                var lastColorStop = undefined;
                if (addedColorStop.length) {
                    lastColorStop = addedColorStop[addedColorStop.length - 1];
                }

                while (j < this._data.length) {
                    //NOT CONSIDERING 0 AND 100 PERCENTAGE IN THIS LOOP 
                    if (this._data[j] === 100 && this._data[j + 1] !== 100) {
                        //FINDING THE Y-OFFSET FOR 100%
                        this._colorStops[0].hundredY = j;
                    }

                    if (this._data[j] === 0 && this._data[j - 1] !== 0) {
                        //FINDING THE Y-OFFSET FOR 0%
                        this._colorStops[this._colorStops.length - 1].zeroY = j;
                    }

                    if (this._data[j] > range[0] || this._data[j] === this._data[j + 1] || this._data[j] === 100) {
                        j++;
                    }
                    else if (this._data[j] <= range[0] && this._data[j] > range[1]) {
                        var position = parseFloat((j / this._height).toFixed(2));
                        if (!lastColorStop || (Math.abs(position - lastColorStop.position) > 0.1)) {
                            this._colorStops[i].position = position;
                            this._colorStops[i].y = j;
                            this._colorStops[i].percentage = this._data[j];
                            addedColorStop.push(this._colorStops[i]);
                            break;
                        }
                        else {
                            j++;
                        }
                    }
                    else {
                        break;
                    }
                }
            }

            while (j < this._data.length) {
                j++;
                if (this._data[j] === 0) {
                    //FINDING THE Y-OFFSET FOR 0%
                    this._colorStops[this._colorStops.length - 1].zeroY = j;
                    break;
                }
            }

            this._colorStops[0].position = 0;
            this._colorStops[this._colorStops.length - 1].position = 1;
        }
    },

    drawgradiant: function() {
        var ctx = this._ctx;

        var grd = ctx.createLinearGradient(0, 0, 0, this._height);

        this.setPosition();

        for (var i = 0; i < this._colorStops.length; i++) {
            if (this._colorStops[i].position >= 0) {
                grd.addColorStop(this._colorStops[i].position, this._colorStops[i].color);
            }
        }
        ctx.fillStyle = grd;
        ctx.fillRect(0, 0, this._width, this._height);
    },

    addMarkers: function() {
        var ctx = this._ctx;

        var markers = [];
        var self = this;

        var totalViews = this._max;
        var highestViews = this._highest;
        var averageViews = totalViews / this._data.length;
        var averageViewsPercentage = parseInt((averageViews / highestViews) * 100);

        this._colorStops.forEach(function(stop) {
            var markerObj = undefined;
            var averageObj = undefined;

            if (stop.hundredY >= 0) {
                //MARKER FOR 100 PERCENTAGE
                markerObj = {
                    percentage: 100,
                    y: stop.hundredY
                };
                markers.push(markerObj);
            }

            //ONLY THOSE MARKERS WILL BE CONSIDERED THAT HAS A PERCENTAGE AND A Y-OFFSET
            if (stop.y >= 0 && stop.percentage >= 0) {
                markerObj = {
                    percentage: stop.percentage,
                    y: stop.y
                };
            }

            if (averageViewsPercentage <= stop.range[0] && averageViewsPercentage > stop.range[1]) {
                //NO AVERAGE OBJECT FOR 0 PERCENTAGE
                averageObj = {
                    percentage: averageViewsPercentage,
                    isAverage: true
                };
            }

            if (markerObj && averageObj) {
                if (markerObj.percentage >= averageObj.percentage) {
                    markers.push(markerObj);
                    markers.push(averageObj);
                }
                else {
                    markers.push(averageObj);
                    markers.push(markerObj);
                }
            }
            else if (markerObj) {
                markers.push(markerObj);
            }
            else if (averageObj) {
                markers.push(averageObj);
            }

            if (stop.zeroY >= 0) {
                //MARKER FOR ZERO PERCENTAGE
                markerObj = {
                    percentage: 0,
                    y: stop.zeroY
                };
                markers.push(markerObj);
            }
        });

        var allowedMarkers = [];
        var allowedByLastMarker = true;

        for (var i = 0; i < markers.length; i++) {
            var isAverageAllowed = markers[i].percentage !== 0 && markers[i].percentage !== 100;
            if (markers[i].isAverage && isAverageAllowed) {
                //CALCULATE THE Y-OFFSET FOR THE AVERAGE MARKER
                var previousMarker = markers[i - 1] || {};
                var nextMarker = markers[i + 1] || {};
                var yPR = parseFloat((Math.abs((previousMarker.percentage || 100) - markers[i].percentage) / Math.abs(markers[i].percentage - (nextMarker.percentage || 0))).toFixed(2));
                markers[i].y = parseInt(((previousMarker.y || 0) + (yPR * (nextMarker.y || this._height))) / (yPR + 1));
            }

            if (allowedMarkers.length) {
                var lastMarkerAdded = allowedMarkers[allowedMarkers.length - 1];
                allowedByLastMarker = Math.abs(markers[i].y - lastMarkerAdded.y) > (markers[i].percentage === 0 ? 100 : 50);
            }

            if ((markers[i].isAverage && isAverageAllowed) || (markers[i].percentage === 0)) {
                if (allowedByLastMarker) {
                    allowedMarkers.push(markers[i]);
                }
                else {
                    allowedMarkers.pop();
                    allowedMarkers.push(markers[i]);
                }
            }
            else if (allowedByLastMarker) {
                allowedMarkers.push(markers[i]);
            }
        }

        allowedMarkers.forEach(function(marker) {
            var cornerRadius = 5;
            var rectX = 20;
            var rectWidth = 217;
            var rectHeight = 30;
            var boxYOffset = 15;
            var textYOffset = 0;
            var textXOffset = 19;

            if (marker.isAverage) {
                rectWidth = 111;
            }

            ctx.lineWidth = 1;
            if (marker.y < boxYOffset) {
                //100% MARKER
                boxYOffset = 0;
                textYOffset = 15;
            }
            else if (marker.y > self._height - boxYOffset) {
                //0% MARKER
                boxYOffset = 30;
                textYOffset = -15;
            }

            if (marker.percentage === 0) {
                if (marker.y === 0) {
                    rectWidth = 400;
                    rectHeight = 100;
                    boxYOffset = -100;
                    rectX = self._width / 2 - rectWidth / 2;
                    textXOffset = rectX;
                    textYOffset = Math.abs(boxYOffset) + rectHeight / 2;
                }
                else {
                    rectWidth = 232;
                }
            }

            var rectY = marker.y - boxYOffset;

            ctx.beginPath();
            ctx.moveTo(0, marker.y);
            ctx.lineTo(self._width, marker.y);
            ctx.shadowBlur = 0;
            ctx.lineJoin = "meter";
            ctx.strokeStyle = "#313131";

            if (!(marker.y === 0 && marker.percentage === 0)) {
                ctx.stroke();
            }

            ctx.fillStyle = "#313131";
            ctx.lineJoin = "round";
            ctx.lineWidth = cornerRadius;
            ctx.shadowBlur = 2;
            ctx.shadowColor = "rgba(0,0,0,0.11)";
            ctx.strokeStyle = "#313131";
            ctx.strokeRect(rectX + (cornerRadius / 2), rectY + (cornerRadius / 2), rectWidth - cornerRadius, rectHeight - cornerRadius);
            ctx.fillRect(rectX + (cornerRadius / 2), rectY + (cornerRadius / 2), rectWidth - cornerRadius, rectHeight - cornerRadius);

            ctx.font = "13px Ubuntu";
            ctx.fillStyle = "#fff";
            ctx.textAlign = 'center';
            ctx.textBaseline = "middle";
            if (marker.isAverage) {
                ctx.fillText("AVERAGE FOLD", textXOffset + rectWidth / 2, marker.y + textYOffset);
            }
            else {
                var text = marker.percentage + " % of visitors reached this point";

                if (marker.percentage === 0) {
                    if (marker.y === 0) {
                        text = "We don’t have any scrollmap data for this page yet";
                    }
                    else {
                        text = "No scrollmap data beyond this point";
                    }
                }
                ctx.fillText(text, textXOffset + rectWidth / 2, marker.y + textYOffset);
            }
        });

        if (this._colorStops[this._colorStops.length - 1].originalColor) {
            this._colorStops[this._colorStops.length - 1].color = this._colorStops[this._colorStops.length - 1].originalColor;
        }
        delete this._colorStops[this._colorStops.length - 1].originalColor;
    }
};;/*global CountlyHelpers, countlyView, _, simpleheat, production, countlySegmentation, ViewsView, ViewFrequencyView, ActionMapView, countlyCommon, countlyTokenManager, addDrill, countlyGlobal, countlySession, countlyViews, Handlebars, app, $, jQuery*/

window.ViewsView = countlyView.extend({
    selectedMetric: "u",
    selectedView: null,
    selectedViews: [],
    selectedApps: {all: true},
    selectedCount: 0,
    ids: {},
    lastId: 0,
    token: false,
    useView: null,
    beforeRender: function() {
        var self = this;
        return $.when($.get(countlyGlobal.path + '/views/templates/views.html', function(src) {
            self.template = Handlebars.compile(src);
        }), countlyViews.initialize()).then(function() {});
    },
    getProperties: function() {
        return {
            "u": jQuery.i18n.map["common.table.total-users"],
            "n": jQuery.i18n.map["common.table.new-users"],
            "t": jQuery.i18n.map["views.total-visits"],
            "d": jQuery.i18n.map["views.duration"],
            "s": jQuery.i18n.map["views.starts"],
            "e": jQuery.i18n.map["views.exits"],
            "b": jQuery.i18n.map["views.bounces"]
        };
    },
    renderCommon: function(isRefresh) {
        var self = this;
        var data = countlyViews.getData();
        var props = this.getProperties();
        var usage = [];
        var i;

        for (i in props) {
            usage.push({
                "title": props[i],
                "id": "view-metric-" + i
            });
        }

        var domains = countlyViews.getDomains();
        for (i = 0; i < domains.length; i++) {
            domains[i] = countlyCommon.decode(domains[i]);
        }

        this.templateData = {
            "page-title": jQuery.i18n.map["views.title"],
            "font-logo-class": "fa-eye",
            "active-segmentation": jQuery.i18n.map["views.all-segments"],
            "segmentations": countlyViews.getSegments(),
            "usage": usage,
            "domains": domains
        };

        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));

            var columns = [
                {
                    "mData": function(row, type) {
                        if (type === "display") {
                            return row.views + "<div class='color'></div>";
                        }
                        else {
                            return row.views;
                        }
                    },
                    sType: "string",
                    "sTitle": jQuery.i18n.map["views.table.view"],
                    "sClass": "break",
                    "sWidth": "30%"
                },
                {
                    "mData": "u",
                    sType: "formatted-num",
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    },
                    "sTitle": jQuery.i18n.map["common.table.total-users"]
                },
                {
                    "mData": "n",
                    sType: "formatted-num",
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    },
                    "sTitle": jQuery.i18n.map["common.table.new-users"]
                },
                {
                    "mData": "t",
                    sType: "formatted-num",
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    },
                    "sTitle": jQuery.i18n.map["views.total-visits"]
                },
                {
                    "mData": function(row, type) {
                        var time = (row.d === 0 || row.t === 0) ? 0 : row.d / row.t;
                        if (type === "display") {
                            return countlyCommon.timeString(time / 60);
                        }
                        else {
                            return time;
                        }
                    },
                    sType: "numeric",
                    "sTitle": jQuery.i18n.map["views.avg-duration"]
                },
                {
                    "mData": "s",
                    sType: "formatted-num",
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    },
                    "sTitle": jQuery.i18n.map["views.starts"]
                },
                {
                    "mData": "e",
                    sType: "formatted-num",
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    },
                    "sTitle": jQuery.i18n.map["views.exits"]
                },
                {
                    "mData": "b",
                    sType: "formatted-num",
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    },
                    "sTitle": jQuery.i18n.map["views.bounces"]
                }
            ];

            if (typeof addDrill !== "undefined") {
                $(".widget-header .left .title").after(addDrill("sg.name", null, "[CLY]_view"));
                if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === "web" && domains.length) {
                    columns.push({
                        "mData": function(row) {
                            var url = "#/analytics/views/action-map/";
                            if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].app_domain && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].app_domain.length > 0) {
                                url = countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].app_domain;
                                if (url.indexOf("http") !== 0) {
                                    url = "http://" + url;
                                }
                                if (url.substr(url.length - 1) === '/') {
                                    url = url.substr(0, url.length - 1);
                                }
                            }

                            return '<a href=' + url + row.views + ' class="table-link green" data-localize="views.table.view" style="margin:0px; padding:2px;">' + jQuery.i18n.map["views.table.view"] + '</a>';
                        },
                        sType: "string",
                        "sTitle": jQuery.i18n.map["views.action-map"],
                        "sClass": "shrink center",
                        bSortable: false
                    });
                }
            }

            this.dtable = $('.d-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": data.chartData,
                "fnRowCallback": function(nRow, aData) {
                    if (!self.selectedView) {
                        self.selectedView = aData.views;
                        self.selectedViews.push(self.selectedView);
                    }

                    if (!self.ids[aData.views]) {
                        self.ids[aData.views] = "view_" + self.lastId;
                        self.lastId++;
                    }
                    $(nRow).attr("id", self.ids[aData.views]);
                },
                "aoColumns": columns
            }));

            $(".d-table").stickyTableHeaders();
            this.dtable.fnSort([ [1, 'desc'] ]);
            $(".dataTable-bottom").append("<div class='dataTables_info' style='float: right;'>" + jQuery.i18n.map["views.maximum-items"] + " (" + countlyCommon.GRAPH_COLORS.length + ")</div>");

            $('.views-table tbody').on("click", "tr", function() {
                var row = $(this);

                self.selectedView = row.find("td").first().text();

                var persistentSettings = countlyCommon.getPersistentSettings()["pageViewsItems_" + countlyCommon.ACTIVE_APP_ID] || [];

                if (_.contains(self.selectedViews, self.selectedView)) {
                    var index = self.selectedViews.indexOf(self.selectedView);
                    self.selectedViews.splice(index, 1);
                    persistentSettings.splice(persistentSettings.indexOf(self.selectedView), 1);
                    row.find(".color").css("background-color", "transparent");
                }
                else if (self.selectedViews.length < countlyCommon.GRAPH_COLORS.length) {
                    self.selectedViews.push(self.selectedView);
                    persistentSettings.push(self.selectedView);
                }

                var persistData = {};
                persistData["pageViewsItems_" + countlyCommon.ACTIVE_APP_ID] = persistentSettings;
                countlyCommon.setPersistentSettings(persistData);

                if (self.selectedViews.length === 0) {
                    $("#empty-graph").show();
                }
                else {
                    $("#empty-graph").hide();
                }
                self.drawGraph();
            });

            $('.views-table tbody').on("click", "a.table-link", function(event) {
                event.stopPropagation();
                var followLink = false;
                var url = event.target.href;

                if (url.indexOf("#/analytics/views/action-map/") < 0) {
                    followLink = true;
                }

                if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].sdk_version && parseInt((countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].sdk_version + "").split(".")[0]) <= 16) {
                    return;
                }
                $(event.target).toggleClass("active");
                if ($(event.target).hasClass("active")) {
                    $(".views-table a.table-link").removeClass("active");
                    $(event.target).addClass("active");

                    if (!followLink) {
                        var pos = $(event.target).offset();
                        $('.widget-content .cly-button-menu').css({
                            top: (pos.top + 25) + "px",
                            left: (pos.left - 250) + "px",
                            right: 35 + "px"
                        });
                        $('.widget-content > .cly-button-menu-trigger').addClass("active");
                        $('.widget-content > .cly-button-menu').focus();
                    }

                    var newWindow = "";
                    if (followLink) {
                        newWindow = window.open("");
                    }


                    countlyTokenManager.createToken("View heatmap", "/o/actions", false, countlyCommon.ACTIVE_APP_ID, 1800, function(err, token) {
                        self.useView = event.target.hash;
                        self.token = token && token.result;

                        if (followLink && self.token) {
                            newWindow.location.href = url;
                            newWindow.name = "cly:" + JSON.stringify({"token": self.token, "purpose": "heatmap", period: countlyCommon.getPeriodForAjax(), showHeatMap: true});
                        }
                    });
                }
                else {
                    $(event.target).removeClass("active");
                    $('.widget-content > .cly-button-menu-trigger').removeClass("active");
                }
                event.preventDefault();
            });

            $('.widget-content .cly-button-menu .item').click(function(event) {
                var url = $(event.target).text();
                if (url.indexOf("http") !== 0) {
                    url = "http://" + url;
                }
                if (url.substr(url.length - 1) === '/') {
                    url = url.substr(0, url.length - 1);
                }
                if (self.token !== false) {
                    var path = self.useView.replace("#/analytics/views/action-map/", "");
                    window.open(url + path, "cly:" + JSON.stringify({"token": self.token, "purpose": "heatmap", period: countlyCommon.getPeriodForAjax(), showHeatMap: true}));
                }
                $('.widget-content > .cly-button-menu-trigger').removeClass("active");
            });

            $('.widget-content .cly-button-menu').blur(function() {
                $('.widget-content > .cly-button-menu-trigger').removeClass("active");
            });

            $("#view-metric-" + this.selectedMetric).parents(".big-numbers").addClass("active");

            $(".widget-content .inner").click(function() {
                $(".big-numbers").removeClass("active");
                $(".big-numbers .select").removeClass("selected");
                $(this).parent(".big-numbers").addClass("active");
                $(this).find('.select').addClass("selected");
            });

            $(".segmentation-option").on("click", function() {
                countlyViews.reset();
                countlyViews.setSegment($(this).data("value"));
                self.refresh();
            });

            $(".big-numbers .inner").click(function() {
                var elID = $(this).find('.select').attr("id").replace("view-metric-", "");

                if (self.selectedMetric === elID) {
                    return true;
                }

                self.selectedMetric = elID;
                self.drawGraph();
            });

            var persistentSettings = countlyCommon.getPersistentSettings()['pageViewsItems_' + countlyCommon.ACTIVE_APP_ID] || [];
            if (persistentSettings.length === 0) {
                for (i in self.selectedViews) {
                    persistentSettings.push(self.selectedViews[i]);
                }

                var persistData = {};
                persistData["pageViewsItems_" + countlyCommon.ACTIVE_APP_ID] = persistentSettings;
                countlyCommon.setPersistentSettings(persistData);
            }
            else {
                self.selectedViews = [];

                for (i in persistentSettings) {
                    var current = persistentSettings[i];

                    if (self.selectedViews.indexOf(current) < 0) {
                        self.selectedViews.push(current);
                    }
                }
            }

            $("#view-metric-" + this.selectedMetric).parents(".big-numbers").addClass("active");

            this.drawGraph();
        }
    },
    drawGraph: function() {
        var props = this.getProperties();
        var dp = [];
        for (var i = 0; i < this.selectedViews.length; i++) {
            var color = countlyCommon.GRAPH_COLORS[i];
            var data = countlyViews.getChartData(this.selectedViews[i], this.selectedMetric, props[this.selectedMetric]).chartDP;
            data[1].color = color;
            $("#" + this.ids[this.selectedViews[i]] + " .color").css("background-color", color);
            if (this.selectedViews.length === 1) {
                var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
                data[0].color = "rgba(" + parseInt(result[1], 16) + "," + parseInt(result[2], 16) + "," + parseInt(result[3], 16) + ",0.5" + ")";
                dp.push(data[0]);
            }
            dp.push(data[1]);
        }
        countlyCommon.drawTimeGraph(dp, "#dashboard-graph");
    },
    refresh: function() {
        var self = this;
        $.when(countlyViews.refresh()).then(function() {
            if (app.activeView !== self) {
                return false;
            }
            self.renderCommon(true);

            var newPage = $("<div>" + self.template(self.templateData) + "</div>");

            $(self.el).find(".dashboard-summary").replaceWith(newPage.find(".dashboard-summary"));

            var data = countlyViews.getData();
            CountlyHelpers.refreshTable(self.dtable, data.chartData);
            self.drawGraph();
        });
    }
});

window.ViewFrequencyView = countlyView.extend({
    beforeRender: function() {
        return $.when(countlySession.initialize()).then(function() {});
    },
    renderCommon: function(isRefresh) {
        var durationData = countlyViews.getViewFrequencyData();

        this.templateData = {
            "page-title": jQuery.i18n.map["views.view-frequency"],
            "font-logo-class": "fa-eye"
        };

        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));

            countlyCommon.drawGraph(durationData.chartDP, "#dashboard-graph", "bar");

            this.dtable = $('.d-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": durationData.chartData,
                "aoColumns": [
                    { "mData": "vc", sType: "view-frequency", "sTitle": jQuery.i18n.map["views.view-frequency"] },
                    {
                        "mData": "t",
                        sType: "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["common.number-of-sessions"]
                    },
                    { "mData": "percent", "sType": "percent", "sTitle": jQuery.i18n.map["common.percent"] }
                ]
            }));

            $(".d-table").stickyTableHeaders();

        }
    },
    refresh: function() {
        var self = this;
        $.when(countlySession.initialize()).then(function() {
            if (app.activeView !== self) {
                return false;
            }

            var durationData = countlyViews.getViewFrequencyData();
            countlyCommon.drawGraph(durationData.chartDP, "#dashboard-graph", "bar");
            CountlyHelpers.refreshTable(self.dtable, durationData.chartData);
        });
    }
});

window.ActionMapView = countlyView.extend({
    actionType: "",
    curSegment: 0,
    curRadius: 1,
    curBlur: 1,
    baseRadius: 1,
    baseBlur: 1.6,
    beforeRender: function() {
        var self = this;
        return $.when($.get(countlyGlobal.path + '/views/templates/actionmap.html', function(src) {
            self.template = Handlebars.compile(src);
        }), countlyViews.loadActionsData(this.view)).then(function() {});
    },
    getData: function(data) {
        var heat = [];
        var point;
        var width = $("#view-canvas-map").prop('width');
        var height = $("#view-canvas-map").prop('height');
        for (var i = 0; i < data.length; i++) {
            point = data[i].sg;
            if (point.type === this.actionType) {
                heat.push([parseInt((point.x / point.width) * width), parseInt((point.y / point.height) * height), data[i].c]);
            }
        }
        return heat;
    },
    getMaxHeight: function(data) {
        var width = $("#view-map").width();
        var lowest = {w: 0, h: 0};
        var highest = {w: 100000, h: 5000};
        var i;
        for (i = 0; i < data.length; i++) {
            if (width === data[i].sg.width) {
                return data[i].sg.height;
            }
            else if (width > data[i].sg.width && lowest.w < data[i].sg.width) {
                lowest.w = data[i].sg.width;
                lowest.h = data[i].sg.height;
            }
        }

        if (lowest.h > 0) {
            return lowest.h;
        }

        for (i = 0; i < data.length; i++) {
            if (width < data[i].sg.width && highest.w > data[i].sg.width) {
                highest.w = data[i].sg.width;
                highest.h = data[i].sg.height;
            }
        }

        return highest.h;
    },
    getResolutions: function() {
        var res = ["Normal", "Fullscreen", "320x480", "480x800"];
        return res;
    },
    resize: function() {
        $('#view-canvas-map').prop('width', $("#view-map").width());
        $('#view-canvas-map').prop('height', $("#view-map").height());
        if (this.map) {
            this.map.resize();
        }
    },
    loadIframe: function() {
        var self = this;
        var segments = countlyViews.getActionsData().domains;
        var url = "http://" + segments[self.curSegment] + self.view;
        if ($("#view_loaded_url").val().length === 0) {
            $("#view_loaded_url").val(url);
        }
        countlyViews.testUrl(url, function(result) {
            if (result) {
                $("#view-map iframe").attr("src", url);
                $("#view_loaded_url").val(url);
            }
            else {
                self.curSegment++;
                if (segments[self.curSegment]) {
                    self.loadIframe();
                }
                else {
                    $("#view_loaded_url").show();
                    CountlyHelpers.alert(jQuery.i18n.map["views.cannot-load"], "red");
                }
            }
        });
    },
    renderCommon: function(isRefresh) {
        var data = countlyViews.getActionsData();
        this.actionType = data.types[0] || jQuery.i18n.map["views.select-action-type"];
        var segments = countlyViews.getSegments();
        var self = this;
        this.templateData = {
            "page-title": jQuery.i18n.map["views.action-map"],
            "font-logo-class": "fa-eye",
            "first-type": this.actionType,
            "active-segmentation": jQuery.i18n.map["views.all-segments"],
            "segmentations": segments,
            "resolutions": this.getResolutions(),
            "data": data
        };

        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            $("#view-map").height(this.getMaxHeight(data.data));
            this.resize();
            this.loadIframe();
            this.map = simpleheat("view-canvas-map");
            this.map.data(this.getData(data.data));
            this.baseRadius = Math.max((48500 - 35 * data.data.length) / 900, 5);
            this.drawMap();

            app.localize();

            $("#view_reload_url").on("click", function() {
                $("#view-map iframe").attr("src", "/o/urlload?url=" + encodeURIComponent($("#view_loaded_url").val()));
            });

            $("#view_loaded_url").keyup(function(event) {
                if (event.keyCode === 13) {
                    $("#view_reload_url").click();
                }
            });

            $("#radius").on("change", function() {
                self.curRadius = parseInt($("#radius").val()) / 10;
                self.drawMap();
            });

            $("#blur").on("change", function() {
                self.curBlur = parseInt($("#blur").val()) / 10;
                self.drawMap();
            });

            $("#action-map-type .segmentation-option").on("click", function() {
                self.actionType = $(this).data("value");
                self.refresh();
            });

            $("#action-map-resolution .segmentation-option").on("click", function() {
                switch ($(this).data("value")) {
                case "Normal":
                    $("#view-map").width("100%");
                    $("#view-map").prependTo("#view-map-container");
                    break;
                case "Fullscreen":
                    $("#view-map").width("100%");
                    $("#view-map").prependTo(document.body);
                    break;
                default:
                    var parts = $(this).data("value").split("x");
                    $("#view-map").width(parts[0] + "px");
                    $("#view-map").prependTo("#view-map-container");
                }
                self.resize();
                self.refresh();
            });

            $("#view-segments .segmentation-option").on("click", function() {
                countlyViews.reset();
                countlyViews.setSegment($(this).data("value"));
                self.refresh();
            });
        }
    },
    drawMap: function() {
        this.map.radius(this.baseRadius * this.curRadius, this.baseRadius * this.baseBlur * this.curBlur);
        this.map.draw();
    },
    refresh: function() {
        var self = this;
        $.when(countlyViews.loadActionsData(this.view)).then(function() {
            if (app.activeView !== self) {
                return false;
            }
            self.renderCommon(true);
            var data = countlyViews.getActionsData();
            if (self.map) {
                self.map.clear();
                self.map.data(self.getData(data.data));
                self.baseRadius = Math.max((48500 - 35 * data.data.length) / 900, 5);
                self.drawMap();
            }
        });
    }
});
//register views
app.viewsView = new ViewsView();
app.viewFrequencyView = new ViewFrequencyView();
app.actionMapView = new ActionMapView();

app.route("/analytics/views", 'views', function() {
    this.renderWhenReady(this.viewsView);
});

app.route("/analytics/view-frequency", 'views', function() {
    this.renderWhenReady(this.viewFrequencyView);
});

app.route("/analytics/views/action-map/*view", 'views', function(view) {
    this.actionMapView.view = view;
    this.renderWhenReady(this.actionMapView);
});

app.addPageScript("/drill#", function() {
    var drillClone;
    var self = app.drillView;
    if (countlyGlobal.record_views) {
        $("#drill-types").append('<div id="drill-type-views" class="item">' + jQuery.i18n.map["views.title"] + '</div>');
        $("#drill-type-views").on("click", function() {
            if ($(this).hasClass("active")) {
                return true;
            }

            $("#drill-types").find(".item").removeClass("active");
            $(this).addClass("active");
            $("#event-selector").hide();

            $("#drill-no-event").fadeOut();
            $("#segmentation-start").fadeOut().remove();
            $(this).parents(".cly-select").removeClass("dark");

            $(".event-select.cly-select").find(".text").text(jQuery.i18n.map["drill.select-event"]);
            $(".event-select.cly-select").find(".text").data("value", "");

            var currEvent = "[CLY]_view";

            self.graphType = "line";
            self.graphVal = "times";
            self.filterObj = {};
            self.byVal = "";
            self.drillChartDP = {};
            self.drillChartData = {};
            self.activeSegmentForTable = "";
            countlySegmentation.reset();

            $("#drill-navigation").find(".menu[data-open=table-view]").hide();

            $.when(countlySegmentation.initialize(currEvent)).then(function() {
                $("#drill").replaceWith(drillClone.clone(true));
                self.adjustFilters();
                self.draw(true, false);
            });
        });
        setTimeout(function() {
            drillClone = $("#drill").clone(true);
        }, 0);
    }
});

app.addPageScript("/custom#", function() {
    addWidgetType();
    addSettingsSection();
    /**
     * Function to add widget
     */
    function addWidgetType() {
        var viewsWidget = '<div data-widget-type="views" class="opt cly-grid-5">' +
                            '    <div class="inner">' +
                            '        <span class="icon views"></span>' + jQuery.i18n.prop("views.widget-type") +
                            '    </div>' +
                            '</div>';

        $("#widget-drawer .details #widget-types .opts").append(viewsWidget);
    }

    /**
     * Function to add setting section
     */
    function addSettingsSection() {
        var setting = '<div id="widget-section-multi-views" class="settings section">' +
                        '    <div class="label">' + jQuery.i18n.prop("views.widget-type") + '</div>' +
                        '    <div id="multi-views-dropdown" class="cly-multi-select" data-max="2" style="width: 100%; box-sizing: border-box;">' +
                        '        <div class="select-inner">' +
                        '            <div class="text-container">' +
                        '                <div class="text">' +
                        '                    <div class="default-text">' + jQuery.i18n.prop("views.select") + '</div>' +
                        '                </div>' +
                        '            </div>' +
                        '            <div class="right combo"></div>' +
                        '        </div>' +
                        '        <div class="select-items square" style="width: 100%;"></div>' +
                        '    </div>' +
                        '</div>';

        $(setting).insertAfter(".cly-drawer .details .settings:last");
    }

    $("#multi-views-dropdown").on("cly-multi-select-change", function() {
        $("#widget-drawer").trigger("cly-widget-section-complete");
    });
});

$(document).ready(function() {
    if (!production) {
        CountlyHelpers.loadJS("views/javascripts/simpleheat.js");
    }
    jQuery.fn.dataTableExt.oSort['view-frequency-asc'] = function(x, y) {
        x = countlyViews.getFrequencyIndex(x);
        y = countlyViews.getFrequencyIndex(y);

        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    };

    jQuery.fn.dataTableExt.oSort['view-frequency-desc'] = function(x, y) {
        x = countlyViews.getFrequencyIndex(x);
        y = countlyViews.getFrequencyIndex(y);

        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
    };
    var menu = '<a href="#/analytics/views" class="item">' +
		'<div class="logo-icon fa fa-eye"></div>' +
		'<div class="text" data-localize="views.title"></div>' +
	'</a>';
    $('#web-type #analytics-submenu').append(menu);
    $('#mobile-type #analytics-submenu').append(menu);

    menu = '<a href="#/analytics/view-frequency" class="item">' +
		'<div class="logo-icon fa fa-eye"></div>' +
		'<div class="text" data-localize="views.view-frequency"></div>' +
	'</a>';
    $('#web-type #engagement-submenu').append(menu);
    $('#mobile-type #engagement-submenu').append(menu);

    //check if configuration view exists
    if (app.configurationsView) {
        app.configurationsView.registerLabel("views", "views.title");
        app.configurationsView.registerLabel("views.view_limit", "views.view-limit");
    }

    initializeViewsWidget();
});
/**
 * Function that initializes widget
 */
function initializeViewsWidget() {

    if (countlyGlobal.plugins.indexOf("dashboards") < 0) {
        return;
    }

    //TO REFRESH VIEWS DATA CHECK FETCH.JS IN API LINE NO: 926
    //SEGMENT THINGY REMAINING

    var viewsWidgetTemplate;
    var viewsMetric = [
        { name: "Total Visitors", value: "u" },
        { name: "New Visitors", value: "n" },
        { name: "Total Visits", value: "t" },
        { name: "Avg. Time", value: "d" },
        { name: "Landings", value: "s" },
        { name: "Exits", value: "e" },
        { name: "Bounces", value: "b" }
    ];
    /**
     * Function to return view name
     * @param  {String} view - View value
     * @returns {String} name - View name
     */
    function returnViewName(view) {
        var name = "Unknown";

        var viewName = viewsMetric.filter(function(obj) {
            return obj.value === view;
        });

        if (viewName.length) {
            name = viewName[0].name;
        }

        return name;
    }

    $.when(
        $.get(countlyGlobal.path + '/views/templates/widget.html', function(src) {
            viewsWidgetTemplate = Handlebars.compile(src);
        })
    ).then(function() {

        var widgetOptions = {
            init: initWidgetSections,
            settings: widgetSettings,
            placeholder: addPlaceholder,
            create: createWidgetView,
            reset: resetWidget,
            set: setWidget,
            refresh: refreshWidget
        };

        app.addWidgetCallbacks("views", widgetOptions);
    });
    /**
     * Function to init widget sections
     */
    function initWidgetSections() {
        var selWidgetType = $("#widget-types").find(".opt.selected").data("widget-type");

        if (selWidgetType !== "views") {
            return;
        }

        $("#widget-drawer .details #data-types").parent(".section").hide();
        $("#widget-section-single-app").show();
        $("#multi-views-dropdown").clyMultiSelectSetItems(viewsMetric);
        $("#widget-section-multi-views").show();
    }
    /**
     * Function to set widget settings
     * @returns {Object} Settings - Settings object
     */
    function widgetSettings() {
        var $singleAppDrop = $("#single-app-dropdown"),
            $multiViewsDrop = $("#multi-views-dropdown");

        var selectedApp = $singleAppDrop.clySelectGetSelection();
        var selectedViews = $multiViewsDrop.clyMultiSelectGetSelection();

        var settings = {
            apps: (selectedApp) ? [ selectedApp ] : [],
            views: selectedViews
        };

        return settings;
    }
    /**
     * Function to set placeholder values
     * @param  {Object} dimensions - dimensions object
     */
    function addPlaceholder(dimensions) {
        dimensions.min_height = 4;
        dimensions.min_width = 4;
        dimensions.width = 4;
        dimensions.height = 4;
    }
    /**
     * Function to create widget front end view
     * @param  {Object} widgetData - widget data object
     */
    function createWidgetView(widgetData) {
        var placeHolder = widgetData.placeholder;

        formatData(widgetData);
        render();
        /**
         * Function to render view
         */
        function render() {
            var title = widgetData.title,
                app = widgetData.apps,
                data = widgetData.formattedData;

            var appName = countlyGlobal.apps[app[0]].name,
                appId = app[0];

            var $widget = $(viewsWidgetTemplate({
                title: title,
                app: {
                    id: appId,
                    name: appName
                },
                "views": data.viewsValueNames,
                "views-data": data.viewsData,
            }));

            placeHolder.find("#loader").fadeOut();
            placeHolder.find(".cly-widget").html($widget.html());

            if (!title) {
                var widgetTitle = jQuery.i18n.prop("views.heading");
                placeHolder.find(".title").text(widgetTitle);
            }

            addTooltip(placeHolder);
        }
    }
    /**
     * Function to format widget data
     * @param  {Object} widgetData - Widget data object
     */
    function formatData(widgetData) {
        var data = widgetData.dashData.data,
            views = widgetData.views;

        var viewsValueNames = [];
        var i;

        for (i = 0; i < views.length; i++) {
            viewsValueNames.push({
                name: returnViewName(views[i]),
                value: views[i]
            });
        }

        data.chartData.splice(10);

        var viewsData = [];
        for (i = 0; i < data.chartData.length; i++) {
            viewsData.push({
                views: data.chartData[i].views,
                data: []
            });
            for (var j = 0; j < viewsValueNames.length; j++) {
                var fullName = viewsValueNames[j].name;
                var metricName = viewsValueNames[j].value;
                var value = data.chartData[i][metricName];
                if (metricName === "d") {
                    var totalVisits = data.chartData[i].t;
                    var time = (value === 0 || totalVisits === 0) ? 0 : value / totalVisits;
                    value = countlyCommon.timeString(time / 60);
                }
                viewsData[i].data.push({
                    value: value,
                    name: fullName
                });
            }
        }
        var returnData = {
            viewsData: viewsData,
            viewsValueNames: viewsValueNames
        };

        widgetData.formattedData = returnData;
    }
    /**
     * Function to reset widget
     */
    function resetWidget() {
        $("#multi-views-dropdown").clyMultiSelectClearSelection();
    }
    /**
     * Function to set widget data
     * @param  {Object} widgetData - Widget data object
     */
    function setWidget(widgetData) {
        var views = widgetData.views;
        var apps = widgetData.apps;
        var $multiViewsDrop = $("#multi-views-dropdown");
        var $singleAppDrop = $("#single-app-dropdown");

        $singleAppDrop.clySelectSetSelection(apps[0], countlyGlobal.apps[apps[0]].name);

        var viewsValueNames = [];
        for (var i = 0; i < views.length; i++) {
            viewsValueNames.push({
                name: returnViewName(views[i]),
                value: views[i]
            });
        }

        $multiViewsDrop.clyMultiSelectSetSelection(viewsValueNames);
    }
    /**
     * Function to refresh widget
     * @param  {Object} widgetEl - DOM element
     * @param  {Object} widgetData - Widget data object
     */
    function refreshWidget(widgetEl, widgetData) {
        formatData(widgetData);
        var data = widgetData.formattedData;

        var $widget = $(viewsWidgetTemplate({
            title: "",
            app: {
                id: "",
                name: ""
            },
            "views": data.viewsValueNames,
            "views-data": data.viewsData,
        }));

        widgetEl.find("table").replaceWith($widget.find("table"));
        addTooltip(widgetEl);
    }
    /**
     * Function to add tooltip
     * @param  {Object} placeHolder - DOM element
     */
    function addTooltip(placeHolder) {
        placeHolder.find('.views table tr td:first-child').tooltipster({
            animation: "fade",
            animationDuration: 50,
            delay: 100,
            theme: 'tooltipster-borderless',
            trigger: 'custom',
            triggerOpen: {
                mouseenter: true,
                touchstart: true
            },
            triggerClose: {
                mouseleave: true,
                touchleave: true
            },
            interactive: true,
            contentAsHTML: true,
            functionInit: function(instance, helper) {
                instance.content(getTooltipText($(helper.origin).parents(placeHolder.find("views table tr td:first-child"))));
            }
        });
        /**
         * Function to add tooltip text
         * @param  {Object} jqueryEl - DOM element
         * @returns {String} tooltipStr - Tool tip text string
         */
        function getTooltipText(jqueryEl) {
            var viewName = jqueryEl.find("td:first-child").data("view-name");
            var tooltipStr = "<div id='views-tip'>";

            tooltipStr += viewName;

            tooltipStr += "</div>";

            return tooltipStr;
        }
    }
};;(function(k,f,c,j,d,l,g){/*! Jssor */
    new(function(){this.$DebugMode=d;this.$Log=function(c,d){var a=k.console||{},b=this.$DebugMode;if(b&&a.log)a.log(c);else b&&d&&alert(c)};this.$Error=function(b,d){var c=k.console||{},a=this.$DebugMode;if(a&&c.error)c.error(b);else a&&alert(b);if(a)throw d||new Error(b);};this.$Fail=function(a){throw new Error(a);};this.$Assert=function(b,c){var a=this.$DebugMode;if(a)if(!b)throw new Error("Assert failed "+c||"");};this.$Trace=function(c){var a=k.console||{},b=this.$DebugMode;b&&a.log&&a.log(c)};this.$Execute=function(b){var a=this.$DebugMode;a&&b()};this.$LiveStamp=function(c,d){var b=this.$DebugMode;if(b){var a=f.createElement("DIV");a.setAttribute("id",d);c.$Live=a}};this.$C_AbstractProperty=function(){throw new Error("The property is abstract, it should be implemented by subclass.");};this.$C_AbstractMethod=function(){throw new Error("The method is abstract, it should be implemented by subclass.");};function a(b){if(b.constructor===a.caller)throw new Error("Cannot create instance of an abstract class.");}this.$C_AbstractClass=a});var e=k.$JssorEasing$={$EaseSwing:function(a){return-c.cos(a*c.PI)/2+.5},$EaseLinear:function(a){return a},$EaseInQuad:function(a){return a*a},$EaseOutQuad:function(a){return-a*(a-2)},$EaseInOutQuad:function(a){return(a*=2)<1?1/2*a*a:-1/2*(--a*(a-2)-1)},$EaseInCubic:function(a){return a*a*a},$EaseOutCubic:function(a){return(a-=1)*a*a+1},$EaseInOutCubic:function(a){return(a*=2)<1?1/2*a*a*a:1/2*((a-=2)*a*a+2)},$EaseInQuart:function(a){return a*a*a*a},$EaseOutQuart:function(a){return-((a-=1)*a*a*a-1)},$EaseInOutQuart:function(a){return(a*=2)<1?1/2*a*a*a*a:-1/2*((a-=2)*a*a*a-2)},$EaseInQuint:function(a){return a*a*a*a*a},$EaseOutQuint:function(a){return(a-=1)*a*a*a*a+1},$EaseInOutQuint:function(a){return(a*=2)<1?1/2*a*a*a*a*a:1/2*((a-=2)*a*a*a*a+2)},$EaseInSine:function(a){return 1-c.cos(a*c.PI/2)},$EaseOutSine:function(a){return c.sin(a*c.PI/2)},$EaseInOutSine:function(a){return-1/2*(c.cos(c.PI*a)-1)},$EaseInExpo:function(a){return a==0?0:c.pow(2,10*(a-1))},$EaseOutExpo:function(a){return a==1?1:-c.pow(2,-10*a)+1},$EaseInOutExpo:function(a){return a==0||a==1?a:(a*=2)<1?1/2*c.pow(2,10*(a-1)):1/2*(-c.pow(2,-10*--a)+2)},$EaseInCirc:function(a){return-(c.sqrt(1-a*a)-1)},$EaseOutCirc:function(a){return c.sqrt(1-(a-=1)*a)},$EaseInOutCirc:function(a){return(a*=2)<1?-1/2*(c.sqrt(1-a*a)-1):1/2*(c.sqrt(1-(a-=2)*a)+1)},$EaseInElastic:function(a){if(!a||a==1)return a;var b=.3,d=.075;return-(c.pow(2,10*(a-=1))*c.sin((a-d)*2*c.PI/b))},$EaseOutElastic:function(a){if(!a||a==1)return a;var b=.3,d=.075;return c.pow(2,-10*a)*c.sin((a-d)*2*c.PI/b)+1},$EaseInOutElastic:function(a){if(!a||a==1)return a;var b=.45,d=.1125;return(a*=2)<1?-.5*c.pow(2,10*(a-=1))*c.sin((a-d)*2*c.PI/b):c.pow(2,-10*(a-=1))*c.sin((a-d)*2*c.PI/b)*.5+1},$EaseInBack:function(a){var b=1.70158;return a*a*((b+1)*a-b)},$EaseOutBack:function(a){var b=1.70158;return(a-=1)*a*((b+1)*a+b)+1},$EaseInOutBack:function(a){var b=1.70158;return(a*=2)<1?1/2*a*a*(((b*=1.525)+1)*a-b):1/2*((a-=2)*a*(((b*=1.525)+1)*a+b)+2)},$EaseInBounce:function(a){return 1-e.$EaseOutBounce(1-a)},$EaseOutBounce:function(a){return a<1/2.75?7.5625*a*a:a<2/2.75?7.5625*(a-=1.5/2.75)*a+.75:a<2.5/2.75?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375},$EaseInOutBounce:function(a){return a<1/2?e.$EaseInBounce(a*2)*.5:e.$EaseOutBounce(a*2-1)*.5+.5},$EaseGoBack:function(a){return 1-c.abs(2-1)},$EaseInWave:function(a){return 1-c.cos(a*c.PI*2)},$EaseOutWave:function(a){return c.sin(a*c.PI*2)},$EaseOutJump:function(a){return 1-((a*=2)<1?(a=1-a)*a*a:(a-=1)*a*a)},$EaseInJump:function(a){return(a*=2)<1?a*a*a:(a=2-a)*a*a}},h=k.$Jease$={$Swing:e.$EaseSwing,$Linear:e.$EaseLinear,$InQuad:e.$EaseInQuad,$OutQuad:e.$EaseOutQuad,$InOutQuad:e.$EaseInOutQuad,$InCubic:e.$EaseInCubic,$OutCubic:e.$EaseOutCubic,$InOutCubic:e.$EaseInOutCubic,$InQuart:e.$EaseInQuart,$OutQuart:e.$EaseOutQuart,$InOutQuart:e.$EaseInOutQuart,$InQuint:e.$EaseInQuint,$OutQuint:e.$EaseOutQuint,$InOutQuint:e.$EaseInOutQuint,$InSine:e.$EaseInSine,$OutSine:e.$EaseOutSine,$InOutSine:e.$EaseInOutSine,$InExpo:e.$EaseInExpo,$OutExpo:e.$EaseOutExpo,$InOutExpo:e.$EaseInOutExpo,$InCirc:e.$EaseInCirc,$OutCirc:e.$EaseOutCirc,$InOutCirc:e.$EaseInOutCirc,$InElastic:e.$EaseInElastic,$OutElastic:e.$EaseOutElastic,$InOutElastic:e.$EaseInOutElastic,$InBack:e.$EaseInBack,$OutBack:e.$EaseOutBack,$InOutBack:e.$EaseInOutBack,$InBounce:e.$EaseInBounce,$OutBounce:e.$EaseOutBounce,$InOutBounce:e.$EaseInOutBounce,$GoBack:e.$EaseGoBack,$InWave:e.$EaseInWave,$OutWave:e.$EaseOutWave,$OutJump:e.$EaseOutJump,$InJump:e.$EaseInJump};k.$JssorDirection$={$TO_LEFT:1,$TO_RIGHT:2,$TO_TOP:4,$TO_BOTTOM:8,$HORIZONTAL:3,$VERTICAL:12,$GetDirectionHorizontal:function(a){return a&3},$GetDirectionVertical:function(a){return a&12},$IsHorizontal:function(a){return a&3},$IsVertical:function(a){return a&12}};var b=k.$Jssor$=new function(){var h=this,Ab=/\S+/g,L=1,jb=2,nb=3,mb=4,rb=5,M,s=0,i=0,t=0,z=0,A=0,D=navigator,vb=D.appName,o=D.userAgent,y=f.documentElement,q=parseFloat;function Jb(){if(!M){M={$Touchable:"ontouchstart"in k||"createTouch"in f};var a;if(D.pointerEnabled||(a=D.msPointerEnabled))M.$TouchActionAttr=a?"msTouchAction":"touchAction"}return M}function v(h){if(!s){s=-1;if(vb=="Microsoft Internet Explorer"&&!!k.attachEvent&&!!k.ActiveXObject){var e=o.indexOf("MSIE");s=L;t=q(o.substring(e+5,o.indexOf(";",e)));/*@cc_on z=@_jscript_version@*/;i=f.documentMode||t}else if(vb=="Netscape"&&!!k.addEventListener){var d=o.indexOf("Firefox"),b=o.indexOf("Safari"),g=o.indexOf("Chrome"),c=o.indexOf("AppleWebKit");if(d>=0){s=jb;i=q(o.substring(d+8))}else if(b>=0){var j=o.substring(0,b).lastIndexOf("/");s=g>=0?mb:nb;i=q(o.substring(j+1,b))}else{var a=/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/i.exec(o);if(a){s=L;i=t=q(a[1])}}if(c>=0)A=q(o.substring(c+12))}else{var a=/(opera)(?:.*version|)[ \/]([\w.]+)/i.exec(o);if(a){s=rb;i=q(a[2])}}}return h==s}function r(){return v(L)}function T(){return r()&&(i<6||f.compatMode=="BackCompat")}function Bb(){return v(jb)}function lb(){return v(nb)}function Eb(){return v(mb)}function qb(){return v(rb)}function gb(){return lb()&&A>534&&A<535}function H(){v();return A>537||i>42||s==L&&i>=11}function R(){return r()&&i<9}function hb(a){var b,c;return function(f){if(!b){b=d;var e=a.substr(0,1).toUpperCase()+a.substr(1);n([a].concat(["WebKit","ms","Moz","O","webkit"]),function(h,d){var b=a;if(d)b=h+e;if(f.style[b]!=g)return c=b})}return c}}function fb(b){var a;return function(c){a=a||hb(b)(c)||b;return a}}var N=fb("transform");function ub(a){return{}.toString.call(a)}var K;function Gb(){if(!K){K={};n(["Boolean","Number","String","Function","Array","Date","RegExp","Object"],function(a){K["[object "+a+"]"]=a.toLowerCase()})}return K}function n(b,d){var a,c;if(ub(b)=="[object Array]"){for(a=0;a<b.length;a++)if(c=d(b[a],a,b))return c}else for(a in b)if(c=d(b[a],a,b))return c}function F(a){return a==j?String(a):Gb()[ub(a)]||"object"}function sb(a){for(var b in a)return d}function B(a){try{return F(a)=="object"&&!a.nodeType&&a!=a.window&&(!a.constructor||{}.hasOwnProperty.call(a.constructor.prototype,"isPrototypeOf"))}catch(b){}}function p(a,b){return{x:a,y:b}}function yb(b,a){setTimeout(b,a||0)}function C(b,d,c){var a=!b||b=="inherit"?"":b;n(d,function(c){var b=c.exec(a);if(b){var d=a.substr(0,b.index),e=a.substr(b.index+b[0].length+1,a.length-1);a=d+e}});a=c+(!a.indexOf(" ")?"":" ")+a;return a}function U(b,a){if(i<9)b.style.filter=a}h.$Device=Jb;h.$IsBrowserIE=r;h.$IsBrowserIeQuirks=T;h.$IsBrowserFireFox=Bb;h.$IsBrowserSafari=lb;h.$IsBrowserChrome=Eb;h.$IsBrowserOpera=qb;h.$IsBrowserBadTransform=gb;h.$IsBrowser3dSafe=H;h.$IsBrowserIe9Earlier=R;h.$GetTransformProperty=hb("transform");h.$BrowserVersion=function(){return i};h.$BrowserEngineVersion=function(){return t||i};h.$WebKitVersion=function(){v();return A};h.$Delay=yb;h.$Inherit=function(a,b){b.call(a);return E({},a)};function bb(a){a.constructor===bb.caller&&a.$Construct&&a.$Construct.apply(a,bb.caller.arguments)}h.$Construct=bb;h.$GetElement=function(a){if(h.$IsString(a))a=f.getElementById(a);return a};function u(a){return a||k.event}h.$GetEvent=u;h.$EvtSrc=function(b){b=u(b);var a=b.target||b.srcElement||f;if(a.nodeType==3)a=h.$ParentNode(a);return a};h.$EvtTarget=function(a){a=u(a);return a.relatedTarget||a.toElement};h.$EvtWhich=function(a){a=u(a);return a.which||([0,1,3,0,2])[a.button]||a.charCode||a.keyCode};h.$MousePosition=function(a){a=u(a);return{x:a.pageX||a.clientX||0,y:a.pageY||a.clientY||0}};h.$PageScroll=function(){var a=f.body;return{x:(k.pageXOffset||y.scrollLeft||a.scrollLeft||0)-(y.clientLeft||a.clientLeft||0),y:(k.pageYOffset||y.scrollTop||a.scrollTop||0)-(y.clientTop||a.clientTop||0)}};h.$WindowSize=function(){var a=f.body;return{x:a.clientWidth||y.clientWidth,y:a.clientHeight||y.clientHeight}};function G(c,d,a){if(a!==g)c.style[d]=a==g?"":a;else{var b=c.currentStyle||c.style;a=b[d];if(a==""&&k.getComputedStyle){b=c.ownerDocument.defaultView.getComputedStyle(c,j);b&&(a=b.getPropertyValue(d)||b[d])}return a}}function db(b,c,a,d){if(a!==g){if(a==j)a="";else d&&(a+="px");G(b,c,a)}else return q(G(b,c))}function Kb(b,c,a){return db(b,c,a,d)}function m(c,a){var d=a?db:G,b;if(a&4)b=fb(c);return function(e,f){return d(e,b?b(e):c,f,a&2)}}function Db(b){if(r()&&t<9){var a=/opacity=([^)]*)/.exec(b.style.filter||"");return a?q(a[1])/100:1}else return q(b.style.opacity||"1")}function Fb(b,a,f){if(r()&&t<9){var h=b.style.filter||"",i=new RegExp(/[\s]*alpha\([^\)]*\)/g),e=c.round(100*a),d="";if(e<100||f)d="alpha(opacity="+e+") ";var g=C(h,[i],d);U(b,g)}else b.style.opacity=a==1?"":c.round(a*100)/100}var O={$Rotate:["rotate"],$RotateX:["rotateX"],$RotateY:["rotateY"],$SkewX:["skewX"],$SkewY:["skewY"]};if(!H())O=E(O,{$ScaleX:["scaleX",2],$ScaleY:["scaleY",2],$TranslateZ:["translateZ",1]});function P(d,a){var c="";if(a){if(r()&&i&&i<10){delete a.$RotateX;delete a.$RotateY;delete a.$TranslateZ}b.$Each(a,function(d,b){var a=O[b];if(a){var e=a[1]||0;if(Q[b]!=d)c+=" "+a[0]+"("+d+(["deg","px",""])[e]+")"}});if(H()){if(a.$TranslateX||a.$TranslateY||a.$TranslateZ)c+=" translate3d("+(a.$TranslateX||0)+"px,"+(a.$TranslateY||0)+"px,"+(a.$TranslateZ||0)+"px)";if(a.$ScaleX==g)a.$ScaleX=1;if(a.$ScaleY==g)a.$ScaleY=1;if(a.$ScaleX!=1||a.$ScaleY!=1)c+=" scale3d("+a.$ScaleX+", "+a.$ScaleY+", 1)"}}d.style[N(d)]=c}h.$CssTransformOrigin=m("transformOrigin",4);h.$CssBackfaceVisibility=m("backfaceVisibility",4);h.$CssTransformStyle=m("transformStyle",4);h.$CssPerspective=m("perspective",6);h.$CssPerspectiveOrigin=m("perspectiveOrigin",4);h.$CssScale=function(a,b){if(r()&&t<9||t<10&&T())a.style.zoom=b==1?"":b;else{var c=N(a),f="scale("+b+")",e=a.style[c],g=new RegExp(/[\s]*scale\(.*?\)/g),d=C(e,[g],f);a.style[c]=d}};var pb=0,kb=0;h.$WindowResizeFilter=function(b,a){return R()?function(){var g=d,c=T()?b.document.body:b.document.documentElement;if(c){var f=c.offsetWidth-pb,e=c.offsetHeight-kb;if(f||e){pb+=f;kb+=e}else g=l}g&&a()}:a};h.$MouseOverOutFilter=function(b,a){return function(c){c=u(c);var e=c.type,d=c.relatedTarget||(e=="mouseout"?c.toElement:c.fromElement);(!d||d!==a&&!h.$IsChild(a,d))&&b(c)}};h.$AddEvent=function(a,c,d,b){a=h.$GetElement(a);if(a.addEventListener){c=="mousewheel"&&a.addEventListener("DOMMouseScroll",d,b);a.addEventListener(c,d,b)}else if(a.attachEvent){a.attachEvent("on"+c,d);b&&a.setCapture&&a.setCapture()}};h.$RemoveEvent=function(a,c,d,b){a=h.$GetElement(a);if(a.removeEventListener){c=="mousewheel"&&a.removeEventListener("DOMMouseScroll",d,b);a.removeEventListener(c,d,b)}else if(a.detachEvent){a.detachEvent("on"+c,d);b&&a.releaseCapture&&a.releaseCapture()}};h.$FireEvent=function(c,b){var a;if(f.createEvent){a=f.createEvent("HTMLEvents");a.initEvent(b,l,l);c.dispatchEvent(a)}else{var d="on"+b;a=f.createEventObject();c.fireEvent(d,a)}};h.$CancelEvent=function(a){a=u(a);a.preventDefault&&a.preventDefault();a.cancel=d;a.returnValue=l};h.$StopEvent=function(a){a=u(a);a.stopPropagation&&a.stopPropagation();a.cancelBubble=d};h.$CreateCallback=function(d,c){var a=[].slice.call(arguments,2),b=function(){var b=a.concat([].slice.call(arguments,0));return c.apply(d,b)};return b};h.$InnerText=function(a,b){if(b==g)return a.textContent||a.innerText;var c=f.createTextNode(b);h.$Empty(a);a.appendChild(c)};h.$InnerHtml=function(a,b){if(b==g)return a.innerHTML;a.innerHTML=b};h.$GetClientRect=function(b){var a=b.getBoundingClientRect();return{x:a.left,y:a.top,w:a.right-a.left,h:a.bottom-a.top}};h.$ClearInnerHtml=function(a){a.innerHTML=""};h.$EncodeHtml=function(b){var a=h.$CreateDiv();h.$InnerText(a,b);return h.$InnerHtml(a)};h.$DecodeHtml=function(b){var a=h.$CreateDiv();h.$InnerHtml(a,b);return h.$InnerText(a)};h.$SelectElement=function(c){var b;if(k.getSelection)b=k.getSelection();var a=j;if(f.createRange){a=f.createRange();a.selectNode(c)}else{a=f.body.createTextRange();a.moveToElementText(c);a.select()}b&&b.addRange(a)};h.$DeselectElements=function(){if(f.selection)f.selection.empty();else k.getSelection&&k.getSelection().removeAllRanges()};h.$Children=function(d,c){for(var b=[],a=d.firstChild;a;a=a.nextSibling)(c||a.nodeType==1)&&b.push(a);return b};function tb(a,c,e,b){b=b||"u";for(a=a?a.firstChild:j;a;a=a.nextSibling)if(a.nodeType==1){if(Y(a,b)==c)return a;if(!e){var d=tb(a,c,e,b);if(d)return d}}}h.$FindChild=tb;function W(a,d,f,b){b=b||"u";var c=[];for(a=a?a.firstChild:j;a;a=a.nextSibling)if(a.nodeType==1){Y(a,b)==d&&c.push(a);if(!f){var e=W(a,d,f,b);if(e.length)c=c.concat(e)}}return c}function ob(a,c,d){for(a=a?a.firstChild:j;a;a=a.nextSibling)if(a.nodeType==1){if(a.tagName==c)return a;if(!d){var b=ob(a,c,d);if(b)return b}}}h.$FindChildByTag=ob;function ib(a,c,e){var b=[];for(a=a?a.firstChild:j;a;a=a.nextSibling)if(a.nodeType==1){(!c||a.tagName==c)&&b.push(a);if(!e){var d=ib(a,c,e);if(d.length)b=b.concat(d)}}return b}h.$FindChildrenByTag=ib;h.$GetElementsByTag=function(b,a){return b.getElementsByTagName(a)};function E(){var e=arguments,d,c,b,a,h=1&e[0],f=1+h;d=e[f-1]||{};for(;f<e.length;f++)if(c=e[f])for(b in c){a=c[b];if(a!==g){a=c[b];var i=d[b];d[b]=h&&(B(i)||B(a))?E(h,{},i,a):a}}return d}h.$Extend=E;function cb(f,g){var d={},c,a,b;for(c in f){a=f[c];b=g[c];if(a!==b){var e;if(B(a)&&B(b)){a=cb(a,b);e=!sb(a)}!e&&(d[c]=a)}}return d}h.$Unextend=cb;h.$IsFunction=function(a){return F(a)=="function"};h.$IsArray=function(a){return F(a)=="array"};h.$IsString=function(a){return F(a)=="string"};h.$IsNumeric=function(a){return!isNaN(q(a))&&isFinite(a)};h.$Type=F;h.$Each=n;h.$IsNotEmpty=sb;h.$IsPlainObject=B;function V(a){return f.createElement(a)}h.$CreateElement=V;h.$CreateDiv=function(){return V("DIV")};h.$CreateSpan=function(){return V("SPAN")};h.$EmptyFunction=function(){};function Z(b,c,a){if(a==g)return b.getAttribute(c);b.setAttribute(c,a)}function Y(a,b){return Z(a,b)||Z(a,"data-"+b)}h.$Attribute=Z;h.$AttributeEx=Y;function x(b,a){if(a==g)return b.className;b.className=a}h.$ClassName=x;function xb(b){var a={};n(b,function(b){a[b]=b});return a}function Ib(b){var a=[];n(b,function(b){a.push(b)});return a}function zb(b,a){return b.match(a||Ab)}function S(b,a){return xb(zb(b||"",a))}h.$ToHash=xb;h.$FromHash=Ib;h.$Split=zb;function eb(b,c){var a="";n(c,function(c){a&&(a+=b);a+=c});return a}function J(a,c,b){x(a,eb(" ",E(cb(S(x(a)),S(c)),S(b))))}h.$Join=eb;h.$AddClass=function(b,a){J(b,j,a)};h.$RemoveClass=J;h.$ReplaceClass=J;h.$ParentNode=function(a){return a.parentNode};h.$HideElement=function(a){h.$CssDisplay(a,"none")};h.$EnableElement=function(a,b){if(b)h.$Attribute(a,"disabled",d);else h.$RemoveAttribute(a,"disabled")};h.$HideElements=function(b){for(var a=0;a<b.length;a++)h.$HideElement(b[a])};h.$ShowElement=function(a,b){h.$CssDisplay(a,b?"none":"")};h.$ShowElements=function(b,c){for(var a=0;a<b.length;a++)h.$ShowElement(b[a],c)};h.$RemoveAttribute=function(b,a){b.removeAttribute(a)};h.$CanClearClip=function(){return r()&&i<10};h.$SetStyleClip=function(d,a){if(a)d.style.clip="rect("+c.round(a.$Top)+"px "+c.round(a.$Right)+"px "+c.round(a.$Bottom)+"px "+c.round(a.$Left)+"px)";else if(a!==g){var h=d.style.cssText,f=[new RegExp(/[\s]*clip: rect\(.*?\)[;]?/i),new RegExp(/[\s]*cliptop: .*?[;]?/i),new RegExp(/[\s]*clipright: .*?[;]?/i),new RegExp(/[\s]*clipbottom: .*?[;]?/i),new RegExp(/[\s]*clipleft: .*?[;]?/i)],e=C(h,f,"");b.$CssCssText(d,e)}};h.$GetNow=function(){return+new Date};h.$AppendChild=function(b,a){b.appendChild(a)};h.$AppendChildren=function(b,a){n(a,function(a){h.$AppendChild(b,a)})};h.$InsertBefore=function(b,a,c){(c||a.parentNode).insertBefore(b,a)};h.$InsertAfter=function(b,a,c){h.$InsertBefore(b,a.nextSibling,c||a.parentNode)};h.$InsertAdjacentHtml=function(b,a,c){b.insertAdjacentHTML(a,c)};h.$RemoveElement=function(b,a){a=a||b.parentNode;a&&a.removeChild(b)};h.$RemoveElements=function(a,b){n(a,function(a){h.$RemoveElement(a,b)})};h.$Empty=function(a){h.$RemoveElements(h.$Children(a,d),a)};h.$CenterElement=function(a,b){var c=h.$ParentNode(a);b&1&&h.$CssLeft(a,(h.$CssWidth(c)-h.$CssWidth(a))/2);b&2&&h.$CssTop(a,(h.$CssHeight(c)-h.$CssHeight(a))/2)};h.$ParseInt=function(b,a){return parseInt(b,a||10)};h.$ParseFloat=q;h.$IsChild=function(b,a){var c=f.body;while(a&&b!==a&&c!==a)try{a=a.parentNode}catch(d){return l}return b===a};function ab(d,c,b){var a=d.cloneNode(!c);!b&&h.$RemoveAttribute(a,"id");return a}h.$CloneNode=ab;h.$LoadImage=function(e,f){var a=new Image;function b(e,d){h.$RemoveEvent(a,"load",b);h.$RemoveEvent(a,"abort",c);h.$RemoveEvent(a,"error",c);f&&f(a,d)}function c(a){b(a,d)}if(qb()&&i<11.6||!e)b(!e);else{h.$AddEvent(a,"load",b);h.$AddEvent(a,"abort",c);h.$AddEvent(a,"error",c);a.src=e}};h.$LoadImages=function(d,a,e){var c=d.length+1;function b(b){c--;if(a&&b&&b.src==a.src)a=b;!c&&e&&e(a)}n(d,function(a){h.$LoadImage(a.src,b)});b()};h.$BuildElement=function(a,g,i,h){if(h)a=ab(a);var c=W(a,g);if(!c.length)c=b.$GetElementsByTag(a,g);for(var f=c.length-1;f>-1;f--){var d=c[f],e=ab(i);x(e,x(d));b.$CssCssText(e,d.style.cssText);b.$InsertBefore(e,d);b.$RemoveElement(d)}return a};function Hb(a){var l=this,p="",r=["av","pv","ds","dn"],e=[],q,k=0,i=0,d=0;function j(){J(a,q,e[d||k||i&2||i]);b.$Css(a,"pointer-events",d?"none":"")}function c(){k=0;j();h.$RemoveEvent(f,"mouseup",c);h.$RemoveEvent(f,"touchend",c);h.$RemoveEvent(f,"touchcancel",c)}function o(a){if(d)h.$CancelEvent(a);else{k=4;j();h.$AddEvent(f,"mouseup",c);h.$AddEvent(f,"touchend",c);h.$AddEvent(f,"touchcancel",c)}}l.$Selected=function(a){if(a===g)return i;i=a&2||a&1;j()};l.$Enable=function(a){if(a===g)return!d;d=a?0:3;j()};l.$Elmt=a=h.$GetElement(a);var m=b.$Split(x(a));if(m)p=m.shift();n(r,function(a){e.push(p+a)});q=eb(" ",e);e.unshift("");h.$AddEvent(a,"mousedown",o);h.$AddEvent(a,"touchstart",o)}h.$Buttonize=function(a){return new Hb(a)};h.$Css=G;h.$CssN=db;h.$CssP=Kb;h.$CssOverflow=m("overflow");h.$CssTop=m("top",2);h.$CssLeft=m("left",2);h.$CssWidth=m("width",2);h.$CssHeight=m("height",2);h.$CssMarginLeft=m("marginLeft",2);h.$CssMarginTop=m("marginTop",2);h.$CssPosition=m("position");h.$CssDisplay=m("display");h.$CssZIndex=m("zIndex",1);h.$CssFloat=function(b,a){return G(b,r()?"styleFloat":"cssFloat",a)};h.$CssOpacity=function(b,a,c){if(a!=g)Fb(b,a,c);else return Db(b)};h.$CssCssText=function(a,b){if(b!=g)a.style.cssText=b;else return a.style.cssText};var X={$Opacity:h.$CssOpacity,$Top:h.$CssTop,$Left:h.$CssLeft,$Width:h.$CssWidth,$Height:h.$CssHeight,$Position:h.$CssPosition,$Display:h.$CssDisplay,$ZIndex:h.$CssZIndex};h.$GetStyles=function(c,b){var a={};n(b,function(d,b){if(X[b])a[b]=X[b](c)});return a};function w(f,l){var e=R(),b=H(),d=gb(),i=N(f);function k(b,d,a){var e=b.$TransformPoint(p(-d/2,-a/2)),f=b.$TransformPoint(p(d/2,-a/2)),g=b.$TransformPoint(p(d/2,a/2)),h=b.$TransformPoint(p(-d/2,a/2));b.$TransformPoint(p(300,300));return p(c.min(e.x,f.x,g.x,h.x)+d/2,c.min(e.y,f.y,g.y,h.y)+a/2)}function a(d,a){a=a||{};var f=a.$TranslateZ||0,l=(a.$RotateX||0)%360,m=(a.$RotateY||0)%360,o=(a.$Rotate||0)%360,p=a.$ScaleZ;if(e){f=0;l=0;m=0;p=0}var c=new Cb(a.$TranslateX,a.$TranslateY,f);c.$RotateX(l);c.$RotateY(m);c.$RotateZ(o);c.$Skew(a.$SkewX,a.$SkewY);c.$Scale(a.$ScaleX,a.$ScaleY,p);if(b){c.$Move(a.$MoveX,a.$MoveY);d.style[i]=c.$Format3d()}else if(!z||z<9){var j="";if(o||a.$ScaleX!=g&&a.$ScaleX!=1||a.$ScaleY!=g&&a.$ScaleY!=1){var n=k(c,a.$OriginalWidth,a.$OriginalHeight);h.$CssMarginTop(d,n.y);h.$CssMarginLeft(d,n.x);j=c.$Format2d()}var r=d.style.filter,s=new RegExp(/[\s]*progid:DXImageTransform\.Microsoft\.Matrix\([^\)]*\)/g),q=C(r,[s],j);U(d,q)}}w=function(e,c){c=c||{};var i=c.$MoveX,k=c.$MoveY,f;n(X,function(a,b){f=c[b];f!==g&&a(e,f)});h.$SetStyleClip(e,c.$Clip);if(!b){i!=g&&h.$CssLeft(e,c.$OriginalX+i);k!=g&&h.$CssTop(e,c.$OriginalY+k)}if(c.$Transform)if(d)yb(h.$CreateCallback(j,P,e,c));else a(e,c)};h.$SetStyleTransform=P;if(d)h.$SetStyleTransform=w;if(e)h.$SetStyleTransform=a;else if(!b)a=P;h.$SetStyles=w;w(f,l)}h.$SetStyleTransform=w;h.$SetStyles=w;function Cb(k,l,p){var d=this,b=[1,0,0,0,0,1,0,0,0,0,1,0,k||0,l||0,p||0,1],i=c.sin,h=c.cos,m=c.tan;function f(a){return a*c.PI/180}function o(a,b){return{x:a,y:b}}function n(b,c,f,g,i,l,n,o,q,t,u,w,y,A,C,F,a,d,e,h,j,k,m,p,r,s,v,x,z,B,D,E){return[b*a+c*j+f*r+g*z,b*d+c*k+f*s+g*B,b*e+c*m+f*v+g*D,b*h+c*p+f*x+g*E,i*a+l*j+n*r+o*z,i*d+l*k+n*s+o*B,i*e+l*m+n*v+o*D,i*h+l*p+n*x+o*E,q*a+t*j+u*r+w*z,q*d+t*k+u*s+w*B,q*e+t*m+u*v+w*D,q*h+t*p+u*x+w*E,y*a+A*j+C*r+F*z,y*d+A*k+C*s+F*B,y*e+A*m+C*v+F*D,y*h+A*p+C*x+F*E]}function e(c,a){return n.apply(j,(a||b).concat(c))}d.$Matrix=function(){return b};d.$Scale=function(a,c,d){if(a==g)a=1;if(c==g)c=1;if(d==g)d=1;if(a!=1||c!=1||d!=1)b=e([a,0,0,0,0,c,0,0,0,0,d,0,0,0,0,1])};d.$Translate=function(a,c,d){if(a||c||d)b=e([1,0,0,0,0,1,0,0,0,0,1,0,a||0,c||0,d||0,1])};d.$Move=function(a,c,d){b[12]+=a||0;b[13]+=c||0;b[14]+=d||0};d.$RotateX=function(c){if(c){a=f(c);var d=h(a),g=i(a);b=e([1,0,0,0,0,d,g,0,0,-g,d,0,0,0,0,1])}};d.$RotateY=function(c){if(c){a=f(c);var d=h(a),g=i(a);b=e([d,0,-g,0,0,1,0,0,g,0,d,0,0,0,0,1])}};d.$RotateZ=function(c){if(c){a=f(c);var d=h(a),g=i(a);b=e([d,g,0,0,-g,d,0,0,0,0,1,0,0,0,0,1])}};d.$Skew=function(a,c){if(a||c){k=f(a);l=f(c);b=e([1,m(l),0,0,m(k),1,0,0,0,0,1,0,0,0,0,1])}};d.$TransformPoint=function(c){var a=e(b,[1,0,0,0,0,1,0,0,0,0,1,0,c.x,c.y,0,1]);return o(a[12],a[13])};d.$Format3d=function(){return"matrix3d("+b.join(",")+")"};d.$Format2d=function(){return"progid:DXImageTransform.Microsoft.Matrix(M11="+b[0]+", M12="+b[4]+", M21="+b[1]+", M22="+b[5]+", SizingMethod='auto expand')"}}new(function(){var a=this;function b(d,g){for(var j=d[0].length,i=d.length,h=g[0].length,f=[],c=0;c<i;c++)for(var k=f[c]=[],b=0;b<h;b++){for(var e=0,a=0;a<j;a++)e+=d[c][a]*g[a][b];k[b]=e}return f}a.$ScaleX=function(b,c){return a.$ScaleXY(b,c,0)};a.$ScaleY=function(b,c){return a.$ScaleXY(b,0,c)};a.$ScaleXY=function(a,c,d){return b(a,[[c,0],[0,d]])};a.$TransformPoint=function(d,c){var a=b(d,[[c.x],[c.y]]);return p(a[0][0],a[1][0])}});var Q={$OriginalX:0,$OriginalY:0,$MoveX:0,$MoveY:0,$Zoom:1,$ScaleX:1,$ScaleY:1,$Rotate:0,$RotateX:0,$RotateY:0,$TranslateX:0,$TranslateY:0,$TranslateZ:0,$SkewX:0,$SkewY:0};h.$FormatEasings=function(a){var c=a||{};if(a)if(b.$IsFunction(a))c={$Default:c};else if(b.$IsFunction(a.$Clip))c.$Clip={$Default:a.$Clip};return c};function wb(c,a){var b={};n(c,function(c,d){var e=c;if(a[d]!=g)if(h.$IsNumeric(c))e=c+a[d];else e=wb(c,a[d]);b[d]=e});return b}h.$AddDif=wb;h.$Cast=function(l,m,w,n,y,z,o){var a=m;if(l){a={};for(var h in m){var A=z[h]||1,v=y[h]||[0,1],f=(w-v[0])/v[1];f=c.min(c.max(f,0),1);f=f*A;var u=c.floor(f);if(f!=u)f-=u;var i=n.$Default||e.$EaseSwing,k,B=l[h],q=m[h];if(b.$IsNumeric(q)){i=n[h]||i;var x=i(f);k=B+q*x}else{k=b.$Extend({$Offset:{}},l[h]);b.$Each(q.$Offset||q,function(d,a){if(n.$Clip)i=n.$Clip[a]||n.$Clip.$Default||i;var c=i(f),b=d*c;k.$Offset[a]=b;k[a]+=b})}a[h]=k}var t=b.$Each(m,function(b,a){return Q[a]!=g});t&&b.$Each(Q,function(c,b){if(a[b]==g&&l[b]!==g)a[b]=l[b]});if(t){if(a.$Zoom)a.$ScaleX=a.$ScaleY=a.$Zoom;a.$OriginalWidth=o.$OriginalWidth;a.$OriginalHeight=o.$OriginalHeight;a.$Transform=d}}if(m.$Clip&&o.$Move){var p=a.$Clip.$Offset,s=(p.$Top||0)+(p.$Bottom||0),r=(p.$Left||0)+(p.$Right||0);a.$Left=(a.$Left||0)+r;a.$Top=(a.$Top||0)+s;a.$Clip.$Left-=r;a.$Clip.$Right-=r;a.$Clip.$Top-=s;a.$Clip.$Bottom-=s}if(a.$Clip&&b.$CanClearClip()&&!a.$Clip.$Top&&!a.$Clip.$Left&&a.$Clip.$Right==o.$OriginalWidth&&a.$Clip.$Bottom==o.$OriginalHeight)a.$Clip=j;return a}};function n(){var a=this,d=[],c=[];function h(a,b){d.push({$EventName:a,$Handler:b})}function g(a,c){b.$Each(d,function(b,e){b.$EventName==a&&b.$Handler===c&&d.splice(e,1)})}function f(){d=[]}function e(){b.$Each(c,function(a){b.$RemoveEvent(a.$Obj,a.$EventName,a.$Handler)});c=[]}a.$Listen=function(e,a,d,f){b.$AddEvent(e,a,d,f);c.push({$Obj:e,$EventName:a,$Handler:d})};a.$Unlisten=function(e,a,d){b.$Each(c,function(f,g){if(f.$Obj===e&&f.$EventName==a&&f.$Handler===d){b.$RemoveEvent(e,a,d);c.splice(g,1)}})};a.$UnlistenAll=e;a.$On=a.addEventListener=h;a.$Off=a.removeEventListener=g;a.$TriggerEvent=function(a){var c=[].slice.call(arguments,1);b.$Each(d,function(b){b.$EventName==a&&b.$Handler.apply(k,c)})};a.$Destroy=function(){e();f();for(var b in a)delete a[b]}}var m=k.$JssorAnimator$=function(z,C,h,L,O,J){z=z||0;var a=this,q,N,n,o,v,A=0,H,I,G,B,y=0,g=0,m=0,D,i,s,f,e,p,w=[],x;function P(a){f+=a;e+=a;i+=a;s+=a;g+=a;m+=a;y+=a}function u(o){var j=o;if(p&&(j>=e||j<=f))j=((j-f)%p+p)%p+f;if(!D||v||g!=j){var k=c.min(j,e);k=c.max(k,f);if(!D||v||k!=m){if(J){var l=(k-i)/(C||1);if(h.$Reverse)l=1-l;var n=b.$Cast(O,J,l,H,G,I,h);if(x)b.$Each(n,function(b,a){x[a]&&x[a](L,b)});else b.$SetStyles(L,n)}a.$OnInnerOffsetChange(m-i,k-i);m=k;b.$Each(w,function(b,c){var a=o<g?w[w.length-c-1]:b;a.$GoToPosition(m-y)});var r=g,q=m;g=j;D=d;a.$OnPositionChange(r,q)}}}function E(a,b,d){b&&a.$Shift(e);if(!d){f=c.min(f,a.$GetPosition_OuterBegin()+y);e=c.max(e,a.$GetPosition_OuterEnd()+y)}w.push(a)}var r=k.requestAnimationFrame||k.webkitRequestAnimationFrame||k.mozRequestAnimationFrame||k.msRequestAnimationFrame;if(b.$IsBrowserSafari()&&b.$BrowserVersion()<7)r=j;r=r||function(a){b.$Delay(a,h.$Interval)};function K(){if(q){var d=b.$GetNow(),e=c.min(d-A,h.$IntervalMax),a=g+e*o;A=d;if(a*o>=n*o)a=n;u(a);if(!v&&a*o>=n*o)M(B);else r(K)}}function t(h,i,j){if(!q){q=d;v=j;B=i;h=c.max(h,f);h=c.min(h,e);n=h;o=n<g?-1:1;a.$OnStart();A=b.$GetNow();r(K)}}function M(b){if(q){v=q=B=l;a.$OnStop();b&&b()}}a.$Play=function(a,b,c){t(a?g+a:e,b,c)};a.$PlayToPosition=t;a.$PlayToBegin=function(a,b){t(f,a,b)};a.$PlayToEnd=function(a,b){t(e,a,b)};a.$Stop=M;a.$Continue=function(a){t(a)};a.$GetPosition=function(){return g};a.$GetPlayToPosition=function(){return n};a.$GetPosition_Display=function(){return m};a.$GoToPosition=u;a.$GoToBegin=function(){u(f,d)};a.$GoToEnd=function(){u(e,d)};a.$Move=function(a){u(g+a)};a.$CombineMode=function(){return N};a.$GetDuration=function(){return C};a.$IsPlaying=function(){return q};a.$IsOnTheWay=function(){return g>i&&g<=s};a.$SetLoopLength=function(a){p=a};a.$Shift=P;a.$Join=E;a.$Combine=function(a,b){E(a,0,b)};a.$Chain=function(a){E(a,1)};a.$Expand=function(a){e+=a};a.$GetPosition_InnerBegin=function(){return i};a.$GetPosition_InnerEnd=function(){return s};a.$GetPosition_OuterBegin=function(){return f};a.$GetPosition_OuterEnd=function(){return e};a.$OnPositionChange=a.$OnStart=a.$OnStop=a.$OnInnerOffsetChange=b.$EmptyFunction;a.$Version=b.$GetNow();h=b.$Extend({$Interval:16,$IntervalMax:50},h);p=h.$LoopLength;x=h.$Setter;f=i=z;e=s=z+C;I=h.$Round||{};G=h.$During||{};H=b.$FormatEasings(h.$Easing)};var p=k.$JssorSlideshowFormations$=new function(){var h=this,b=0,a=1,f=2,e=3,s=1,r=2,t=4,q=8,w=256,x=512,v=1024,u=2048,j=u+s,i=u+r,o=x+s,m=x+r,n=w+t,k=w+q,l=v+t,p=v+q;function y(a){return(a&r)==r}function z(a){return(a&t)==t}function g(b,a,c){c.push(a);b[a]=b[a]||[];b[a].push(c)}h.$FormationStraight=function(f){for(var d=f.$Cols,e=f.$Rows,s=f.$Assembly,t=f.$Count,r=[],a=0,b=0,p=d-1,q=e-1,h=t-1,c,b=0;b<e;b++)for(a=0;a<d;a++){switch(s){case j:c=h-(a*e+(q-b));break;case l:c=h-(b*d+(p-a));break;case o:c=h-(a*e+b);case n:c=h-(b*d+a);break;case i:c=a*e+b;break;case k:c=b*d+(p-a);break;case m:c=a*e+(q-b);break;default:c=b*d+a}g(r,c,[b,a])}return r};h.$FormationSwirl=function(q){var x=q.$Cols,y=q.$Rows,B=q.$Assembly,w=q.$Count,A=[],z=[],u=0,c=0,h=0,r=x-1,s=y-1,t,p,v=0;switch(B){case j:c=r;h=0;p=[f,a,e,b];break;case l:c=0;h=s;p=[b,e,a,f];break;case o:c=r;h=s;p=[e,a,f,b];break;case n:c=r;h=s;p=[a,e,b,f];break;case i:c=0;h=0;p=[f,b,e,a];break;case k:c=r;h=0;p=[a,f,b,e];break;case m:c=0;h=s;p=[e,b,f,a];break;default:c=0;h=0;p=[b,f,a,e]}u=0;while(u<w){t=h+","+c;if(c>=0&&c<x&&h>=0&&h<y&&!z[t]){z[t]=d;g(A,u++,[h,c])}else switch(p[v++%p.length]){case b:c--;break;case f:h--;break;case a:c++;break;case e:h++}switch(p[v%p.length]){case b:c++;break;case f:h++;break;case a:c--;break;case e:h--}}return A};h.$FormationZigZag=function(p){var w=p.$Cols,x=p.$Rows,z=p.$Assembly,v=p.$Count,t=[],u=0,c=0,d=0,q=w-1,r=x-1,y,h,s=0;switch(z){case j:c=q;d=0;h=[f,a,e,a];break;case l:c=0;d=r;h=[b,e,a,e];break;case o:c=q;d=r;h=[e,a,f,a];break;case n:c=q;d=r;h=[a,e,b,e];break;case i:c=0;d=0;h=[f,b,e,b];break;case k:c=q;d=0;h=[a,f,b,f];break;case m:c=0;d=r;h=[e,b,f,b];break;default:c=0;d=0;h=[b,f,a,f]}u=0;while(u<v){y=d+","+c;if(c>=0&&c<w&&d>=0&&d<x&&typeof t[y]=="undefined"){g(t,u++,[d,c]);switch(h[s%h.length]){case b:c++;break;case f:d++;break;case a:c--;break;case e:d--}}else{switch(h[s++%h.length]){case b:c--;break;case f:d--;break;case a:c++;break;case e:d++}switch(h[s++%h.length]){case b:c++;break;case f:d++;break;case a:c--;break;case e:d--}}}return t};h.$FormationStraightStairs=function(q){var u=q.$Cols,v=q.$Rows,e=q.$Assembly,t=q.$Count,r=[],s=0,c=0,d=0,f=u-1,h=v-1,x=t-1;switch(e){case j:case m:case o:case i:var a=0,b=0;break;case k:case l:case n:case p:var a=f,b=0;break;default:e=p;var a=f,b=0}c=a;d=b;while(s<t){if(z(e)||y(e))g(r,x-s++,[d,c]);else g(r,s++,[d,c]);switch(e){case j:case m:c--;d++;break;case o:case i:c++;d--;break;case k:case l:c--;d--;break;case p:case n:default:c++;d++}if(c<0||d<0||c>f||d>h){switch(e){case j:case m:a++;break;case k:case l:case o:case i:b++;break;case p:case n:default:a--}if(a<0||b<0||a>f||b>h){switch(e){case j:case m:a=f;b++;break;case o:case i:b=h;a++;break;case k:case l:b=h;a--;break;case p:case n:default:a=0;b++}if(b>h)b=h;else if(b<0)b=0;else if(a>f)a=f;else if(a<0)a=0}d=b;c=a}}return r};h.$FormationSquare=function(i){var a=i.$Cols||1,b=i.$Rows||1,j=[],d,e,f,h,k;f=a<b?(b-a)/2:0;h=a>b?(a-b)/2:0;k=c.round(c.max(a/2,b/2))+1;for(d=0;d<a;d++)for(e=0;e<b;e++)g(j,k-c.min(d+1+f,e+1+h,a-d+f,b-e+h),[e,d]);return j};h.$FormationRectangle=function(f){var d=f.$Cols||1,e=f.$Rows||1,h=[],a,b,i;i=c.round(c.min(d/2,e/2))+1;for(a=0;a<d;a++)for(b=0;b<e;b++)g(h,i-c.min(a+1,b+1,d-a,e-b),[b,a]);return h};h.$FormationRandom=function(d){for(var e=[],a,b=0;b<d.$Rows;b++)for(a=0;a<d.$Cols;a++)g(e,c.ceil(1e5*c.random())%13,[b,a]);return e};h.$FormationCircle=function(d){for(var e=d.$Cols||1,f=d.$Rows||1,h=[],a,i=e/2-.5,j=f/2-.5,b=0;b<e;b++)for(a=0;a<f;a++)g(h,c.round(c.sqrt(c.pow(b-i,2)+c.pow(a-j,2))),[a,b]);return h};h.$FormationCross=function(d){for(var e=d.$Cols||1,f=d.$Rows||1,h=[],a,i=e/2-.5,j=f/2-.5,b=0;b<e;b++)for(a=0;a<f;a++)g(h,c.round(c.min(c.abs(b-i),c.abs(a-j))),[a,b]);return h};h.$FormationRectangleCross=function(f){for(var h=f.$Cols||1,i=f.$Rows||1,j=[],a,d=h/2-.5,e=i/2-.5,k=c.max(d,e)+1,b=0;b<h;b++)for(a=0;a<i;a++)g(j,c.round(k-c.max(d-c.abs(b-d),e-c.abs(a-e)))-1,[a,b]);return j}};k.$JssorSlideshowRunner$=function(k,s,q,t,y){var f=this,u,g,a,x=0,w=t.$TransitionsOrder,r,h=8;function i(g,f){var a={$Interval:f,$Duration:1,$Delay:0,$Cols:1,$Rows:1,$Opacity:0,$Zoom:0,$Clip:0,$Move:l,$SlideOut:l,$Reverse:l,$Formation:p.$FormationRandom,$Assembly:1032,$ChessMode:{$Column:0,$Row:0},$Easing:e.$EaseSwing,$Round:{},$Blocks:[],$During:{}};b.$Extend(a,g);a.$Count=a.$Cols*a.$Rows;a.$Easing=b.$FormatEasings(a.$Easing);a.$FramesCount=c.ceil(a.$Duration/a.$Interval);a.$GetBlocks=function(c,b){c/=a.$Cols;b/=a.$Rows;var f=c+"x"+b;if(!a.$Blocks[f]){a.$Blocks[f]={$Width:c,$Height:b};for(var d=0;d<a.$Cols;d++)for(var e=0;e<a.$Rows;e++)a.$Blocks[f][e+","+d]={$Top:e*b,$Right:d*c+c,$Bottom:e*b+b,$Left:d*c}}return a.$Blocks[f]};if(a.$Brother){a.$Brother=i(a.$Brother,f);a.$SlideOut=d}return a}function o(B,h,a,w,o,m){var z=this,u,v={},i={},n=[],f,e,s,q=a.$ChessMode.$Column||0,r=a.$ChessMode.$Row||0,g=a.$GetBlocks(o,m),p=C(a),D=p.length-1,t=a.$Duration+a.$Delay*D,x=w+t,k=a.$SlideOut,y;x+=50;function C(a){var b=a.$Formation(a);return a.$Reverse?b.reverse():b}z.$EndTime=x;z.$ShowFrame=function(d){d-=w;var e=d<t;if(e||y){y=e;if(!k)d=t-d;var f=c.ceil(d/a.$Interval);b.$Each(i,function(a,e){var d=c.max(f,a.$Min);d=c.min(d,a.length-1);if(a.$LastFrameIndex!=d){if(!a.$LastFrameIndex&&!k)b.$ShowElement(n[e]);else d==a.$Max&&k&&b.$HideElement(n[e]);a.$LastFrameIndex=d;b.$SetStyles(n[e],a[d])}})}};h=b.$CloneNode(h);b.$SetStyleTransform(h,j);if(b.$IsBrowserIe9Earlier()){var E=!h["no-image"],A=b.$FindChildrenByTag(h);b.$Each(A,function(a){(E||a["jssor-slider"])&&b.$CssOpacity(a,b.$CssOpacity(a),d)})}b.$Each(p,function(h,j){b.$Each(h,function(G){var K=G[0],J=G[1],t=K+","+J,n=l,p=l,x=l;if(q&&J%2){if(q&3)n=!n;if(q&12)p=!p;if(q&16)x=!x}if(r&&K%2){if(r&3)n=!n;if(r&12)p=!p;if(r&16)x=!x}a.$Top=a.$Top||a.$Clip&4;a.$Bottom=a.$Bottom||a.$Clip&8;a.$Left=a.$Left||a.$Clip&1;a.$Right=a.$Right||a.$Clip&2;var C=p?a.$Bottom:a.$Top,z=p?a.$Top:a.$Bottom,B=n?a.$Right:a.$Left,A=n?a.$Left:a.$Right;a.$Clip=C||z||B||A;s={};e={$Top:0,$Left:0,$Opacity:1,$Width:o,$Height:m};f=b.$Extend({},e);u=b.$Extend({},g[t]);if(a.$Opacity)e.$Opacity=2-a.$Opacity;if(a.$ZIndex){e.$ZIndex=a.$ZIndex;f.$ZIndex=0}var I=a.$Cols*a.$Rows>1||a.$Clip;if(a.$Zoom||a.$Rotate){var H=d;if(b.$IsBrowserIe9Earlier())if(a.$Cols*a.$Rows>1)H=l;else I=l;if(H){e.$Zoom=a.$Zoom?a.$Zoom-1:1;f.$Zoom=1;if(b.$IsBrowserIe9Earlier()||b.$IsBrowserOpera())e.$Zoom=c.min(e.$Zoom,2);var N=a.$Rotate||0;e.$Rotate=N*360*(x?-1:1);f.$Rotate=0}}if(I){var h=u.$Offset={};if(a.$Clip){var w=a.$ScaleClip||1;if(C&&z){h.$Top=g.$Height/2*w;h.$Bottom=-h.$Top}else if(C)h.$Bottom=-g.$Height*w;else if(z)h.$Top=g.$Height*w;if(B&&A){h.$Left=g.$Width/2*w;h.$Right=-h.$Left}else if(B)h.$Right=-g.$Width*w;else if(A)h.$Left=g.$Width*w}s.$Clip=u;f.$Clip=g[t]}var L=n?1:-1,M=p?1:-1;if(a.x)e.$Left+=o*a.x*L;if(a.y)e.$Top+=m*a.y*M;b.$Each(e,function(a,c){if(b.$IsNumeric(a))if(a!=f[c])s[c]=a-f[c]});v[t]=k?f:e;var D=a.$FramesCount,y=c.round(j*a.$Delay/a.$Interval);i[t]=new Array(y);i[t].$Min=y;i[t].$Max=y+D-1;for(var F=0;F<=D;F++){var E=b.$Cast(f,s,F/D,a.$Easing,a.$During,a.$Round,{$Move:a.$Move,$OriginalWidth:o,$OriginalHeight:m});E.$ZIndex=E.$ZIndex||1;i[t].push(E)}})});p.reverse();b.$Each(p,function(a){b.$Each(a,function(c){var f=c[0],e=c[1],d=f+","+e,a=h;if(e||f)a=b.$CloneNode(h);b.$SetStyles(a,v[d]);b.$CssOverflow(a,"hidden");b.$CssPosition(a,"absolute");B.$AddClipElement(a);n[d]=a;b.$ShowElement(a,!k)})})}function v(){var b=this,c=0;m.call(b,0,u);b.$OnPositionChange=function(d,b){if(b-c>h){c=b;a&&a.$ShowFrame(b);g&&g.$ShowFrame(b)}};b.$Transition=r}f.$GetTransition=function(){var a=0,b=t.$Transitions,d=b.length;if(w)a=x++%d;else a=c.floor(c.random()*d);b[a]&&(b[a].$Index=a);return b[a]};f.$Initialize=function(w,x,l,m,b){r=b;b=i(b,h);var j=m.$Item,e=l.$Item;j["no-image"]=!m.$Image;e["no-image"]=!l.$Image;var n=j,p=e,v=b,d=b.$Brother||i({},h);if(!b.$SlideOut){n=e;p=j}var t=d.$Shift||0;g=new o(k,p,d,c.max(t-d.$Interval,0),s,q);a=new o(k,n,v,c.max(d.$Interval-t,0),s,q);g.$ShowFrame(0);a.$ShowFrame(0);u=c.max(g.$EndTime,a.$EndTime);f.$Index=w};f.$Clear=function(){k.$Clear();g=j;a=j};f.$GetProcessor=function(){var b=j;if(a)b=new v;return b};if(b.$IsBrowserIe9Earlier()||b.$IsBrowserOpera()||y&&b.$WebKitVersion()<537)h=16;n.call(f);m.call(f,-1e7,1e7)};var i=k.$JssorSlider$=function(p,hc){var h=this;function Fc(){var a=this;m.call(a,-1e8,2e8);a.$GetCurrentSlideInfo=function(){var b=a.$GetPosition_Display(),d=c.floor(b),f=t(d),e=b-c.floor(b);return{$Index:f,$VirtualIndex:d,$Position:e}};a.$OnPositionChange=function(b,a){var e=c.floor(a);if(e!=a&&a>b)e++;Wb(e,d);h.$TriggerEvent(i.$EVT_POSITION_CHANGE,t(a),t(b),a,b)}}function Ec(){var a=this;m.call(a,0,0,{$LoopLength:r});b.$Each(C,function(b){D&1&&b.$SetLoopLength(r);a.$Chain(b);b.$Shift(fb/dc)})}function Dc(){var a=this,b=Vb.$Elmt;m.call(a,-1,2,{$Easing:e.$EaseLinear,$Setter:{$Position:bc},$LoopLength:r},b,{$Position:1},{$Position:-2});a.$Wrapper=b}function rc(o,n){var b=this,e,f,g,k,c;m.call(b,-1e8,2e8,{$IntervalMax:100});b.$OnStart=function(){O=d;R=j;h.$TriggerEvent(i.$EVT_SWIPE_START,t(w.$GetPosition()),w.$GetPosition())};b.$OnStop=function(){O=l;k=l;var a=w.$GetCurrentSlideInfo();h.$TriggerEvent(i.$EVT_SWIPE_END,t(w.$GetPosition()),w.$GetPosition());!a.$Position&&Hc(a.$VirtualIndex,s)};b.$OnPositionChange=function(i,h){var b;if(k)b=c;else{b=f;if(g){var d=h/g;b=a.$SlideEasing(d)*(f-e)+e}}w.$GoToPosition(b)};b.$PlayCarousel=function(a,d,c,h){e=a;f=d;g=c;w.$GoToPosition(a);b.$GoToPosition(0);b.$PlayToPosition(c,h)};b.$StandBy=function(a){k=d;c=a;b.$Play(a,j,d)};b.$SetStandByPosition=function(a){c=a};b.$MoveCarouselTo=function(a){w.$GoToPosition(a)};w=new Fc;w.$Combine(o);w.$Combine(n)}function sc(){var c=this,a=Zb();b.$CssZIndex(a,0);b.$Css(a,"pointerEvents","none");c.$Elmt=a;c.$AddClipElement=function(c){b.$AppendChild(a,c);b.$ShowElement(a)};c.$Clear=function(){b.$HideElement(a);b.$Empty(a)}}function Bc(k,f){var e=this,q,H,x,o,y=[],w,B,W,G,Q,F,g,v,p,eb;m.call(e,-u,u+1,{$SlideItemAnimator:d});function E(a){q&&q.$Revert();T(k,a,0);F=d;q=new I.$Class(k,I,b.$ParseFloat(b.$AttributeEx(k,"idle"))||qc);q.$GoToPosition(0)}function Y(){q.$Version<I.$Version&&E()}function N(p,r,n){if(!G){G=d;if(o&&n){var g=n.width,c=n.height,m=g,k=c;if(g&&c&&a.$FillMode){if(a.$FillMode&3&&(!(a.$FillMode&4)||g>K||c>J)){var j=l,q=K/J*c/g;if(a.$FillMode&1)j=q>1;else if(a.$FillMode&2)j=q<1;m=j?g*J/c:K;k=j?J:c*K/g}b.$CssWidth(o,m);b.$CssHeight(o,k);b.$CssTop(o,(J-k)/2);b.$CssLeft(o,(K-m)/2)}b.$CssPosition(o,"absolute");h.$TriggerEvent(i.$EVT_LOAD_END,f)}}b.$HideElement(r);p&&p(e)}function X(b,c,d,g){if(g==R&&s==f&&P)if(!Gc){var a=t(b);A.$Initialize(a,f,c,e,d);c.$HideContentForSlideshow();U.$Shift(a-U.$GetPosition_OuterBegin()-1);U.$GoToPosition(a);z.$PlayCarousel(b,b,0)}}function ab(b){if(b==R&&s==f){if(!g){var a=j;if(A)if(A.$Index==f)a=A.$GetProcessor();else A.$Clear();Y();g=new zc(k,f,a,q);g.$SetPlayer(p)}!g.$IsPlaying()&&g.$Replay()}}function S(d,h,l){if(d==f){if(d!=h)C[h]&&C[h].$ParkOut();else!l&&g&&g.$AdjustIdleOnPark();p&&p.$Enable();var m=R=b.$GetNow();e.$LoadImage(b.$CreateCallback(j,ab,m))}else{var k=c.min(f,d),i=c.max(f,d),o=c.min(i-k,k+r-i),n=u+a.$LazyLoading-1;(!Q||o<=n)&&e.$LoadImage()}}function bb(){if(s==f&&g){g.$Stop();p&&p.$Quit();p&&p.$Disable();g.$OpenSlideshowPanel()}}function db(){s==f&&g&&g.$Stop()}function Z(a){!M&&h.$TriggerEvent(i.$EVT_CLICK,f,a)}function O(){p=v.pInstance;g&&g.$SetPlayer(p)}e.$LoadImage=function(c,a){a=a||x;if(y.length&&!G){b.$ShowElement(a);if(!W){W=d;h.$TriggerEvent(i.$EVT_LOAD_START,f);b.$Each(y,function(a){if(!b.$Attribute(a,"src")){a.src=b.$AttributeEx(a,"src2");b.$CssDisplay(a,a["display-origin"])}})}b.$LoadImages(y,o,b.$CreateCallback(j,N,c,a))}else N(c,a)};e.$GoForNextSlide=function(){var h=f;if(a.$AutoPlaySteps<0)h-=r;var d=h+a.$AutoPlaySteps*xc;if(D&2)d=t(d);if(!(D&1))d=c.max(0,c.min(d,r-u));if(d!=f){if(A){var e=A.$GetTransition(r);if(e){var i=R=b.$GetNow(),g=C[t(d)];return g.$LoadImage(b.$CreateCallback(j,X,d,g,e,i),x)}}nb(d)}};e.$TryActivate=function(){S(f,f,d)};e.$ParkOut=function(){p&&p.$Quit();p&&p.$Disable();e.$UnhideContentForSlideshow();g&&g.$Abort();g=j;E()};e.$StampSlideItemElements=function(a){a=eb+"_"+a};e.$HideContentForSlideshow=function(){b.$HideElement(k)};e.$UnhideContentForSlideshow=function(){b.$ShowElement(k)};e.$EnablePlayer=function(){p&&p.$Enable()};function T(a,c,e){if(b.$Attribute(a,"jssor-slider"))return;if(!F){if(a.tagName=="IMG"){y.push(a);if(!b.$Attribute(a,"src")){Q=d;a["display-origin"]=b.$CssDisplay(a);b.$HideElement(a)}}b.$IsBrowserIe9Earlier()&&b.$CssZIndex(a,(b.$CssZIndex(a)||0)+1)}var f=b.$Children(a);b.$Each(f,function(f){var h=f.tagName,i=b.$AttributeEx(f,"u");if(i=="player"&&!v){v=f;if(v.pInstance)O();else b.$AddEvent(v,"dataavailable",O)}if(i=="caption"){if(c){b.$CssTransformOrigin(f,b.$AttributeEx(f,"to"));b.$CssBackfaceVisibility(f,b.$AttributeEx(f,"bf"));b.$AttributeEx(f,"3d")&&b.$CssTransformStyle(f,"preserve-3d")}else if(!b.$IsBrowserIE()){var g=b.$CloneNode(f,l,d);b.$InsertBefore(g,f,a);b.$RemoveElement(f,a);f=g;c=d}}else if(!F&&!e&&!o){if(h=="A"){if(b.$AttributeEx(f,"u")=="image")o=b.$FindChildByTag(f,"IMG");else o=b.$FindChild(f,"image",d);if(o){w=f;b.$CssDisplay(w,"block");b.$SetStyles(w,V);B=b.$CloneNode(w,d);b.$CssPosition(w,"relative");b.$CssOpacity(B,0);b.$Css(B,"backgroundColor","#000")}}else if(h=="IMG"&&b.$AttributeEx(f,"u")=="image")o=f;if(o){o.border=0;b.$SetStyles(o,V)}}T(f,c,e+1)})}e.$OnInnerOffsetChange=function(c,b){var a=u-b;bc(H,a)};e.$Index=f;n.call(e);b.$CssPerspective(k,b.$AttributeEx(k,"p"));b.$CssPerspectiveOrigin(k,b.$AttributeEx(k,"po"));var L=b.$FindChild(k,"thumb",d);if(L){e.$Thumb=b.$CloneNode(L);b.$HideElement(L)}b.$ShowElement(k);x=b.$CloneNode(cb);b.$CssZIndex(x,1e3);b.$AddEvent(k,"click",Z);E(d);e.$Image=o;e.$Link=B;e.$Item=k;e.$Wrapper=H=k;b.$AppendChild(H,x);h.$On(203,S);h.$On(28,db);h.$On(24,bb)}function zc(y,f,p,q){var a=this,n=0,u=0,g,j,e,c,k,t,r,o=C[f];m.call(a,0,0);function v(){b.$Empty(N);fc&&k&&o.$Link&&b.$AppendChild(N,o.$Link);b.$ShowElement(N,!k&&o.$Image)}function w(){a.$Replay()}function x(b){r=b;a.$Stop();a.$Replay()}a.$Replay=function(){var b=a.$GetPosition_Display();if(!B&&!O&&!r&&s==f){if(!b){if(g&&!k){k=d;a.$OpenSlideshowPanel(d);h.$TriggerEvent(i.$EVT_SLIDESHOW_START,f,n,u,g,c)}v()}var l,p=i.$EVT_STATE_CHANGE;if(b!=c)if(b==e)l=c;else if(b==j)l=e;else if(!b)l=j;else l=a.$GetPlayToPosition();h.$TriggerEvent(p,f,b,n,j,e,c);var m=P&&(!E||F);if(b==c)(e!=c&&!(E&12)||m)&&o.$GoForNextSlide();else(m||b!=e)&&a.$PlayToPosition(l,w)}};a.$AdjustIdleOnPark=function(){e==c&&e==a.$GetPosition_Display()&&a.$GoToPosition(j)};a.$Abort=function(){A&&A.$Index==f&&A.$Clear();var b=a.$GetPosition_Display();b<c&&h.$TriggerEvent(i.$EVT_STATE_CHANGE,f,-b-1,n,j,e,c)};a.$OpenSlideshowPanel=function(a){p&&b.$CssOverflow(hb,a&&p.$Transition.$Outside?"":"hidden")};a.$OnInnerOffsetChange=function(b,a){if(k&&a>=g){k=l;v();o.$UnhideContentForSlideshow();A.$Clear();h.$TriggerEvent(i.$EVT_SLIDESHOW_END,f,n,u,g,c)}h.$TriggerEvent(i.$EVT_PROGRESS_CHANGE,f,a,n,j,e,c)};a.$SetPlayer=function(a){if(a&&!t){t=a;a.$On($JssorPlayer$.$EVT_SWITCH,x)}};p&&a.$Chain(p);g=a.$GetPosition_OuterEnd();a.$Chain(q);j=g+q.$IdleBegin;e=g+q.$IdleEnd;c=a.$GetPosition_OuterEnd()}function Mb(a,c,d){b.$CssLeft(a,c);b.$CssTop(a,d)}function bc(c,b){var a=x>0?x:gb,d=Bb*b*(a&1),e=Cb*b*(a>>1&1);Mb(c,d,e)}function Rb(){pb=O;Kb=z.$GetPlayToPosition();G=w.$GetPosition()}function ic(){Rb();if(B||!F&&E&12){z.$Stop();h.$TriggerEvent(i.$EVT_FREEZE)}}function gc(f){if(!B&&(F||!(E&12))&&!z.$IsPlaying()){var d=w.$GetPosition(),b=c.ceil(G);if(f&&c.abs(H)>=a.$MinDragOffsetToSlide){b=c.ceil(d);b+=eb}if(!(D&1))b=c.min(r-u,c.max(b,0));var e=c.abs(b-d);e=1-c.pow(1-e,5);if(!M&&pb)z.$Continue(Kb);else if(d==b){tb.$EnablePlayer();tb.$TryActivate()}else z.$PlayCarousel(d,b,e*Xb)}}function Ib(a){!b.$AttributeEx(b.$EvtSrc(a),"nodrag")&&b.$CancelEvent(a)}function vc(a){ac(a,1)}function ac(a,c){a=b.$GetEvent(a);var k=b.$EvtSrc(a);if(!L&&!b.$AttributeEx(k,"nodrag")&&wc()&&(!c||a.touches.length==1)){B=d;Ab=l;R=j;b.$AddEvent(f,c?"touchmove":"mousemove",Db);b.$GetNow();M=0;ic();if(!pb)x=0;if(c){var g=a.touches[0];vb=g.clientX;wb=g.clientY}else{var e=b.$MousePosition(a);vb=e.x;wb=e.y}H=0;bb=0;eb=0;h.$TriggerEvent(i.$EVT_DRAG_START,t(G),G,a)}}function Db(e){if(B){e=b.$GetEvent(e);var f;if(e.type!="mousemove"){var l=e.touches[0];f={x:l.clientX,y:l.clientY}}else f=b.$MousePosition(e);if(f){var j=f.x-vb,k=f.y-wb;if(c.floor(G)!=G)x=x||gb&L;if((j||k)&&!x){if(L==3)if(c.abs(k)>c.abs(j))x=2;else x=1;else x=L;if(jb&&x==1&&c.abs(k)-c.abs(j)>3)Ab=d}if(x){var a=k,i=Cb;if(x==1){a=j;i=Bb}if(!(D&1)){if(a>0){var g=i*s,h=a-g;if(h>0)a=g+c.sqrt(h)*5}if(a<0){var g=i*(r-u-s),h=-a-g;if(h>0)a=-g-c.sqrt(h)*5}}if(H-bb<-2)eb=0;else if(H-bb>2)eb=-1;bb=H;H=a;sb=G-H/i/(Z||1);if(H&&x&&!Ab){b.$CancelEvent(e);if(!O)z.$StandBy(sb);else z.$SetStandByPosition(sb)}}}}}function mb(){tc();if(B){B=l;b.$GetNow();b.$RemoveEvent(f,"mousemove",Db);b.$RemoveEvent(f,"touchmove",Db);M=H;z.$Stop();var a=w.$GetPosition();h.$TriggerEvent(i.$EVT_DRAG_END,t(a),a,t(G),G);E&12&&Rb();gc(d)}}function mc(c){if(M){b.$StopEvent(c);var a=b.$EvtSrc(c);while(a&&v!==a){a.tagName=="A"&&b.$CancelEvent(c);try{a=a.parentNode}catch(d){break}}}}function Lb(a){C[s];s=t(a);tb=C[s];Wb(a);return s}function Hc(a,b){x=0;Lb(a);h.$TriggerEvent(i.$EVT_PARK,t(a),b)}function Wb(a,c){yb=a;b.$Each(S,function(b){b.$SetCurrentIndex(t(a),a,c)})}function wc(){var b=i.$DragRegistry||0,a=Y;if(jb)a&1&&(a&=1);i.$DragRegistry|=a;return L=a&~b}function tc(){if(L){i.$DragRegistry&=~Y;L=0}}function Zb(){var a=b.$CreateDiv();b.$SetStyles(a,V);b.$CssPosition(a,"absolute");return a}function t(a){return(a%r+r)%r}function nc(b,d){if(d)if(!D){b=c.min(c.max(b+yb,0),r-u);d=l}else if(D&2){b=t(b+yb);d=l}nb(b,a.$SlideDuration,d)}function zb(){b.$Each(S,function(a){a.$Show(a.$Options.$ChanceToShow<=F)})}function kc(){if(!F){F=1;zb();if(!B){E&12&&gc();E&3&&C[s].$TryActivate()}}}function jc(){if(F){F=0;zb();B||!(E&12)||ic()}}function lc(){V={$Width:K,$Height:J,$Top:0,$Left:0};b.$Each(T,function(a){b.$SetStyles(a,V);b.$CssPosition(a,"absolute");b.$CssOverflow(a,"hidden");b.$HideElement(a)});b.$SetStyles(cb,V)}function lb(b,a){nb(b,a,d)}function nb(h,f,k){if(Tb&&(!B&&(F||!(E&12))||a.$NaviQuitDrag)){O=d;B=l;z.$Stop();if(f==g)f=Xb;var e=Eb.$GetPosition_Display(),b=h;if(k){b=e+h;if(h>0)b=c.ceil(b);else b=c.floor(b)}if(D&2)b=t(b);if(!(D&1))b=c.max(0,c.min(b,r-u));var j=(b-e)%r;b=e+j;var i=e==b?0:f*c.abs(j);i=c.min(i,f*u*1.5);z.$PlayCarousel(e,b,i||1)}}h.$PlayTo=nb;h.$GoTo=function(a){w.$GoToPosition(Lb(a))};h.$Next=function(){lb(1)};h.$Prev=function(){lb(-1)};h.$Pause=function(){P=l};h.$Play=function(){if(!P){P=d;C[s]&&C[s].$TryActivate()}};h.$SetSlideshowTransitions=function(b){a.$SlideshowOptions.$Transitions=b};h.$SetCaptionTransitions=function(a){I.$Transitions=a;I.$Version=b.$GetNow()};h.$SlidesCount=function(){return T.length};h.$CurrentIndex=function(){return s};h.$IsAutoPlaying=function(){return P};h.$IsDragging=function(){return B};h.$IsSliding=function(){return O};h.$IsMouseOver=function(){return!F};h.$LastDragSucceded=function(){return M};function X(){return b.$CssWidth(y||p)}function ib(){return b.$CssHeight(y||p)}h.$OriginalWidth=h.$GetOriginalWidth=X;h.$OriginalHeight=h.$GetOriginalHeight=ib;function Gb(c,d){if(c==g)return b.$CssWidth(p);if(!y){var a=b.$CreateDiv(f);b.$ClassName(a,b.$ClassName(p));b.$CssCssText(a,b.$CssCssText(p));b.$CssDisplay(a,"block");b.$CssPosition(a,"relative");b.$CssTop(a,0);b.$CssLeft(a,0);b.$CssOverflow(a,"visible");y=b.$CreateDiv(f);b.$CssPosition(y,"absolute");b.$CssTop(y,0);b.$CssLeft(y,0);b.$CssWidth(y,b.$CssWidth(p));b.$CssHeight(y,b.$CssHeight(p));b.$CssTransformOrigin(y,"0 0");b.$AppendChild(y,a);var i=b.$Children(p);b.$AppendChild(p,y);b.$Css(p,"backgroundImage","");b.$Each(i,function(c){b.$AppendChild(b.$AttributeEx(c,"noscale")?p:a,c);b.$AttributeEx(c,"autocenter")&&Nb.push(c)})}Z=c/(d?b.$CssHeight:b.$CssWidth)(y);b.$CssScale(y,Z);var h=d?Z*X():c,e=d?c:Z*ib();b.$CssWidth(p,h);b.$CssHeight(p,e);b.$Each(Nb,function(a){var c=b.$ParseInt(b.$AttributeEx(a,"autocenter"));b.$CenterElement(a,c)})}h.$ScaleHeight=h.$GetScaleHeight=function(a){if(a==g)return b.$CssHeight(p);Gb(a,d)};h.$ScaleWidth=h.$SetScaleWidth=h.$GetScaleWidth=Gb;h.$GetVirtualIndex=function(a){var d=c.ceil(t(fb/dc)),b=t(a-s+d);if(b>u){if(a-s>r/2)a-=r;else if(a-s<=-r/2)a+=r}else a=s+b-d;return a};n.call(h);h.$Elmt=p=b.$GetElement(p);var a=b.$Extend({$FillMode:0,$LazyLoading:1,$ArrowKeyNavigation:1,$StartIndex:0,$AutoPlay:l,$Loop:1,$HWA:d,$NaviQuitDrag:d,$AutoPlaySteps:1,$AutoPlayInterval:3e3,$PauseOnHover:1,$SlideDuration:500,$SlideEasing:e.$EaseOutQuad,$MinDragOffsetToSlide:20,$SlideSpacing:0,$Cols:1,$Align:0,$UISearchMode:1,$PlayOrientation:1,$DragOrientation:1},hc);a.$HWA=a.$HWA&&b.$IsBrowser3dSafe();if(a.$Idle!=g)a.$AutoPlayInterval=a.$Idle;if(a.$ParkingPosition!=g)a.$Align=a.$ParkingPosition;var gb=a.$PlayOrientation&3,xc=(a.$PlayOrientation&4)/-4||1,db=a.$SlideshowOptions,I=b.$Extend({$Class:q,$PlayInMode:1,$PlayOutMode:1,$HWA:a.$HWA},a.$CaptionSliderOptions);I.$Transitions=I.$Transitions||I.$CaptionTransitions;var qb=a.$BulletNavigatorOptions,W=a.$ArrowNavigatorOptions,ab=a.$ThumbnailNavigatorOptions,Q=!a.$UISearchMode,y,v=b.$FindChild(p,"slides",Q),cb=b.$FindChild(p,"loading",Q)||b.$CreateDiv(f),Jb=b.$FindChild(p,"navigator",Q),ec=b.$FindChild(p,"arrowleft",Q),cc=b.$FindChild(p,"arrowright",Q),Hb=b.$FindChild(p,"thumbnavigator",Q),pc=b.$CssWidth(v),oc=b.$CssHeight(v),V,T=[],yc=b.$Children(v);b.$Each(yc,function(a){if(a.tagName=="DIV"&&!b.$AttributeEx(a,"u"))T.push(a);else b.$IsBrowserIe9Earlier()&&b.$CssZIndex(a,(b.$CssZIndex(a)||0)+1)});var s=-1,yb,tb,r=T.length,K=a.$SlideWidth||pc,J=a.$SlideHeight||oc,Yb=a.$SlideSpacing,Bb=K+Yb,Cb=J+Yb,dc=gb&1?Bb:Cb,u=c.min(a.$Cols,r),hb,x,L,Ab,S=[],Sb,Ub,Qb,fc,Gc,P,E=a.$PauseOnHover,qc=a.$AutoPlayInterval,Xb=a.$SlideDuration,rb,ub,fb,Tb=u<r,D=Tb?a.$Loop:0,Y,M,F=1,O,B,R,vb=0,wb=0,H,bb,eb,Eb,w,U,z,Vb=new sc,Z,Nb=[];if(r){if(a.$HWA)Mb=function(a,c,d){b.$SetStyleTransform(a,{$TranslateX:c,$TranslateY:d})};P=a.$AutoPlay;h.$Options=hc;lc();b.$Attribute(p,"jssor-slider",d);b.$CssZIndex(v,b.$CssZIndex(v)||0);b.$CssPosition(v,"absolute");hb=b.$CloneNode(v,d);b.$InsertBefore(hb,v);if(db){fc=db.$ShowLink;rb=db.$Class;ub=u==1&&r>1&&rb&&(!b.$IsBrowserIE()||b.$BrowserVersion()>=8)}fb=ub||u>=r||!(D&1)?0:a.$Align;Y=(u>1||fb?gb:-1)&a.$DragOrientation;var xb=v,C=[],A,N,Fb=b.$Device(),jb=Fb.$Touchable,G,pb,Kb,sb;Fb.$TouchActionAttr&&b.$Css(xb,Fb.$TouchActionAttr,([j,"pan-y","pan-x","none"])[Y]||"");U=new Dc;if(ub)A=new rb(Vb,K,J,db,jb);b.$AppendChild(hb,U.$Wrapper);b.$CssOverflow(v,"hidden");N=Zb();b.$Css(N,"backgroundColor","#000");b.$CssOpacity(N,0);b.$InsertBefore(N,xb.firstChild,xb);for(var ob=0;ob<T.length;ob++){var Ac=T[ob],Cc=new Bc(Ac,ob);C.push(Cc)}b.$HideElement(cb);Eb=new Ec;z=new rc(Eb,U);if(Y){b.$AddEvent(v,"mousedown",ac);b.$AddEvent(v,"touchstart",vc);b.$AddEvent(v,"dragstart",Ib);b.$AddEvent(v,"selectstart",Ib);b.$AddEvent(f,"mouseup",mb);b.$AddEvent(f,"touchend",mb);b.$AddEvent(f,"touchcancel",mb);b.$AddEvent(k,"blur",mb)}E&=jb?10:5;if(Jb&&qb){Sb=new qb.$Class(Jb,qb,X(),ib());S.push(Sb)}if(W&&ec&&cc){W.$Loop=D;W.$Cols=u;Ub=new W.$Class(ec,cc,W,X(),ib());S.push(Ub)}if(Hb&&ab){ab.$StartIndex=a.$StartIndex;Qb=new ab.$Class(Hb,ab);S.push(Qb)}b.$Each(S,function(a){a.$Reset(r,C,cb);a.$On(o.$NAVIGATIONREQUEST,nc)});b.$Css(p,"visibility","visible");Gb(X());b.$AddEvent(v,"click",mc,d);b.$AddEvent(p,"mouseout",b.$MouseOverOutFilter(kc,p));b.$AddEvent(p,"mouseover",b.$MouseOverOutFilter(jc,p));zb();a.$ArrowKeyNavigation&&b.$AddEvent(f,"keydown",function(b){if(b.keyCode==37)lb(-a.$ArrowKeyNavigation);else b.keyCode==39&&lb(a.$ArrowKeyNavigation)});var kb=a.$StartIndex;if(!(D&1))kb=c.max(0,c.min(kb,r-u));z.$PlayCarousel(kb,kb,0)}};i.$EVT_CLICK=21;i.$EVT_DRAG_START=22;i.$EVT_DRAG_END=23;i.$EVT_SWIPE_START=24;i.$EVT_SWIPE_END=25;i.$EVT_LOAD_START=26;i.$EVT_LOAD_END=27;i.$EVT_FREEZE=28;i.$EVT_POSITION_CHANGE=202;i.$EVT_PARK=203;i.$EVT_SLIDESHOW_START=206;i.$EVT_SLIDESHOW_END=207;i.$EVT_PROGRESS_CHANGE=208;i.$EVT_STATE_CHANGE=209;var o={$NAVIGATIONREQUEST:1,$INDEXCHANGE:2,$RESET:3};k.$JssorBulletNavigator$=function(e,C){var f=this;n.call(f);e=b.$GetElement(e);var s,A,z,r,k=0,a,m,i,w,x,h,g,q,p,B=[],y=[];function v(a){a!=-1&&y[a].$Selected(a==k)}function t(a){f.$TriggerEvent(o.$NAVIGATIONREQUEST,a*m)}f.$Elmt=e;f.$GetCurrentIndex=function(){return r};f.$SetCurrentIndex=function(a){if(a!=r){var d=k,b=c.floor(a/m);k=b;r=a;v(d);v(b)}};f.$Show=function(a){b.$ShowElement(e,a)};var u;f.$Reset=function(E){if(!u){s=c.ceil(E/m);k=0;var o=q+w,r=p+x,n=c.ceil(s/i)-1;A=q+o*(!h?n:i-1);z=p+r*(h?n:i-1);b.$CssWidth(e,A);b.$CssHeight(e,z);for(var f=0;f<s;f++){var C=b.$CreateSpan();b.$InnerText(C,f+1);var l=b.$BuildElement(g,"numbertemplate",C,d);b.$CssPosition(l,"absolute");var v=f%(n+1);b.$CssLeft(l,!h?o*v:f%i*o);b.$CssTop(l,h?r*v:c.floor(f/(n+1))*r);b.$AppendChild(e,l);B[f]=l;a.$ActionMode&1&&b.$AddEvent(l,"click",b.$CreateCallback(j,t,f));a.$ActionMode&2&&b.$AddEvent(l,"mouseover",b.$MouseOverOutFilter(b.$CreateCallback(j,t,f),l));y[f]=b.$Buttonize(l)}u=d}};f.$Options=a=b.$Extend({$SpacingX:10,$SpacingY:10,$Orientation:1,$ActionMode:1},C);g=b.$FindChild(e,"prototype");q=b.$CssWidth(g);p=b.$CssHeight(g);b.$RemoveElement(g,e);m=a.$Steps||1;i=a.$Rows||1;w=a.$SpacingX;x=a.$SpacingY;h=a.$Orientation-1;a.$Scale==l&&b.$Attribute(e,"noscale",d);a.$AutoCenter&&b.$Attribute(e,"autocenter",a.$AutoCenter)};k.$JssorArrowNavigator$=function(a,g,h){var c=this;n.call(c);var r,q,e,f,i;b.$CssWidth(a);b.$CssHeight(a);function k(a){c.$TriggerEvent(o.$NAVIGATIONREQUEST,a,d)}function p(c){b.$ShowElement(a,c||!h.$Loop&&e==0);b.$ShowElement(g,c||!h.$Loop&&e>=q-h.$Cols);r=c}c.$GetCurrentIndex=function(){return e};c.$SetCurrentIndex=function(b,a,c){if(c)e=a;else{e=b;p(r)}};c.$Show=p;var m;c.$Reset=function(c){q=c;e=0;if(!m){b.$AddEvent(a,"click",b.$CreateCallback(j,k,-i));b.$AddEvent(g,"click",b.$CreateCallback(j,k,i));b.$Buttonize(a);b.$Buttonize(g);m=d}};c.$Options=f=b.$Extend({$Steps:1},h);i=f.$Steps;if(f.$Scale==l){b.$Attribute(a,"noscale",d);b.$Attribute(g,"noscale",d)}if(f.$AutoCenter){b.$Attribute(a,"autocenter",f.$AutoCenter);b.$Attribute(g,"autocenter",f.$AutoCenter)}};k.$JssorThumbnailNavigator$=function(g,B){var h=this,y,p,a,v=[],z,x,e,q,r,u,t,m,s,f,k;n.call(h);g=b.$GetElement(g);function A(n,f){var g=this,c,m,l;function q(){m.$Selected(p==f)}function i(d){if(d||!s.$LastDragSucceded()){var a=e-f%e,b=s.$GetVirtualIndex((f+a)/e-1),c=b*e+e-a;h.$TriggerEvent(o.$NAVIGATIONREQUEST,c)}}g.$Index=f;g.$Highlight=q;l=n.$Thumb||n.$Image||b.$CreateDiv();g.$Wrapper=c=b.$BuildElement(k,"thumbnailtemplate",l,d);m=b.$Buttonize(c);a.$ActionMode&1&&b.$AddEvent(c,"click",b.$CreateCallback(j,i,0));a.$ActionMode&2&&b.$AddEvent(c,"mouseover",b.$MouseOverOutFilter(b.$CreateCallback(j,i,1),c))}h.$GetCurrentIndex=function(){return p};h.$SetCurrentIndex=function(b,d,f){var a=p;p=b;a!=-1&&v[a].$Highlight();v[b].$Highlight();!f&&s.$PlayTo(s.$GetVirtualIndex(c.floor(d/e)))};h.$Show=function(a){b.$ShowElement(g,a)};var w;h.$Reset=function(F,D){if(!w){y=F;c.ceil(y/e);p=-1;m=c.min(m,D.length);var h=a.$Orientation&1,n=u+(u+q)*(e-1)*(1-h),k=t+(t+r)*(e-1)*h,B=n+(n+q)*(m-1)*h,o=k+(k+r)*(m-1)*(1-h);b.$CssPosition(f,"absolute");b.$CssOverflow(f,"hidden");a.$AutoCenter&1&&b.$CssLeft(f,(z-B)/2);a.$AutoCenter&2&&b.$CssTop(f,(x-o)/2);b.$CssWidth(f,B);b.$CssHeight(f,o);var j=[];b.$Each(D,function(l,g){var i=new A(l,g),d=i.$Wrapper,a=c.floor(g/e),k=g%e;b.$CssLeft(d,(u+q)*k*(1-h));b.$CssTop(d,(t+r)*k*h);if(!j[a]){j[a]=b.$CreateDiv();b.$AppendChild(f,j[a])}b.$AppendChild(j[a],d);v.push(i)});var E=b.$Extend({$AutoPlay:l,$NaviQuitDrag:l,$SlideWidth:n,$SlideHeight:k,$SlideSpacing:q*h+r*(1-h),$MinDragOffsetToSlide:12,$SlideDuration:200,$PauseOnHover:1,$PlayOrientation:a.$Orientation,$DragOrientation:a.$NoDrag||a.$DisableDrag?0:a.$Orientation},a);s=new i(g,E);w=d}};h.$Options=a=b.$Extend({$SpacingX:0,$SpacingY:0,$Cols:1,$Orientation:1,$AutoCenter:3,$ActionMode:1},B);z=b.$CssWidth(g);x=b.$CssHeight(g);f=b.$FindChild(g,"slides",d);k=b.$FindChild(f,"prototype");u=b.$CssWidth(k);t=b.$CssHeight(k);b.$RemoveElement(k,f);e=a.$Rows||1;q=a.$SpacingX;r=a.$SpacingY;m=a.$Cols;a.$Scale==l&&b.$Attribute(g,"noscale",d)};function q(e,d,c){var a=this;m.call(a,0,c);a.$Revert=b.$EmptyFunction;a.$IdleBegin=0;a.$IdleEnd=c}k.$JssorCaptionSlideo$=function(n,f,l){var a=this,o,g={},i=f.$Transitions,c=new m(0,0);m.call(a,0,0);function j(d,c){var a={};b.$Each(d,function(d,f){var e=g[f];if(e){if(b.$IsPlainObject(d))d=j(d,c||f=="e");else if(c)if(b.$IsNumeric(d))d=o[d];a[e]=d}});return a}function k(e,c){var a=[],d=b.$Children(e);b.$Each(d,function(d){var h=b.$AttributeEx(d,"u")=="caption";if(h){var e=b.$AttributeEx(d,"t"),g=i[b.$ParseInt(e)]||i[e],f={$Elmt:d,$Transition:g};a.push(f)}if(c<5)a=a.concat(k(d,c+1))});return a}function r(d,e,a){b.$Each(e,function(g){var e=j(g),f=b.$FormatEasings(e.$Easing);if(e.$Left){e.$MoveX=e.$Left;f.$MoveX=f.$Left;delete e.$Left}if(e.$Top){e.$MoveY=e.$Top;f.$MoveY=f.$Top;delete e.$Top}var h={$Easing:f,$OriginalWidth:a.$Width,$OriginalHeight:a.$Height},i=new m(g.b,g.d,h,d,a,e);c.$Combine(i);a=b.$AddDif(a,e)});return a}function q(a){b.$Each(a,function(f){var a=f.$Elmt,e=b.$CssWidth(a),d=b.$CssHeight(a),c={$Left:b.$CssLeft(a),$Top:b.$CssTop(a),$MoveX:0,$MoveY:0,$Opacity:1,$ZIndex:b.$CssZIndex(a)||0,$Rotate:0,$RotateX:0,$RotateY:0,$ScaleX:1,$ScaleY:1,$TranslateX:0,$TranslateY:0,$TranslateZ:0,$SkewX:0,$SkewY:0,$Width:e,$Height:d,$Clip:{$Top:0,$Right:e,$Bottom:d,$Left:0}};c.$OriginalX=c.$Left;c.$OriginalY=c.$Top;r(a,f.$Transition,c)})}function t(g,f,h){var e=g.b-f;if(e){var b=new m(f,e);b.$Combine(c,d);b.$Shift(h);a.$Combine(b)}a.$Expand(g.d);return e}function s(f){var d=c.$GetPosition_OuterBegin(),e=0;b.$Each(f,function(c,f){c=b.$Extend({d:l},c);t(c,d,e);d=c.b;e+=c.d;if(!f||c.t==2){a.$IdleBegin=d;a.$IdleEnd=d+c.d}})}a.$Revert=function(){a.$GoToPosition(-1,d)};o=[h.$Swing,h.$Linear,h.$InQuad,h.$OutQuad,h.$InOutQuad,h.$InCubic,h.$OutCubic,h.$InOutCubic,h.$InQuart,h.$OutQuart,h.$InOutQuart,h.$InQuint,h.$OutQuint,h.$InOutQuint,h.$InSine,h.$OutSine,h.$InOutSine,h.$InExpo,h.$OutExpo,h.$InOutExpo,h.$InCirc,h.$OutCirc,h.$InOutCirc,h.$InElastic,h.$OutElastic,h.$InOutElastic,h.$InBack,h.$OutBack,h.$InOutBack,h.$InBounce,h.$OutBounce,h.$InOutBounce,h.$GoBack,h.$InWave,h.$OutWave,h.$OutJump,h.$InJump];var u={$Top:"y",$Left:"x",$Bottom:"m",$Right:"t",$Rotate:"r",$RotateX:"rX",$RotateY:"rY",$ScaleX:"sX",$ScaleY:"sY",$TranslateX:"tX",$TranslateY:"tY",$TranslateZ:"tZ",$SkewX:"kX",$SkewY:"kY",$Opacity:"o",$Easing:"e",$ZIndex:"i",$Clip:"c"};b.$Each(u,function(b,a){g[b]=a});q(k(n,1));c.$GoToPosition(-1);var p=f.$Breaks||[],e=[].concat(p[b.$ParseInt(b.$AttributeEx(n,"b"))]||[]);e.push({b:c.$GetPosition_OuterEnd(),d:e.length?0:l});s(e);a.$GoToPosition(-1)}})(window,document,Math,null,true,false);/*global CountlyHelpers, EnterpriseView, countlyGlobalEE, countlyView, countlyGlobal, Handlebars, app, $, jQuery*/

window.EnterpriseView = countlyView.extend({
    initialize: function() {},
    beforeRender: function() {
        if (!this.template) {
            var self = this;
            return $.when($.get(countlyGlobal.path + '/enterpriseinfo/templates/info.html', function(src) {
                self.template = Handlebars.compile(src);
            })).then(function() {});
        }
    },
    pageScript: function() {
        var titles = {
            "drill": jQuery.i18n.map["enterpriseinfo.drill-pitch"],
            "funnels": jQuery.i18n.map["enterpriseinfo.funnels-pitch"],
            "retention": jQuery.i18n.map["enterpriseinfo.retention-pitch"],
            "revenue": jQuery.i18n.map["enterpriseinfo.revenue-pitch"],
            "user-profiles": jQuery.i18n.map["enterpriseinfo.user-profiles-pitch"],
            "attribution": jQuery.i18n.map["enterpriseinfo.attribution-pitch"],
            //"flows":jQuery.i18n.map["enterpriseinfo.flows-pitch"],
            "scalability": jQuery.i18n.map["enterpriseinfo.scalability-pitch"],
            "support": jQuery.i18n.map["enterpriseinfo.support-pitch"],
            "raw-data": jQuery.i18n.map["enterpriseinfo.raw-data-pitch"]
        };

        $("#enterprise-sections").find(".app-container").on("click", function() {
            var section = $(this).data("section");

            $(".enterprise-content").hide();
            $(".enterprise-content." + section).show();
            var localize = $(".enterprise-content." + section + " .text").data("localization");
            $(".enterprise-content." + section + " .text").html(jQuery.i18n.map[localize]);

            $("#enterprise-sections").find(".app-container").removeClass("active");
            $(this).addClass("active");

            $(".widget-header .title").text(titles[section] || "");
        });
        $("#enterprise-sections").find(".app-container").first().click();
    },
    renderCommon: function() {
        $(this.el).html(this.template(this.templateData));
        this.pageScript();
    }
});

//register views
app.enterpriseView = new EnterpriseView();

app.route("/enterprise", "enterprise", function() {
    this.renderWhenReady(this.enterpriseView);
});

$(document).ready(function() {
    if (countlyGlobal.plugins.indexOf("drill") < 0) {
        if (typeof countlyGlobalEE !== "undefined" && countlyGlobalEE.discount) {
            var msg = {title: "5000+ users reached", message: "<a href='https://count.ly/enterprise-edition/' target='_blank'>To get 20% off Enterprise edition contact us with code:<br/><strong>" + countlyGlobalEE.discount + "</strong></a>", info: "Thank you for being with us", sticky: true, closeOnClick: false};
            CountlyHelpers.notify(msg);
        }

        var badge = '<a id="enterprise-badge" href="#/enterprise"><div data-localize="enterpriseinfo.badge">Get Enterprise</div></a>';
        $("#top-bar").find(".right-menu").after(badge);
    }
});;/*global countlyCommon, countlyGlobal, jQuery, $*/
(function(countlyLogger) {

    //Private Properties
    var _data = {};
    var _collection_info = {};
    //Public Methods
    countlyLogger.initialize = function(filter) {
        var query = {};
        if (filter) {
            query["t." + filter] = {$exists: true};
        }
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r,
            data: {
                "api_key": countlyGlobal.member.api_key,
                "app_id": countlyCommon.ACTIVE_APP_ID,
                "method": "logs",
                "filter": JSON.stringify(query)
            },
            success: function(json) {
                _data = json;
            }
        });
    };

    countlyLogger.collection_info = function() {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r,
            data: {
                "api_key": countlyGlobal.member.api_key,
                "app_id": countlyCommon.ACTIVE_APP_ID,
                "method": "collection_info"
            },
            success: function(json) {
                _collection_info = json;
            }
        });
    };



    countlyLogger.getData = function() {
        return _data;
    };

    countlyLogger.getCollectionInfo = function() {
        return _collection_info;
    };

}(window.countlyLogger = window.countlyLogger || {}, jQuery));;/*global countlyView, store, $, countlyLogger, countlyGlobal, Handlebars, countlyCommon, jQuery, moment, app, LoggerView, CountlyHelpers*/
window.LoggerView = countlyView.extend({
    initialize: function() {
        this.filter = (store.get("countly_loggerfilter")) ? store.get("countly_loggerfilter") : "logger-all";
    },
    beforeRender: function() {
        if (this.template) {
            return $.when(countlyLogger.initialize(this.filterToQuery()), countlyLogger.collection_info()).then(function() {});
        }
        else {
            var self = this;
            return $.when($.get(countlyGlobal.path + '/logger/templates/logger.html', function(src) {
                self.template = Handlebars.compile(src);
            }), countlyLogger.initialize(this.filterToQuery())
            , countlyLogger.collection_info()).then(function() {});
        }
    },
    renderCommon: function(isRefresh) {
        var data = countlyLogger.getData();
        var collectoin_info = countlyLogger.getCollectionInfo();
        this.templateData = {
            "page-title": jQuery.i18n.map["logger.title"],
            "collection-info": jQuery.i18n.prop("logger.collection-description", collectoin_info.max),
            "collection-capped": collectoin_info.capped,
        };
        var self = this;
        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            $("#" + this.filter).addClass("selected").addClass("active");

            this.dtable = $('#logger-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": data,
                "fnRowCallback": function(nRow, aData) {
                    $(nRow).attr("id", aData._id);
                },
                "aoColumns": [
                    CountlyHelpers.expandRowIconColumn(),
                    {
                        "mData": function(row) {
                            var ret = '';
                            if (row.m) {
                                ret += row.m + "<br/>";
                            }
                            else {
                                ret += "GET<br/>";
                            }
                            if (row.b === true) {
                                ret += "Bulk";
                            }

                            return ret;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["logger.type"]
                    },
                    {
                        "mData": function(row, type) {
                            if (type === "display") {
                                if ((Math.round(parseFloat(row.reqts, 10)) + "").length === 10) {
                                    return moment(row.reqts * 1000).format("MMMM Do YYYY<br/>HH:mm:ss");
                                }
                                else {
                                    return moment(row.reqts).format("MMMM Do YYYY<br/>HH:mm:ss");
                                }
                            }
                            else {
                                if ((Math.round(parseFloat(row.reqts, 10)) + "").length === 10) {
                                    return row.reqts * 1000;
                                }
                                else {
                                    return row.reqts;
                                }
                            }
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["logger.requestts"]
                    },
                    {
                        "mData": function(row, type) {
                            if (type === "display") {
                                if ((Math.round(parseFloat(row.ts, 10)) + "").length === 10) {
                                    return moment(row.ts * 1000).format("MMMM Do YYYY<br/>HH:mm:ss");
                                }
                                else {
                                    return moment(row.ts).format("MMMM Do YYYY<br/>HH:mm:ss");
                                }
                            }
                            else {
                                if ((Math.round(parseFloat(row.ts, 10)) + "").length === 10) {
                                    return row.ts * 1000;
                                }
                                else {
                                    return row.ts;
                                }
                            }
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["logger.timestamp"]
                    },
                    {
                        "mData": function(row) {
                            var ret = "<b>Device ID:</b> <br/>" + row.d.id;
                            if (row.d.d) {
                                ret += "<br/><br/>" + row.d.d;
                                if (row.d.p) {
                                    ret += " (" + row.d.p;
                                    if (row.d.pv) {
                                        ret += " " + row.d.pv.substring(1).replace(new RegExp(":", 'g'), ".");
                                    }
                                    ret += ")";
                                }
                            }
                            return ret;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["logger.device"]
                    },
                    {
                        "mData": function(row) {
                            if (typeof row.t === "object") {
                                var ob = {};
                                if (self.filter && self.filter !== "logger-all") {
                                    if (typeof row.t[self.filterToQuery()] === "string") {
                                        try {
                                            ob = JSON.parse(countlyCommon.decodeHtml(row.t[self.filterToQuery()]));
                                        }
                                        catch (ex) {
                                            ob = countlyCommon.decodeHtml(row.t[self.filterToQuery()]);
                                        }
                                    }
                                    else {
                                        ob = row.t[self.filterToQuery()];
                                    }
                                }
                                else {
                                    ob = [];
                                    for (var i in row.t) {
                                        ob.push(i);
                                    }
                                }
                                return "<pre>" + JSON.stringify(ob, null, 2) + "</pre>";
                            }
                            else if (typeof row.i === "object") {
                                return "<pre>" + JSON.stringify(row.i, null, 2) + "</pre>";
                            }
                            else {
                                var infoVal = "";
                                try {
                                    infoVal = JSON.parse(countlyCommon.decodeHtml(row.i));
                                }
                                catch (e) {
                                    return "<pre>" + countlyCommon.decodeHtml(row.i) + "</pre>";
                                }

                                return "<pre>" + JSON.stringify(infoVal, null, 2) + "</pre>";
                            }
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["logger.info"],
                        "bSortable": false
                    },
                    {
                        "mData": function(row) {

                            var ret = "";

                            if (row.v) {
                                ret += "<b>" + jQuery.i18n.map["logger.version"] + ":</b> ";
                                ret += "<br/>";
                                ret += row.v.replace(new RegExp(":", 'g'), ".");
                                ret += "<br/><br/>";
                            }

                            if (row.s && (row.s.name || row.s.version)) {
                                ret += "<b>" + jQuery.i18n.map["logger.sdk"] + ":</b> ";
                                ret += "<br/>";
                                ret += (row.s.name || "") + " " + (row.s.version || "");
                                ret += "<br/><br/>";
                            }

                            if (row.l.cc) {
                                ret += "<b>" + jQuery.i18n.map["logger.location"] + ":</b> ";
                                ret += "<br/>";
                                ret += '<div class="flag" style="margin-top:2px; margin-right:6px; background-image: url(images/flags/' + row.l.cc.toLowerCase() + '.png);"></div>' + row.l.cc;
                                if (row.l.cty) {
                                    ret += " (" + row.l.cty + ")";
                                }
                                ret += "<br/><br/>";
                            }

                            if (row.c) {
                                ret += "<b class='red-text'>" + jQuery.i18n.map["logger.request-canceled"] + ":</b><br/> " + row.c + "";
                                ret += "<br/><br/>";
                            }

                            if (jQuery.isArray(row.p)) {
                                ret += "<b class='red-text'>" + jQuery.i18n.map["logger.problems"] + ":</b><br/>" + row.p.join("<br/>");
                                ret += "<br/><br/>";
                            }

                            return ret;
                        },
                        "sType": "string",
                        "bSortable": false
                    }
                ]
            }));
            this.dtable.stickyTableHeaders();
            this.dtable.fnSort([ [2, 'desc'] ]);
            CountlyHelpers.expandRows(this.dtable, this.requestInfo);
        }
    },
    refresh: function() {
        var self = this;
        if (!this.dtable.aOpen.length) {
            $.when(countlyLogger.initialize(this.filterToQuery())).then(function() {
                if (app.activeView !== self) {
                    return false;
                }
                var data = countlyLogger.getData();
                CountlyHelpers.refreshTable(self.dtable, data);
                CountlyHelpers.reopenRows(self.dtable, self.requestInfo);
                app.localize();
            });
        }
    },
    filterLog: function(filter) {
        this.filter = filter;
        store.set("countly_loggerfilter", filter);
        $("#" + this.filter).addClass("selected").addClass("active");
        this.refresh();
    },
    filterToQuery: function() {
        if (this.filter) {
            if (this.filter === "logger-event") {
                return "events";
            }
            if (this.filter === "logger-session") {
                return "session";
            }
            if (this.filter === "logger-metric") {
                return "metrics";
            }
            if (this.filter === "logger-user") {
                return "user_details";
            }
            if (this.filter === "logger-crash") {
                return "crash";
            }
            if (this.filter === "logger-consent") {
                return "consent";
            }
        }
    },
    requestInfo: function(d) {
        // `d` is the original data object for the row
        var str = '';
        if (d && (d.h || d.q)) {
            str += '<div class="datatablesubrow">' +
			'<table cellpadding="5" cellspacing="0" border="0" style="width: 100%;">';
            if (d.h) {
                str += '<tr><td style="text-transform:none;">' + "<b>" + jQuery.i18n.map["logger.request-header"] + ":</b><pre>" + JSON.stringify(d.h, null, 2) + "</pre>" + '</td></tr>';
            }
            if (d.q) {
                str += '<tr><td>' + "<b>" + jQuery.i18n.map["logger.request-payload"] + ":</b><pre>" + JSON.stringify(JSON.parse(countlyCommon.decode(d.q)), null, 2) + "</pre>" + '</td></tr>';
            }
            str += '</table>';
            str += '</div>';
        }
        return str;
    },
});

//register views
app.loggerView = new LoggerView();

app.route('/manage/logger', 'logger', function() {
    this.renderWhenReady(this.loggerView);
});
app.addPageScript("/manage/logger", function() {
    $("#logger-selector").find(">.button").click(function() {
        if ($(this).hasClass("selected")) {
            return true;
        }

        $(".logger-selector").removeClass("selected").removeClass("active");
        var filter = $(this).attr("id");
        app.activeView.filterLog(filter);
    });
});

$(document).ready(function() {
    var menu = '<a href="#/manage/logger" class="item">' +
		'<div class="logo-icon fa fa-bars"></div>' +
		'<div class="text" data-localize="logger.title"></div>' +
	'</a>';
    if ($('#management-submenu .help-toggle').length) {
        $('#management-submenu .help-toggle').before(menu);
    }
});;/*global countlyCommon, countlyGlobal, jQuery*/

(function(countlySystemLogs, $) {

    //Private Properties
    var _data = {};

    //Public Methods
    countlySystemLogs.initialize = function() {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r,
            data: {
                "api_key": countlyGlobal.member.api_key,
                "app_id": countlyCommon.ACTIVE_APP_ID,
                "method": "systemlogs_meta"
            },
            success: function(json) {
                _data = json;
            }
        });
    };

    countlySystemLogs.getMetaData = function() {
        return _data;
    };

}(window.countlySystemLogs = window.countlySystemLogs || {}, jQuery));;/*global CountlyHelpers, countlySystemLogs, SystemLogsView, countlyAttribution, pathsToSectionNames, countlyCrashes, moment, countlyView, countlyCommon, countlyGlobal, Handlebars, app, $, jQuery*/

window.SystemLogsView = countlyView.extend({
    initialize: function() {

    },
    beforeRender: function() {
        if (this.template) {
            return $.when(countlySystemLogs.initialize()).then(function() {});
        }
        else {
            var self = this;
            return $.when($.get(countlyGlobal.path + '/systemlogs/templates/logs.html', function(src) {
                self.template = Handlebars.compile(src);
            }), countlySystemLogs.initialize()).then(function() {});
        }
    },
    getExportAPI: function(tableID) {
        if (tableID === 'd-table-actionlogs') {
            var query = app.activeView.action_query || {a: {$in: ["export_app_user", "app_user_deleted", "export_app_user_deleted"]}};
            query["i.app_id"] = countlyCommon.ACTIVE_APP_ID;

            var requestPath = '/o?api_key=' + countlyGlobal.member.api_key +
            "&app_id=" + countlyCommon.ACTIVE_APP_ID + "&method=systemlogs&iDisplayStart=0" +
            "&query=" + encodeURIComponent(JSON.stringify(query)) +
            "&period=" + countlyCommon.getPeriodForAjax();
            var apiQueryData = {
                api_key: countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID,
                path: requestPath,
                method: "GET",
                filename: "Compliance_export_or_purge_history_on_" + moment().format("DD-MMM-YYYY"),
                prop: ['aaData']
            };
            return apiQueryData;
        }
        return null;
    },
    renderCommon: function(isRefresh) {
        var meta = countlySystemLogs.getMetaData();
        var activeAction = jQuery.i18n.map["systemlogs.all-actions"];
        var activeUser = jQuery.i18n.map["systemlogs.all-users"];
        var i;
        if (this._query) {
            if (this._query.a) {
                activeAction = jQuery.i18n.prop("systemlogs.action." + this._query.a);
            }

            if (this._query.user_id) {
                for (i = 0; i < meta.users.length; i++) {
                    if (meta.users[i]._id === this._query.user_id) {
                        activeUser = meta.users[i].full_name;
                        break;
                    }
                }
            }
        }

        this.templateData = {
            "page-title": jQuery.i18n.map["systemlogs.title"],
            "active-action": activeAction,
            "actions": meta.a,
            "active-user": activeUser,
            "users": meta.users,
            query: this._query,
            back: this._back
        };

        var self = this;
        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            if (!app.hasRoutingHistory()) {
                $(".back-link").css('display', 'none');
            }

            $(".back-link").click(function() {
                app.back();
            });

            var tableData = [];

            this.dtable = $('#systemlogs-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaSorting": [[ 1, "desc" ]],
                "bServerSide": true,
                "sAjaxSource": countlyCommon.API_PARTS.data.r + "?api_key=" + countlyGlobal.member.api_key + "&app_id=" + countlyCommon.ACTIVE_APP_ID + "&method=systemlogs",
                "fnServerData": function(sSource, aoData, fnCallback) {
                    $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "data": aoData,
                        "success": function(data) {
                            fnCallback(data);
                            tableData = data.aaData;
                            CountlyHelpers.reopenRows(self.dtable, self.expandTable, self);
                        }
                    });
                },
                "fnServerParams": function(aoData) {
                    if (self._query) {
                        aoData.push({ "name": "query", "value": JSON.stringify(self._query) });
                    }
                    aoData.push({ "name": "period", "value": countlyCommon.getPeriodForAjax() });
                },
                "fnRowCallback": function(nRow, aData) {
                    $(nRow).attr("id", aData._id);
                },
                "aoColumns": [
                    CountlyHelpers.expandRowIconColumn(),
                    {
                        "mData": function(row, type) {
                            if (type === "display") {
                                return moment(new Date(row.ts * 1000)).format("ddd, D MMM YYYY HH:mm:ss");
                            }
                            else {
                                return row.ts;
                            }
                        },
                        "sType": "string",
                        "sExport": "systemlogs",
                        "sTitle": jQuery.i18n.map["systemlogs.timestamp"]
                    },
                    {
                        "mData": function(row, type) {
                            if (row.user_id && type === "display") {
                                return "<a href='#/manage/users/" + row.user_id + "' class='table-link-user green' title='" + row.u + "'>" + row.u + "</a>";
                            }
                            else {
                                return "<span title='" + row.u + "'>" + row.u + "</span>";
                            }
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["systemlogs.user"],
                        bSortable: false,
                        "sClass": "trim"
                    },
                    {
                        "mData": function(row) {
                            return row.ip;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["systemlogs.ip-address"],
                        bSortable: false
                    },
                    {
                        "mData": function(row) {
                            var ret = "<p>" + ((jQuery.i18n.map["systemlogs.action." + row.a]) ? jQuery.i18n.map["systemlogs.action." + row.a] : row.a) + "</p>";
                            if (typeof row.i === "object") {
                                if (typeof row.i.app_id !== "undefined" && countlyGlobal.apps[row.i.app_id]) {
                                    ret += "<p title='" + row.i.app_id + "'>" + jQuery.i18n.map["systemlogs.for-app"] + ": " + countlyGlobal.apps[row.i.app_id].name + "</p>";
                                }
                                if (typeof row.i.user_id !== "undefined") {
                                    var id = row.i.user_id;
                                    for (i = 0; i < meta.users.length; i++) {
                                        if (meta.users[i]._id === row.i.user_id) {
                                            id = meta.users[i].full_name;
                                            break;
                                        }
                                    }
                                    ret += "<p title='" + id + "'>" + jQuery.i18n.map["systemlogs.for-user"] + ": " + id + "</p>";
                                }
                                if (typeof row.i.campaign_id !== "undefined" && typeof countlyAttribution !== "undefined") {
                                    ret += "<p title='" + row.i.campaign_id + "'>" + jQuery.i18n.map["systemlogs.for-campaign"] + ": " + countlyAttribution.getCampaignName(row.i.campaign_id) + "</p>";
                                }
                                if (typeof row.i.crash_id !== "undefined" && typeof countlyCrashes !== "undefined") {
                                    ret += "<p title='" + row.i.crash_id + "'>" + jQuery.i18n.map["systemlogs.for-crash"] + ": " + countlyCrashes.getCrashName(row.i.crash_id) + "</p>";
                                }
                                if (typeof row.i.appuser_id !== "undefined") {
                                    ret += "<p title='" + row.i.appuser_id + "'>" + jQuery.i18n.map["systemlogs.for-appuser"] + ": " + row.i.appuser_id + "</p>";
                                }
                                if (typeof row.i.before !== "undefined" && typeof row.i.after !== "undefined") {
                                    if (!jQuery.isEmptyObject(row.i.before)) {
                                        if (typeof row.i._id !== "undefined") {
                                            ret += "<p title='" + row.i._id + "'>" + jQuery.i18n.map["systemlogs.for-id"] + ": " + row.i._id + "</p>";
                                        }
                                    }
                                }
                            }
                            return ret;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["systemlogs.action"],
                        bSortable: false
                    }
                ]
            }));

            this.dtable.stickyTableHeaders();
            //this.dtable.fnSort( [ [0,'desc'] ] );
            CountlyHelpers.expandRows(this.dtable, this.expandTable, this);

            app.addDataExport("systemlogs", function() {
                var ret = [];
                var elem;
                var users = {};
                for (i = 0; i < meta.users.length; i++) {
                    users[meta.users[i]._id] = meta.users[i];
                }
                if (tableData) {
                    for (i = 0; i < tableData.length; i++) {
                        elem = {};
                        elem[jQuery.i18n.map["systemlogs.timestamp"]] = moment(parseInt(tableData[i].ts) * 1000).format("ddd, D MMM YYYY HH:mm:ss");
                        if (tableData[i].user_id && users[tableData[i].user_id]) {
                            elem[jQuery.i18n.map["systemlogs.user"]] = users[tableData[i].user_id].email + " (" + users[tableData[i].user_id].username + ")";
                        }
                        else {
                            elem[jQuery.i18n.map["systemlogs.user"]] = tableData[i].u;
                        }
                        elem[jQuery.i18n.map["systemlogs.ip-address"]] = tableData[i].ip;
                        elem[jQuery.i18n.map["systemlogs.action"]] = ((jQuery.i18n.map["systemlogs.action." + tableData[i].a]) ? jQuery.i18n.map["systemlogs.action." + tableData[i].a] : tableData[i].a);
                        elem[jQuery.i18n.map["systemlogs.data"]] = "";
                        elem[jQuery.i18n.map["systemlogs.before"]] = "";
                        elem[jQuery.i18n.map["systemlogs.after"]] = "";
                        if (typeof tableData[i].i === "object") {
                            if (typeof tableData[i].i.before !== "undefined" && typeof tableData[i].i.after !== "undefined") {
                                var data = {};
                                for (var d in tableData[i].i) {
                                    if (d !== "before" && d !== "after" && d !== "update") {
                                        data[d] = tableData[i].i[d];
                                    }
                                }
                                elem[jQuery.i18n.map["systemlogs.data"]] = JSON.stringify(data);
                                elem[jQuery.i18n.map["systemlogs.before"]] = JSON.stringify(tableData[i].i.before);
                                elem[jQuery.i18n.map["systemlogs.after"]] = JSON.stringify(tableData[i].i.after);
                            }
                            else if (!jQuery.isEmptyObject(tableData[i].i)) {
                                elem[jQuery.i18n.map["systemlogs.data"]] = JSON.stringify(tableData[i].i);
                            }
                        }
                        else {
                            elem[jQuery.i18n.map["systemlogs.data"]] = tableData[i].i;
                        }
                        ret.push(elem);
                    }
                }
                return ret;
            });

            $(".action-segmentation .segmentation-option").on("click", function() {
                if (!self._query) {
                    self._query = {};
                }
                self._query.a = $(this).data("value");
                if (self._query.a === "") {
                    delete self._query.a;
                }
                app.navigate("#/manage/systemlogs/query/" + JSON.stringify(self._query));
                self.dtable.fnPageChange(0);
                self.refresh();
            });

            $(".user-segmentation .segmentation-option").on("click", function() {
                if (!self._query) {
                    self._query = {};
                }
                self._query.user_id = $(this).data("value");
                if (self._query.user_id === "") {
                    delete self._query.user_id;
                }
                app.navigate("#/manage/systemlogs/query/" + JSON.stringify(self._query));
                self.dtable.fnPageChange(0);
                self.refresh();
            });
        }
    },
    refresh: function() {
        this.dtable.fnDraw(false);
    },
    renderField: function(key, field, sub) {
        var ret = "";
        if (field && field.constructor === Array) {
            if (sub) {
                ret += field.join(", ");
            }
            else {
                ret += "<ul>";
                if (key === "restrict" && typeof pathsToSectionNames !== "undefined") {
                    field = pathsToSectionNames(field).split(", ");
                }
                for (var i = 0; i < field.length; i++) {
                    if (field[i] !== "") {
                        if (key === "user_of" || key === "admin_of") {
                            if (countlyGlobal.apps[field[i]]) {
                                ret += "<li>" + countlyGlobal.apps[field[i]].name + "</li>";
                            }
                            else {
                                ret += "<li>" + field[i] + "</li>";
                            }
                        }
                        else {
                            ret += "<li>" + this.renderField(i, field[i]) + "</li>";
                        }
                    }
                }
                ret += "</ul>";
            }
        }
        else if (field && typeof field === "object") {
            if (!jQuery.isEmptyObject(field)) {
                ret += "<ul>";
                for (i in field) {
                    ret += "<li>" + i + " = " + this.renderField(i, field[i], true) + "</li>";
                }
                ret += "</ul>";
            }
        }
        else if (!isNaN(field) && (Math.round(parseFloat(field, 10)) + "").length === 10) {
            ret += moment(parseFloat(field, 10) * 1000).format("ddd, D MMM YYYY HH:mm:ss");
        }
        else if (!isNaN(field) && (Math.round(parseFloat(field, 10)) + "").length === 13) {
            ret += moment(parseFloat(field, 10)).format("ddd, D MMM YYYY HH:mm:ss");
        }
        else if (key === "map") {
            ret += field.replace(/\n/g, '<br />');
        }
        else if (field !== null && field !== undefined) {
            ret += field;
        }
        return ret;
    },
    expandTable: function(row, self) {
        // `d` is the original data object for the row
        if (typeof row.i === "object") {
            var ret = "<div class='datatablesubrow'>";
            if (typeof row.i.before !== "undefined" && typeof row.i.after !== "undefined") {
                if (!jQuery.isEmptyObject(row.i.before)) {
                    ret += "<p>" + jQuery.i18n.map["systemlogs.changed-data"] + ":</p>";
                    ret += "<table style='width:100%;'>";
                    ret += "<tr><th style='width:20%;'>" + jQuery.i18n.map["systemlogs.field"] + "</th><th style='width:40%;'>" + jQuery.i18n.map["systemlogs.before"] + "</th><th style='width:40%;'>" + jQuery.i18n.map["systemlogs.after"] + "</th></tr>";
                    for (var i in row.i.before) {
                        ret += "<tr><td>" + i + "</td><td>" + self.renderField(i, row.i.before[i]) + "</td><td>" + self.renderField(i, row.i.after[i]) + "</td></tr>";
                    }
                    ret += "</table>";
                }
            }
            else if (!jQuery.isEmptyObject(row.i)) {
                ret += "<p>" + jQuery.i18n.map["systemlogs.has-data"] + ":</p>";
                ret += "<table style='width:100%;'>";
                ret += "<tr><th>" + jQuery.i18n.map["systemlogs.field"] + "</th><th>" + jQuery.i18n.map["systemlogs.value"] + "</th></tr>";
                for (i in row.i) {
                    ret += "<tr><td style='width:20%;'>" + i + "</td><td style='width:80%;'>" + self.renderField(i, row.i[i]) + "</td></tr>";
                }
                ret += "</table>";
            }
            if (ret === "<div class='datatablesubrow'>") {
                ret = "<p>" + jQuery.i18n.map["systemlogs.no-data"] + "</p>";
            }
            return ret + "</div>";
        }
        else {
            return row.i;
        }
    }
});

//register views
app.systemLogsView = new SystemLogsView();
if (countlyGlobal.member.global_admin) {
    app.route('/manage/systemlogs', 'systemlogs', function() {
        this.systemLogsView._query = null;
        this.renderWhenReady(this.systemLogsView);
    });

    app.route('/manage/systemlogs/query/*query', 'systemlogs_query', function(query) {
        try {
            query = JSON.parse(query);
        }
        catch (ex) {
            query = null;
        }
        this.systemLogsView._query = query;
        this.renderWhenReady(this.systemLogsView);
    });

    app.route('/manage/systemlogs/filter/*query', 'systemlogs_query', function(query) {
        try {
            query = JSON.parse(query);
        }
        catch (ex) {
            query = null;
        }
        this.systemLogsView._query = query;
        this.systemLogsView._back = true;
        this.renderWhenReady(this.systemLogsView);
    });

    app.addPageScript("/manage/compliance#", function() {
        if (app.activeView && app.activeView.tabs) {
            app.activeView.tabs.tabs('add', '#consent-actionlogs', jQuery.i18n.map["consent.export-history"]);
            app.activeView.tabs.tabs("refresh");
            $.when(countlySystemLogs.initialize()).then(function() {
                var html = "<div class='widget-header include-dateselector'><div class='left'><div style='overflow: auto'><div class='title small'>" + jQuery.i18n.map["consent.export-history"] + "</div></div>" +
                    "<div style='width:400px; display: block;'>" +
                    "<div class='cly-select float filter_actions-segmentation'>" +
                        "<div class='select-inner'>" +
                            "<div class='text-container'>" +
                                "<div class='text'>" + jQuery.i18n.map["common.all"] + "</div>" +
                            "</div>" +
                            "<div class='right combo'></div>" +
                        "</div>" +
                        "<div class='select-items square' style='width:300px;'>" +
                            "<div>" +
                                "<div data-value='all' class='segmentation-option item'>" + jQuery.i18n.map["common.all"] + "</div>" +
                                "<div data-value='export_app_user' class='segmentation-option item'>" + jQuery.i18n.map["systemlogs.action.export_app_user"] + "</div>" +
                                "<div data-value='app_user_deleted' class='segmentation-option item'>" + jQuery.i18n.map["systemlogs.action.app_user_deleted"] + "</div>" +
                                "<div data-value='export_app_user_deleted' class='segmentation-option item'>" + jQuery.i18n.map["systemlogs.action.export_app_user_deleted"] + "</div>" +
                            "</div>" +
                        "</div>" +
                    "</div>" +
                    "</div>" +
                "</div></div><div class='graph-description' style='border-bottom: none; line-height: 17px;' data-localize='consent.exports-desc'>" + jQuery.i18n.map["consent.exports-desc"] + "</div><table data-view='systemLogsView' id='d-table-actionlogs' class='d-table sortable help-zone-vb' cellpadding='0' cellspacing='0'></table>";
                $("#consent-actionlogs").append(html);
                $(".filter_actions-segmentation .segmentation-option").on("click", function() {
                    var val = $(this).data("value");
                    if (val && val !== "all") {
                        app.activeView.action_query = {a: val};
                    }
                    else {
                        app.activeView.action_query = {a: {$in: ["export_app_user", "app_user_deleted", "export_app_user_deleted"]}};
                    }
                    app.activeView.dtableactionlogs.fnDraw(false);
                });
                app.activeView.dtableactionlogs = $('#d-table-actionlogs').dataTable($.extend({}, $.fn.dataTable.defaults, {
                    "iDisplayLength": 30,
                    "aaSorting": [[ 0, "desc" ]],
                    "bServerSide": true,
                    "bFilter": false,
                    "sAjaxSource": countlyCommon.API_PARTS.data.r + "?api_key=" + countlyGlobal.member.api_key + "&app_id=" + countlyCommon.ACTIVE_APP_ID + "&method=systemlogs",
                    "fnServerData": function(sSource, aoData, fnCallback) {
                        self.request = $.ajax({
                            "dataType": 'json',
                            "type": "POST",
                            "url": sSource,
                            "data": aoData,
                            "success": function(data) {
                                fnCallback(data);
                            }
                        });
                    },
                    "fnServerParams": function(aoData) {
                        var query = app.activeView.action_query || {a: {$in: ["export_app_user", "app_user_deleted", "export_app_user_deleted"]}};
                        query["i.app_id"] = countlyCommon.ACTIVE_APP_ID;
                        aoData.push({ "name": "query", "value": JSON.stringify(query) });
                        aoData.push({ "name": "period", "value": countlyCommon.getPeriodForAjax() });
                    },
                    "oLanguage": {
                        "sInfoFiltered": ""
                    },
                    "aoColumns": [
                        {
                            "mData": function(row, type) {
                                if (type === "display") {
                                    return moment(new Date(row.ts * 1000)).format("ddd, D MMM YYYY HH:mm:ss");
                                }
                                else {
                                    return row.ts;
                                }
                            },
                            "sType": "string",
                            "sExport": "systemlogs",
                            "sTitle": jQuery.i18n.map["systemlogs.timestamp"]
                        },
                        {
                            "mData": function(row, type) {
                                if (row.user_id && type === "display") {
                                    return "<a href='#/manage/users/" + row.user_id + "' class='table-link-user green' title='" + row.u + "'>" + row.u + "</a>";
                                }
                                else {
                                    return "<span title='" + row.u + "'>" + row.u + "</span>";
                                }
                            },
                            "sType": "string",
                            "sTitle": jQuery.i18n.map["systemlogs.user"],
                            bSortable: false,
                            "sClass": "trim"
                        },
                        {
                            "mData": function(row) {
                                return row.ip;
                            },
                            "sType": "string",
                            "sTitle": jQuery.i18n.map["systemlogs.ip-address"],
                            bSortable: false
                        },
                        {
                            "mData": function(row) {
                                var ret = "<p>" + ((jQuery.i18n.map["systemlogs.action." + row.a]) ? jQuery.i18n.map["systemlogs.action." + row.a] : row.a) + "</p>";
                                if (typeof row.i === "object") {
                                    if (typeof row.i.app_id !== "undefined" && countlyGlobal.apps[row.i.app_id]) {
                                        ret += "<p title='" + row.i.app_id + "'>" + jQuery.i18n.map["systemlogs.for-app"] + ": " + countlyGlobal.apps[row.i.app_id].name + "</p>";
                                    }
                                    if (typeof row.i.appuser_id !== "undefined") {
                                        ret += "<p title='" + row.i.appuser_id + "'>" + jQuery.i18n.map["systemlogs.for-appuser"] + ": " + row.i.appuser_id + "</p>";
                                    }
                                    else if (typeof row.i.uids !== "undefined") {
                                        ret += "<p title='" + row.i.uids + "'>" + jQuery.i18n.map["systemlogs.for-appuser"] + ": " + row.i.uids + "</p>";
                                    }
                                    else if (typeof row.i.user_ids !== "undefined") {
                                        ret += "<p title='" + row.i.user_ids + "'>" + jQuery.i18n.map["systemlogs.for-appuser"] + ": " + row.i.user_ids + "</p>";
                                    }
                                    else if (typeof row.i.id !== "undefined") {
                                        ret += "<p title='" + row.i.id + "'>" + jQuery.i18n.map["systemlogs.for-appuser"] + ": " + row.i.id + "</p>";
                                    }
                                }
                                return ret;
                            },
                            "sType": "string",
                            "sTitle": jQuery.i18n.map["systemlogs.action"],
                            bSortable: false
                        }
                    ]
                }));
            });
        }
    });
    app.addRefreshScript("/manage/compliance#", function() {
        if (app.activeView.dtableactionlogs) {
            app.activeView.dtableactionlogs.fnDraw(false);
        }
    });
}

$(document).ready(function() {
    if (countlyGlobal.member.global_admin) {
        var menu = '<a href="#/manage/systemlogs" class="item">' +
            '<div class="logo-icon fa fa-user-secret"></div>' +
            '<div class="text" data-localize="systemlogs.title"></div>' +
        '</a>';
        if ($('#management-submenu .help-toggle').length) {
            $('#management-submenu .help-toggle').before(menu);
        }
    }

    app.addPageScript("/manage/users", function() {
        setTimeout(function() {
            $("#user-table").on("click", "tr", function() {
                var container = $(this);
                if (container.find("td.details").length === 0) {
                    setTimeout(function() {
                        container = container.next("tr");
                        var id = container.find(".user_id").val();
                        container.find(".button-container").append("<a class='icon-button light' data-localize='systemlogs.view-user-actions' href='#/manage/systemlogs/filter/{\"user_id\":\"" + id + "\"}'>" + jQuery.i18n.map["systemlogs.view-user-actions"] + "</a>");
                    }, 0);
                }
            });
        }, 1000);
    });
});;/*globals countlyCommon,countlyGlobal,jQuery */
(function(countlyErrorLogs, $) {

    //Private Properties
    var _data = {};

    //Public Methods
    countlyErrorLogs.initialize = function() {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r + "/errorlogs",
            data: {
                "api_key": countlyGlobal.member.api_key,
                "app_id": countlyCommon.ACTIVE_APP_ID,
                "bytes": 100000
            },
            success: function(json) {
                _data = json;
            }
        });
    };

    countlyErrorLogs.getData = function() {
        return _data;
    };

    countlyErrorLogs.del = function(id) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + "/errorlogs",
            data: {
                "api_key": countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID,
                log: id
            }
        });
    };

}(window.countlyErrorLogs = window.countlyErrorLogs || {}, jQuery));;/*globals countlyView,$,countlyErrorLogs,countlyGlobal,Handlebars,jQuery,countlyCommon,CountlyHelpers,app,ErrorLogsView */
window.ErrorLogsView = countlyView.extend({
    initialize: function() {

    },
    beforeRender: function() {
        if (this.template) {
            return $.when(countlyErrorLogs.initialize()).then(function() {});
        }
        else {
            var self = this;
            return $.when($.get(countlyGlobal.path + '/errorlogs/templates/logs.html', function(src) {
                self.template = Handlebars.compile(src);
            }), countlyErrorLogs.initialize()).then(function() {});
        }
    },
    renderCommon: function(isRefresh) {
        var data = countlyErrorLogs.getData();
        var download = countlyGlobal.path + "/o/errorlogs?api_key=" + countlyGlobal.member.api_key + "&app_id=" + countlyCommon.ACTIVE_APP_ID + "&download=true&log=";
        this.templateData = {
            "page-title": jQuery.i18n.map["errorlogs.title"],
            download: download,
            logs: data
        };
        var self = this;
        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            $("#tabs").tabs();
            $(".btn-clear-log").on("click", function() {
                var id = $(this).data("id");
                CountlyHelpers.confirm(jQuery.i18n.map["errorlogs.confirm-delete-" + id] || jQuery.i18n.map["errorlogs.confirm-delete"], "popStyleGreen", function(result) {
                    if (!result) {
                        return true;
                    }
                    $.when(countlyErrorLogs.del(id)).then(function(resData) {
                        if (resData.result === "Success") {
                            $.when(countlyErrorLogs.initialize()).then(function() {
                                self.renderCommon();
                                app.localize();
                            });
                        }
                        else {
                            CountlyHelpers.alert(resData.result, "red");
                        }
                    });
                }, [jQuery.i18n.map["common.no-dont-delete"], jQuery.i18n.map["common.yes-clear-it"]], {title: jQuery.i18n.map["errorlogs.confirm-delete-" + id + "-title"] || jQuery.i18n.map["errorlogs.confirm-delete-title"], image: "clear-api-logs"});
            });
        }
    },
    refresh: function() {
    }
});


//register views
app.errorLogsView = new ErrorLogsView();
if (countlyGlobal.member.global_admin) {
    app.route('/manage/errorlogs', 'errorlogs', function() {
        this.renderWhenReady(this.errorLogsView);
    });
}

$(document).ready(function() {
    if (countlyGlobal.member.global_admin) {
        var menu = '<a href="#/manage/errorlogs" class="item">' +
            '<div class="logo-icon fa fa-exclamation-triangle"></div>' +
            '<div class="text" data-localize="errorlogs.title"></div>' +
        '</a>';
        if ($('#management-submenu .help-toggle').length) {
            $('#management-submenu .help-toggle').before(menu);
        }
    }
});;/*global chance, countlyGlobal, countlyCommon, countlyCohorts, $, jQuery*/
(function(countlyPopulator) {
    var metric_props = {
        mobile: ["_os", "_os_version", "_resolution", "_device", "_carrier", "_app_version", "_density", "_locale", "_store"],
        web: ["_os", "_os_version", "_resolution", "_device", "_app_version", "_density", "_locale", "_store", "_browser"],
        desktop: ["_os", "_os_version", "_resolution", "_app_version", "_locale"]
    };
    var props = {
        _os: ["Android", "iOS", "Windows Phone"],
        _os_web: ["Android", "iOS", "Windows Phone", "Windows", "MacOS"],
        _os_desktop: ["Windows", "MacOS", "Linux"],
        _os_version_android: ["2.3", "2.3.7", "3.0", "3.2.6", "4.0", "4.0.4", "4.1", "4.3.1", "4.4", "4.4.4", "5.0", "5.1.1", "6.0", "6.0.1", "7.0", "7.1"],
        _os_version_ios: ["7.1.2", "8.4.1", "9.3.5", "10.1.1", "10.2"],
        _os_version_windows_phone: ["7", "8"],
        _os_version_windows: ["7", "8", "10"],
        _os_version_macos: ["10.8", "10.9", "10.10", "10.11", "10.12"],
        _os_version: function() {
            return getRandomInt(1, 9) + "." + getRandomInt(0, 5);
        },
        _resolution: ["320x480", "768x1024", "640x960", "1536x2048", "320x568", "640x1136", "480x800", "240x320", "540x960", "480x854", "240x400", "360x640", "800x1280", "600x1024", "600x800", "768x1366", "720x1280", "1080x1920"],
        _device_android: ["GT-S5830L", "HTC6525LVW", "MB860", "LT18i", "LG-P500", "Desire V", "Wildfire S A510e"],
        _device_ios: ["iPhone8,1", "iPhone9,1", "iPhone9,2", "iPod7,1", "iPad3,6"],
        _device_windows_phone: ["Lumia 535", "Lumia 540", "Lumia 640 XL"],
        _manufacture_android: ["Samsung", "Sony Ericsson", "LG", "Google", "HTC", "Huaiwei", "Lenovo", "Acer"],
        _manufacture_ios: ["Apple"],
        _manufacture_windows_phone: ["Nokia", "Microsoft"],
        _carrier: ["Telus", "Rogers Wireless", "T-Mobile", "Bell Canada", "AT&T", "Verizon", "Vodafone", "Cricket Communications", "O2", "Tele2", "Turkcell", "Orange", "Sprint", "Metro PCS"],
        _app_version: ["1.0", "1.1", "1.2", "1.3", "1.4", "1.5", "1.6", "1.7", "1.8", "1.9", "2.0", "2.1", "2.2", "2.3", "2.4", "2.5", "2.6", "2.7", "2.8", "2.9", "3.0", "3.1", "3.2"],
        _cpu: ["armv6", "armv7", "x86"],
        _opengl: ["opengl_es1", "opengl_es2"],
        _density_android: ["XHDPI", "MDPI", "HDPI", "XXHDPI", "TVDPI"],
        _density_ios: ["@1", "@2", "@3"],
        _density_macos: ["@1", "@2", "@3"],
        _density: function() {
            return getRandomInt(1, 3) + "." + getRandomInt(0, 5);
        },
        _locale: ["en_CA", "fr_FR", "de_DE", "it_IT", "ja_JP", "ko_KR", "en_US"],
        _browser: ["Opera", "Chrome", "Internet Explorer", "Safari", "Firefox"],
        _store: ["com.android.vending", "com.google.android.feedback", "com.google.vending", "com.slideme.sam.manager", "com.amazon.venezia", "com.sec.android.app.samsungapps", "com.nokia.payment.iapenabler", "com.qihoo.appstore", "cn.goapk.market", "com.wandoujia.phoenix2", "com.hiapk.marketpho", "com.hiapk.marketpad", "com.dragon.android.pandaspace", "me.onemobile.android", "com.aspire.mm", "com.xiaomi.market", "com.miui.supermarket", "com.baidu.appsearch", "com.tencent.android.qqdownloader", "com.android.browser", "com.bbk.appstore", "cm.aptoide.pt", "com.nduoa.nmarket", "com.rim.marketintent", "com.lenovo.leos.appstore", "com.lenovo.leos.appstore.pad", "com.keenhi.mid.kitservice", "com.yingyonghui.market", "com.moto.mobile.appstore", "com.aliyun.wireless.vos.appstore", "com.appslib.vending", "com.mappn.gfan", "com.diguayouxi", "um.market.android", "com.huawei.appmarket", "com.oppo.market", "com.taobao.appcenter"],
        _source: ["https://www.google.lv", "https://www.google.co.in/", "https://www.google.ru/", "http://stackoverflow.com/questions", "http://stackoverflow.com/unanswered", "http://stackoverflow.com/tags", "http://r.search.yahoo.com/"]
    };
    var widgetList = [];
    var eventsMap = {
        "Login": ["Lost", "Won"],
        "Logout": [],
        "Lost": ["Won", "Achievement", "Lost"],
        "Won": ["Lost", "Achievement"],
        "Achievement": ["Sound", "Shared"],
        "Sound": ["Lost", "Won"],
        "Shared": ["Lost", "Won"]
    };
    var segments = {
        Login: {referer: ["twitter", "notification", "unknown"]},
        Buy: {screen: ["End Level", "Main screen", "Before End"]},
        Lost: {level: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], mode: ["arcade", "physics", "story"], difficulty: ["easy", "medium", "hard"]},
        Won: {level: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], mode: ["arcade", "physics", "story"], difficulty: ["easy", "medium", "hard"]},
        Achievement: {name: ["Runner", "Jumper", "Shooter", "Berserker", "Tester"]},
        Sound: {state: ["on", "off"]},
        "[CLY]_action": {}
    };
    segments["[CLY]_push_open"] = {i: "123456789012345678901234"};
    segments["[CLY]_push_action"] = {i: "123456789012345678901234"};
    segments["[CLY]_push_sent"] = {i: "123456789012345678901234"};
    segments["[CLY]_view"] = {
        name: ["Settings Page", "Purchase Page", "Credit Card Entry", "Profile page", "Start page", "Message page"],
        visit: [1],
        start: [0, 1],
        exit: [0, 1],
        bounce: [0, 1],
        segment: ["Android", "iOS", "Windows Phone"]
    };
    var ip_address = [];
    /**
    * Generate random int between passed range
    * @param {number} min - min value of range
    * @param {number} max - max value of range
    * @returns {number} returns random number between min and max values
    **/
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    /**
    * Capitalize first letter of string
    * @param {string} string - input string
    * @returns {string} returns string which first letter capitalized
    **/
    function capitaliseFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    /**
    * Create random object with Facebook Login, Twitter Login, 
    * Twitter Login name and Has Apple Watch Os properties 
    * @returns {object} returns random object
    **/
    function createRandomObj() {
        var ob = {
            "Facebook Login": (Math.random() > 0.5) ? true : false,
            "Twitter Login": (Math.random() > 0.5) ? true : false
        };

        if (ob["Twitter Login"]) {
            ob["Twitter Login name"] = chance.twitter();
        }

        if ((Math.random() > 0.5)) {
            ob["Has Apple Watch OS"] = (Math.random() > 0.5) ? true : false;
        }
        return ob;
    }

    // helper functions
    /**
    * Generate random string with size property
    * @param {number} size - length of random string
    * @returns {object} returns random string
    **/
    function randomString(size) {
        var alphaChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        var generatedString = '';
        for (var index = 0; index < size; index++) {
            generatedString += alphaChars[getRandomInt(0, alphaChars.length - 1)];
        }

        return generatedString;
    }
    /**
    * Get property of prop object with parameter,
    * @param {string} name - name of property
    * @returns {object} returns random object
    **/
    function getProp(name) {
        if (typeof props[name] === "function") {
            return props[name]();
        }
        else if (typeof props[name] !== "undefined") {
            return props[name][Math.floor(Math.random() * props[name].length)];
        }
    }
    /**
    * Get In app purchase event
    * @returns {object} returns iap event
    **/
    function getIAPEvents() {
        var iap = [];
        var cur = countlyCommon.dot(countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID], 'plugins.revenue.iap_events');
        if (cur && cur.length) {
            for (var iapIndex = 0; iapIndex < cur.length; iapIndex++) {
                if (cur[iapIndex] && cur[iapIndex].length) {
                    iap.push(cur[iapIndex]);
                    eventsMap[cur[iapIndex]] = segments.Buy;
                }
            }
        }

        if (iap.length === 0) {
            iap = ["Buy"];
            eventsMap.Buy = segments.Buy;
        }
        return iap;
    }
    /**
    * Generate a user with random properties and actions
    **/
    function user() {
        this.getId = function() {
            /**
            * Generate hash for id
            * @returns {string} returns string contains 4 characters
            **/     
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
            }
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
        };

        this.getProp = getProp;

        var that = this;
        this.stats = {u: 0, s: 0, x: 0, d: 0, e: 0, r: 0, b: 0, c: 0, p: 0};
        this.id = this.getId();
        this.isRegistered = false;
        this.iap = getIAPEvents();

        this.hasSession = false;
        if (ip_address.length > 0 && Math.random() >= 0.5) {
            this.ip = ip_address.pop();
        }
        else {
            this.ip = chance.ip();
        }
        this.userdetails = {name: chance.name(), username: chance.twitter().substring(1), email: chance.email(), organization: capitaliseFirstLetter(chance.word()), phone: chance.phone(), gender: chance.gender().charAt(0), byear: chance.birthday().getFullYear(), custom: createRandomObj()};
        this.metrics = {};
        this.startTs = startTs;
        this.endTs = endTs;
        this.events = [];
        this.ts = getRandomInt(this.startTs, this.endTs);
        if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID] && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === "web") {
            this.platform = this.getProp("_os_web");
        }
        else if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID] && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === "desktop") {
            this.platform = this.getProp("_os_desktop");
        }
        else {
            this.platform = this.getProp("_os");
        }
        this.metrics._os = this.platform;
        var m_props = metric_props.mobile;
        if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID] && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type && metric_props[countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type]) {
            m_props = metric_props[countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type];
        }
        for (var mPropsIndex = 0; mPropsIndex < m_props.length; mPropsIndex++) {
            if (m_props[mPropsIndex] !== "_os") {
                //handle specific cases
                if (m_props[mPropsIndex] === "_store" && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID] && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === "web") {
                    this.metrics[m_props[mPropsIndex]] = this.getProp("_source");
                }
                else {
                    //check os specific metric
                    if (typeof props[m_props[mPropsIndex] + "_" + this.platform.toLowerCase().replace(/\s/g, "_")] !== "undefined") {
                        this.metrics[m_props[mPropsIndex]] = this.getProp(m_props[mPropsIndex] + "_" + this.platform.toLowerCase().replace(/\s/g, "_"));
                    }
                    //default metric set
                    else {
                        this.metrics[m_props[mPropsIndex]] = this.getProp(m_props[mPropsIndex]);
                    }
                }
            }
        }

        this.getCrash = function() {
            var crash = {};
            crash._os = this.metrics._os;
            crash._os_version = this.metrics._os_version;
            crash._device = this.metrics._device;
            crash._manufacture = this.getProp("_manufacture");
            crash._resolution = this.metrics._resolution;
            crash._app_version = this.metrics._app_version;
            crash._cpu = this.getProp("_cpu");
            crash._opengl = this.getProp("_opengl");

            crash._ram_total = getRandomInt(1, 4) * 1024;
            crash._ram_current = getRandomInt(1, crash._ram_total);
            crash._disk_total = getRandomInt(1, 20) * 1024;
            crash._disk_current = getRandomInt(1, crash._disk_total);
            crash._bat_total = 100;
            crash._bat_current = getRandomInt(1, crash._bat_total);
            crash._orientation = (Math.random() > 0.5) ? "landscape" : "portrait";

            crash._root = (Math.random() > 0.5) ? true : false;
            crash._online = (Math.random() > 0.5) ? true : false;
            crash._signal = (Math.random() > 0.5) ? true : false;
            crash._muted = (Math.random() > 0.5) ? true : false;
            crash._background = (Math.random() > 0.5) ? true : false;

            crash._error = this.getError();
            crash._logs = this.getLog();
            crash._nonfatal = (Math.random() > 0.5) ? true : false;
            crash._run = getRandomInt(1, 1800);

            var customs = ["facebook", "gideros", "admob", "chartboost", "googleplay"];
            crash._custom = {};
            for (var customsIndex = 0; customsIndex < customs.length; customsIndex++) {
                if (Math.random() > 0.5) {
                    crash._custom[customs[customsIndex]] = getRandomInt(1, 2) + "." + getRandomInt(0, 9);
                }
            }

            return crash;
        };

        this.getError = function() {
            var errors = [];
            var error = "";
            var stacks = 0;
            if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === "web") {
                errors = ["EvalError", "InternalError", "RangeError", "ReferenceError", "SyntaxError", "TypeError", "URIError"];
                var err = new Error(errors[Math.floor(Math.random() * errors.length)], randomString(5) + ".js", getRandomInt(1, 100));
                return err.stack + "";
            }
            else if (this.platform === "Android") {
                errors = ["java.lang.RuntimeException", "java.lang.NullPointerException", "java.lang.NoSuchMethodError", "java.lang.NoClassDefFoundError", "java.lang.ExceptionInInitializerError", "java.lang.IllegalStateException"];
                error = errors[Math.floor(Math.random() * errors.length)] + ": com.domain.app.Exception<init>\n";
                stacks = getRandomInt(5, 9);
                for (var stackIndex = 0; stackIndex < stacks; stackIndex++) {
                    error += "at com.domain.app.<init>(Activity.java:" + (stackIndex * 32) + ")\n";
                }
                return error;
            }
            else if (this.platform === "iOS") {
                errors = ["CoreFoundation                  0x182e3adb0 __exceptionPreprocess + 124",
                    "libobjc.A.dylib                 0x18249ff80 objc_exception_throw + 56",
                    "CoreFoundation                  0x182d1b098 -[__NSArrayI objectAtIndex:] + 196",
                    "CountlyTestApp-iOS              0x100046988 0x100030000 + 92552",
                    "CountlyTestApp-iOS              0x100044340 0x100030000 + 82752",
                    "UIKit                           0x187fd0be8 -[UIApplication sendAction:to:from:forEvent:] + 100",
                    "UIKit                           0x187fd0b64 -[UIControl sendAction:to:forEvent:] + 80",
                    "UIKit                           0x187fb8870 -[UIControl _sendActionsForEvents:withEvent:] + 436",
                    "UIKit                           0x187fd0454 -[UIControl touchesEnded:withEvent:] + 572",
                    "UIKit                           0x187f88c0c _UIGestureRecognizerUpdate + 8988",
                    "UIKit                           0x187fc9610 -[UIWindow _sendGesturesForEvent:] + 1132",
                    "UIKit                           0x187fc8c0c -[UIWindow sendEvent:] + 764",
                    "UIKit                           0x187f9904c -[UIApplication sendEvent:] + 248",
                    "UIKit                           0x187f97628 _UIApplicationHandleEventQueue + 6568",
                    "CoreFoundation                  0x182df109c __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24",
                    "CoreFoundation                  0x182df0b30 __CFRunLoopDoSources0 + 540",
                    "CoreFoundation                  0x182dee830 __CFRunLoopRun + 724",
                    "CoreFoundation                  0x182d18c50 CFRunLoopRunSpecific + 384",
                    "GraphicsServices                0x184600088 GSEventRunModal + 180",
                    "UIKit                           0x188002088 UIApplicationMain + 204",
                    "CountlyTestApp-iOS              0x10004342c 0x100030000 + 78892",
                    "libdyld.dylib                   0x1828b68b8 start + 4"
                ];
                error = "";
                stacks = getRandomInt(9, 19);
                for (var stackIndex2 = 0; stackIndex2 < stacks; stackIndex2++) {
                    error += stackIndex2 + " " + errors[Math.floor(Math.random() * errors.length)] + "\n";
                }
                return error;
            }
            else {
                return "System.ArgumentOutOfRangeException\n" +
                "   at System.ThrowHelper.ThrowArgumentOutOfRangeException()\n" +
                "   at System.Collections.Generic.List`1.get_Item(Int32 index)\n" +
                "   at StorePuzzle.PuzzleRenderer.HandleTileReleased(Object sender, PointerRoutedEventArgs e)";
            }
        };

        this.getLog = function() {
            var actions = [
                "clicked button 1",
                "clicked button 2",
                "clicked button 3",
                "clicked button 4",
                "clicked button 5",
                "rotated phone",
                "clicked back",
                "entered screen",
                "left screen",
                "touched screen",
                "taped screen",
                "long touched screen",
                "swipe left detected",
                "swipe right detected",
                "swipe up detected",
                "swipe down detected",
                "gesture detected",
                "shake detected"
            ];

            var items = getRandomInt(5, 10);
            var logs = [];
            for (var itemIndex = 0; itemIndex < items; itemIndex++) {
                logs.push(actions[getRandomInt(0, actions.length - 1)]);
            }
            return logs.join("\n");
        };

        this.getEvent = function(id) {
            this.stats.e++;
            if (!id) {
                if (this.previousEventId) {
                    id = eventsMap[this.previousEventId][Math.floor(Math.random() * eventsMap[this.previousEventId].length)];
                }
                else {
                    id = 'Login';
                }
            }

            if (id in eventsMap) {
                this.previousEventId = id;
            }

            var event = {
                "key": id,
                "count": 1,
                "timestamp": this.ts,
                "hour": getRandomInt(0, 23),
                "dow": getRandomInt(0, 6)
            };
            this.ts += 1000;
            var segment;
            if (this.iap.indexOf(id) !== -1) {
                this.stats.b++;
                event.sum = getRandomInt(100, 500) / 100;
                event.segmentation = {};
                for (var buyEvent in segments.Buy) {
                    segment = segments.Buy[buyEvent];
                    event.segmentation[buyEvent] = segment[Math.floor(Math.random() * segment.length)];
                }
            }
            else if (segments[id]) {
                event.segmentation = {};
                for (var segmentIndex in segments[id]) {
                    if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === "web" && (id === "[CLY]_view" && segmentIndex === "name")) {
                        var views = ["/" + countlyCommon.ACTIVE_APP_KEY + "/demo-page.html"];
                        event.segmentation[segmentIndex] = views[Math.floor(Math.random() * views.length)];
                    }
                    else {
                        segment = segments[id][segmentIndex];
                        event.segmentation[segmentIndex] = segment[Math.floor(Math.random() * segment.length)];
                    }
                }
            }
            if (id === "[CLY]_view") {
                event.dur = getRandomInt(0, 100);
            }
            else {
                event.dur = getRandomInt(0, 10);
            }

            return [event];
        };

        this.getEvents = function(count) {
            var events = [];
            for (var eventIndex = 0; eventIndex < count; eventIndex++) {
                events.push(this.getEvent()[0]);
            }
            return events;
        };

        this.getPushEvents = function() {
            var events = this.getPushEvent('[CLY]_push_sent');
            if (Math.random() >= 0.5) {
                events = events.concat(this.getPushEvent('[CLY]_push_open'));
                if (Math.random() >= 0.8) {
                    events = events.concat(this.getPushEvent('[CLY]_push_action'));
                }
            }
            return events;
        };
        this.getPushEvent = function(id) {
            this.stats.e++;
            var event = {
                "key": id,
                "count": 1,
                "timestamp": this.ts,
                "hour": getRandomInt(0, 23),
                "dow": getRandomInt(0, 6),
                "test": 1 // Events starting with [CLY]_ are ignored by the API (internal events). This flag is to bypass that.
            };
            this.ts += 1000;
            if (segments[id]) {
                var segment;
                event.segmentation = {};
                for (var i in segments[id]) {
                    segment = segments[id][i];
                    event.segmentation[i] = segment[Math.floor(Math.random() * segment.length)];
                }
            }
            return [event];
        };
        this.getFeedbackEvents = function() {
            var events = this.getFeedbackEvent();
            return events;
        };
        this.getFeedbackEvent = function() {
            this.stats.e++;
            var event = {
                "key": "[CLY]_star_rating",
                "count": 1,
                "timestamp": this.ts,
                "hour": getRandomInt(0, 23),
                "dow": getRandomInt(1, 6),
                "test": 1,
            };
            this.ts += 1000;
            event.segmentation = {};
            event.segmentation.email = chance.email();
            event.segmentation.comment = chance.sentence({words: 7});
            event.segmentation.rating = getRandomInt(1, 5);
            event.segmentation.app_version = this.metrics._app_version;
            event.segmentation.platform = this.metrics._os;
            if (widgetList.length) {
                event.segmentation.widget_id = widgetList[getRandomInt(0, widgetList.length - 1)]._id;
            }
            return [event];
        };
        this.getHeatmapEvents = function() {

            var events = this.getHeatmapEvent();
            if (Math.random() >= 0.5) {
                events = events.concat(this.getHeatmapEvent());
                if (Math.random() >= 0.8) {
                    events = events.concat(this.getHeatmapEvent());
                }
            }
            return events;
        };
        this.getHeatmapEvent = function() {
            this.stats.e++;
            var views = ["/" + countlyCommon.ACTIVE_APP_KEY + "/demo-page.html"];
            var event = {
                "key": "[CLY]_action",
                "count": 1,
                "timestamp": this.ts,
                "hour": getRandomInt(0, 23),
                "dow": getRandomInt(0, 6),
                "test": 1
            };
            var selectedOffsets = [{x: 468, y: 366}, {x: 1132, y: 87}, {x: 551, y: 87}, {x: 647, y: 87}, {x: 1132, y: 87}];
            this.ts += 1000;
            event.segmentation = {};
            event.segmentation.type = "click";
            var dice = getRandomInt(0, 6) % 2 === 0 ? true : false;
            if (dice) {
                var randomIndex = getRandomInt(0, selectedOffsets.length - 1);
                event.segmentation.x = selectedOffsets[randomIndex].x;
                event.segmentation.y = selectedOffsets[randomIndex].y;
            }
            else {
                event.segmentation.x = getRandomInt(0, 1440);
                event.segmentation.y = getRandomInt(0, 990);
            }
            event.segmentation.width = 1440;
            event.segmentation.height = 3586;
            event.segmentation.domain = window.location.origin;
            event.segmentation.view = views[Math.floor(Math.random() * views.length)];
            return [event];
        };
        this.getScrollmapEvents = function() {
            var events = this.getHeatmapEvent();
            if (Math.random() >= 0.5) {
                events = events.concat(this.getScrollmapEvent());
                if (Math.random() >= 0.8) {
                    events = events.concat(this.getScrollmapEvent());
                }
            }
            return events;
        };
        this.getScrollmapEvent = function() {
            this.stats.e++;
            var views = ["/" + countlyCommon.ACTIVE_APP_KEY + "/demo-page.html"];
            var event = {
                "key": "[CLY]_action",
                "count": 1,
                "timestamp": this.ts,
                "hour": getRandomInt(0, 23),
                "dow": getRandomInt(0, 6),
                "test": 1
            };
            this.ts += 1000;
            event.segmentation = {};
            event.segmentation.type = "scroll";
            // 0: min value of scrollY variable for demoPage
            // 3270: max value of scrollY variable for demoPage
            // 983: viewportHeight
            event.segmentation.y = getRandomInt(0, 3602) + 983;
            event.segmentation.width = 1440;
            event.segmentation.height = 3586;
            event.domain = window.location.origin;
            event.segmentation.view = views[Math.floor(Math.random() * views.length)];
            return [event];
        };

        this.startSession = function() {
            this.ts = this.ts + 60 * 60 * 24 + 100;
            this.stats.s++;
            var req = {};
            var events;
            if (!this.isRegistered) {
                this.isRegistered = true;
                this.stats.u++;
                events = this.getEvent("Login").concat(this.getEvent("[CLY]_view")).concat(this.getEvents(4));
                req = {timestamp: this.ts, begin_session: 1, metrics: this.metrics, user_details: this.userdetails, events: events};
                if (Math.random() > 0.5) {
                    this.hasPush = true;
                    this.stats.p++;
                    req.token_session = 1;
                    req.test_mode = 0;
                    req.events = req.events.concat(this.getPushEvents());
                    req.events = req.events.concat(this.getHeatmapEvents());
                    req.events = req.events.concat(this.getFeedbackEvents());
                    req.events = req.events.concat(this.getScrollmapEvents());
                    req[this.platform.toLowerCase() + "_token"] = randomString(8);
                }
            }
            else {
                events = this.getEvent("Login").concat(this.getEvent("[CLY]_view")).concat(this.getEvents(4));
                req = {timestamp: this.ts, begin_session: 1, events: events};
            }
            if (this.iap.length && Math.random() > 0.5) {
                req.events = req.events.concat(this.getEvent(this.iap[getRandomInt(0, this.iap.length - 1)]));
            }
            if (Math.random() > 0.5) {
                this.stats.c++;
                req.crash = this.getCrash();
            }
            var consents = ["sessions", "events", "views", "scrolls", "clicks", "forms", "crashes", "push", "attribution", "users"];
            req.consent = {};
            for (var consentIndex = 0; consentIndex < consents.length; consentIndex++) {
                req.consent[consents[consentIndex]] = (Math.random() > 0.8) ? false : true;
            }
            this.hasSession = true;
            this.request(req);
            this.timer = setTimeout(function() {
                that.extendSession();
            }, timeout);
        };

        this.extendSession = function() {
            if (this.hasSession) {
                var req = {};
                this.ts = this.ts + 30;
                this.stats.x++;
                this.stats.d += 30;
                var events = this.getEvent("[CLY]_view").concat(this.getEvents(2));
                req = {timestamp: this.ts, session_duration: 30, events: events};
                if (Math.random() > 0.8) {
                    this.timer = setTimeout(function() {
                        that.extendSession();
                    }, timeout);
                }
                else {
                    if (Math.random() > 0.5) {
                        this.stats.c++;
                        req.crash = this.getCrash();
                    }
                    this.timer = setTimeout(function() {
                        that.endSession();
                    }, timeout);
                }
                this.request(req);
            }
        };

        this.endSession = function() {
            if (this.timer) {
                clearTimeout(this.timer);
                this.timer = null;
            }
            if (this.hasSession) {
                this.hasSession = false;
                var events = this.getEvents(2).concat(this.getEvent("Logout"));
                this.request({timestamp: this.ts, end_session: 1, events: events});
            }
        };

        this.request = function(params) {
            this.stats.r++;
            params.device_id = this.id;
            params.ip_address = this.ip;
            params.hour = getRandomInt(0, 23);
            params.dow = getRandomInt(0, 6);
            params.stats = JSON.parse(JSON.stringify(this.stats));
            bulk.push(params);
            this.stats = {u: 0, s: 0, x: 0, d: 0, e: 0, r: 0, b: 0, c: 0, p: 0};
            countlyPopulator.sync();
        };
    }

    var bulk = [];
    var startTs = 1356998400;
    var endTs = new Date().getTime() / 1000;
    var timeout = 1000;
    var bucket = 50;
    var generating = false;
    var stopCallback = null;
    var users = [];
    var userAmount = 1000;
    var queued = 0;
    var totalStats = {u: 0, s: 0, x: 0, d: 0, e: 0, r: 0, b: 0, c: 0, p: 0};
    /**
    * Update populator UI 
    * @param {object} stats - current populator stats
    **/
    function updateUI(stats) {
        for (var i in stats) {
            totalStats[i] += stats[i];
            $(".populate-stats-" + i).text(totalStats[i]);
        }
    }
    /**
    * Create campaign 
    * @param {string} id - id of campaign
    * @param {string} name - name of campaign
    * @param {number} cost - cost of campaign
    * @param {string} type - cost type of campaign
    * @param {callback} callback - callback method
    **/
    function createCampaign(id, name, cost, type, callback) {
        $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/i/campaign/create",
            data: {
                api_key: countlyGlobal.member.api_key,
                args: JSON.stringify({
                    "_id": id + countlyCommon.ACTIVE_APP_ID,
                    "name": name,
                    "link": "http://count.ly",
                    "cost": cost,
                    "costtype": type,
                    "fingerprint": false,
                    "links": {},
                    "postbacks": [],
                    "app_id": countlyCommon.ACTIVE_APP_ID
                })
            },
            success: callback,
            error: callback
        });
    }
    /**
    * Create feedback popup
    * @param {string} popup_header_text - Popup header text
    * @param {string} popup_comment_callout - Popup comment input callout
    * @param {string} popup_email_callout - Popup email input callout
    * @param {string} popup_button_callout - Popup button callout
    * @param {string} popup_thanks_message - Popup thanks message
    * @param {string} trigger_position - Position of feedback trigger div on the screen
    * @param {string} trigger_bg_color - Background color of feedback trigger div
    * @param {string} trigger_font_color - Text color of feedback trigger div
    * @param {string} trigger_button_text - Text of trigger button text
    * @param {object} target_devices - Target devices object
    * @param {array}  target_pages - Array of target pages
    * @param {string} target_page - Only selected pages? or all pages (one of these; "all","selected")
    * @param {boolean} is_active - Is feedback popup active?
    * @param {boolean} hide_sticker - Hide sticker option
    * @param {function} callback - callback method
    * @return {function} returns ajax get request
    **/
    function createFeedbackWidget(popup_header_text, popup_comment_callout, popup_email_callout, popup_button_callout, popup_thanks_message, trigger_position, trigger_bg_color, trigger_font_color, trigger_button_text, target_devices, target_pages, target_page, is_active, hide_sticker, callback) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/i/feedback/widgets/create",
            data: {
                api_key: countlyGlobal.member.api_key,
                popup_header_text: popup_header_text,
                popup_comment_callout: popup_comment_callout,
                popup_email_callout: popup_email_callout,
                popup_button_callout: popup_button_callout,
                popup_thanks_message: popup_thanks_message,
                trigger_position: trigger_position,
                trigger_bg_color: trigger_bg_color,
                trigger_font_color: trigger_font_color,
                trigger_button_text: trigger_button_text,
                target_devices: JSON.stringify(target_devices),
                target_pages: JSON.stringify(target_pages),
                target_page: target_page,
                is_active: is_active,
                hide_sticker: hide_sticker,
                app_id: countlyCommon.ACTIVE_APP_ID
            },
            success: function(json, textStatus, xhr) {
                callback(json, textStatus, xhr);
            },
            error: function(json, textStatus, xhr) {
                callback(json, textStatus, xhr);
            }
        });
    }

    /**
    * Generate feedback popups three times
    * @param {callback} callback - callback method
    **/
    function generateWidgets(callback) {
        createFeedbackWidget("What's your opinion about this page?", "Add comment", "Contact me by e-mail", "Send feedback", "Thanks for feedback!", "mleft", "#fff", "#ddd", "Feedback", {phone: true, tablet: false, desktop: true}, ["/"], "selected", true, false, function() {
            createFeedbackWidget("Leave us a feedback", "Add comment", "Contact me by e-mail", "Send feedback", "Thanks!", "mleft", "#fff", "#ddd", "Feedback", {phone: true, tablet: false, desktop: false}, ["/"], "selected", true, false, function() {
                createFeedbackWidget("Did you like this web page?", "Add comment", "Contact me by e-mail", "Send feedback", "Thanks!", "bright", "#fff", "#ddd", "Feedback", {phone: true, tablet: false, desktop: false}, ["/"], "selected", true, false, function() {
                    $.ajax({
                        type: "GET",
                        url: countlyCommon.API_URL + "/o/feedback/widgets",
                        data: {
                            api_key: countlyGlobal.member.api_key,
                            app_id: countlyCommon.ACTIVE_APP_ID
                        },
                        success: function(json) {
                            widgetList = json;
                            callback();
                        },
                        error: function() {
                            callback();
                        }
                    });
                });
            });
        });
    }
    /**
    * Create a click for campaign which passed as param
    * @param {string} name - campaign name
    **/
    function clickCampaign(name) {
        var ip = chance.ip();
        if (ip_address.length && Math.random() > 0.5) {
            ip = ip_address[Math.floor(Math.random() * ip_address.length)];
        }
        else {
            ip_address.push(ip);
        }
        $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/i/campaign/click/" + name + countlyCommon.ACTIVE_APP_ID,
            data: {ip_address: ip, test: true, timestamp: getRandomInt(startTs, endTs)}
        });
    }
    /**
    * Generate social, ads and landing campaings and 
    * generate some dummy click for them
    * @param {callback} callback - callback method
    **/
    function genereateCampaigns(callback) {
        if (typeof countlyAttribution === "undefined") {
            callback();
            return;
        }
        var campaigns = ["social", "ads", "landing"];
        createCampaign("social", "Social Campaign", "0.5", "click", function() {
            createCampaign("ads", "Ads Campaign", "1", "install", function() {
                createCampaign("landing", "Landing page", "30", "campaign", function() {
                    for (var campaignIndex = 0; campaignIndex < 100; campaignIndex++) {
                        setTimeout(function() {
                            clickCampaign(campaigns[getRandomInt(0, campaigns.length - 1)]);
                        }, 1);
                    }
                    setTimeout(callback, 3000);
                });
            });
        });
    }


    /**
    * Generate retention user
    * @param {date} ts - date as timestamp
    * @param {number} userCount - users count will be generated
    * @param {array} ids - ids array
    * @param {callback} callback - callback function
    **/
    function generateRetentionUser(ts, userCount, ids, callback) {
        bulk = [];
        for (var userIndex = 0; userIndex < userCount; userIndex++) {
            for (var j = 0; j < ids.length; j++) {
                var metrics = {};
                var platform;
                if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID] && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === "web") {
                    platform = getProp("_os_web");
                }
                else if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID] && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === "desktop") {
                    platform = getProp("_os_desktop");
                }
                else {
                    platform = getProp("_os");
                }
                metrics._os = platform;
                var m_props = metric_props.mobile;
                if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID] && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type && metric_props[countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type]) {
                    m_props = metric_props[countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type];
                }
                for (var k = 0; k < m_props.length; k++) {
                    if (m_props[k] !== "_os") {
                        //handle specific cases
                        if (m_props[k] === "_store" && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID] && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === "web") {
                            metrics[m_props[k]] = getProp("_source");
                        }
                        else {
                            //check os specific metric
                            if (typeof props[m_props[k] + "_" + platform.toLowerCase().replace(/\s/g, "_")] !== "undefined") {
                                metrics[m_props[k]] = getProp(m_props[k] + "_" + platform.toLowerCase().replace(/\s/g, "_"));
                            }
                            //default metric set
                            else {
                                metrics[m_props[k]] = getProp(m_props[k]);
                            }
                        }
                    }
                }

                var userdetails = {name: chance.name(), username: chance.twitter().substring(1), email: chance.email(), organization: capitaliseFirstLetter(chance.word()), phone: chance.phone(), gender: chance.gender().charAt(0), byear: chance.birthday().getFullYear(), custom: createRandomObj()};

                bulk.push({ip_address: chance.ip(), device_id: userIndex + "" + ids[j], begin_session: 1, metrics: metrics, user_details: userdetails, timestamp: ts, hour: getRandomInt(0, 23), dow: getRandomInt(0, 6)});
                totalStats.s++;
                totalStats.u++;
            }
        }
        totalStats.r++;
        $.ajax({
            type: "POST",
            url: countlyCommon.API_URL + "/i/bulk",
            data: {
                app_key: countlyCommon.ACTIVE_APP_KEY,
                requests: JSON.stringify(bulk)
            },
            success: callback,
            error: callback
        });
    }

    /**
    * Generate retentions
    * @param {callback} callback - callback function
    **/    
    function generateRetention(callback) {
        if (typeof countlyRetention === "undefined") {
            callback();
            return;
        }
        var ts = endTs - 60 * 60 * 24 * 9;
        var ids = [ts];
        var userCount = 10;
        generateRetentionUser(ts, userCount--, ids, function() {
            ts += 60 * 60 * 24;
            ids.push(ts);
            generateRetentionUser(ts, userCount--, ids, function() {
                ts += 60 * 60 * 24;
                ids.push(ts);
                generateRetentionUser(ts, userCount--, ids, function() {
                    ts += 60 * 60 * 24;
                    ids.push(ts);
                    generateRetentionUser(ts, userCount--, ids, function() {
                        ts += 60 * 60 * 24;
                        ids.push(ts);
                        generateRetentionUser(ts, userCount--, ids, function() {
                            ts += 60 * 60 * 24;
                            ids.push(ts);
                            generateRetentionUser(ts, userCount--, ids, function() {
                                ts += 60 * 60 * 24;
                                ids.push(ts);
                                generateRetentionUser(ts, userCount--, ids, function() {
                                    ts += 60 * 60 * 24;
                                    ids.push(ts);
                                    generateRetentionUser(ts, userCount--, ids, callback);
                                });
                            });
                        });
                    });
                });
            });
        });
    }

    //Public Methods
    countlyPopulator.setStartTime = function(time) {
        startTs = time;
    };
    countlyPopulator.getStartTime = function() {
        return startTs;
    };
    countlyPopulator.setEndTime = function(time) {
        endTs = time;
    };
    countlyPopulator.getEndTime = function() {
        return endTs;
    };
    countlyPopulator.getUserAmount = function() {
        return userAmount;
    };
    countlyPopulator.generateUI = function() {
        for (var i in totalStats) {
            $(".populate-stats-" + i).text(totalStats[i]);
        }
    };
    countlyPopulator.generateUsers = function(amount) {
        stopCallback = null;
        userAmount = amount;
        bulk = [];
        totalStats = {u: 0, s: 0, x: 0, d: 0, e: 0, r: 0, b: 0, c: 0, p: 0};
        bucket = Math.max(amount / 50, 10);
        var mult = (Math.round(queued / 10) + 1);
        timeout = bucket * 10 * mult * mult;
        generating = true;
        /**
        * Create new user
        **/
        function createUser() {
            var u = new user();
            users.push(u);
            u.timer = setTimeout(function() {
                u.startSession();
            }, Math.random() * timeout);
        }
        /**
        * Start user session process
        * @param {object} u - user object
        **/
        function processUser(u) {
            if (u && !u.hasSession) {
                u.timer = setTimeout(function() {
                    u.startSession();
                }, Math.random() * timeout);
            }
        }
        /**
        * Start user session process
        * @param {object} u - user object
        **/
        function processUsers() {
            for (var userAmountIndex = 0; userAmountIndex < amount; userAmountIndex++) {
                processUser(users[userAmountIndex]);
            }
            if (users.length > 0 && generating) {
                setTimeout(processUsers, timeout);
            }
            else {
                countlyPopulator.sync(true);
            }
        }
        generateRetention(function() {
            genereateCampaigns(function() {
                for (var campaignAmountIndex = 0; campaignAmountIndex < amount; campaignAmountIndex++) {
                    createUser();
                }
                setTimeout(processUsers, timeout);
            });
        });
        if (countlyGlobal.plugins.indexOf("systemlogs") !== -1) {
            $.ajax({
                type: "GET",
                url: countlyCommon.API_URL + "/i/systemlogs",
                data: {
                    api_key: countlyGlobal.member.api_key,
                    data: JSON.stringify({app_id: countlyCommon.ACTIVE_APP_ID}),
                    action: "populator_run"
                },
                success: function() {}
            });
        }
        if (countlyGlobal.plugins.indexOf("star-rating") !== -1) {
            generateWidgets(function() {
            });
        }
        // for(var i = 0; i < amount; i++){
        //     createUser();
        // }
    };

    countlyPopulator.stopGenerating = function(clb) {
        generating = false;
        stopCallback = clb;
        var u;
        for (var userGenerationIndex = 0; userGenerationIndex < users.length; userGenerationIndex++) {
            u = users[userGenerationIndex];
            if (u) {
                u.endSession();
            }
        }
        users = [];

        if (!countlyPopulator.bulking && stopCallback) {
            countlyPopulator.ensureJobs();
        }
    };

    countlyPopulator.isGenerating = function() {
        return generating;
    };

    countlyPopulator.sync = function(force) {
        if (generating && (force || bulk.length > bucket) && !countlyPopulator.bulking) {
            queued++;
            var mult = Math.round(queued / 10) + 1;
            timeout = bucket * 10 * mult * mult;
            $(".populate-stats-br").text(queued);
            countlyPopulator.bulking = true;
            var req = bulk.splice(0, bucket);
            var temp = {u: 0, s: 0, x: 0, d: 0, e: 0, r: 0, b: 0, c: 0, p: 0};
            for (var i in req) {
                if (req[i].stats) {
                    for (var stat in req[i].stats) {
                        temp[stat] += req[i].stats[stat];
                    }
                    delete req[i].stats;
                }
            }
            $.ajax({
                type: "POST",
                url: countlyCommon.API_URL + "/i/bulk",
                data: {
                    app_key: countlyCommon.ACTIVE_APP_KEY,
                    requests: JSON.stringify(req)
                },
                success: function() {
                    queued--;
                    $(".populate-stats-br").text(queued);
                    updateUI(temp);
                    countlyPopulator.bulking = false;
                    countlyPopulator.sync();
                    if (!generating && stopCallback) {
                        countlyPopulator.ensureJobs();
                    }
                },
                error: function() {
                    queued--;
                    $(".populate-stats-br").text(queued);
                    countlyPopulator.bulking = false;
                    countlyPopulator.sync();
                    if (!generating && stopCallback) {
                        countlyPopulator.ensureJobs();
                    }
                }
            });
        }
    };

    countlyPopulator.ensureJobs = function() {
        if (typeof countlyCohorts !== "undefined") {
            var iap = getIAPEvents();
            countlyCohorts.add({
                cohort_name: "Bought & Shared",
                steps: JSON.stringify([
                    {
                        "type": "did",
                        "event": iap[0],
                        "period": "30days",
                        "query": "{}",
                        "byVal": ""
                    },
                    {
                        "type": "did",
                        "event": "Shared",
                        "period": "14days",
                        "query": "{}",
                        "byVal": ""
                    }
                ])
            });
            countlyCohorts.add({
                cohort_name: "Facebook login",
                steps: JSON.stringify([
                    {
                        "type": "did",
                        "event": "[CLY]_session",
                        "period": "30days",
                        "query": "{\"custom.Facebook Login\":{\"$in\":[\"true\"]}}",
                        "byVal": ""
                    }
                ])
            });
            countlyCohorts.add({
                cohort_name: "Purchased & Engaged",
                steps: JSON.stringify([
                    {
                        "type": "did",
                        "event": iap[0],
                        "period": "30days",
                        "query": "{}",
                        "byVal": ""
                    },
                    {
                        "type": "did",
                        "event": "[CLY]_session",
                        "period": "20days",
                        "query": "{}",
                        "byVal": ""
                    }
                ])
            });
        }
        if (stopCallback) {
            stopCallback(true);
        }
    };
}(window.countlyPopulator = window.countlyPopulator || {}, jQuery));;//  Chance.js 0.7.2
//  http://chancejs.com
//  (c) 2013 Victor Quinn
//  Chance may be freely distributed or modified under the MIT license.

(function () {

    // Constants
    var MAX_INT = 9007199254740992;
    var MIN_INT = -MAX_INT;
    var NUMBERS = '0123456789';
    var CHARS_LOWER = 'abcdefghijklmnopqrstuvwxyz';
    var CHARS_UPPER = CHARS_LOWER.toUpperCase();
    var HEX_POOL  = NUMBERS + "abcdef";

    // Cached array helpers
    var slice = Array.prototype.slice;

    // Constructor
    function Chance (seed) {
        if (!(this instanceof Chance)) {
            return new Chance(seed);
        }

        // if user has provided a function, use that as the generator
        if (typeof seed === 'function') {
            this.random = seed;
            return this;
        }

        var seedling;

        if (arguments.length) {
            // set a starting value of zero so we can add to it
            this.seed = 0;
        }
        // otherwise, leave this.seed blank so that MT will recieve a blank

        for (var i = 0; i < arguments.length; i++) {
            seedling = 0;
            if (typeof arguments[i] === 'string') {
                for (var j = 0; j < arguments[i].length; j++) {
                    seedling += (arguments[i].length - j) * arguments[i].charCodeAt(j);
                }
            } else {
                seedling = arguments[i];
            }
            this.seed += (arguments.length - i) * seedling;
        }

        // If no generator function was provided, use our MT
        this.mt = this.mersenne_twister(this.seed);
        this.random = function () {
            return this.mt.random(this.seed);
        };

        return this;
    }

    Chance.prototype.VERSION = "0.7.2";

    // Random helper functions
    function initOptions(options, defaults) {
        options || (options = {});

        if (defaults) {
            for (var i in defaults) {
                if (typeof options[i] === 'undefined') {
                    options[i] = defaults[i];
                }
            }
        }

        return options;
    }

    function testRange(test, errorMessage) {
        if (test) {
            throw new RangeError(errorMessage);
        }
    }

    /**
     * Encode the input string with Base64.
     */
    var base64 = function() {
        throw new Error('No Base64 encoder available.');
    };

    // Select proper Base64 encoder.
    (function determineBase64Encoder() {
        if (typeof btoa === 'function') {
            base64 = btoa;
        } else if (typeof Buffer === 'function') {
            base64 = function(input) {
                return new Buffer(input).toString('base64');
            };
        }
    })();

    // -- Basics --

    Chance.prototype.bool = function (options) {

        // likelihood of success (true)
        options = initOptions(options, {likelihood : 50});

        testRange(
            options.likelihood < 0 || options.likelihood > 100,
            "Chance: Likelihood accepts values from 0 to 100."
        );

        return this.random() * 100 < options.likelihood;
    };

    Chance.prototype.character = function (options) {
        options = initOptions(options);

        var symbols = "!@#$%^&*()[]",
            letters, pool;

        testRange(
            options.alpha && options.symbols,
            "Chance: Cannot specify both alpha and symbols."
        );


        if (options.casing === 'lower') {
            letters = CHARS_LOWER;
        } else if (options.casing === 'upper') {
            letters = CHARS_UPPER;
        } else {
            letters = CHARS_LOWER + CHARS_UPPER;
        }

        if (options.pool) {
            pool = options.pool;
        } else if (options.alpha) {
            pool = letters;
        } else if (options.symbols) {
            pool = symbols;
        } else {
            pool = letters + NUMBERS + symbols;
        }

        return pool.charAt(this.natural({max: (pool.length - 1)}));
    };

    // Note, wanted to use "float" or "double" but those are both JS reserved words.

    // Note, fixed means N OR LESS digits after the decimal. This because
    // It could be 14.9000 but in JavaScript, when this is cast as a number,
    // the trailing zeroes are dropped. Left to the consumer if trailing zeroes are
    // needed
    Chance.prototype.floating = function (options) {
        var num;

        options = initOptions(options, {fixed : 4});
        var fixed = Math.pow(10, options.fixed);

        testRange(
            options.fixed && options.precision,
            "Chance: Cannot specify both fixed and precision."
        );

        var max = MAX_INT / fixed;
        var min = -max;

        testRange(
            options.min && options.fixed && options.min < min,
            "Chance: Min specified is out of range with fixed. Min should be, at least, " + min
        );
        testRange(
            options.max && options.fixed && options.max > max,
            "Chance: Max specified is out of range with fixed. Max should be, at most, " + max
        );

        options = initOptions(options, {min : min, max : max});

        // Todo - Make this work!
        // options.precision = (typeof options.precision !== "undefined") ? options.precision : false;

        num = this.integer({min: options.min * fixed, max: options.max * fixed});
        var num_fixed = (num / fixed).toFixed(options.fixed);

        return parseFloat(num_fixed);
    };

    // NOTE the max and min are INCLUDED in the range. So:
    //
    // chance.natural({min: 1, max: 3});
    //
    // would return either 1, 2, or 3.

    Chance.prototype.integer = function (options) {

        // 9007199254740992 (2^53) is the max integer number in JavaScript
        // See: http://vq.io/132sa2j
        options = initOptions(options, {min: MIN_INT, max: MAX_INT});

        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        return Math.floor(this.random() * (options.max - options.min + 1) + options.min);
    };

    Chance.prototype.natural = function (options) {
        options = initOptions(options, {min: 0, max: MAX_INT});
        return this.integer(options);
    };

    Chance.prototype.string = function (options) {
        options = initOptions(options);

        var length = options.length || this.natural({min: 5, max: 20}),
            pool = options.pool,
            text = this.n(this.character, length, {pool: pool});

        return text.join("");
    };

    // -- End Basics --

    // -- Helpers --

    Chance.prototype.capitalize = function (word) {
        return word.charAt(0).toUpperCase() + word.substr(1);
    };

    Chance.prototype.mixin = function (obj) {
        for (var func_name in obj) {
            Chance.prototype[func_name] = obj[func_name];
        }
        return this;
    };

    // Given a function that generates something random and a number of items to generate,
    // return an array of items where none repeat.
    Chance.prototype.unique = function(fn, num, options) {
        options = initOptions(options, {
            // Default comparator to check that val is not already in arr.
            // Should return `false` if item not in array, `true` otherwise
            comparator: function(arr, val) {
                return arr.indexOf(val) !== -1;
            }
        });

        var arr = [], count = 0, result, MAX_DUPLICATES = num * 50, params = slice.call(arguments, 2);

        while (arr.length < num) {
            result = fn.apply(this, params);
            if (!options.comparator(arr, result)) {
                arr.push(result);
                // reset count when unique found
                count = 0;
            }

            if (++count > MAX_DUPLICATES) {
                throw new RangeError("Chance: num is likely too large for sample set");
            }
        }
        return arr;
    };

    /**
     *  Gives an array of n random terms
     *  @param fn the function that generates something random
     *  @param n number of terms to generate
     *  There can be more parameters after these. All additional parameters are provided to the given function
     */
    Chance.prototype.n = function(fn, n) {
        if (typeof n === 'undefined') {
            n = 1;
        }
        var i = n, arr = [], params = slice.call(arguments, 2);

        // Providing a negative count should result in a noop.
        i = Math.max( 0, i );

        for (null; i--; null) {
            arr.push(fn.apply(this, params));
        }

        return arr;
    };

    // H/T to SO for this one: http://vq.io/OtUrZ5
    Chance.prototype.pad = function (number, width, pad) {
        // Default pad to 0 if none provided
        pad = pad || '0';
        // Convert number to a string
        number = number + '';
        return number.length >= width ? number : new Array(width - number.length + 1).join(pad) + number;
    };

    Chance.prototype.pick = function (arr, count) {
        if (arr.length === 0) {
            throw new RangeError("Chance: Cannot pick() from an empty array");
        }
        if (!count || count === 1) {
            return arr[this.natural({max: arr.length - 1})];
        } else {
            return this.shuffle(arr).slice(0, count);
        }
    };

    Chance.prototype.shuffle = function (arr) {
        var old_array = arr.slice(0),
            new_array = [],
            j = 0,
            length = Number(old_array.length);

        for (var i = 0; i < length; i++) {
            // Pick a random index from the array
            j = this.natural({max: old_array.length - 1});
            // Add it to the new array
            new_array[i] = old_array[j];
            // Remove that element from the original array
            old_array.splice(j, 1);
        }

        return new_array;
    };

    // Returns a single item from an array with relative weighting of odds
    Chance.prototype.weighted = function(arr, weights) {
        if (arr.length !== weights.length) {
            throw new RangeError("Chance: length of array and weights must match");
        }

        // Handle weights that are less or equal to zero.
        for (var weightIndex = weights.length - 1; weightIndex >= 0; --weightIndex) {
            // If the weight is less or equal to zero, remove it and the value.
            if (weights[weightIndex] <= 0) {
                arr.splice(weightIndex,1);
                weights.splice(weightIndex,1);
            }
        }

        // If any of the weights are less than 1, we want to scale them up to whole
        //   numbers for the rest of this logic to work
        if (weights.some(function(weight) { return weight < 1; })) {
            var min = weights.reduce(function(min, weight) {
                return (weight < min) ? weight : min;
            }, weights[0]);

            var scaling_factor = 1 / min;

            weights = weights.map(function(weight) {
                return weight * scaling_factor;
            });
        }

        var sum = weights.reduce(function(total, weight) {
            return total + weight;
        }, 0);

        // get an index
        var selected = this.natural({ min: 1, max: sum });

        var total = 0;
        var chosen;
        // Using some() here so we can bail as soon as we get our match
        weights.some(function(weight, index) {
            if (selected <= total + weight) {
                chosen = arr[index];
                return true;
            }
            total += weight;
            return false;
        });

        return chosen;
    };

    // -- End Helpers --

    // -- Text --

    Chance.prototype.paragraph = function (options) {
        options = initOptions(options);

        var sentences = options.sentences || this.natural({min: 3, max: 7}),
            sentence_array = this.n(this.sentence, sentences);

        return sentence_array.join(' ');
    };

    // Could get smarter about this than generating random words and
    // chaining them together. Such as: http://vq.io/1a5ceOh
    Chance.prototype.sentence = function (options) {
        options = initOptions(options);

        var words = options.words || this.natural({min: 12, max: 18}),
            text, word_array = this.n(this.word, words);

        text = word_array.join(' ');

        // Capitalize first letter of sentence, add period at end
        text = this.capitalize(text) + '.';

        return text;
    };

    Chance.prototype.syllable = function (options) {
        options = initOptions(options);

        var length = options.length || this.natural({min: 2, max: 3}),
            consonants = 'bcdfghjklmnprstvwz', // consonants except hard to speak ones
            vowels = 'aeiou', // vowels
            all = consonants + vowels, // all
            text = '',
            chr;

        // I'm sure there's a more elegant way to do this, but this works
        // decently well.
        for (var i = 0; i < length; i++) {
            if (i === 0) {
                // First character can be anything
                chr = this.character({pool: all});
            } else if (consonants.indexOf(chr) === -1) {
                // Last character was a vowel, now we want a consonant
                chr = this.character({pool: consonants});
            } else {
                // Last character was a consonant, now we want a vowel
                chr = this.character({pool: vowels});
            }

            text += chr;
        }

        return text;
    };

    Chance.prototype.word = function (options) {
        options = initOptions(options);

        testRange(
            options.syllables && options.length,
            "Chance: Cannot specify both syllables AND length."
        );

        var syllables = options.syllables || this.natural({min: 1, max: 3}),
            text = '';

        if (options.length) {
            // Either bound word by length
            do {
                text += this.syllable();
            } while (text.length < options.length);
            text = text.substring(0, options.length);
        } else {
            // Or by number of syllables
            for (var i = 0; i < syllables; i++) {
                text += this.syllable();
            }
        }
        return text;
    };

    // -- End Text --

    // -- Person --

    Chance.prototype.age = function (options) {
        options = initOptions(options);
        var ageRange;

        switch (options.type) {
            case 'child':
                ageRange = {min: 1, max: 12};
                break;
            case 'teen':
                ageRange = {min: 13, max: 19};
                break;
            case 'adult':
                ageRange = {min: 18, max: 65};
                break;
            case 'senior':
                ageRange = {min: 65, max: 100};
                break;
            case 'all':
                ageRange = {min: 1, max: 100};
                break;
            default:
                ageRange = {min: 18, max: 65};
                break;
        }

        return this.natural(ageRange);
    };

    Chance.prototype.birthday = function (options) {
        options = initOptions(options, {
            year: (new Date().getFullYear() - this.age(options))
        });

        return this.date(options);
    };

    // CPF; ID to identify taxpayers in Brazil
    Chance.prototype.cpf = function () {
        var n = this.n(this.natural, 9, { max: 9 });
        var d1 = n[8]*2+n[7]*3+n[6]*4+n[5]*5+n[4]*6+n[3]*7+n[2]*8+n[1]*9+n[0]*10;
        d1 = 11 - (d1 % 11);
        if (d1>=10) {
            d1 = 0;
        }
        var d2 = d1*2+n[8]*3+n[7]*4+n[6]*5+n[5]*6+n[4]*7+n[3]*8+n[2]*9+n[1]*10+n[0]*11;
        d2 = 11 - (d2 % 11);
        if (d2>=10) {
            d2 = 0;
        }
        return ''+n[0]+n[1]+n[2]+'.'+n[3]+n[4]+n[5]+'.'+n[6]+n[7]+n[8]+'-'+d1+d2;
    };

    Chance.prototype.first = function (options) {
        options = initOptions(options, {gender: this.gender()});
        return this.pick(this.get("firstNames")[options.gender.toLowerCase()]);
    };

    Chance.prototype.gender = function () {
        return this.pick(['Male', 'Female']);
    };

    Chance.prototype.last = function () {
        return this.pick(this.get("lastNames"));
    };

    Chance.prototype.name = function (options) {
        options = initOptions(options);

        var first = this.first(options),
            last = this.last(),
            name;

        if (options.middle) {
            name = first + ' ' + this.first(options) + ' ' + last;
        } else if (options.middle_initial) {
            name = first + ' ' + this.character({alpha: true, casing: 'upper'}) + '. ' + last;
        } else {
            name = first + ' ' + last;
        }

        if (options.prefix) {
            name = this.prefix(options) + ' ' + name;
        }

        if (options.suffix) {
            name = name + ' ' + this.suffix(options);
        }

        return name;
    };

    // Return the list of available name prefixes based on supplied gender.
    Chance.prototype.name_prefixes = function (gender) {
        gender = gender || "all";
        gender = gender.toLowerCase();

        var prefixes = [
            { name: 'Doctor', abbreviation: 'Dr.' }
        ];

        if (gender === "male" || gender === "all") {
            prefixes.push({ name: 'Mister', abbreviation: 'Mr.' });
        }

        if (gender === "female" || gender === "all") {
            prefixes.push({ name: 'Miss', abbreviation: 'Miss' });
            prefixes.push({ name: 'Misses', abbreviation: 'Mrs.' });
        }

        return prefixes;
    };

    // Alias for name_prefix
    Chance.prototype.prefix = function (options) {
        return this.name_prefix(options);
    };

    Chance.prototype.name_prefix = function (options) {
        options = initOptions(options, { gender: "all" });
        return options.full ?
            this.pick(this.name_prefixes(options.gender)).name :
            this.pick(this.name_prefixes(options.gender)).abbreviation;
    };

    Chance.prototype.ssn = function (options) {
        options = initOptions(options, {ssnFour: false, dashes: true});
        var ssn_pool = "1234567890",
            ssn,
            dash = options.dashes ? '-' : '';

        if(!options.ssnFour) {
            ssn = this.string({pool: ssn_pool, length: 3}) + dash +
            this.string({pool: ssn_pool, length: 2}) + dash +
            this.string({pool: ssn_pool, length: 4});
        } else {
            ssn = this.string({pool: ssn_pool, length: 4});
        }
        return ssn;
    };

    // Return the list of available name suffixes
    Chance.prototype.name_suffixes = function () {
        var suffixes = [
            { name: 'Doctor of Osteopathic Medicine', abbreviation: 'D.O.' },
            { name: 'Doctor of Philosophy', abbreviation: 'Ph.D.' },
            { name: 'Esquire', abbreviation: 'Esq.' },
            { name: 'Junior', abbreviation: 'Jr.' },
            { name: 'Juris Doctor', abbreviation: 'J.D.' },
            { name: 'Master of Arts', abbreviation: 'M.A.' },
            { name: 'Master of Business Administration', abbreviation: 'M.B.A.' },
            { name: 'Master of Science', abbreviation: 'M.S.' },
            { name: 'Medical Doctor', abbreviation: 'M.D.' },
            { name: 'Senior', abbreviation: 'Sr.' },
            { name: 'The Third', abbreviation: 'III' },
            { name: 'The Fourth', abbreviation: 'IV' }
        ];
        return suffixes;
    };

    // Alias for name_suffix
    Chance.prototype.suffix = function (options) {
        return this.name_suffix(options);
    };

    Chance.prototype.name_suffix = function (options) {
        options = initOptions(options);
        return options.full ?
            this.pick(this.name_suffixes()).name :
            this.pick(this.name_suffixes()).abbreviation;
    };

    // -- End Person --

    // -- Mobile --
    // Android GCM Registration ID
    Chance.prototype.android_id = function () {
        return "APA91" + this.string({ pool: "0123456789abcefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_", length: 178 });
    };

    // Apple Push Token
    Chance.prototype.apple_token = function () {
        return this.string({ pool: "abcdef1234567890", length: 64 });
    };

    // Windows Phone 8 ANID2
    Chance.prototype.wp8_anid2 = function () {
        return base64( this.hash( { length : 32 } ) );
    };

    // Windows Phone 7 ANID
    Chance.prototype.wp7_anid = function () {
        return 'A=' + this.guid().replace(/-/g, '').toUpperCase() + '&E=' + this.hash({ length:3 }) + '&W=' + this.integer({ min:0, max:9 });
    };

    // BlackBerry Device PIN
    Chance.prototype.bb_pin = function () {
        return this.hash({ length: 8 });
    };

    // -- End Mobile --

    // -- Web --
    Chance.prototype.color = function (options) {
        function gray(value, delimiter) {
            return [value, value, value].join(delimiter || '');
        }

        options = initOptions(options, {format: this.pick(['hex', 'shorthex', 'rgb', '0x']), grayscale: false, casing: 'lower'});
        var isGrayscale = options.grayscale;
        var colorValue;

        if (options.format === 'hex') {
            colorValue = '#' + (isGrayscale ? gray(this.hash({length: 2})) : this.hash({length: 6}));

        } else if (options.format === 'shorthex') {
            colorValue = '#' + (isGrayscale ? gray(this.hash({length: 1})) : this.hash({length: 3}));

        } else if (options.format === 'rgb') {
            if (isGrayscale) {
                colorValue = 'rgb(' + gray(this.natural({max: 255}), ',') + ')';
            } else {
                colorValue = 'rgb(' + this.natural({max: 255}) + ',' + this.natural({max: 255}) + ',' + this.natural({max: 255}) + ')';
            }
        } else if (options.format === '0x') {
            colorValue = '0x' + (isGrayscale ? gray(this.hash({length: 2})) : this.hash({length: 6}));
        } else {
            throw new Error('Invalid format provided. Please provide one of "hex", "shorthex", "rgb" or "0x".');
        }

        if (options.casing === 'upper' ) {
            colorValue = colorValue.toUpperCase();
        }

        return colorValue;
    };

    Chance.prototype.domain = function (options) {
        options = initOptions(options);
        return this.word() + '.' + (options.tld || this.tld());
    };

    Chance.prototype.email = function (options) {
        options = initOptions(options);
        return this.word({length: options.length}) + '@' + (options.domain || this.domain());
    };

    Chance.prototype.fbid = function () {
        return parseInt('10000' + this.natural({max: 100000000000}), 10);
    };

    Chance.prototype.google_analytics = function () {
        var account = this.pad(this.natural({max: 999999}), 6);
        var property = this.pad(this.natural({max: 99}), 2);

        return 'UA-' + account + '-' + property;
    };

    Chance.prototype.hashtag = function () {
        return '#' + this.word();
    };

    Chance.prototype.ip = function () {
        // Todo: This could return some reserved IPs. See http://vq.io/137dgYy
        // this should probably be updated to account for that rare as it may be
        return this.natural({max: 255}) + '.' +
               this.natural({max: 255}) + '.' +
               this.natural({max: 255}) + '.' +
               this.natural({max: 255});
    };

    Chance.prototype.ipv6 = function () {
        var ip_addr = this.n(this.hash, 8, {length: 4});

        return ip_addr.join(":");
    };

    Chance.prototype.klout = function () {
        return this.natural({min: 1, max: 99});
    };

    Chance.prototype.tlds = function () {
        return ['com', 'org', 'edu', 'gov', 'co.uk', 'net', 'io'];
    };

    Chance.prototype.tld = function () {
        return this.pick(this.tlds());
    };

    Chance.prototype.twitter = function () {
        return '@' + this.word();
    };

    Chance.prototype.url = function (options) {
        options = initOptions(options, { protocol: "http", domain: this.domain(options), domain_prefix: "", path: this.word(), extensions: []});

        var extension = options.extensions.length > 0 ? "." + this.pick(options.extensions) : "";
        var domain = options.domain_prefix ? options.domain_prefix + "." + options.domain : options.domain;

        return options.protocol + "://" + domain + "/" + options.path + extension;
    };

    // -- End Web --

    // -- Location --

    Chance.prototype.address = function (options) {
        options = initOptions(options);
        return this.natural({min: 5, max: 2000}) + ' ' + this.street(options);
    };

    Chance.prototype.altitude = function (options) {
        options = initOptions(options, {fixed : 5, max: 8848});
        return this.floating({min: 0, max: options.max, fixed: options.fixed});
    };

    Chance.prototype.areacode = function (options) {
        options = initOptions(options, {parens : true});
        // Don't want area codes to start with 1, or have a 9 as the second digit
        var areacode = this.natural({min: 2, max: 9}).toString() +
                this.natural({min: 0, max: 8}).toString() +
                this.natural({min: 0, max: 9}).toString();

        return options.parens ? '(' + areacode + ')' : areacode;
    };

    Chance.prototype.city = function () {
        return this.capitalize(this.word({syllables: 3}));
    };

    Chance.prototype.coordinates = function (options) {
        options = initOptions(options);
        return this.latitude(options) + ', ' + this.longitude(options);
    };

    Chance.prototype.countries = function () {
        return this.get("countries");
    };

    Chance.prototype.country = function (options) {
        options = initOptions(options);
        var country = this.pick(this.countries());
        return options.full ? country.name : country.abbreviation;
    };

    Chance.prototype.depth = function (options) {
        options = initOptions(options, {fixed: 5, min: -2550});
        return this.floating({min: options.min, max: 0, fixed: options.fixed});
    };

    Chance.prototype.geohash = function (options) {
        options = initOptions(options, { length: 7 });
        return this.string({ length: options.length, pool: '0123456789bcdefghjkmnpqrstuvwxyz' });
    };

    Chance.prototype.geojson = function (options) {
        options = initOptions(options);
        return this.latitude(options) + ', ' + this.longitude(options) + ', ' + this.altitude(options);
    };

    Chance.prototype.latitude = function (options) {
        options = initOptions(options, {fixed: 5, min: -90, max: 90});
        return this.floating({min: options.min, max: options.max, fixed: options.fixed});
    };

    Chance.prototype.longitude = function (options) {
        options = initOptions(options, {fixed: 5, min: -180, max: 180});
        return this.floating({min: options.min, max: options.max, fixed: options.fixed});
    };

    Chance.prototype.phone = function (options) {
        var self = this,
            numPick,
            ukNum = function (parts) {
                var section = [];
                //fills the section part of the phone number with random numbers.
                parts.sections.forEach(function(n) {
                    section.push(self.string({ pool: '0123456789', length: n}));
                });
                return parts.area + section.join(' ');
            };
        options = initOptions(options, {
            formatted: true,
            country: 'us',
            mobile: false
        });
        if (!options.formatted) {
            options.parens = false;
        }
        var phone;
        switch (options.country) {
            case 'fr':
                if (!options.mobile) {
                    numPick = this.pick([
                        // Valid zone and département codes.
                        '01' + this.pick(['30', '34', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '53', '55', '56', '58', '60', '64', '69', '70', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83']) + self.string({ pool: '0123456789', length: 6}),
                        '02' + this.pick(['14', '18', '22', '23', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '40', '41', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '56', '57', '61', '62', '69', '72', '76', '77', '78', '85', '90', '96', '97', '98', '99']) + self.string({ pool: '0123456789', length: 6}),
                        '03' + this.pick(['10', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '39', '44', '45', '51', '52', '54', '55', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90']) + self.string({ pool: '0123456789', length: 6}),
                        '04' + this.pick(['11', '13', '15', '20', '22', '26', '27', '30', '32', '34', '37', '42', '43', '44', '50', '56', '57', '63', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '88', '89', '90', '91', '92', '93', '94', '95', '97', '98']) + self.string({ pool: '0123456789', length: 6}),
                        '05' + this.pick(['08', '16', '17', '19', '24', '31', '32', '33', '34', '35', '40', '45', '46', '47', '49', '53', '55', '56', '57', '58', '59', '61', '62', '63', '64', '65', '67', '79', '81', '82', '86', '87', '90', '94']) + self.string({ pool: '0123456789', length: 6}),
                        '09' + self.string({ pool: '0123456789', length: 8}),
                    ]);
                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;
                } else {
                    numPick = this.pick(['06', '07']) + self.string({ pool: '0123456789', length: 8});
                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;
                }
                break;
            case 'uk':
                if (!options.mobile) {
                    numPick = this.pick([
                        //valid area codes of major cities/counties followed by random numbers in required format.
                        { area: '01' + this.character({ pool: '234569' }) + '1 ', sections: [3,4] },
                        { area: '020 ' + this.character({ pool: '378' }), sections: [3,4] },
                        { area: '023 ' + this.character({ pool: '89' }), sections: [3,4] },
                        { area: '024 7', sections: [3,4] },
                        { area: '028 ' + this.pick(['25','28','37','71','82','90','92','95']), sections: [2,4] },
                        { area: '012' + this.pick(['04','08','54','76','97','98']) + ' ', sections: [5] },
                        { area: '013' + this.pick(['63','64','84','86']) + ' ', sections: [5] },
                        { area: '014' + this.pick(['04','20','60','61','80','88']) + ' ', sections: [5] },
                        { area: '015' + this.pick(['24','27','62','66']) + ' ', sections: [5] },
                        { area: '016' + this.pick(['06','29','35','47','59','95']) + ' ', sections: [5] },
                        { area: '017' + this.pick(['26','44','50','68']) + ' ', sections: [5] },
                        { area: '018' + this.pick(['27','37','84','97']) + ' ', sections: [5] },
                        { area: '019' + this.pick(['00','05','35','46','49','63','95']) + ' ', sections: [5] }
                    ]);
                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '', 'g');
                } else {
                    numPick = this.pick([
                        { area: '07' + this.pick(['4','5','7','8','9']), sections: [2,6] },
                        { area: '07624 ', sections: [6] }
                    ]);
                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '');
                }
                break;
            case 'us':
                var areacode = this.areacode(options).toString();
                var exchange = this.natural({ min: 2, max: 9 }).toString() +
                    this.natural({ min: 0, max: 9 }).toString() +
                    this.natural({ min: 0, max: 9 }).toString();
                var subscriber = this.natural({ min: 1000, max: 9999 }).toString(); // this could be random [0-9]{4}
                phone = options.formatted ? areacode + ' ' + exchange + '-' + subscriber : areacode + exchange + subscriber;
        }
        return phone;
    };

    Chance.prototype.postal = function () {
        // Postal District
        var pd = this.character({pool: "XVTSRPNKLMHJGECBA"});
        // Forward Sortation Area (FSA)
        var fsa = pd + this.natural({max: 9}) + this.character({alpha: true, casing: "upper"});
        // Local Delivery Unut (LDU)
        var ldu = this.natural({max: 9}) + this.character({alpha: true, casing: "upper"}) + this.natural({max: 9});

        return fsa + " " + ldu;
    };

    Chance.prototype.provinces = function () {
        return this.get("provinces");
    };

    Chance.prototype.province = function (options) {
        return (options && options.full) ?
            this.pick(this.provinces()).name :
            this.pick(this.provinces()).abbreviation;
    };

    Chance.prototype.state = function (options) {
        return (options && options.full) ?
            this.pick(this.states(options)).name :
            this.pick(this.states(options)).abbreviation;
    };

    Chance.prototype.states = function (options) {
        options = initOptions(options);

        var states,
            us_states_and_dc = this.get("us_states_and_dc"),
            territories = this.get("territories"),
            armed_forces = this.get("armed_forces");

        states = us_states_and_dc;

        if (options.territories) {
            states = states.concat(territories);
        }
        if (options.armed_forces) {
            states = states.concat(armed_forces);
        }

        return states;
    };

    Chance.prototype.street = function (options) {
        options = initOptions(options);

        var street = this.word({syllables: 2});
        street = this.capitalize(street);
        street += ' ';
        street += options.short_suffix ?
            this.street_suffix().abbreviation :
            this.street_suffix().name;
        return street;
    };

    Chance.prototype.street_suffix = function () {
        return this.pick(this.street_suffixes());
    };

    Chance.prototype.street_suffixes = function () {
        // These are the most common suffixes.
        return this.get("street_suffixes");
    };

    // Note: only returning US zip codes, internationalization will be a whole
    // other beast to tackle at some point.
    Chance.prototype.zip = function (options) {
        var zip = this.n(this.natural, 5, {max: 9});

        if (options && options.plusfour === true) {
            zip.push('-');
            zip = zip.concat(this.n(this.natural, 4, {max: 9}));
        }

        return zip.join("");
    };

    // -- End Location --

    // -- Time

    Chance.prototype.ampm = function () {
        return this.bool() ? 'am' : 'pm';
    };

    Chance.prototype.date = function (options) {
        var date_string, date;

        // If interval is specified we ignore preset
        if(options && (options.min || options.max)) {
            options = initOptions(options, {
                american: true,
                string: false
            });
            var min = typeof options.min !== "undefined" ? options.min.getTime() : 1;
            // 100,000,000 days measured relative to midnight at the beginning of 01 January, 1970 UTC. http://es5.github.io/#x15.9.1.1
            var max = typeof options.max !== "undefined" ? options.max.getTime() : 8640000000000000;

            date = new Date(this.natural({min: min, max: max}));
        } else {
            var m = this.month({raw: true});

            options = initOptions(options, {
                year: parseInt(this.year(), 10),
                // Necessary to subtract 1 because Date() 0-indexes month but not day or year
                // for some reason.
                month: m.numeric - 1,
                day: this.natural({min: 1, max: m.days}),
                hour: this.hour(),
                minute: this.minute(),
                second: this.second(),
                millisecond: this.millisecond(),
                american: true,
                string: false
            });

            date = new Date(options.year, options.month, options.day, options.hour, options.minute, options.second, options.millisecond);
        }

        if (options.american) {
            // Adding 1 to the month is necessary because Date() 0-indexes
            // months but not day for some odd reason.
            date_string = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();
        } else {
            date_string = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();
        }

        return options.string ? date_string : date;
    };

    Chance.prototype.hammertime = function (options) {
        return this.date(options).getTime();
    };

    Chance.prototype.hour = function (options) {
        options = initOptions(options, {min: 1, max: options && options.twentyfour ? 24 : 12});

        testRange(options.min < 1, "Chance: Min cannot be less than 1.");
        testRange(options.twentyfour && options.max > 24, "Chance: Max cannot be greater than 24 for twentyfour option.");
        testRange(!options.twentyfour && options.max > 12, "Chance: Max cannot be greater than 12.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        return this.natural({min: options.min, max: options.max});
    };

    Chance.prototype.millisecond = function () {
        return this.natural({max: 999});
    };

    Chance.prototype.minute = Chance.prototype.second = function (options) {
        options = initOptions(options, {min: 0, max: 59});

        testRange(options.min < 0, "Chance: Min cannot be less than 0.");
        testRange(options.max > 59, "Chance: Max cannot be greater than 59.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        return this.natural({min: options.min, max: options.max});
    };

    Chance.prototype.month = function (options) {
        options = initOptions(options, {min: 1, max: 12});

        testRange(options.min < 1, "Chance: Min cannot be less than 1.");
        testRange(options.max > 12, "Chance: Max cannot be greater than 12.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        var month = this.pick(this.months().slice(options.min - 1, options.max));
        return options.raw ? month : month.name;
    };

    Chance.prototype.months = function () {
        return this.get("months");
    };

    Chance.prototype.second = function () {
        return this.natural({max: 59});
    };

    Chance.prototype.timestamp = function () {
        return this.natural({min: 1, max: parseInt(new Date().getTime() / 1000, 10)});
    };

    Chance.prototype.year = function (options) {
        // Default to current year as min if none specified
        options = initOptions(options, {min: new Date().getFullYear()});

        // Default to one century after current year as max if none specified
        options.max = (typeof options.max !== "undefined") ? options.max : options.min + 100;

        return this.natural(options).toString();
    };

    // -- End Time

    // -- Finance --

    Chance.prototype.cc = function (options) {
        options = initOptions(options);

        var type, number, to_generate;

        type = (options.type) ?
                    this.cc_type({ name: options.type, raw: true }) :
                    this.cc_type({ raw: true });

        number = type.prefix.split("");
        to_generate = type.length - type.prefix.length - 1;

        // Generates n - 1 digits
        number = number.concat(this.n(this.integer, to_generate, {min: 0, max: 9}));

        // Generates the last digit according to Luhn algorithm
        number.push(this.luhn_calculate(number.join("")));

        return number.join("");
    };

    Chance.prototype.cc_types = function () {
        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29
        return this.get("cc_types");
    };

    Chance.prototype.cc_type = function (options) {
        options = initOptions(options);
        var types = this.cc_types(),
            type = null;

        if (options.name) {
            for (var i = 0; i < types.length; i++) {
                // Accept either name or short_name to specify card type
                if (types[i].name === options.name || types[i].short_name === options.name) {
                    type = types[i];
                    break;
                }
            }
            if (type === null) {
                throw new Error("Credit card type '" + options.name + "'' is not supported");
            }
        } else {
            type = this.pick(types);
        }

        return options.raw ? type : type.name;
    };

    //return all world currency by ISO 4217
    Chance.prototype.currency_types = function () {
        return this.get("currency_types");
    };

    //return random world currency by ISO 4217
    Chance.prototype.currency = function () {
        return this.pick(this.currency_types());
    };

    //Return random correct currency exchange pair (e.g. EUR/USD) or array of currency code
    Chance.prototype.currency_pair = function (returnAsString) {
        var currencies = this.unique(this.currency, 2, {
            comparator: function(arr, val) {

                return arr.reduce(function(acc, item) {
                    // If a match has been found, short circuit check and just return
                    return acc || (item.code === val.code);
                }, false);
            }
        });

        if (returnAsString) {
            return  currencies[0] + '/' + currencies[1];
        } else {
            return currencies;
        }
    };

    Chance.prototype.dollar = function (options) {
        // By default, a somewhat more sane max for dollar than all available numbers
        options = initOptions(options, {max : 10000, min : 0});

        var dollar = this.floating({min: options.min, max: options.max, fixed: 2}).toString(),
            cents = dollar.split('.')[1];

        if (cents === undefined) {
            dollar += '.00';
        } else if (cents.length < 2) {
            dollar = dollar + '0';
        }

        if (dollar < 0) {
            return '-$' + dollar.replace('-', '');
        } else {
            return '$' + dollar;
        }
    };

    Chance.prototype.exp = function (options) {
        options = initOptions(options);
        var exp = {};

        exp.year = this.exp_year();

        // If the year is this year, need to ensure month is greater than the
        // current month or this expiration will not be valid
        if (exp.year === (new Date().getFullYear())) {
            exp.month = this.exp_month({future: true});
        } else {
            exp.month = this.exp_month();
        }

        return options.raw ? exp : exp.month + '/' + exp.year;
    };

    Chance.prototype.exp_month = function (options) {
        options = initOptions(options);
        var month, month_int,
            curMonth = new Date().getMonth();

        if (options.future) {
            do {
                month = this.month({raw: true}).numeric;
                month_int = parseInt(month, 10);
            } while (month_int < curMonth);
        } else {
            month = this.month({raw: true}).numeric;
        }

        return month;
    };

    Chance.prototype.exp_year = function () {
        return this.year({max: new Date().getFullYear() + 10});
    };

    // -- End Finance

    // -- Miscellaneous --

    // Dice - For all the board game geeks out there, myself included ;)
    function diceFn (range) {
        return function () {
            return this.natural(range);
        };
    }
    Chance.prototype.d4 = diceFn({min: 1, max: 4});
    Chance.prototype.d6 = diceFn({min: 1, max: 6});
    Chance.prototype.d8 = diceFn({min: 1, max: 8});
    Chance.prototype.d10 = diceFn({min: 1, max: 10});
    Chance.prototype.d12 = diceFn({min: 1, max: 12});
    Chance.prototype.d20 = diceFn({min: 1, max: 20});
    Chance.prototype.d30 = diceFn({min: 1, max: 30});
    Chance.prototype.d100 = diceFn({min: 1, max: 100});

    Chance.prototype.rpg = function (thrown, options) {
        options = initOptions(options);
        if (thrown === null) {
            throw new Error("A type of die roll must be included");
        } else {
            var bits = thrown.toLowerCase().split("d"),
                rolls = [];

            if (bits.length !== 2 || !parseInt(bits[0], 10) || !parseInt(bits[1], 10)) {
                throw new Error("Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die");
            }
            for (var i = bits[0]; i > 0; i--) {
                rolls[i - 1] = this.natural({min: 1, max: bits[1]});
            }
            return (typeof options.sum !== 'undefined' && options.sum) ? rolls.reduce(function (p, c) { return p + c; }) : rolls;
        }
    };

    // Guid
    Chance.prototype.guid = function (options) {
        options = initOptions(options, { version: 5 });

        var guid_pool = "abcdef1234567890",
            variant_pool = "ab89",
            guid = this.string({ pool: guid_pool, length: 8 }) + '-' +
                   this.string({ pool: guid_pool, length: 4 }) + '-' +
                   // The Version
                   options.version +
                   this.string({ pool: guid_pool, length: 3 }) + '-' +
                   // The Variant
                   this.string({ pool: variant_pool, length: 1 }) +
                   this.string({ pool: guid_pool, length: 3 }) + '-' +
                   this.string({ pool: guid_pool, length: 12 });
        return guid;
    };

    // Hash
    Chance.prototype.hash = function (options) {
        options = initOptions(options, {length : 40, casing: 'lower'});
        var pool = options.casing === 'upper' ? HEX_POOL.toUpperCase() : HEX_POOL;
        return this.string({pool: pool, length: options.length});
    };

    Chance.prototype.luhn_check = function (num) {
        var str = num.toString();
        var checkDigit = +str.substring(str.length - 1);
        return checkDigit === this.luhn_calculate(+str.substring(0, str.length - 1));
    };

    Chance.prototype.luhn_calculate = function (num) {
        var digits = num.toString().split("").reverse();
        var sum = 0;
        var digit;

        for (var i = 0, l = digits.length; l > i; ++i) {
            digit = +digits[i];
            if (i % 2 === 0) {
                digit *= 2;
                if (digit > 9) {
                    digit -= 9;
                }
            }
            sum += digit;
        }
        return (sum * 9) % 10;
    };


    var data = {

        firstNames: {
            "male": ["James", "John", "Robert", "Michael", "William", "David", "Richard", "Joseph", "Charles", "Thomas", "Christopher", "Daniel", "Matthew", "George", "Donald", "Anthony", "Paul", "Mark", "Edward", "Steven", "Kenneth", "Andrew", "Brian", "Joshua", "Kevin", "Ronald", "Timothy", "Jason", "Jeffrey", "Frank", "Gary", "Ryan", "Nicholas", "Eric", "Stephen", "Jacob", "Larry", "Jonathan", "Scott", "Raymond", "Justin", "Brandon", "Gregory", "Samuel", "Benjamin", "Patrick", "Jack", "Henry", "Walter", "Dennis", "Jerry", "Alexander", "Peter", "Tyler", "Douglas", "Harold", "Aaron", "Jose", "Adam", "Arthur", "Zachary", "Carl", "Nathan", "Albert", "Kyle", "Lawrence", "Joe", "Willie", "Gerald", "Roger", "Keith", "Jeremy", "Terry", "Harry", "Ralph", "Sean", "Jesse", "Roy", "Louis", "Billy", "Austin", "Bruce", "Eugene", "Christian", "Bryan", "Wayne", "Russell", "Howard", "Fred", "Ethan", "Jordan", "Philip", "Alan", "Juan", "Randy", "Vincent", "Bobby", "Dylan", "Johnny", "Phillip", "Victor", "Clarence", "Ernest", "Martin", "Craig", "Stanley", "Shawn", "Travis", "Bradley", "Leonard", "Earl", "Gabriel", "Jimmy", "Francis", "Todd", "Noah", "Danny", "Dale", "Cody", "Carlos", "Allen", "Frederick", "Logan", "Curtis", "Alex", "Joel", "Luis", "Norman", "Marvin", "Glenn", "Tony", "Nathaniel", "Rodney", "Melvin", "Alfred", "Steve", "Cameron", "Chad", "Edwin", "Caleb", "Evan", "Antonio", "Lee", "Herbert", "Jeffery", "Isaac", "Derek", "Ricky", "Marcus", "Theodore", "Elijah", "Luke", "Jesus", "Eddie", "Troy", "Mike", "Dustin", "Ray", "Adrian", "Bernard", "Leroy", "Angel", "Randall", "Wesley", "Ian", "Jared", "Mason", "Hunter", "Calvin", "Oscar", "Clifford", "Jay", "Shane", "Ronnie", "Barry", "Lucas", "Corey", "Manuel", "Leo", "Tommy", "Warren", "Jackson", "Isaiah", "Connor", "Don", "Dean", "Jon", "Julian", "Miguel", "Bill", "Lloyd", "Charlie", "Mitchell", "Leon", "Jerome", "Darrell", "Jeremiah", "Alvin", "Brett", "Seth", "Floyd", "Jim", "Blake", "Micheal", "Gordon", "Trevor", "Lewis", "Erik", "Edgar", "Vernon", "Devin", "Gavin", "Jayden", "Chris", "Clyde", "Tom", "Derrick", "Mario", "Brent", "Marc", "Herman", "Chase", "Dominic", "Ricardo", "Franklin", "Maurice", "Max", "Aiden", "Owen", "Lester", "Gilbert", "Elmer", "Gene", "Francisco", "Glen", "Cory", "Garrett", "Clayton", "Sam", "Jorge", "Chester", "Alejandro", "Jeff", "Harvey", "Milton", "Cole", "Ivan", "Andre", "Duane", "Landon"],
            "female": ["Mary", "Emma", "Elizabeth", "Minnie", "Margaret", "Ida", "Alice", "Bertha", "Sarah", "Annie", "Clara", "Ella", "Florence", "Cora", "Martha", "Laura", "Nellie", "Grace", "Carrie", "Maude", "Mabel", "Bessie", "Jennie", "Gertrude", "Julia", "Hattie", "Edith", "Mattie", "Rose", "Catherine", "Lillian", "Ada", "Lillie", "Helen", "Jessie", "Louise", "Ethel", "Lula", "Myrtle", "Eva", "Frances", "Lena", "Lucy", "Edna", "Maggie", "Pearl", "Daisy", "Fannie", "Josephine", "Dora", "Rosa", "Katherine", "Agnes", "Marie", "Nora", "May", "Mamie", "Blanche", "Stella", "Ellen", "Nancy", "Effie", "Sallie", "Nettie", "Della", "Lizzie", "Flora", "Susie", "Maud", "Mae", "Etta", "Harriet", "Sadie", "Caroline", "Katie", "Lydia", "Elsie", "Kate", "Susan", "Mollie", "Alma", "Addie", "Georgia", "Eliza", "Lulu", "Nannie", "Lottie", "Amanda", "Belle", "Charlotte", "Rebecca", "Ruth", "Viola", "Olive", "Amelia", "Hannah", "Jane", "Virginia", "Emily", "Matilda", "Irene", "Kathryn", "Esther", "Willie", "Henrietta", "Ollie", "Amy", "Rachel", "Sara", "Estella", "Theresa", "Augusta", "Ora", "Pauline", "Josie", "Lola", "Sophia", "Leona", "Anne", "Mildred", "Ann", "Beulah", "Callie", "Lou", "Delia", "Eleanor", "Barbara", "Iva", "Louisa", "Maria", "Mayme", "Evelyn", "Estelle", "Nina", "Betty", "Marion", "Bettie", "Dorothy", "Luella", "Inez", "Lela", "Rosie", "Allie", "Millie", "Janie", "Cornelia", "Victoria", "Ruby", "Winifred", "Alta", "Celia", "Christine", "Beatrice", "Birdie", "Harriett", "Mable", "Myra", "Sophie", "Tillie", "Isabel", "Sylvia", "Carolyn", "Isabelle", "Leila", "Sally", "Ina", "Essie", "Bertie", "Nell", "Alberta", "Katharine", "Lora", "Rena", "Mina", "Rhoda", "Mathilda", "Abbie", "Eula", "Dollie", "Hettie", "Eunice", "Fanny", "Ola", "Lenora", "Adelaide", "Christina", "Lelia", "Nelle", "Sue", "Johanna", "Lilly", "Lucinda", "Minerva", "Lettie", "Roxie", "Cynthia", "Helena", "Hilda", "Hulda", "Bernice", "Genevieve", "Jean", "Cordelia", "Marian", "Francis", "Jeanette", "Adeline", "Gussie", "Leah", "Lois", "Lura", "Mittie", "Hallie", "Isabella", "Olga", "Phoebe", "Teresa", "Hester", "Lida", "Lina", "Winnie", "Claudia", "Marguerite", "Vera", "Cecelia", "Bess", "Emilie", "John", "Rosetta", "Verna", "Myrtie", "Cecilia", "Elva", "Olivia", "Ophelia", "Georgie", "Elnora", "Violet", "Adele", "Lily", "Linnie", "Loretta", "Madge", "Polly", "Virgie", "Eugenia", "Lucile", "Lucille", "Mabelle", "Rosalie"]
        },

        lastNames: ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall', 'Allen', 'Young', 'Hernandez', 'King', 'Wright', 'Lopez', 'Hill', 'Scott', 'Green', 'Adams', 'Baker', 'Gonzalez', 'Nelson', 'Carter', 'Mitchell', 'Perez', 'Roberts', 'Turner', 'Phillips', 'Campbell', 'Parker', 'Evans', 'Edwards', 'Collins', 'Stewart', 'Sanchez', 'Morris', 'Rogers', 'Reed', 'Cook', 'Morgan', 'Bell', 'Murphy', 'Bailey', 'Rivera', 'Cooper', 'Richardson', 'Cox', 'Howard', 'Ward', 'Torres', 'Peterson', 'Gray', 'Ramirez', 'James', 'Watson', 'Brooks', 'Kelly', 'Sanders', 'Price', 'Bennett', 'Wood', 'Barnes', 'Ross', 'Henderson', 'Coleman', 'Jenkins', 'Perry', 'Powell', 'Long', 'Patterson', 'Hughes', 'Flores', 'Washington', 'Butler', 'Simmons', 'Foster', 'Gonzales', 'Bryant', 'Alexander', 'Russell', 'Griffin', 'Diaz', 'Hayes', 'Myers', 'Ford', 'Hamilton', 'Graham', 'Sullivan', 'Wallace', 'Woods', 'Cole', 'West', 'Jordan', 'Owens', 'Reynolds', 'Fisher', 'Ellis', 'Harrison', 'Gibson', 'McDonald', 'Cruz', 'Marshall', 'Ortiz', 'Gomez', 'Murray', 'Freeman', 'Wells', 'Webb', 'Simpson', 'Stevens', 'Tucker', 'Porter', 'Hunter', 'Hicks', 'Crawford', 'Henry', 'Boyd', 'Mason', 'Morales', 'Kennedy', 'Warren', 'Dixon', 'Ramos', 'Reyes', 'Burns', 'Gordon', 'Shaw', 'Holmes', 'Rice', 'Robertson', 'Hunt', 'Black', 'Daniels', 'Palmer', 'Mills', 'Nichols', 'Grant', 'Knight', 'Ferguson', 'Rose', 'Stone', 'Hawkins', 'Dunn', 'Perkins', 'Hudson', 'Spencer', 'Gardner', 'Stephens', 'Payne', 'Pierce', 'Berry', 'Matthews', 'Arnold', 'Wagner', 'Willis', 'Ray', 'Watkins', 'Olson', 'Carroll', 'Duncan', 'Snyder', 'Hart', 'Cunningham', 'Bradley', 'Lane', 'Andrews', 'Ruiz', 'Harper', 'Fox', 'Riley', 'Armstrong', 'Carpenter', 'Weaver', 'Greene', 'Lawrence', 'Elliott', 'Chavez', 'Sims', 'Austin', 'Peters', 'Kelley', 'Franklin', 'Lawson', 'Fields', 'Gutierrez', 'Ryan', 'Schmidt', 'Carr', 'Vasquez', 'Castillo', 'Wheeler', 'Chapman', 'Oliver', 'Montgomery', 'Richards', 'Williamson', 'Johnston', 'Banks', 'Meyer', 'Bishop', 'McCoy', 'Howell', 'Alvarez', 'Morrison', 'Hansen', 'Fernandez', 'Garza', 'Harvey', 'Little', 'Burton', 'Stanley', 'Nguyen', 'George', 'Jacobs', 'Reid', 'Kim', 'Fuller', 'Lynch', 'Dean', 'Gilbert', 'Garrett', 'Romero', 'Welch', 'Larson', 'Frazier', 'Burke', 'Hanson', 'Day', 'Mendoza', 'Moreno', 'Bowman', 'Medina', 'Fowler', 'Brewer', 'Hoffman', 'Carlson', 'Silva', 'Pearson', 'Holland', 'Douglas', 'Fleming', 'Jensen', 'Vargas', 'Byrd', 'Davidson', 'Hopkins', 'May', 'Terry', 'Herrera', 'Wade', 'Soto', 'Walters', 'Curtis', 'Neal', 'Caldwell', 'Lowe', 'Jennings', 'Barnett', 'Graves', 'Jimenez', 'Horton', 'Shelton', 'Barrett', 'Obrien', 'Castro', 'Sutton', 'Gregory', 'McKinney', 'Lucas', 'Miles', 'Craig', 'Rodriquez', 'Chambers', 'Holt', 'Lambert', 'Fletcher', 'Watts', 'Bates', 'Hale', 'Rhodes', 'Pena', 'Beck', 'Newman', 'Haynes', 'McDaniel', 'Mendez', 'Bush', 'Vaughn', 'Parks', 'Dawson', 'Santiago', 'Norris', 'Hardy', 'Love', 'Steele', 'Curry', 'Powers', 'Schultz', 'Barker', 'Guzman', 'Page', 'Munoz', 'Ball', 'Keller', 'Chandler', 'Weber', 'Leonard', 'Walsh', 'Lyons', 'Ramsey', 'Wolfe', 'Schneider', 'Mullins', 'Benson', 'Sharp', 'Bowen', 'Daniel', 'Barber', 'Cummings', 'Hines', 'Baldwin', 'Griffith', 'Valdez', 'Hubbard', 'Salazar', 'Reeves', 'Warner', 'Stevenson', 'Burgess', 'Santos', 'Tate', 'Cross', 'Garner', 'Mann', 'Mack', 'Moss', 'Thornton', 'Dennis', 'McGee', 'Farmer', 'Delgado', 'Aguilar', 'Vega', 'Glover', 'Manning', 'Cohen', 'Harmon', 'Rodgers', 'Robbins', 'Newton', 'Todd', 'Blair', 'Higgins', 'Ingram', 'Reese', 'Cannon', 'Strickland', 'Townsend', 'Potter', 'Goodwin', 'Walton', 'Rowe', 'Hampton', 'Ortega', 'Patton', 'Swanson', 'Joseph', 'Francis', 'Goodman', 'Maldonado', 'Yates', 'Becker', 'Erickson', 'Hodges', 'Rios', 'Conner', 'Adkins', 'Webster', 'Norman', 'Malone', 'Hammond', 'Flowers', 'Cobb', 'Moody', 'Quinn', 'Blake', 'Maxwell', 'Pope', 'Floyd', 'Osborne', 'Paul', 'McCarthy', 'Guerrero', 'Lindsey', 'Estrada', 'Sandoval', 'Gibbs', 'Tyler', 'Gross', 'Fitzgerald', 'Stokes', 'Doyle', 'Sherman', 'Saunders', 'Wise', 'Colon', 'Gill', 'Alvarado', 'Greer', 'Padilla', 'Simon', 'Waters', 'Nunez', 'Ballard', 'Schwartz', 'McBride', 'Houston', 'Christensen', 'Klein', 'Pratt', 'Briggs', 'Parsons', 'McLaughlin', 'Zimmerman', 'French', 'Buchanan', 'Moran', 'Copeland', 'Roy', 'Pittman', 'Brady', 'McCormick', 'Holloway', 'Brock', 'Poole', 'Frank', 'Logan', 'Owen', 'Bass', 'Marsh', 'Drake', 'Wong', 'Jefferson', 'Park', 'Morton', 'Abbott', 'Sparks', 'Patrick', 'Norton', 'Huff', 'Clayton', 'Massey', 'Lloyd', 'Figueroa', 'Carson', 'Bowers', 'Roberson', 'Barton', 'Tran', 'Lamb', 'Harrington', 'Casey', 'Boone', 'Cortez', 'Clarke', 'Mathis', 'Singleton', 'Wilkins', 'Cain', 'Bryan', 'Underwood', 'Hogan', 'McKenzie', 'Collier', 'Luna', 'Phelps', 'McGuire', 'Allison', 'Bridges', 'Wilkerson', 'Nash', 'Summers', 'Atkins'],

        // Data taken from https://github.com/umpirsky/country-list/blob/master/country/cldr/en_US/country.json
        countries: [{"name":"Afghanistan","abbreviation":"AF"},{"name":"Albania","abbreviation":"AL"},{"name":"Algeria","abbreviation":"DZ"},{"name":"American Samoa","abbreviation":"AS"},{"name":"Andorra","abbreviation":"AD"},{"name":"Angola","abbreviation":"AO"},{"name":"Anguilla","abbreviation":"AI"},{"name":"Antarctica","abbreviation":"AQ"},{"name":"Antigua and Barbuda","abbreviation":"AG"},{"name":"Argentina","abbreviation":"AR"},{"name":"Armenia","abbreviation":"AM"},{"name":"Aruba","abbreviation":"AW"},{"name":"Australia","abbreviation":"AU"},{"name":"Austria","abbreviation":"AT"},{"name":"Azerbaijan","abbreviation":"AZ"},{"name":"Bahamas","abbreviation":"BS"},{"name":"Bahrain","abbreviation":"BH"},{"name":"Bangladesh","abbreviation":"BD"},{"name":"Barbados","abbreviation":"BB"},{"name":"Belarus","abbreviation":"BY"},{"name":"Belgium","abbreviation":"BE"},{"name":"Belize","abbreviation":"BZ"},{"name":"Benin","abbreviation":"BJ"},{"name":"Bermuda","abbreviation":"BM"},{"name":"Bhutan","abbreviation":"BT"},{"name":"Bolivia","abbreviation":"BO"},{"name":"Bosnia and Herzegovina","abbreviation":"BA"},{"name":"Botswana","abbreviation":"BW"},{"name":"Bouvet Island","abbreviation":"BV"},{"name":"Brazil","abbreviation":"BR"},{"name":"British Antarctic Territory","abbreviation":"BQ"},{"name":"British Indian Ocean Territory","abbreviation":"IO"},{"name":"British Virgin Islands","abbreviation":"VG"},{"name":"Brunei","abbreviation":"BN"},{"name":"Bulgaria","abbreviation":"BG"},{"name":"Burkina Faso","abbreviation":"BF"},{"name":"Burundi","abbreviation":"BI"},{"name":"Cambodia","abbreviation":"KH"},{"name":"Cameroon","abbreviation":"CM"},{"name":"Canada","abbreviation":"CA"},{"name":"Canton and Enderbury Islands","abbreviation":"CT"},{"name":"Cape Verde","abbreviation":"CV"},{"name":"Cayman Islands","abbreviation":"KY"},{"name":"Central African Republic","abbreviation":"CF"},{"name":"Chad","abbreviation":"TD"},{"name":"Chile","abbreviation":"CL"},{"name":"China","abbreviation":"CN"},{"name":"Christmas Island","abbreviation":"CX"},{"name":"Cocos [Keeling] Islands","abbreviation":"CC"},{"name":"Colombia","abbreviation":"CO"},{"name":"Comoros","abbreviation":"KM"},{"name":"Congo - Brazzaville","abbreviation":"CG"},{"name":"Congo - Kinshasa","abbreviation":"CD"},{"name":"Cook Islands","abbreviation":"CK"},{"name":"Costa Rica","abbreviation":"CR"},{"name":"Croatia","abbreviation":"HR"},{"name":"Cuba","abbreviation":"CU"},{"name":"Cyprus","abbreviation":"CY"},{"name":"Czech Republic","abbreviation":"CZ"},{"name":"Côte d’Ivoire","abbreviation":"CI"},{"name":"Denmark","abbreviation":"DK"},{"name":"Djibouti","abbreviation":"DJ"},{"name":"Dominica","abbreviation":"DM"},{"name":"Dominican Republic","abbreviation":"DO"},{"name":"Dronning Maud Land","abbreviation":"NQ"},{"name":"East Germany","abbreviation":"DD"},{"name":"Ecuador","abbreviation":"EC"},{"name":"Egypt","abbreviation":"EG"},{"name":"El Salvador","abbreviation":"SV"},{"name":"Equatorial Guinea","abbreviation":"GQ"},{"name":"Eritrea","abbreviation":"ER"},{"name":"Estonia","abbreviation":"EE"},{"name":"Ethiopia","abbreviation":"ET"},{"name":"Falkland Islands","abbreviation":"FK"},{"name":"Faroe Islands","abbreviation":"FO"},{"name":"Fiji","abbreviation":"FJ"},{"name":"Finland","abbreviation":"FI"},{"name":"France","abbreviation":"FR"},{"name":"French Guiana","abbreviation":"GF"},{"name":"French Polynesia","abbreviation":"PF"},{"name":"French Southern Territories","abbreviation":"TF"},{"name":"French Southern and Antarctic Territories","abbreviation":"FQ"},{"name":"Gabon","abbreviation":"GA"},{"name":"Gambia","abbreviation":"GM"},{"name":"Georgia","abbreviation":"GE"},{"name":"Germany","abbreviation":"DE"},{"name":"Ghana","abbreviation":"GH"},{"name":"Gibraltar","abbreviation":"GI"},{"name":"Greece","abbreviation":"GR"},{"name":"Greenland","abbreviation":"GL"},{"name":"Grenada","abbreviation":"GD"},{"name":"Guadeloupe","abbreviation":"GP"},{"name":"Guam","abbreviation":"GU"},{"name":"Guatemala","abbreviation":"GT"},{"name":"Guernsey","abbreviation":"GG"},{"name":"Guinea","abbreviation":"GN"},{"name":"Guinea-Bissau","abbreviation":"GW"},{"name":"Guyana","abbreviation":"GY"},{"name":"Haiti","abbreviation":"HT"},{"name":"Heard Island and McDonald Islands","abbreviation":"HM"},{"name":"Honduras","abbreviation":"HN"},{"name":"Hong Kong SAR China","abbreviation":"HK"},{"name":"Hungary","abbreviation":"HU"},{"name":"Iceland","abbreviation":"IS"},{"name":"India","abbreviation":"IN"},{"name":"Indonesia","abbreviation":"ID"},{"name":"Iran","abbreviation":"IR"},{"name":"Iraq","abbreviation":"IQ"},{"name":"Ireland","abbreviation":"IE"},{"name":"Isle of Man","abbreviation":"IM"},{"name":"Israel","abbreviation":"IL"},{"name":"Italy","abbreviation":"IT"},{"name":"Jamaica","abbreviation":"JM"},{"name":"Japan","abbreviation":"JP"},{"name":"Jersey","abbreviation":"JE"},{"name":"Johnston Island","abbreviation":"JT"},{"name":"Jordan","abbreviation":"JO"},{"name":"Kazakhstan","abbreviation":"KZ"},{"name":"Kenya","abbreviation":"KE"},{"name":"Kiribati","abbreviation":"KI"},{"name":"Kuwait","abbreviation":"KW"},{"name":"Kyrgyzstan","abbreviation":"KG"},{"name":"Laos","abbreviation":"LA"},{"name":"Latvia","abbreviation":"LV"},{"name":"Lebanon","abbreviation":"LB"},{"name":"Lesotho","abbreviation":"LS"},{"name":"Liberia","abbreviation":"LR"},{"name":"Libya","abbreviation":"LY"},{"name":"Liechtenstein","abbreviation":"LI"},{"name":"Lithuania","abbreviation":"LT"},{"name":"Luxembourg","abbreviation":"LU"},{"name":"Macau SAR China","abbreviation":"MO"},{"name":"Macedonia","abbreviation":"MK"},{"name":"Madagascar","abbreviation":"MG"},{"name":"Malawi","abbreviation":"MW"},{"name":"Malaysia","abbreviation":"MY"},{"name":"Maldives","abbreviation":"MV"},{"name":"Mali","abbreviation":"ML"},{"name":"Malta","abbreviation":"MT"},{"name":"Marshall Islands","abbreviation":"MH"},{"name":"Martinique","abbreviation":"MQ"},{"name":"Mauritania","abbreviation":"MR"},{"name":"Mauritius","abbreviation":"MU"},{"name":"Mayotte","abbreviation":"YT"},{"name":"Metropolitan France","abbreviation":"FX"},{"name":"Mexico","abbreviation":"MX"},{"name":"Micronesia","abbreviation":"FM"},{"name":"Midway Islands","abbreviation":"MI"},{"name":"Moldova","abbreviation":"MD"},{"name":"Monaco","abbreviation":"MC"},{"name":"Mongolia","abbreviation":"MN"},{"name":"Montenegro","abbreviation":"ME"},{"name":"Montserrat","abbreviation":"MS"},{"name":"Morocco","abbreviation":"MA"},{"name":"Mozambique","abbreviation":"MZ"},{"name":"Myanmar [Burma]","abbreviation":"MM"},{"name":"Namibia","abbreviation":"NA"},{"name":"Nauru","abbreviation":"NR"},{"name":"Nepal","abbreviation":"NP"},{"name":"Netherlands","abbreviation":"NL"},{"name":"Netherlands Antilles","abbreviation":"AN"},{"name":"Neutral Zone","abbreviation":"NT"},{"name":"New Caledonia","abbreviation":"NC"},{"name":"New Zealand","abbreviation":"NZ"},{"name":"Nicaragua","abbreviation":"NI"},{"name":"Niger","abbreviation":"NE"},{"name":"Nigeria","abbreviation":"NG"},{"name":"Niue","abbreviation":"NU"},{"name":"Norfolk Island","abbreviation":"NF"},{"name":"North Korea","abbreviation":"KP"},{"name":"North Vietnam","abbreviation":"VD"},{"name":"Northern Mariana Islands","abbreviation":"MP"},{"name":"Norway","abbreviation":"NO"},{"name":"Oman","abbreviation":"OM"},{"name":"Pacific Islands Trust Territory","abbreviation":"PC"},{"name":"Pakistan","abbreviation":"PK"},{"name":"Palau","abbreviation":"PW"},{"name":"Palestinian Territories","abbreviation":"PS"},{"name":"Panama","abbreviation":"PA"},{"name":"Panama Canal Zone","abbreviation":"PZ"},{"name":"Papua New Guinea","abbreviation":"PG"},{"name":"Paraguay","abbreviation":"PY"},{"name":"People's Democratic Republic of Yemen","abbreviation":"YD"},{"name":"Peru","abbreviation":"PE"},{"name":"Philippines","abbreviation":"PH"},{"name":"Pitcairn Islands","abbreviation":"PN"},{"name":"Poland","abbreviation":"PL"},{"name":"Portugal","abbreviation":"PT"},{"name":"Puerto Rico","abbreviation":"PR"},{"name":"Qatar","abbreviation":"QA"},{"name":"Romania","abbreviation":"RO"},{"name":"Russia","abbreviation":"RU"},{"name":"Rwanda","abbreviation":"RW"},{"name":"Réunion","abbreviation":"RE"},{"name":"Saint Barthélemy","abbreviation":"BL"},{"name":"Saint Helena","abbreviation":"SH"},{"name":"Saint Kitts and Nevis","abbreviation":"KN"},{"name":"Saint Lucia","abbreviation":"LC"},{"name":"Saint Martin","abbreviation":"MF"},{"name":"Saint Pierre and Miquelon","abbreviation":"PM"},{"name":"Saint Vincent and the Grenadines","abbreviation":"VC"},{"name":"Samoa","abbreviation":"WS"},{"name":"San Marino","abbreviation":"SM"},{"name":"Saudi Arabia","abbreviation":"SA"},{"name":"Senegal","abbreviation":"SN"},{"name":"Serbia","abbreviation":"RS"},{"name":"Serbia and Montenegro","abbreviation":"CS"},{"name":"Seychelles","abbreviation":"SC"},{"name":"Sierra Leone","abbreviation":"SL"},{"name":"Singapore","abbreviation":"SG"},{"name":"Slovakia","abbreviation":"SK"},{"name":"Slovenia","abbreviation":"SI"},{"name":"Solomon Islands","abbreviation":"SB"},{"name":"Somalia","abbreviation":"SO"},{"name":"South Africa","abbreviation":"ZA"},{"name":"South Georgia and the South Sandwich Islands","abbreviation":"GS"},{"name":"South Korea","abbreviation":"KR"},{"name":"Spain","abbreviation":"ES"},{"name":"Sri Lanka","abbreviation":"LK"},{"name":"Sudan","abbreviation":"SD"},{"name":"Suriname","abbreviation":"SR"},{"name":"Svalbard and Jan Mayen","abbreviation":"SJ"},{"name":"Swaziland","abbreviation":"SZ"},{"name":"Sweden","abbreviation":"SE"},{"name":"Switzerland","abbreviation":"CH"},{"name":"Syria","abbreviation":"SY"},{"name":"São Tomé and Príncipe","abbreviation":"ST"},{"name":"Taiwan","abbreviation":"TW"},{"name":"Tajikistan","abbreviation":"TJ"},{"name":"Tanzania","abbreviation":"TZ"},{"name":"Thailand","abbreviation":"TH"},{"name":"Timor-Leste","abbreviation":"TL"},{"name":"Togo","abbreviation":"TG"},{"name":"Tokelau","abbreviation":"TK"},{"name":"Tonga","abbreviation":"TO"},{"name":"Trinidad and Tobago","abbreviation":"TT"},{"name":"Tunisia","abbreviation":"TN"},{"name":"Turkey","abbreviation":"TR"},{"name":"Turkmenistan","abbreviation":"TM"},{"name":"Turks and Caicos Islands","abbreviation":"TC"},{"name":"Tuvalu","abbreviation":"TV"},{"name":"U.S. Minor Outlying Islands","abbreviation":"UM"},{"name":"U.S. Miscellaneous Pacific Islands","abbreviation":"PU"},{"name":"U.S. Virgin Islands","abbreviation":"VI"},{"name":"Uganda","abbreviation":"UG"},{"name":"Ukraine","abbreviation":"UA"},{"name":"Union of Soviet Socialist Republics","abbreviation":"SU"},{"name":"United Arab Emirates","abbreviation":"AE"},{"name":"United Kingdom","abbreviation":"GB"},{"name":"United States","abbreviation":"US"},{"name":"Unknown or Invalid Region","abbreviation":"ZZ"},{"name":"Uruguay","abbreviation":"UY"},{"name":"Uzbekistan","abbreviation":"UZ"},{"name":"Vanuatu","abbreviation":"VU"},{"name":"Vatican City","abbreviation":"VA"},{"name":"Venezuela","abbreviation":"VE"},{"name":"Vietnam","abbreviation":"VN"},{"name":"Wake Island","abbreviation":"WK"},{"name":"Wallis and Futuna","abbreviation":"WF"},{"name":"Western Sahara","abbreviation":"EH"},{"name":"Yemen","abbreviation":"YE"},{"name":"Zambia","abbreviation":"ZM"},{"name":"Zimbabwe","abbreviation":"ZW"},{"name":"Åland Islands","abbreviation":"AX"}],

        provinces: [
            {name: 'Alberta', abbreviation: 'AB'},
            {name: 'British Columbia', abbreviation: 'BC'},
            {name: 'Manitoba', abbreviation: 'MB'},
            {name: 'New Brunswick', abbreviation: 'NB'},
            {name: 'Newfoundland and Labrador', abbreviation: 'NL'},
            {name: 'Nova Scotia', abbreviation: 'NS'},
            {name: 'Ontario', abbreviation: 'ON'},
            {name: 'Prince Edward Island', abbreviation: 'PE'},
            {name: 'Quebec', abbreviation: 'QC'},
            {name: 'Saskatchewan', abbreviation: 'SK'},

            // The case could be made that the following are not actually provinces
            // since they are technically considered "territories" however they all
            // look the same on an envelope!
            {name: 'Northwest Territories', abbreviation: 'NT'},
            {name: 'Nunavut', abbreviation: 'NU'},
            {name: 'Yukon', abbreviation: 'YT'}
        ],

        us_states_and_dc: [
            {name: 'Alabama', abbreviation: 'AL'},
            {name: 'Alaska', abbreviation: 'AK'},
            {name: 'Arizona', abbreviation: 'AZ'},
            {name: 'Arkansas', abbreviation: 'AR'},
            {name: 'California', abbreviation: 'CA'},
            {name: 'Colorado', abbreviation: 'CO'},
            {name: 'Connecticut', abbreviation: 'CT'},
            {name: 'Delaware', abbreviation: 'DE'},
            {name: 'District of Columbia', abbreviation: 'DC'},
            {name: 'Florida', abbreviation: 'FL'},
            {name: 'Georgia', abbreviation: 'GA'},
            {name: 'Hawaii', abbreviation: 'HI'},
            {name: 'Idaho', abbreviation: 'ID'},
            {name: 'Illinois', abbreviation: 'IL'},
            {name: 'Indiana', abbreviation: 'IN'},
            {name: 'Iowa', abbreviation: 'IA'},
            {name: 'Kansas', abbreviation: 'KS'},
            {name: 'Kentucky', abbreviation: 'KY'},
            {name: 'Louisiana', abbreviation: 'LA'},
            {name: 'Maine', abbreviation: 'ME'},
            {name: 'Maryland', abbreviation: 'MD'},
            {name: 'Massachusetts', abbreviation: 'MA'},
            {name: 'Michigan', abbreviation: 'MI'},
            {name: 'Minnesota', abbreviation: 'MN'},
            {name: 'Mississippi', abbreviation: 'MS'},
            {name: 'Missouri', abbreviation: 'MO'},
            {name: 'Montana', abbreviation: 'MT'},
            {name: 'Nebraska', abbreviation: 'NE'},
            {name: 'Nevada', abbreviation: 'NV'},
            {name: 'New Hampshire', abbreviation: 'NH'},
            {name: 'New Jersey', abbreviation: 'NJ'},
            {name: 'New Mexico', abbreviation: 'NM'},
            {name: 'New York', abbreviation: 'NY'},
            {name: 'North Carolina', abbreviation: 'NC'},
            {name: 'North Dakota', abbreviation: 'ND'},
            {name: 'Ohio', abbreviation: 'OH'},
            {name: 'Oklahoma', abbreviation: 'OK'},
            {name: 'Oregon', abbreviation: 'OR'},
            {name: 'Pennsylvania', abbreviation: 'PA'},
            {name: 'Rhode Island', abbreviation: 'RI'},
            {name: 'South Carolina', abbreviation: 'SC'},
            {name: 'South Dakota', abbreviation: 'SD'},
            {name: 'Tennessee', abbreviation: 'TN'},
            {name: 'Texas', abbreviation: 'TX'},
            {name: 'Utah', abbreviation: 'UT'},
            {name: 'Vermont', abbreviation: 'VT'},
            {name: 'Virginia', abbreviation: 'VA'},
            {name: 'Washington', abbreviation: 'WA'},
            {name: 'West Virginia', abbreviation: 'WV'},
            {name: 'Wisconsin', abbreviation: 'WI'},
            {name: 'Wyoming', abbreviation: 'WY'}
        ],

        territories: [
            {name: 'American Samoa', abbreviation: 'AS'},
            {name: 'Federated States of Micronesia', abbreviation: 'FM'},
            {name: 'Guam', abbreviation: 'GU'},
            {name: 'Marshall Islands', abbreviation: 'MH'},
            {name: 'Northern Mariana Islands', abbreviation: 'MP'},
            {name: 'Puerto Rico', abbreviation: 'PR'},
            {name: 'Virgin Islands, U.S.', abbreviation: 'VI'}
        ],

        armed_forces: [
            {name: 'Armed Forces Europe', abbreviation: 'AE'},
            {name: 'Armed Forces Pacific', abbreviation: 'AP'},
            {name: 'Armed Forces the Americas', abbreviation: 'AA'}
        ],

        street_suffixes: [
            {name: 'Avenue', abbreviation: 'Ave'},
            {name: 'Boulevard', abbreviation: 'Blvd'},
            {name: 'Center', abbreviation: 'Ctr'},
            {name: 'Circle', abbreviation: 'Cir'},
            {name: 'Court', abbreviation: 'Ct'},
            {name: 'Drive', abbreviation: 'Dr'},
            {name: 'Extension', abbreviation: 'Ext'},
            {name: 'Glen', abbreviation: 'Gln'},
            {name: 'Grove', abbreviation: 'Grv'},
            {name: 'Heights', abbreviation: 'Hts'},
            {name: 'Highway', abbreviation: 'Hwy'},
            {name: 'Junction', abbreviation: 'Jct'},
            {name: 'Key', abbreviation: 'Key'},
            {name: 'Lane', abbreviation: 'Ln'},
            {name: 'Loop', abbreviation: 'Loop'},
            {name: 'Manor', abbreviation: 'Mnr'},
            {name: 'Mill', abbreviation: 'Mill'},
            {name: 'Park', abbreviation: 'Park'},
            {name: 'Parkway', abbreviation: 'Pkwy'},
            {name: 'Pass', abbreviation: 'Pass'},
            {name: 'Path', abbreviation: 'Path'},
            {name: 'Pike', abbreviation: 'Pike'},
            {name: 'Place', abbreviation: 'Pl'},
            {name: 'Plaza', abbreviation: 'Plz'},
            {name: 'Point', abbreviation: 'Pt'},
            {name: 'Ridge', abbreviation: 'Rdg'},
            {name: 'River', abbreviation: 'Riv'},
            {name: 'Road', abbreviation: 'Rd'},
            {name: 'Square', abbreviation: 'Sq'},
            {name: 'Street', abbreviation: 'St'},
            {name: 'Terrace', abbreviation: 'Ter'},
            {name: 'Trail', abbreviation: 'Trl'},
            {name: 'Turnpike', abbreviation: 'Tpke'},
            {name: 'View', abbreviation: 'Vw'},
            {name: 'Way', abbreviation: 'Way'}
        ],

        months: [
            {name: 'January', short_name: 'Jan', numeric: '01', days: 31},
            // Not messing with leap years...
            {name: 'February', short_name: 'Feb', numeric: '02', days: 28},
            {name: 'March', short_name: 'Mar', numeric: '03', days: 31},
            {name: 'April', short_name: 'Apr', numeric: '04', days: 30},
            {name: 'May', short_name: 'May', numeric: '05', days: 31},
            {name: 'June', short_name: 'Jun', numeric: '06', days: 30},
            {name: 'July', short_name: 'Jul', numeric: '07', days: 31},
            {name: 'August', short_name: 'Aug', numeric: '08', days: 31},
            {name: 'September', short_name: 'Sep', numeric: '09', days: 30},
            {name: 'October', short_name: 'Oct', numeric: '10', days: 31},
            {name: 'November', short_name: 'Nov', numeric: '11', days: 30},
            {name: 'December', short_name: 'Dec', numeric: '12', days: 31}
        ],

        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29
        cc_types: [
            {name: "American Express", short_name: 'amex', prefix: '34', length: 15},
            {name: "Bankcard", short_name: 'bankcard', prefix: '5610', length: 16},
            {name: "China UnionPay", short_name: 'chinaunion', prefix: '62', length: 16},
            {name: "Diners Club Carte Blanche", short_name: 'dccarte', prefix: '300', length: 14},
            {name: "Diners Club enRoute", short_name: 'dcenroute', prefix: '2014', length: 15},
            {name: "Diners Club International", short_name: 'dcintl', prefix: '36', length: 14},
            {name: "Diners Club United States & Canada", short_name: 'dcusc', prefix: '54', length: 16},
            {name: "Discover Card", short_name: 'discover', prefix: '6011', length: 16},
            {name: "InstaPayment", short_name: 'instapay', prefix: '637', length: 16},
            {name: "JCB", short_name: 'jcb', prefix: '3528', length: 16},
            {name: "Laser", short_name: 'laser', prefix: '6304', length: 16},
            {name: "Maestro", short_name: 'maestro', prefix: '5018', length: 16},
            {name: "Mastercard", short_name: 'mc', prefix: '51', length: 16},
            {name: "Solo", short_name: 'solo', prefix: '6334', length: 16},
            {name: "Switch", short_name: 'switch', prefix: '4903', length: 16},
            {name: "Visa", short_name: 'visa', prefix: '4', length: 16},
            {name: "Visa Electron", short_name: 'electron', prefix: '4026', length: 16}
        ],

        //return all world currency by ISO 4217
        currency_types: [
            {'code' : 'AED', 'name' : 'United Arab Emirates Dirham'},
            {'code' : 'AFN', 'name' : 'Afghanistan Afghani'},
            {'code' : 'ALL', 'name' : 'Albania Lek'},
            {'code' : 'AMD', 'name' : 'Armenia Dram'},
            {'code' : 'ANG', 'name' : 'Netherlands Antilles Guilder'},
            {'code' : 'AOA', 'name' : 'Angola Kwanza'},
            {'code' : 'ARS', 'name' : 'Argentina Peso'},
            {'code' : 'AUD', 'name' : 'Australia Dollar'},
            {'code' : 'AWG', 'name' : 'Aruba Guilder'},
            {'code' : 'AZN', 'name' : 'Azerbaijan New Manat'},
            {'code' : 'BAM', 'name' : 'Bosnia and Herzegovina Convertible Marka'},
            {'code' : 'BBD', 'name' : 'Barbados Dollar'},
            {'code' : 'BDT', 'name' : 'Bangladesh Taka'},
            {'code' : 'BGN', 'name' : 'Bulgaria Lev'},
            {'code' : 'BHD', 'name' : 'Bahrain Dinar'},
            {'code' : 'BIF', 'name' : 'Burundi Franc'},
            {'code' : 'BMD', 'name' : 'Bermuda Dollar'},
            {'code' : 'BND', 'name' : 'Brunei Darussalam Dollar'},
            {'code' : 'BOB', 'name' : 'Bolivia Boliviano'},
            {'code' : 'BRL', 'name' : 'Brazil Real'},
            {'code' : 'BSD', 'name' : 'Bahamas Dollar'},
            {'code' : 'BTN', 'name' : 'Bhutan Ngultrum'},
            {'code' : 'BWP', 'name' : 'Botswana Pula'},
            {'code' : 'BYR', 'name' : 'Belarus Ruble'},
            {'code' : 'BZD', 'name' : 'Belize Dollar'},
            {'code' : 'CAD', 'name' : 'Canada Dollar'},
            {'code' : 'CDF', 'name' : 'Congo/Kinshasa Franc'},
            {'code' : 'CHF', 'name' : 'Switzerland Franc'},
            {'code' : 'CLP', 'name' : 'Chile Peso'},
            {'code' : 'CNY', 'name' : 'China Yuan Renminbi'},
            {'code' : 'COP', 'name' : 'Colombia Peso'},
            {'code' : 'CRC', 'name' : 'Costa Rica Colon'},
            {'code' : 'CUC', 'name' : 'Cuba Convertible Peso'},
            {'code' : 'CUP', 'name' : 'Cuba Peso'},
            {'code' : 'CVE', 'name' : 'Cape Verde Escudo'},
            {'code' : 'CZK', 'name' : 'Czech Republic Koruna'},
            {'code' : 'DJF', 'name' : 'Djibouti Franc'},
            {'code' : 'DKK', 'name' : 'Denmark Krone'},
            {'code' : 'DOP', 'name' : 'Dominican Republic Peso'},
            {'code' : 'DZD', 'name' : 'Algeria Dinar'},
            {'code' : 'EGP', 'name' : 'Egypt Pound'},
            {'code' : 'ERN', 'name' : 'Eritrea Nakfa'},
            {'code' : 'ETB', 'name' : 'Ethiopia Birr'},
            {'code' : 'EUR', 'name' : 'Euro Member Countries'},
            {'code' : 'FJD', 'name' : 'Fiji Dollar'},
            {'code' : 'FKP', 'name' : 'Falkland Islands (Malvinas) Pound'},
            {'code' : 'GBP', 'name' : 'United Kingdom Pound'},
            {'code' : 'GEL', 'name' : 'Georgia Lari'},
            {'code' : 'GGP', 'name' : 'Guernsey Pound'},
            {'code' : 'GHS', 'name' : 'Ghana Cedi'},
            {'code' : 'GIP', 'name' : 'Gibraltar Pound'},
            {'code' : 'GMD', 'name' : 'Gambia Dalasi'},
            {'code' : 'GNF', 'name' : 'Guinea Franc'},
            {'code' : 'GTQ', 'name' : 'Guatemala Quetzal'},
            {'code' : 'GYD', 'name' : 'Guyana Dollar'},
            {'code' : 'HKD', 'name' : 'Hong Kong Dollar'},
            {'code' : 'HNL', 'name' : 'Honduras Lempira'},
            {'code' : 'HRK', 'name' : 'Croatia Kuna'},
            {'code' : 'HTG', 'name' : 'Haiti Gourde'},
            {'code' : 'HUF', 'name' : 'Hungary Forint'},
            {'code' : 'IDR', 'name' : 'Indonesia Rupiah'},
            {'code' : 'ILS', 'name' : 'Israel Shekel'},
            {'code' : 'IMP', 'name' : 'Isle of Man Pound'},
            {'code' : 'INR', 'name' : 'India Rupee'},
            {'code' : 'IQD', 'name' : 'Iraq Dinar'},
            {'code' : 'IRR', 'name' : 'Iran Rial'},
            {'code' : 'ISK', 'name' : 'Iceland Krona'},
            {'code' : 'JEP', 'name' : 'Jersey Pound'},
            {'code' : 'JMD', 'name' : 'Jamaica Dollar'},
            {'code' : 'JOD', 'name' : 'Jordan Dinar'},
            {'code' : 'JPY', 'name' : 'Japan Yen'},
            {'code' : 'KES', 'name' : 'Kenya Shilling'},
            {'code' : 'KGS', 'name' : 'Kyrgyzstan Som'},
            {'code' : 'KHR', 'name' : 'Cambodia Riel'},
            {'code' : 'KMF', 'name' : 'Comoros Franc'},
            {'code' : 'KPW', 'name' : 'Korea (North) Won'},
            {'code' : 'KRW', 'name' : 'Korea (South) Won'},
            {'code' : 'KWD', 'name' : 'Kuwait Dinar'},
            {'code' : 'KYD', 'name' : 'Cayman Islands Dollar'},
            {'code' : 'KZT', 'name' : 'Kazakhstan Tenge'},
            {'code' : 'LAK', 'name' : 'Laos Kip'},
            {'code' : 'LBP', 'name' : 'Lebanon Pound'},
            {'code' : 'LKR', 'name' : 'Sri Lanka Rupee'},
            {'code' : 'LRD', 'name' : 'Liberia Dollar'},
            {'code' : 'LSL', 'name' : 'Lesotho Loti'},
            {'code' : 'LTL', 'name' : 'Lithuania Litas'},
            {'code' : 'LYD', 'name' : 'Libya Dinar'},
            {'code' : 'MAD', 'name' : 'Morocco Dirham'},
            {'code' : 'MDL', 'name' : 'Moldova Leu'},
            {'code' : 'MGA', 'name' : 'Madagascar Ariary'},
            {'code' : 'MKD', 'name' : 'Macedonia Denar'},
            {'code' : 'MMK', 'name' : 'Myanmar (Burma) Kyat'},
            {'code' : 'MNT', 'name' : 'Mongolia Tughrik'},
            {'code' : 'MOP', 'name' : 'Macau Pataca'},
            {'code' : 'MRO', 'name' : 'Mauritania Ouguiya'},
            {'code' : 'MUR', 'name' : 'Mauritius Rupee'},
            {'code' : 'MVR', 'name' : 'Maldives (Maldive Islands) Rufiyaa'},
            {'code' : 'MWK', 'name' : 'Malawi Kwacha'},
            {'code' : 'MXN', 'name' : 'Mexico Peso'},
            {'code' : 'MYR', 'name' : 'Malaysia Ringgit'},
            {'code' : 'MZN', 'name' : 'Mozambique Metical'},
            {'code' : 'NAD', 'name' : 'Namibia Dollar'},
            {'code' : 'NGN', 'name' : 'Nigeria Naira'},
            {'code' : 'NIO', 'name' : 'Nicaragua Cordoba'},
            {'code' : 'NOK', 'name' : 'Norway Krone'},
            {'code' : 'NPR', 'name' : 'Nepal Rupee'},
            {'code' : 'NZD', 'name' : 'New Zealand Dollar'},
            {'code' : 'OMR', 'name' : 'Oman Rial'},
            {'code' : 'PAB', 'name' : 'Panama Balboa'},
            {'code' : 'PEN', 'name' : 'Peru Nuevo Sol'},
            {'code' : 'PGK', 'name' : 'Papua New Guinea Kina'},
            {'code' : 'PHP', 'name' : 'Philippines Peso'},
            {'code' : 'PKR', 'name' : 'Pakistan Rupee'},
            {'code' : 'PLN', 'name' : 'Poland Zloty'},
            {'code' : 'PYG', 'name' : 'Paraguay Guarani'},
            {'code' : 'QAR', 'name' : 'Qatar Riyal'},
            {'code' : 'RON', 'name' : 'Romania New Leu'},
            {'code' : 'RSD', 'name' : 'Serbia Dinar'},
            {'code' : 'RUB', 'name' : 'Russia Ruble'},
            {'code' : 'RWF', 'name' : 'Rwanda Franc'},
            {'code' : 'SAR', 'name' : 'Saudi Arabia Riyal'},
            {'code' : 'SBD', 'name' : 'Solomon Islands Dollar'},
            {'code' : 'SCR', 'name' : 'Seychelles Rupee'},
            {'code' : 'SDG', 'name' : 'Sudan Pound'},
            {'code' : 'SEK', 'name' : 'Sweden Krona'},
            {'code' : 'SGD', 'name' : 'Singapore Dollar'},
            {'code' : 'SHP', 'name' : 'Saint Helena Pound'},
            {'code' : 'SLL', 'name' : 'Sierra Leone Leone'},
            {'code' : 'SOS', 'name' : 'Somalia Shilling'},
            {'code' : 'SPL', 'name' : 'Seborga Luigino'},
            {'code' : 'SRD', 'name' : 'Suriname Dollar'},
            {'code' : 'STD', 'name' : 'São Tomé and Príncipe Dobra'},
            {'code' : 'SVC', 'name' : 'El Salvador Colon'},
            {'code' : 'SYP', 'name' : 'Syria Pound'},
            {'code' : 'SZL', 'name' : 'Swaziland Lilangeni'},
            {'code' : 'THB', 'name' : 'Thailand Baht'},
            {'code' : 'TJS', 'name' : 'Tajikistan Somoni'},
            {'code' : 'TMT', 'name' : 'Turkmenistan Manat'},
            {'code' : 'TND', 'name' : 'Tunisia Dinar'},
            {'code' : 'TOP', 'name' : 'Tonga Pa\'anga'},
            {'code' : 'TRY', 'name' : 'Turkey Lira'},
            {'code' : 'TTD', 'name' : 'Trinidad and Tobago Dollar'},
            {'code' : 'TVD', 'name' : 'Tuvalu Dollar'},
            {'code' : 'TWD', 'name' : 'Taiwan New Dollar'},
            {'code' : 'TZS', 'name' : 'Tanzania Shilling'},
            {'code' : 'UAH', 'name' : 'Ukraine Hryvnia'},
            {'code' : 'UGX', 'name' : 'Uganda Shilling'},
            {'code' : 'USD', 'name' : 'United States Dollar'},
            {'code' : 'UYU', 'name' : 'Uruguay Peso'},
            {'code' : 'UZS', 'name' : 'Uzbekistan Som'},
            {'code' : 'VEF', 'name' : 'Venezuela Bolivar'},
            {'code' : 'VND', 'name' : 'Viet Nam Dong'},
            {'code' : 'VUV', 'name' : 'Vanuatu Vatu'},
            {'code' : 'WST', 'name' : 'Samoa Tala'},
            {'code' : 'XAF', 'name' : 'Communauté Financière Africaine (BEAC) CFA Franc BEAC'},
            {'code' : 'XCD', 'name' : 'East Caribbean Dollar'},
            {'code' : 'XDR', 'name' : 'International Monetary Fund (IMF) Special Drawing Rights'},
            {'code' : 'XOF', 'name' : 'Communauté Financière Africaine (BCEAO) Franc'},
            {'code' : 'XPF', 'name' : 'Comptoirs Français du Pacifique (CFP) Franc'},
            {'code' : 'YER', 'name' : 'Yemen Rial'},
            {'code' : 'ZAR', 'name' : 'South Africa Rand'},
            {'code' : 'ZMW', 'name' : 'Zambia Kwacha'},
            {'code' : 'ZWD', 'name' : 'Zimbabwe Dollar'}
        ]
    };

    var o_hasOwnProperty = Object.prototype.hasOwnProperty;
    var o_keys = (Object.keys || function(obj) {
      var result = [];
      for (var key in obj) {
        if (o_hasOwnProperty.call(obj, key)) {
          result.push(key);
        }
      }

      return result;
    });

    function _copyObject(source, target) {
      var keys = o_keys(source);
      var key;

      for (var i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        target[key] = source[key] || target[key];
      }
    }

    function _copyArray(source, target) {
      for (var i = 0, l = source.length; i < l; i++) {
        target[i] = source[i];
      }
    }

    function copyObject(source, _target) {
        var isArray = Array.isArray(source);
        var target = _target || (isArray ? new Array(source.length) : {});

        if (isArray) {
          _copyArray(source, target);
        } else {
          _copyObject(source, target);
        }

        return target;
    }

    /** Get the data based on key**/
    Chance.prototype.get = function (name) {
        return copyObject(data[name]);
    };

    // Mac Address
    Chance.prototype.mac_address = function(options){
        // typically mac addresses are separated by ":"
        // however they can also be separated by "-"
        // the network variant uses a dot every fourth byte

        options = initOptions(options);
        if(!options.separator) {
            options.separator =  options.networkVersion ? "." : ":";
        }

        var mac_pool="ABCDEF1234567890",
            mac = "";
        if(!options.networkVersion) {
            mac = this.n(this.string, 6, { pool: mac_pool, length:2 }).join(options.separator);
        } else {
            mac = this.n(this.string, 3, { pool: mac_pool, length:4 }).join(options.separator);
        }

        return mac;
    };

    Chance.prototype.normal = function (options) {
        options = initOptions(options, {mean : 0, dev : 1});

        // The Marsaglia Polar method
        var s, u, v, norm,
            mean = options.mean,
            dev = options.dev;

        do {
            // U and V are from the uniform distribution on (-1, 1)
            u = this.random() * 2 - 1;
            v = this.random() * 2 - 1;

            s = u * u + v * v;
        } while (s >= 1);

        // Compute the standard normal variate
        norm = u * Math.sqrt(-2 * Math.log(s) / s);

        // Shape and scale
        return dev * norm + mean;
    };

    Chance.prototype.radio = function (options) {
        // Initial Letter (Typically Designated by Side of Mississippi River)
        options = initOptions(options, {side : "?"});
        var fl = "";
        switch (options.side.toLowerCase()) {
        case "east":
        case "e":
            fl = "W";
            break;
        case "west":
        case "w":
            fl = "K";
            break;
        default:
            fl = this.character({pool: "KW"});
            break;
        }

        return fl + this.character({alpha: true, casing: "upper"}) +
                this.character({alpha: true, casing: "upper"}) +
                this.character({alpha: true, casing: "upper"});
    };

    // Set the data as key and data or the data map
    Chance.prototype.set = function (name, values) {
        if (typeof name === "string") {
            data[name] = values;
        } else {
            data = copyObject(name, data);
        }
    };

    Chance.prototype.tv = function (options) {
        return this.radio(options);
    };

    // ID number for Brazil companies
    Chance.prototype.cnpj = function () {
        var n = this.n(this.natural, 8, { max: 9 });
        var d1 = 2+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;
        d1 = 11 - (d1 % 11);
        if (d1>=10){
            d1 = 0;
        }
        var d2 = d1*2+3+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;
        d2 = 11 - (d2 % 11);
        if (d2>=10){
            d2 = 0;
        }
        return ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/0001-'+d1+d2;
    };

    // -- End Miscellaneous --

    Chance.prototype.mersenne_twister = function (seed) {
        return new MersenneTwister(seed);
    };

    // Mersenne Twister from https://gist.github.com/banksean/300494
    var MersenneTwister = function (seed) {
        if (seed === undefined) {
            seed = new Date().getTime();
        }
        /* Period parameters */
        this.N = 624;
        this.M = 397;
        this.MATRIX_A = 0x9908b0df;   /* constant vector a */
        this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
        this.LOWER_MASK = 0x7fffffff; /* least significant r bits */

        this.mt = new Array(this.N); /* the array for the state vector */
        this.mti = this.N + 1; /* mti==N + 1 means mt[N] is not initialized */

        this.init_genrand(seed);
    };

    /* initializes mt[N] with a seed */
    MersenneTwister.prototype.init_genrand = function (s) {
        this.mt[0] = s >>> 0;
        for (this.mti = 1; this.mti < this.N; this.mti++) {
            s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);
            this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253) + this.mti;
            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
            /* In the previous versions, MSBs of the seed affect   */
            /* only MSBs of the array mt[].                        */
            /* 2002/01/09 modified by Makoto Matsumoto             */
            this.mt[this.mti] >>>= 0;
            /* for >32 bit machines */
        }
    };

    /* initialize by an array with array-length */
    /* init_key is the array for initializing keys */
    /* key_length is its length */
    /* slight change for C++, 2004/2/26 */
    MersenneTwister.prototype.init_by_array = function (init_key, key_length) {
        var i = 1, j = 0, k, s;
        this.init_genrand(19650218);
        k = (this.N > key_length ? this.N : key_length);
        for (; k; k--) {
            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525))) + init_key[j] + j; /* non linear */
            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
            i++;
            j++;
            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }
            if (j >= key_length) { j = 0; }
        }
        for (k = this.N - 1; k; k--) {
            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) - i; /* non linear */
            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
            i++;
            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }
        }

        this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
    };

    /* generates a random number on [0,0xffffffff]-interval */
    MersenneTwister.prototype.genrand_int32 = function () {
        var y;
        var mag01 = new Array(0x0, this.MATRIX_A);
        /* mag01[x] = x * MATRIX_A  for x=0,1 */

        if (this.mti >= this.N) { /* generate N words at one time */
            var kk;

            if (this.mti === this.N + 1) {   /* if init_genrand() has not been called, */
                this.init_genrand(5489); /* a default initial seed is used */
            }
            for (kk = 0; kk < this.N - this.M; kk++) {
                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);
                this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];
            }
            for (;kk < this.N - 1; kk++) {
                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);
                this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];
            }
            y = (this.mt[this.N - 1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);
            this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];

            this.mti = 0;
        }

        y = this.mt[this.mti++];

        /* Tempering */
        y ^= (y >>> 11);
        y ^= (y << 7) & 0x9d2c5680;
        y ^= (y << 15) & 0xefc60000;
        y ^= (y >>> 18);

        return y >>> 0;
    };

    /* generates a random number on [0,0x7fffffff]-interval */
    MersenneTwister.prototype.genrand_int31 = function () {
        return (this.genrand_int32() >>> 1);
    };

    /* generates a random number on [0,1]-real-interval */
    MersenneTwister.prototype.genrand_real1 = function () {
        return this.genrand_int32() * (1.0 / 4294967295.0);
        /* divided by 2^32-1 */
    };

    /* generates a random number on [0,1)-real-interval */
    MersenneTwister.prototype.random = function () {
        return this.genrand_int32() * (1.0 / 4294967296.0);
        /* divided by 2^32 */
    };

    /* generates a random number on (0,1)-real-interval */
    MersenneTwister.prototype.genrand_real3 = function () {
        return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0);
        /* divided by 2^32 */
    };

    /* generates a random number on [0,1) with 53-bit resolution*/
    MersenneTwister.prototype.genrand_res53 = function () {
        var a = this.genrand_int32()>>>5, b = this.genrand_int32()>>>6;
        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);
    };


    // CommonJS module
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = Chance;
        }
        exports.Chance = Chance;
    }

    // Register as an anonymous AMD module
    if (typeof define === 'function' && define.amd) {
        define([], function () {
            return Chance;
        });
    }

    // if there is a importsScrips object define chance for worker
    if (typeof importScripts !== 'undefined') {
        chance = new Chance();
    }

    // If there is a window object, that at least has a document property,
    // instantiate and define chance on the window
    if (typeof window === "object" && typeof window.document === "object") {
        window.Chance = Chance;
        window.chance = new Chance();
    }
})();
;/*global countlyPopulator, countlyGlobal, countlyCommon, $, moment, app, countlyView, Handlebars, jQuery, PopulatorView, CountlyHelpers, production*/
window.PopulatorView = countlyView.extend({
    initialize: function() {
    },
    beforeRender: function() {
        if (!this.template) {
            var self = this;
            return $.when($.get(countlyGlobal.path + '/populator/templates/populate.html', function(src) {
                self.template = Handlebars.compile(src);
            })).then(function() {});
        }
    },
    renderCommon: function() {
        this.templateData = {
            "page-title": jQuery.i18n.map["populator.plugin-title"]
        };
        var now = new Date();
        var fromDate = new Date(now.getTime() - 1000 * 60 * 60 * 24 * 30);
        var toDate = now;
        var maxTime = 60;
        var maxTimeout;


        $(this.el).html(this.template(this.templateData));
        $("#start-populate").on('click', function() {
            CountlyHelpers.confirm(jQuery.i18n.map['populator.warning2'], "popStyleGreen", function(result) {
                if (!result) {
                    return true;
                }

                CountlyHelpers.popup('#populator-modal', "populator_modal cly-loading");

                $('.stop-populate').off('click').on('click', function(e) {
                    e.preventDefault();
                    if (maxTimeout) {
                        clearTimeout(maxTimeout);
                        maxTimeout = null;
                    }
                    countlyPopulator.stopGenerating();
                    $('.close-dialog').trigger('click');
                    $("#start-populate").show();
                    $(".populate-bar div").stop(true);
                    $(".populate-bar div").width(0);
                    CountlyHelpers.confirm(jQuery.i18n.map["populator.success"], "popStyleGreen", function(dialogResult) {
                        if (!dialogResult) {
                            return true;
                        }
                        window.location = "/dashboard";
                    }, [], {
                        image: 'populate-data',
                        title: jQuery.i18n.map['populator.finished-confirm-title']
                    });
                });

                maxTime = parseInt($("#populate-maxtime").val()) || maxTime;
                maxTimeout = setTimeout(function() {
                    countlyPopulator.stopGenerating(function(done) {
                        $('.close-dialog').trigger('click');
                        if (done === true) {
                            $("#start-populate").show();
                            CountlyHelpers.confirm(jQuery.i18n.map["populator.success"], "popStyleGreen", function(stopGenerationDialogResult) {
                                if (!stopGenerationDialogResult) {
                                    return true;
                                }
                                window.location = "/dashboard";
                            }, [], {
                                image: 'populate-data',
                                title: jQuery.i18n.map['populator.finished-confirm-title']
                            });
                            $(".populate-bar div").css({width: 0});
                        }
                        else if (done === false) {
                            // do nothing for now
                        }
                        else {
                            CountlyHelpers.alert(done, "red");
                            $("#start-populate").show();
                            $(".populate-bar div").css({width: 0});
                        }
                    });
                }, maxTime * 1000);

                fromDate = $("#populate-from").datepicker("getDate") || fromDate;
                toDate = $("#populate-to").datepicker("getDate") || toDate;
                countlyPopulator.setStartTime(fromDate.getTime() / 1000);
                countlyPopulator.setEndTime(toDate.getTime() / 1000);
                countlyPopulator.generateUsers(250);
                $("#start-populate").hide();
                $(".populate-bar div").animate({width: "100%"}, maxTime * 1000);
            }, [
                jQuery.i18n.map["populator.no-populate-data"],
                jQuery.i18n.map["populator.yes-populate-data"],
            ], {
                image: 'populate-data',
                title: jQuery.i18n.prop('populator.warning1', CountlyHelpers.appIdsToNames([countlyCommon.ACTIVE_APP_ID]))
            });
        });


        $("#populate-explain").on('click', function() {
            CountlyHelpers.alert(jQuery.i18n.map["populator.help"], "green");
        });

        if (countlyPopulator.isGenerating()) {
            $("#start-populate").hide();
            $("#stop-populate").show();
            countlyPopulator.generateUI();
            $("#populate-from").val(moment(countlyPopulator.getStartTime() * 1000).format("YYYY-MM-DD"));
            $("#populate-to").val(moment(countlyPopulator.getEndTime() * 1000).format("YYYY-MM-DD"));
            $("#populate-from").datepicker({dateFormat: "yy-mm-dd", defaultDate: new Date(countlyPopulator.getStartTime() * 1000), constrainInput: true, maxDate: now });
            $("#populate-to").datepicker({dateFormat: "yy-mm-dd", defaultDate: new Date(countlyPopulator.getEndTime() * 1000), constrainInput: true, maxDate: now });
        }
        else {
            $("#populate-from").val(moment(fromDate).format("YYYY-MM-DD"));
            $("#populate-to").val(moment(toDate).format("YYYY-MM-DD"));
            $("#populate-from").datepicker({dateFormat: "yy-mm-dd", defaultDate: -30, constrainInput: true, maxDate: now });
            $("#populate-to").datepicker({dateFormat: "yy-mm-dd", constrainInput: true, maxDate: now });
        }
        app.localize();
        if (this.state === "/autostart") {
            $("#start-populate").click();
        }
    },
    refresh: function() {}
});

//register views
app.populatorView = new PopulatorView();

app.route('/manage/populate*state', 'populate', function(state) {
    if (countlyGlobal.member.global_admin || countlyGlobal.admin_apps[countlyCommon.ACTIVE_APP_ID]) {
        this.populatorView.state = state;
        this.renderWhenReady(this.populatorView);
    }
    else {
        app.navigate("/", true);
    }
});

var start_populating = false;
app.addPageScript("/manage/apps", function() {
    var populateApp = '<tr class="populate-demo-data">' +
        '<td>' +
            '<span data-localize="populator.demo-data"></span>' +
        '</td>' +
        '<td>' +
            '<label><input type="checkbox" id="populate-app-after"/>&nbsp;&nbsp;&nbsp;<span data-localize="populator.tooltip"></span></label>' +
        '</td>' +
    '</tr>';

    $("#add-new-app table .table-add").before(populateApp);

    $("#save-app-add").click(function() {
        if ($("#add-new-app table #populate-app-after").is(':checked')) {
            start_populating = true;
            setTimeout(function() {
                start_populating = false;
            }, 5000);
        }
    });
});

app.addAppManagementSwitchCallback(function() {
    if (start_populating) {
        start_populating = false;
        setTimeout(function() {
            var appId = $("#view-app-id").text();
            app.switchApp(appId, function() {
                app.navigate("/manage/populate/autostart", true);
            });
        }, 1000);
    }
});

$(document).ready(function() {
    if (!production) {
        CountlyHelpers.loadJS("populator/javascripts/chance.js");
    }
    var style = "display:none;";
    if (countlyGlobal.member.global_admin || countlyGlobal.admin_apps[countlyCommon.ACTIVE_APP_ID]) {
        style = "";
    }
    var menu = '<a href="#/manage/populate" class="item populator-menu" style="' + style + '">' +
        '<div class="logo-icon fa fa-random"></div>' +
        '<div class="text" data-localize="populator.title"></div>' +
    '</a>';
    if ($('.sidebar-menu #management-submenu .help-toggle').length) {
        $('.sidebar-menu #management-submenu .help-toggle').before(menu);
    }

    //listen for UI app change
    app.addAppSwitchCallback(function(appId) {
        if (countlyGlobal.member.global_admin || countlyGlobal.admin_apps[appId]) {
            $(".populator-menu").show();
        }
        else {
            $(".populator-menu").hide();
        }
    });
});;/*global 
    countlyCommon, 
    countlyGlobal,
    jQuery
 */
(function(countlyReporting, $) {

    //Private Properties
    var _data = {};
    var _emailList = [];
    //Public Methods
    countlyReporting.initialize = function() {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r + "/reports/all",
            data: {
                "api_key": countlyGlobal.member.api_key,
                "app_id": countlyCommon.ACTIVE_APP_ID
            },
            success: function(json) {
                if (json.length > 0) {
                    for (var i = 0; i < json.length; i++) {
                        json[i].title = json[i].title ? json[i].title : '';
                        json[i].report_type = json[i].report_type || "core";
                        json[i].enabled = json[i].enabled + '' === 'false' ? false : true;
                        json[i].pluginEnabled = json[i].report_type === "core" ? true : countlyGlobal.plugins.indexOf(json[i].report_type) > -1;
                    }
                }
                _data = json;
            }
        });
    };

    countlyReporting.requestEmailAddressList = function() {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r + "/reports/email",
            data: {
                "api_key": countlyGlobal.member.api_key,
                "app_id": countlyCommon.ACTIVE_APP_ID
            },
            success: function(json) {
                _emailList = json;
            }
        });
    };

    countlyReporting.getEmailAddressList = function() {
        var data = [];
        _emailList.forEach(function(item) {
            data.push({name: item.email, value: item.email});
        });
        return data;
    };

    countlyReporting.getData = function() {
        return _data;
    };

    countlyReporting.create = function(args) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + "/reports/create",
            data: {
                "api_key": countlyGlobal.member.api_key,
                args: JSON.stringify(args)
            }
        });
    };

    countlyReporting.update = function(args) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + "/reports/update",
            data: {
                "api_key": countlyGlobal.member.api_key,
                args: JSON.stringify(args)
            }
        });
    };

    countlyReporting.del = function(id) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + "/reports/delete",
            data: {
                "api_key": countlyGlobal.member.api_key,
                args: JSON.stringify({
                    "_id": id
                })
            }
        });
    };

    countlyReporting.send = function(id) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + "/reports/send",
            data: {
                "api_key": countlyGlobal.member.api_key,
                args: JSON.stringify({
                    "_id": id
                })
            }
        });
    };

    countlyReporting.updateStatus = function(args) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + "/reports/status",
            data: {
                "api_key": countlyGlobal.member.api_key,
                args: JSON.stringify(args)
            }
        });
    };

    countlyReporting.getReport = function(id) {
        for (var i = 0; i < _data.length; i++) {
            if (_data[i]._id === id) {
                return _data[i];
            }
        }
        return null;
    };
}(window.countlyReporting = window.countlyReporting || {}, jQuery));;/*global 
    Handlebars,
    CountlyHelpers,
    countlyGlobal,
    countlyView,
    ReportingView,
    countlyReporting,
    jQuery,
    app,
    $,
    _,
 */

window.ReportingView = countlyView.extend({
    statusChanged: {},
    emailInput: {},
    initialize: function() {
    },
    beforeRender: function() {
        var allAjaxCalls = [];
        var reportCallbacks = app.getReportsCallbacks();

        Object.keys(reportCallbacks).forEach(function(report) {
            if (reportCallbacks[report].ajax) {
                allAjaxCalls.push(reportCallbacks[report].ajax());
            }
        });

        allAjaxCalls.push(
            countlyReporting.initialize(),
            countlyReporting.requestEmailAddressList()
        );

        if (this.template) {
            return $.when.apply(null, allAjaxCalls).then(function() {});
        }
        else {
            var self = this;
            allAjaxCalls.push(
                $.get(countlyGlobal.path + '/reports/templates/drawer.html', function(src) {
                    src = (Handlebars.compile(src))({"email-placeholder": jQuery.i18n.map["reports.report-email"]});
                    Handlebars.registerPartial("reports-drawer-template", src);
                }),
                $.get(countlyGlobal.path + '/reports/templates/reports.html', function(src) {
                    self.template = Handlebars.compile(src);
                })
            );
            return $.when.apply(null, allAjaxCalls).then(function() {});
        }
    },
    getDayName: function(day) {
        switch (day) {
        case 1:
            return jQuery.i18n.map["reports.monday"];
        case 2:
            return jQuery.i18n.map["reports.tuesday"];
        case 3:
            return jQuery.i18n.map["reports.wednesday"];
        case 4:
            return jQuery.i18n.map["reports.thursday"];
        case 5:
            return jQuery.i18n.map["reports.friday"];
        case 6:
            return jQuery.i18n.map["reports.saturday"];
        case 7:
            return jQuery.i18n.map["reports.sunday"];
        default:
            return "";
        }
    },
    getDayNumber: function(day) {
        switch (day) {
        case jQuery.i18n.map["reports.monday"]:
            return "1";
        case jQuery.i18n.map["reports.tuesday"]:
            return "2";
        case jQuery.i18n.map["reports.wednesday"]:
            return "3";
        case jQuery.i18n.map["reports.thursday"]:
            return "4";
        case jQuery.i18n.map["reports.friday"]:
            return "5";
        case jQuery.i18n.map["reports.saturday"]:
            return "6";
        case jQuery.i18n.map["reports.sunday"]:
            return "7";
        default:
            return "1";
        }
    },
    renderCommon: function(isRefresh) {
        var cnts = app.manageAppsView.getTimeZones();
        ReportingView.zones = {};
        var zNames = {};
        var zoneNames = [];
        for (var i in cnts) {
            for (var j = 0; j < cnts[i].z.length; j++) {
                for (var k in cnts[i].z[j]) {
                    zoneNames.push(k);
                    ReportingView.zones[k] = cnts[i].z[j][k];
                    zNames[cnts[i].z[j][k]] = k;
                }
            }
        }

        var data = countlyReporting.getData();
        for (i = 0; i < data.length; i++) {
            data[i].appNames = CountlyHelpers.appIdsToNames(data[i].apps || []).split(", ");
            if (data[i].hour < 10) {
                data[i].hour = "0" + data[i].hour;
            }
            if (data[i].minute < 10) {
                data[i].minute = "0" + data[i].minute;
            }

            data[i].dayname = this.getDayName(data[i].day);
            data[i].zoneName = zNames[data[i].timezone] || "(GMT+00:00) GMT (no daylight saving)";
        }

        zoneNames.sort(function(a, b) {
            a = parseFloat(a.split(")")[0].replace(":", ".").substring(4));
            b = parseFloat(b.split(")")[0].replace(":", ".").substring(4));
            if (a < b) {
                return -1;
            }
            if (a > b) {
                return 1;
            }
            return 0;
        });
        this.zoneNames = zoneNames;
        this.zones = ReportingView.zones;
        this.templateData = {
            "page-title": jQuery.i18n.map["reports.title"],
            "data": data,
            "apps": countlyGlobal.apps,
            "zoneNames": zoneNames,
            "member": countlyGlobal.member,
            "hasCrash": (typeof countlyCrashes !== "undefined"),
            "hasPush": (typeof countlyPush !== "undefined"),
            "hasRevenue": (typeof countlyRevenue !== "undefined"),
            "hasViews": (typeof countlyViews !== "undefined")
        };


        var self = this;
        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            self.dtable = $('#reports-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": data,
                "fnRowCallback": function(nRow, aData) {
                    $(nRow).attr("id", aData._id);
                },
                "aoColumns": [
                    {"mData": 'title', "sType": "string", "sTitle": jQuery.i18n.map['report.report-title']},
                    {
                        "mData": function(row, type) {
                            if (type === "display") {
                                var disabled = (row.prepackaged) ? 'disabled' : '';
                                var input = '<div class="on-off-switch ' + disabled + '">';
                                if (row.enabled) {
                                    input += '<input type="checkbox" class="on-off-switch-checkbox report-switcher" id="plugin-' + row._id + '" checked ' + disabled + '>';
                                }
                                else {
                                    input += '<input type="checkbox" class="on-off-switch-checkbox report-switcher" id="plugin-' + row._id + '" ' + disabled + '>';
                                }
                                input += '<label class="on-off-switch-label" for="plugin-' + row._id + '"></label>';
                                input += '<span class="text">' + 'Enable' + '</span>';
                                return input;
                            }
                            else {
                                return row.enabled;
                            }
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map['report.status'],
                        "bSortable": false,

                    },
                    {
                        "mData": function(row) {
                            return row.emails.join("<br/>");
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["reports.emails"]
                    },
                    {
                        "mData": function(row) {
                            var ret = "";

                            if (row.report_type === "core") {
                                for (var rowProp in row.metrics) {
                                    ret += jQuery.i18n.map["reports." + rowProp] + ", ";
                                }

                                ret = ret.substring(0, ret.length - 2);

                                ret += " for " + row.appNames.join(", ");
                            }
                            else if (!row.pluginEnabled) {
                                ret = jQuery.i18n.prop("reports.enable-plugin", row.report_type);
                            }
                            else if (!row.isValid) {
                                ret = jQuery.i18n.prop("reports.not-valid");
                            }
                            else {
                                var report = app.getReportsCallbacks()[row.report_type];
                                if (report && report.tableData) {
                                    ret = report.tableData(row);
                                }
                            }

                            return ret;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["reports.metrics"]
                    },
                    {
                        "mData": function(row) {
                            return jQuery.i18n.map["reports." + row.frequency];
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["reports.frequency"]
                    },
                    {
                        "mData": function(row) {
                            var ret = jQuery.i18n.map["reports.at"] + " " + row.hour + ":" + row.minute + ", " + row.zoneName; if (row.frequency === "weekly") {
                                ret += ", " + jQuery.i18n.map["reports.on"] + " " + row.dayname;
                            } return ret;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["reports.time"]
                    },
                    {
                        "mData": function(row) {
                            var menu = "<div class='options-item'>" +
                                            "<div class='edit'></div>" +
                                            "<div class='edit-menu'>";
                            if (row.pluginEnabled && row.isValid) {
                                menu += "<div class='edit-report item'" + " id='" + row._id + "'" + ">Edit</div>" +
                                                        "<div class='send-report item'" + " id='" + row._id + "'" + ">Send Now</div>" +
                                                        "<div class='preview-report item'" + " id='" + row._id + "'" + ">" +
                                                            '<a href=\'/i/reports/preview?api_key=' + countlyGlobal.member.api_key + '&args=' + JSON.stringify({_id: row._id}) + '\' target="_blank" class="" data-localize="reports.preview">' + jQuery.i18n.map["reports.preview"] + '</a>'
                                                        + "</div>";
                            }
                            menu += "<div class='delete-report item'" + " id='" + row._id + "'" + " data-name = '" + row.title + "' >Delete</div>" +
                                            "</div>" +
                                        "</div>";
                            return menu;
                        },
                        "bSortable": false,
                    }
                ]
            }));
            self.dtable.fnSort([ [0, 'desc'] ]);
            self.dtable.stickyTableHeaders();
            self.initTable();

            self.initReportsWidget("core");
            $("#add-report").on("click", function() {
                self.widgetDrawer.init("core");
            });
        }
    },

    initReportsWidget: function(reportType) {
        var self = this;
        var apps = [];

        $("#add-report").on("click", function() {
            $("#reports-widget-drawer").addClass("open");
            $("#reports-widget-drawer").removeClass("editing");

            var reportCallbacks = app.getReportsCallbacks();

            Object.keys(reportCallbacks).forEach(function(report) {
                if (reportCallbacks[report].reset) {
                    reportCallbacks[report].reset();
                }
            });

            self.widgetDrawer.resetCore();
        });

        $("#frequency-dropdown").clySelectSetItems([
            {name: jQuery.i18n.map["reports.daily"], value: "daily"},
            {name: jQuery.i18n.map["reports.weekly"], value: "weekly"}
        ]);

        var timeList = [];
        for (var i = 0; i < 24; i++) {
            var v = (i > 9 ? i : "0" + i) + ":00";
            timeList.push({ value: v, name: v});
        }

        $("#reports-time-dropdown").clySelectSetItems(timeList);

        var cnts = app.manageAppsView.getTimeZones();
        var zones = {};
        var zNames = {};
        var zoneNames = [];
        var timeZoneList = [];
        for (i in cnts) {
            for (var j = 0; j < cnts[i].z.length; j++) {
                for (var k in cnts[i].z[j]) {
                    zoneNames.push(k);
                    zones[k] = cnts[i].z[j][k];
                    zNames[cnts[i].z[j][k]] = k;
                }
            }
        }
        zoneNames.sort(function(a, b) {
            a = parseFloat(a.split(")")[0].replace(":", ".").substring(4));
            b = parseFloat(b.split(")")[0].replace(":", ".").substring(4));
            if (a < b) {
                return -1;
            }
            if (a > b) {
                return 1;
            }
            return 0;
        });
        zoneNames.forEach(function(zone) {
            timeZoneList.push({value: zone, name: zone});
        });
        $("#reports-timezone-dropdown").clySelectSetItems(timeZoneList);

        for (var appId in countlyGlobal.apps) {
            apps.push({ value: appId, name: countlyGlobal.apps[appId].name });
        }

        $("#reports-multi-app-dropdown").clyMultiSelectSetItems(apps);

        $("#include-metrics-dropdown").clyMultiSelectSetItems([
            {name: jQuery.i18n.map["reports.analytics"], value: "analytics"},
            {name: jQuery.i18n.map["reports.events"], value: "events"},
            {name: jQuery.i18n.map["reports.revenue"], value: "revenue"},
            {name: jQuery.i18n.map["reports.crash"], value: "crash"},
        ]);

        $('#reports-widge-close').off("click").on("click", function() {
            $("#reports-widget-drawer").removeClass("open");
        });

        $('#daily-option').on("click", function() {
            $("#reports-dow-section").css("display", "none");
            $('#weekly-option').removeClass("selected");
            $(this).addClass("selected");
            $("#reports-widget-drawer").trigger("cly-report-widget-section-complete");
        });
        $('#weekly-option').on("click", function() {
            $("#reports-dow-section").css("display", "block");
            $('#daily-option').removeClass("selected");
            $("#reports-dow").clySelectSetSelection("", "");
            $(this).addClass("selected");
            $("#reports-widget-drawer").trigger("cly-report-widget-section-complete");
        });

        var weekList = [
            {name: jQuery.i18n.map["reports.monday"], value: 1},
            {name: jQuery.i18n.map["reports.tuesday"], value: 2},
            {name: jQuery.i18n.map["reports.wednesday"], value: 3},
            {name: jQuery.i18n.map["reports.thursday"], value: 4},
            {name: jQuery.i18n.map["reports.friday"], value: 5},
            {name: jQuery.i18n.map["reports.saturday"], value: 6},
            {name: jQuery.i18n.map["reports.sunday"], value: 7},

        ];
        $("#reports-dow").clySelectSetItems(weekList);

        $("#reports-create-widget").off().on("click", function() {
            if ($(this).hasClass("disabled")) {
                return;
            }
            var reportSetting = self.widgetDrawer.getReportSetting();
            reportSetting.enabled = true;

            for (var key in reportSetting) {
                if (!reportSetting[key] || reportSetting[key] === '' ||
                    (reportSetting[key] && reportSetting[key].length === 0)) {
                    return CountlyHelpers.alert("Please complete all required fields",
                        "green",
                        function() { });
                }
            }
            $.when(countlyReporting.create(reportSetting)).then(function(data) {
                if (data.result === "Success") {
                    $("#reports-widget-drawer").removeClass("open");
                    app.activeView.render();
                }
                else {
                    CountlyHelpers.alert(data.result, "red");
                }
            }, function(err) {
                var data = JSON.parse(err.responseText);
                CountlyHelpers.alert(data.result, "red");
            });
        });

        $("#reports-save-widget").off().on("click", function() {
            if ($(this).hasClass("disabled")) {
                return;
            }
            var reportSetting = self.widgetDrawer.getReportSetting();
            reportSetting._id = $("#current_report_id").text();
            for (var key in reportSetting) {
                if (!reportSetting[key] || reportSetting[key] === '' ||
                    (reportSetting[key] && reportSetting[key].length === 0)) {
                    return CountlyHelpers.alert("Please complete all required fields",
                        "green",
                        function() { });
                }
            }
            $.when(countlyReporting.update(reportSetting)).then(function(data) {
                if (data.result === "Success") {
                    $("#reports-widget-drawer").removeClass("open");
                    app.activeView.render();
                }
                else {
                    CountlyHelpers.alert(data.result, "red");
                }
            }, function(err) {
                var data = JSON.parse(err.responseText);
                CountlyHelpers.alert(data.result, "red");
            });
        });

        $(".cly-drawer").find(".close").off("click").on("click", function() {
            $(".grid-stack-item").removeClass("marked-for-editing");
            $(this).parents(".cly-drawer").removeClass("open");
        });

        $("#report-name-input").on("keyup", function() {
            $("#reports-widget-drawer").trigger("cly-report-widget-section-complete");
        });

        $("#reports-metrics-analytics, #reports-metrics-revenue, #reports-metrics-events, #reports-metrics-crash").on("change", function() {
            $("#reports-widget-drawer").trigger("cly-report-widget-section-complete");
        });

        $("#report-types").on("click", ".opt:not(.disabled)", function() {
            $("#report-types").find(".opt").removeClass("selected");
            $(this).addClass("selected");

            var selReportType = $("#report-types").find(".opt.selected").data("report-type");

            var reportCallbacks = app.getReportsCallbacks();

            Object.keys(reportCallbacks).forEach(function(report) {
                if (reportCallbacks[report].reset) {
                    reportCallbacks[report].reset();
                }
            });

            $("#reports-multi-app-dropdown").clyMultiSelectClearSelection();
            $("#reports-multi-app-dropdown .select-items .item").removeClass("selected");
            $("#reports-metrics-analytics").prop("checked", false);
            $("#reports-metrics-revenue").prop("checked", false);
            $("#reports-metrics-events").prop("checked", false);
            $("#reports-metrics-crash").prop("checked", false);

            self.widgetDrawer.init(selReportType);
            $("#reports-widget-drawer").trigger("cly-report-widget-section-complete");
        });

        $("#reports-dow, #reports-time-dropdown, #reports-timezone-dropdown").on("cly-select-change", function() {
            $("#reports-widget-drawer").trigger("cly-report-widget-section-complete");
        });

        $("#reports-multi-app-dropdown").on("cly-multi-select-change", function() {
            $("#reports-widget-drawer").trigger("cly-report-widget-section-complete");
        });
        /*eslint-disable */
        var REGEX_EMAIL = '([a-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&\'*+/=?^_`{|}~-]+)*@' +
        '(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)';
        /*eslint-enable */

        self.emailInput = $('#email-list-input').selectize({
            plugins: ['remove_button'],
            persist: false,
            maxItems: null,
            valueField: 'email',
            labelField: 'name',
            searchField: ['name', 'email'],
            options: [
                {email: countlyGlobal.member.email, name: ''},
            ],
            render: {
                item: function(item, escape) {
                    return '<div>' +
                        (item.name ? '<span class="name">' + escape(item.name) + '</span>' : '') +
                        (item.email ? '<span class="email">' + escape(item.email) + '</span>' : '') +
                    '</div>';
                },
                option: function(item, escape) {
                    var label = item.name || item.email;
                    var caption = item.name ? item.email : null;
                    return '<div>' +
                        '<span class="label">' + escape(label) + '</span>' +
                        (caption ? '<span class="caption">' + escape(caption) + '</span>' : '') +
                    '</div>';
                }
            },
            createFilter: function(input) {
                var match, regex;

                // email@address.com
                regex = new RegExp('^' + REGEX_EMAIL + '$', 'i');
                match = input.match(regex);
                if (match) {
                    return !this.options.hasOwnProperty(match[0]);
                }

                // name <email@address.com>
                /*eslint-disable */
                regex = new RegExp('^([^<]*)\<' + REGEX_EMAIL + '\>$', 'i');
                /*eslint-enable */
                match = input.match(regex);
                if (match) {
                    return !this.options.hasOwnProperty(match[2]);
                }

                return false;
            },
            create: function(input) {
                if ((new RegExp('^' + REGEX_EMAIL + '$', 'i')).test(input)) {
                    return {email: input};
                }
                /*eslint-disable */
                var match = input.match(new RegExp('^([^<]*)\<' + REGEX_EMAIL + '\>$', 'i'));
                /*eslint-enable */
                if (match) {
                    return {
                        email: match[2],
                        name: $.trim(match[1])
                    };
                }
                CountlyHelpers.alert('Invalid email address.', "red");
                return false;
            }
        });

        self.emailInput.on("change", function() {
            $("#reports-widget-drawer").trigger("cly-report-widget-section-complete");
        });

        $("#reports-widget-drawer").on("cly-report-widget-section-complete", function() {
            var reportSetting = self.widgetDrawer.getReportSetting();
            reportSetting.enabled = true;

            var allGood = true;

            for (var key in reportSetting) {
                if (!reportSetting[key] || reportSetting[key] === '' ||
                    (reportSetting[key] && reportSetting[key].length === 0)) {
                    allGood = false;
                }
            }

            if (allGood) {
                $("#reports-create-widget").removeClass("disabled");
                $("#reports-save-widget").removeClass("disabled");
            }
            else {
                $("#reports-create-widget").addClass("disabled");
                $("#reports-save-widget").addClass("disabled");
            }
        });

        self.widgetDrawer.init(reportType);
    },

    widgetDrawer: {
        init: function(reportType) {
            var self = this;

            self.report_type = reportType;
            $("#reports-widget-drawer .details .section").hide();

            $("#reports-widget-drawer .details #report-name-input").closest(".section").show();
            $("#reports-widget-drawer .details #email-list-input").closest(".section").show();
            $("#reports-widget-drawer .details #reports-frequency").closest(".section").show();
            $("#reports-widget-drawer .details #reports-time-dropdown").closest(".section").show();
            $("#reports-widget-drawer .details #reports-timezone-dropdown").closest(".section").show();
            $("#reports-widget-drawer .details #report-types").closest(".section").show();

            if ($("#weekly-option").hasClass("selected")) {
                $("#reports-dow-section").show();
            }
            var $reportTypes = $("#report-types");
            $reportTypes.find(".opt").removeClass("selected");
            $reportTypes.find(".opt[data-report-type=" + reportType + "]").addClass("selected");

            var report = app.getReportsCallbacks()[reportType];
            if (report && report.init) {
                report.init();
            }

            if (reportType === "core") {
                $("#reports-widget-drawer .details #reports-multi-app-dropdown").closest(".section").show();
                $("#reports-widget-drawer .details .include-metrics").closest(".section").show();
            }
        },

        loadData: function(data) {
            var reportType = data.report_type || "core";
            this.init(reportType);
            var self = this;
            if (self.emailInput && self.emailInput.length > 0) {
                for (var i = 0; i < data.emails.length; i++) {
                    (self.emailInput[0]).selectize.addOption({ "name": '', "email": data.emails[i] });
                }
                (self.emailInput[0]).selectize.setValue(data.emails, false);
            }

            $("#report-types").find(".opt").removeClass("selected");
            $("#report-types").find(".opt[data-report-type=" + reportType + "]").addClass("selected");

            $("#reports-widget-drawer").addClass("open editing");
            $("#current_report_id").text(data._id);
            $("#report-name-input").val(data.title);

            if (data.frequency === 'daily') {
                $('#daily-option').addClass("selected");
                $('#weekly-option').removeClass("selected");
                $("#reports-dow-section").css("display", "none");
            }
            else {
                $('#daily-option').removeClass("selected");
                $('#weekly-option').addClass("selected");
                $("#reports-dow-section").css("display", "block");
                $("#reports-dow").clySelectSetSelection(data.day, app.reportingView.getDayName(data.day));
            }

            var timeString = data.hour + ":" + data.minute;
            $("#reports-time-dropdown").clySelectSetSelection(timeString, timeString);

            $("#reports-timezone-dropdown").clySelectSetSelection(data.zoneName, data.zoneName);

            var report = app.getReportsCallbacks()[reportType];
            if (report && report.set) {
                report.set(data);
            }

            if (reportType === "core") {
                var appSelected = [];
                for (var index in data.apps) {
                    var appId = data.apps[index];
                    appSelected.push({name: countlyGlobal.apps[appId].name, value: appId});
                }

                $("#reports-multi-app-dropdown").clyMultiSelectSetSelection(appSelected);
                $("#reports-metrics-analytics").prop("checked", data.metrics.analytics ? true : false);
                $("#reports-metrics-revenue").prop("checked", data.metrics.revenue ? true : false);
                $("#reports-metrics-events").prop("checked", data.metrics.events ? true : false);
                $("#reports-metrics-crash").prop("checked", data.metrics.crash ? true : false);
            }

            $("#reports-save-widget").addClass("disabled");
        },

        resetCore: function() {
            var self = this;
            $("#current_report_id").text("");
            $("#report-name-input").val("");
            $("#report-name-input").attr("placeholder", jQuery.i18n.prop("reports.report-name"));
            $("#reports-dow").clySelectSetSelection("", jQuery.i18n.prop("reports.select_dow"));
            $("#reports-timezone-dropdown").clySelectSetSelection("", jQuery.i18n.prop("reports.select_timezone"));
            $("#reports-time-dropdown").clySelectSetSelection("", jQuery.i18n.prop("reports.select_time"));
            $("#reports-multi-app-dropdown").clyMultiSelectClearSelection();
            $("#reports-multi-app-dropdown .select-items .item").removeClass("selected");
            $("#reports-metrics-analytics").prop("checked", false);
            $("#reports-metrics-revenue").prop("checked", false);
            $("#reports-metrics-events").prop("checked", false);
            $("#reports-metrics-crash").prop("checked", false);
            $("#reports-dow-section").css("display", "none");
            $("#reports-frequency").find(".check").removeClass("selected");
            $('#daily-option').addClass("selected");
            if (self.emailInput && self.emailInput.length > 0) {
                (self.emailInput[0]).selectize.addOption({});
                (self.emailInput[0]).selectize.setValue([], false);
            }
        },

        getReportSetting: function() {
            var reportType = this.report_type;
            var emails = [];
            $("#email-list-input  :selected").each(function() {
                emails.push($(this).val());
            });
            var settings = {
                report_type: reportType,
                title: $("#report-name-input").val(),
                emails: emails,
                frequency: "daily",
                day: 1,
                hour: null,
                minute: null
            };
            var selectDaily = $("#daily-option").hasClass("selected");
            if (!selectDaily) {
                settings.frequency = "weekly";
                settings.day = parseInt($("#reports-dow").clySelectGetSelection());
            }
            var timeSelected = $("#reports-time-dropdown").clySelectGetSelection();
            if (timeSelected) {
                var time = timeSelected ? timeSelected.split(":") : null;
                settings.hour = time[0];
                settings.minute = time[1];
            }

            var zones = app.reportingView.zones;
            if (!zones) {
                var cnts = app.manageAppsView.getTimeZones();
                zones = {};
                for (var i in cnts) {
                    for (var j = 0; j < cnts[i].z.length; j++) {
                        for (var k in cnts[i].z[j]) {
                            zones[k] = cnts[i].z[j][k];
                        }
                    }
                }
            }

            var timeZone = $("#reports-timezone-dropdown").clySelectGetSelection() || "Etc/GMT";
            settings.timezone = zones[timeZone];

            if (reportType === "core") {
                settings.metrics = null;

                if ($("#reports-metrics-analytics").prop("checked")) {
                    if (!settings.metrics) {
                        settings.metrics = {};
                    }
                    settings.metrics.analytics = true;
                }
                if ($("#reports-metrics-revenue").prop("checked")) {
                    if (!settings.metrics) {
                        settings.metrics = {};
                    }
                    settings.metrics.revenue = true;
                }
                if ($("#reports-metrics-events").prop("checked")) {
                    if (!settings.metrics) {
                        settings.metrics = {};
                    }
                    settings.metrics.events = true;
                }
                if ($("#reports-metrics-crash").prop("checked")) {
                    if (!settings.metrics) {
                        settings.metrics = {};
                    }
                    settings.metrics.crash = true;
                }

                settings.apps = $('#reports-multi-app-dropdown').clyMultiSelectGetSelection();
            }

            var report = app.getReportsCallbacks()[reportType];
            if (report && report.settings) {
                var reportSettings = report.settings();
                for (var key in reportSettings) {
                    settings[key] = reportSettings[key];
                }
            }

            return settings;
        }
    },
    initTable: function() {
        var self = this;
        $(".save-report").off("click").on("click", function(data) {
            $.when(countlyReporting.update(data)).then(function(result) {
                if (result.result === "Success") {
                    app.activeView.render();
                }
                else {
                    CountlyHelpers.alert(result.result, "red");
                }
            }, function(err) {
                var errorData = JSON.parse(err.responseText);
                CountlyHelpers.alert(errorData.result, "red");
            });
        });

        $(".edit-report").off("click").on("click", function(e) {
            var reportId = e.target.id;
            var formData = countlyReporting.getReport(reportId);
            self.widgetDrawer.loadData(formData);
        });

        $(".delete-report").off("click").on("click", function(e) {
            var id = e.target.id;
            var name = $(e.target).attr("data-name");
            CountlyHelpers.confirm(jQuery.i18n.prop("reports.confirm", "<b>" + name + "</b>"), "popStyleGreen", function(result) {
                if (!result) {
                    return false;
                }
                $.when(countlyReporting.del(id)).then(function(data) {
                    if (data.result === "Success") {
                        app.activeView.render();
                    }
                    else {
                        CountlyHelpers.alert(data.result, "red");
                    }
                });

            }, [jQuery.i18n.map["common.no-dont-delete"], jQuery.i18n.map["reports.yes-delete-report"]], {title: jQuery.i18n.map["reports.delete-report-title"], image: "delete-email-report"});
        });

        $(".send-report").off("click").on("click", function(e) {
            var id = e.target.id;
            var overlay = $("#overlay").clone();
            overlay.show();
            $.when(countlyReporting.send(id)).always(function(data) {
                overlay.hide();
                if (data && data.result === "Success") {
                    CountlyHelpers.alert(jQuery.i18n.map["reports.sent"], "green");
                }
                else {
                    if (data && data.result) {
                        CountlyHelpers.alert(data.result, "red");
                    }
                    else {
                        CountlyHelpers.alert(jQuery.i18n.map["reports.too-long"], "red");
                    }
                }
            });
        });

        $('input[name=frequency]').off("click").on("click", function() {
            var currUserDetails = $(".user-details:visible");
            switch ($(this).val()) {
            case "daily":
                currUserDetails.find(".reports-dow").hide();
                break;
            case "weekly":
                currUserDetails.find(".reports-dow").show();
                break;
            }
        });
        CountlyHelpers.initializeSelect($(".user-details"));

        // load menu 
        $("body").off("click", ".options-item .edit").on("click", ".options-item .edit", function() {
            $(".edit-menu").fadeOut();
            $(this).next(".edit-menu").fadeToggle();
            event.stopPropagation();
        });

        $(window).click(function() {
            $(".options-item").find(".edit").next(".edit-menu").fadeOut();
        });

        $(".report-switcher").off("click").on("click", function() {
            var pluginId = this.id.toString().replace(/^plugin-/, '');
            var newStatus = $(this).is(":checked");
            var list = countlyReporting.getData();
            var record = _.filter(list, function(item) {
                return item._id === pluginId;
            });
            if (record) {
                (record[0].enabled !== newStatus) ? (self.statusChanged[pluginId] = newStatus) : (delete self.statusChanged[pluginId]);
            }
            var keys = _.keys(self.statusChanged);
            if (keys && keys.length > 0) {
                $(".data-save-bar-remind").text(' You made ' + keys.length + (keys.length === 1 ? ' change.' : ' changes.'));

                return $(".data-saver-bar").removeClass("data-saver-bar-hide");
            }
            $(".data-saver-bar").addClass("data-saver-bar-hide");
        });

        $(".data-saver-cancel-button").off("click").on("click", function() {
            $.when(countlyReporting.initialize()).then(function() {
                self.statusChanged = {};
                self.renderCommon();
                app.localize();
                return $(".data-saver-bar").addClass("data-saver-bar-hide");
            });
        });

        $(".data-saver-button").off("click").on("click", function() {
            $.when(countlyReporting.updateStatus(self.statusChanged)).then(function() {
                return $.when(countlyReporting.initialize()).then(function() {
                    self.statusChanged = {};
                    self.renderCommon();
                    app.localize();
                    return $(".data-saver-bar").addClass("data-saver-bar-hide");
                });
            });
        });

        $(".save-table-data").css("display", "none");
    }
});

app.addReportsCallbacks = function(plugin, options) {
    if (!this.reportCallbacks) {
        this.reportCallbacks = {};
    }

    this.reportCallbacks[plugin] = options;
};

app.getReportsCallbacks = function() {
    return this.reportCallbacks;
};

app.addReportsCallbacks("reports", {
    initialize: function(el, reportType, cb) {
        el = el || "body";
        var self = this;
        $.when(
            $.get(countlyGlobal.path + '/reports/templates/drawer.html', function(src) {
                self.reportsDrawer = src;
            }),
            countlyReporting.requestEmailAddressList(),
            countlyReporting.initialize()
        ).then(function() {
            $('#reports-widget-drawer').remove();
            var drawerViewDom = Handlebars.compile(self.reportsDrawer)({"email-placeholder": jQuery.i18n.map["reports.report-email"]});
            $(el).after(drawerViewDom);
            app.localize();
            app.reportingView.initReportsWidget(reportType);
            $("#reports-widget-drawer .details #report-types").closest(".section").hide();

            if (cb) {
                return cb();
            }
        });
    }
});

//register views
app.reportingView = new ReportingView();

app.route('/manage/reports', 'reports', function() {
    this.renderWhenReady(this.reportingView);
});

$(document).ready(function() {
    var menu = '<a href="#/manage/reports" class="item">' +
        '<div class="logo-icon fa fa-envelope"></div>' +
        '<div class="text" data-localize="reports.title"></div>' +
    '</a>';
    if ($('#management-submenu .help-toggle').length) {
        $('#management-submenu .help-toggle').before(menu);
    }
});;/*globals countlyCommon,countlyDeviceList,countlyGlobal,jQuery,countlySession,CountlyHelpers,app,_metas */
(function(countlyCrashes, $) {

    //Private Properties
    var _crashData = {},
        _groupData = {},
        _reportData = {},
        _crashTimeline = {},
        _list = {},
        _period = {},
        _metrics = {},
        _groups = {},
        _lastId = null,
        _usable_metrics = {
            metrics: {},
            custom: {}
        };

    countlyCrashes.loadList = function(id) {
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r,
            data: {
                "api_key": countlyGlobal.member.api_key,
                "app_id": id,
                "method": "crashes",
                "list": 1,
                "preventRequestAbort": true
            },
            dataType: "json",
            success: function(json) {
                for (var i = 0; i < json.length; i++) {
                    _list[json[i]._id] = json[i].name;
                }
            }
        });
    };

    if (countlyGlobal.member && countlyGlobal.member.api_key && countlyCommon.ACTIVE_APP_ID !== 0) {
        countlyCrashes.loadList(countlyCommon.ACTIVE_APP_ID);
    }

    //Public Methods
    countlyCrashes.initialize = function(id, isRefresh) {
        _metrics = {
            "os_name": jQuery.i18n.map["crashes.os"],
            "browser": jQuery.i18n.map["crashes.browser"],
            "view": jQuery.i18n.map["crashes.view"],
            "app_version": jQuery.i18n.map["crashes.app_version"],
            "os_version": jQuery.i18n.map["crashes.os_version"],
            "manufacture": jQuery.i18n.map["crashes.manufacture"],
            "device": jQuery.i18n.map["crashes.device"],
            "resolution": jQuery.i18n.map["crashes.resolution"],
            "orientation": jQuery.i18n.map["crashes.orientation"],
            "cpu": jQuery.i18n.map["crashes.cpu"],
            "opengl": jQuery.i18n.map["crashes.opengl"]
        };
        _groups = {
            "metrics": jQuery.i18n.map["crashes.group-metrics"],
            "custom": jQuery.i18n.map["crashes.group-custom"]
        };



        _period = countlyCommon.getPeriodForAjax();
        if (id) {
            _lastId = id;
            return $.ajax({
                type: "GET",
                url: countlyCommon.API_PARTS.data.r,
                data: {
                    "api_key": countlyGlobal.member.api_key,
                    "app_id": countlyCommon.ACTIVE_APP_ID,
                    "method": "crashes",
                    "period": _period,
                    "group": id,
                    "display_loader": !isRefresh
                },
                dataType: "jsonp",
                success: function(json) {
                    _groupData = json;
                    var i;
                    if (_groupData.data && _groupData.data.length) {
                        for (i = 0; i < _groupData.data.length; i++) {
                            _reportData[_groupData.data[i]._id] = _groupData.data[i];
                        }
                    }
                    _groupData.name = countlyCommon.decode(_groupData.name);
                    _groupData.error = countlyCommon.decode(_groupData.error);
                    _list[_groupData._id] = _groupData.name;
                    _groupData.dp = {};
                    for (i in _metrics) {
                        if (_groupData[i]) {
                            _usable_metrics.metrics[i] = _metrics[i];
                            _groupData.dp[i] = countlyCrashes.processMetric(_groupData[i], i, _metrics[i]);
                        }
                    }
                    if (_groupData.custom) {
                        for (i in _groupData.custom) {
                            _groupData.dp[i] = countlyCrashes.processMetric(_groupData.custom[i], i, i);
                            _usable_metrics.custom[i] = i.charAt(0).toUpperCase() + i.slice(1);
                        }
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    if (errorThrown && errorThrown === "Bad Request") {
                        CountlyHelpers.alert(jQuery.i18n.map["crashes.not-found"], "red");
                        app.navigate("/crashes", true);
                    }
                }
            });
        }
        else {
            return $.ajax({
                type: "GET",
                url: countlyCommon.API_PARTS.data.r,
                data: {
                    "api_key": countlyGlobal.member.api_key,
                    "app_id": countlyCommon.ACTIVE_APP_ID,
                    "period": _period,
                    "method": "crashes",
                    "graph": 1,
                    "display_loader": !isRefresh
                },
                dataType: "jsonp",
                success: function(json) {
                    _crashData = json;
                    _crashTimeline = json.data;
                    setMeta();
                    if (_crashData.crashes.latest_version === "") {
                        _crashData.crashes.latest_version = "None";
                    }
                    if (_crashData.crashes.error === "") {
                        _crashData.crashes.error = "None";
                    }
                    if (_crashData.crashes.os === "") {
                        _crashData.crashes.os = "None";
                    }
                    if (_crashData.crashes.highest_app === "") {
                        _crashData.crashes.highest_app = "None";
                    }
                }
            });
        }
    };

    countlyCrashes.getCrashName = function(id) {
        if (_list[id]) {
            return _list[id];
        }
        return id;
    };

    countlyCrashes.getRequestData = function() {
        return {
            "api_key": countlyGlobal.member.api_key,
            "app_id": countlyCommon.ACTIVE_APP_ID,
            "method": "crashes",
            "group": _lastId,
            "userlist": true
        };
    };

    countlyCrashes.getId = function() {
        return _lastId;
    };

    countlyCrashes.common = function(id, path, callback) {
        var data = {};
        if (typeof id === "string") {
            data.crash_id = id;
        }
        else {
            data.crashes = id;
        }
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + '/crashes/' + path,
            data: {
                args: JSON.stringify(data),
                app_id: countlyCommon.ACTIVE_APP_ID,
                api_key: countlyGlobal.member.api_key
            },
            dataType: "json",
            success: function(json) {
                if (callback) {
                    callback(json);
                }
            },
            error: function() {
                if (callback) {
                    callback(false);
                }
            }
        });
    };

    countlyCrashes.markResolve = function(id, callback) {
        countlyCrashes.common(id, "resolve", function(json) {
            if (json) {
                if (typeof id === "string") {
                    callback(json[id].replace(/:/g, '.'));
                }
                else {
                    callback(json);
                }
            }
            else {
                callback();
            }
        });
    };

    countlyCrashes.markUnresolve = function(id, callback) {
        countlyCrashes.common(id, "unresolve", callback);
    };

    countlyCrashes.markSeen = function(id, callback) {
        countlyCrashes.common(id, "view", callback);
    };

    countlyCrashes.share = function(id, callback) {
        countlyCrashes.common(id, "share", callback);
    };

    countlyCrashes.unshare = function(id, callback) {
        countlyCrashes.common(id, "unshare", callback);
    };

    countlyCrashes.hide = function(id, callback) {
        countlyCrashes.common(id, "hide", callback);
    };

    countlyCrashes.show = function(id, callback) {
        countlyCrashes.common(id, "show", callback);
    };

    countlyCrashes.resolving = function(id, callback) {
        countlyCrashes.common(id, "resolving", callback);
    };

    countlyCrashes.del = function(id, callback) {
        countlyCrashes.common(id, "delete", callback);
    };

    countlyCrashes.modifyShare = function(id, data, callback) {
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + '/crashes/modify_share',
            data: {
                args: JSON.stringify({
                    crash_id: id,
                    data: data
                }),
                app_id: countlyCommon.ACTIVE_APP_ID,
                api_key: countlyGlobal.member.api_key
            },
            dataType: "jsonp",
            success: function() {
                if (callback) {
                    callback(true);
                }
            },
            error: function() {
                if (callback) {
                    callback(false);
                }
            }
        });
    };

    countlyCrashes.addComment = function(id, data, callback) {
        data = data || {};
        data.app_id = countlyCommon.ACTIVE_APP_ID;
        data.crash_id = id;
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + '/crashes/add_comment',
            data: {
                args: JSON.stringify(data),
                api_key: countlyGlobal.member.api_key
            },
            dataType: "json",
            success: function() {
                if (callback) {
                    callback(true);
                }
            },
            error: function() {
                if (callback) {
                    callback(false);
                }
            }
        });
    };

    countlyCrashes.editComment = function(id, data, callback) {
        data = data || {};
        data.app_id = countlyCommon.ACTIVE_APP_ID;
        data.crash_id = id;
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + '/crashes/edit_comment',
            data: {
                args: JSON.stringify(data),
                api_key: countlyGlobal.member.api_key
            },
            dataType: "json",
            success: function() {
                if (callback) {
                    callback(true);
                }
            },
            error: function() {
                if (callback) {
                    callback(false);
                }
            }
        });
    };

    countlyCrashes.deleteComment = function(id, data, callback) {
        data = data || {};
        data.app_id = countlyCommon.ACTIVE_APP_ID;
        data.crash_id = id;
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + '/crashes/delete_comment',
            data: {
                args: JSON.stringify(data),
                api_key: countlyGlobal.member.api_key
            },
            dataType: "json",
            success: function() {
                if (callback) {
                    callback(true);
                }
            },
            error: function() {
                if (callback) {
                    callback(false);
                }
            }
        });
    };

    countlyCrashes.refresh = function(id) {
        _period = countlyCommon.getPeriodForAjax();
        if (id) {
            return $.ajax({
                type: "GET",
                url: countlyCommon.API_PARTS.data.r,
                data: {
                    "api_key": countlyGlobal.member.api_key,
                    "app_id": countlyCommon.ACTIVE_APP_ID,
                    "method": "crashes",
                    "period": _period,
                    "group": id,
                    "display_loader": false
                },
                dataType: "jsonp",
                success: function(json) {
                    _groupData = json;
                    var i;
                    if (_groupData.data && _groupData.data.length) {
                        for (i = 0; i < _groupData.data.length; i++) {
                            _reportData[_groupData.data[i]._id] = _groupData.data[i];
                        }
                    }
                    _list[_groupData._id] = _groupData.name;
                    _groupData.dp = {};
                    for (i in _metrics) {
                        if (_groupData[i]) {
                            _usable_metrics.metrics[i] = _metrics[i];
                            _groupData.dp[i] = countlyCrashes.processMetric(_groupData[i], i, _metrics[i]);
                        }
                    }
                    if (_groupData.custom) {
                        for (i in _groupData.custom) {
                            _groupData.dp[i] = countlyCrashes.processMetric(_groupData.custom[i], i, i);
                            _usable_metrics.custom[i] = i.charAt(0).toUpperCase() + i.slice(1);
                        }
                    }
                }
            });
        }
        else {
            return $.ajax({
                type: "GET",
                url: countlyCommon.API_PARTS.data.r,
                data: {
                    "api_key": countlyGlobal.member.api_key,
                    "app_id": countlyCommon.ACTIVE_APP_ID,
                    "period": _period,
                    "method": "crashes",
                    "graph": 1,
                    "display_loader": false
                },
                dataType: "jsonp",
                success: function(json) {
                    _crashData = json;
                    if (_crashData.crashes.latest_version === "") {
                        _crashData.crashes.latest_version = "None";
                    }
                    if (_crashData.crashes.error === "") {
                        _crashData.crashes.error = "None";
                    }
                    if (_crashData.crashes.os === "") {
                        _crashData.crashes.os = "None";
                    }
                    if (_crashData.crashes.highest_app === "") {
                        _crashData.crashes.highest_app = "None";
                    }

                    countlyCommon.extendDbObj(_crashTimeline, json.data);
                }
            });
        }
    };

    countlyCrashes.reset = function() {
        _crashData = {};
        _groupData = {};
        _reportData = {};
        _crashTimeline = {};
        _metrics = {};
        _groups = {};
        _usable_metrics = {
            metrics: {},
            custom: {}
        };
    };

    countlyCrashes.processMetric = function(data, metric, label) {

        var ret = {dp: [{data: [[-1, null]], "label": label}], ticks: [[-1, ""]]};
        if (data) {
            var vals = [];
            for (var key in data) {
                vals.push({key: key, val: data[key]});
            }
            vals.sort(function(a, b) {
                return b.val - a.val;
            });
            for (var i = 0; i < vals.length; i++) {
                ret.dp[0].data.push([i, vals[i].val]);
                var l = vals[i].key.replace(/:/g, '.');
                if (metric === "device" && countlyDeviceList && countlyDeviceList[l]) {
                    l = countlyDeviceList[l];
                }
                ret.ticks.push([i, l]);
            }
            ret.dp[0].data.push([vals.length, null]);
        }
        return ret;
    };

    countlyCrashes.getChartData = function(metric, name, fields) {

        if (metric === "cr-session") {
            //get crashes graph
            var chartData = [];
            var dataProps = [];


            if (fields && fields["crashes-total"] === true) {
                chartData.push({ data: [], label: jQuery.i18n.map["crashes.total_overall"], color: '#52A3EF' });
                dataProps.push({ name: "cr" });
            }

            if (fields && fields["crashes-fatal"] === true) {
                chartData.push({ data: [], label: jQuery.i18n.map["crashes.fatal"], color: '#FF8700' });
                dataProps.push({ name: "crf" });
            }

            if (fields && fields["crashes-nonfatal"] === true) {
                chartData.push({ data: [], label: jQuery.i18n.map["crashes.nonfatal"], color: '#0EC1B9' });
                dataProps.push({ name: "crnf" });
            }

            var Crashes = countlyCommon.extractChartData(_crashTimeline, countlyCrashes.clearObject, chartData, dataProps);
            chartData = [
                { data: [], label: jQuery.i18n.map["common.table.total-sessions"], color: '#DDDDDD', mode: "ghost" },
                { data: [], label: jQuery.i18n.map["common.table.total-sessions"], color: '#333933' }
            ],
            dataProps = [
                {
                    name: "pt",
                    func: function(dataObj) {
                        return dataObj.t;
                    },
                    period: "previous"
                },
                { name: "t" }
            ];

            var sessionData = countlyCommon.extractChartData(countlySession.getDb(), countlySession.clearObject, chartData, dataProps);
            for (var z = 0; z < Crashes.chartDP.length; z = z + 1) {
                for (var p = 0; p < sessionData.chartDP[0].data.length; p++) {
                    if (sessionData.chartDP[1].data[p][1] !== 0) {
                        Crashes.chartDP[z].data[p][1] = Crashes.chartDP[z].data[p][1] / sessionData.chartDP[1].data[p][1];
                    }
                }
            }
            return Crashes;

        }
        else {
            chartData = [
                { data: [], label: name, color: '#DDDDDD', mode: "ghost" },
                { data: [], label: name, color: '#333933' }
            ],
            dataProps = [
                {
                    name: "p" + metric,
                    func: function(dataObj) {
                        return dataObj[metric];
                    },
                    period: "previous"
                },
                { name: metric }
            ];
            return countlyCommon.extractChartData(_crashTimeline, countlyCrashes.clearObject, chartData, dataProps);
        }
    };

    countlyCrashes.getMetrics = function() {
        var ob = {};
        for (var i in _usable_metrics) {
            ob[_groups[i]] = _usable_metrics[i];
        }
        return ob;
    };

    countlyCrashes.getData = function() {
        return _crashData;
    };

    countlyCrashes.getGroupData = function() {
        return _groupData;
    };

    countlyCrashes.setGroupData = function(data) {
        _metrics = {
            "os_name": jQuery.i18n.map["crashes.os"],
            "browser": jQuery.i18n.map["crashes.browser"],
            "view": jQuery.i18n.map["crashes.view"],
            "app_version": jQuery.i18n.map["crashes.app_version"],
            "os_version": jQuery.i18n.map["crashes.os_version"],
            "manufacture": jQuery.i18n.map["crashes.manufacture"],
            "device": jQuery.i18n.map["crashes.device"],
            "resolution": jQuery.i18n.map["crashes.resolution"],
            "orientation": jQuery.i18n.map["crashes.orientation"],
            "cpu": jQuery.i18n.map["crashes.cpu"],
            "opengl": jQuery.i18n.map["crashes.opengl"]
        };
        _groups = {
            "metrics": jQuery.i18n.map["crashes.group-metrics"],
            "custom": jQuery.i18n.map["crashes.group-custom"]
        };
        _groupData = data;
        _groupData.dp = {};
        for (var i in _metrics) {
            if (_groupData[i]) {
                _usable_metrics.metrics[i] = _metrics[i];
                _groupData.dp[i] = countlyCrashes.processMetric(_groupData[i], i, _metrics[i]);
            }
        }
        if (_groupData.custom) {
            for (var k in _groupData.custom) {
                _groupData.dp[k] = countlyCrashes.processMetric(_groupData.custom[k], k, k);
                _usable_metrics.custom[k] = k.charAt(0).toUpperCase() + k.slice(1);
            }
        }
    };

    countlyCrashes.getReportData = function(id) {
        return _reportData[id];
    };

    countlyCrashes.getErrorName = function() {
        var error = _crashData.crashes.error.split(":")[0];
        return error;
    };

    countlyCrashes.getAffectedUsers = function() {
        if (_crashData.users.total > 0) {
            var ret = [];
            var affected = (_crashData.users.affected / _crashData.users.total) * 100;
            var fatal = (_crashData.users.fatal / _crashData.users.total) * 100;
            var nonfatal = ((_crashData.users.affected - _crashData.users.fatal) / _crashData.users.total) * 100;
            var name1 = Math.round(fatal) + "% " + jQuery.i18n.map["crashes.fatal"];
            if (fatal > 0) {
                ret.push({"name": name1, "percent": fatal});
            }
            var name2 = Math.round(nonfatal) + "% " + jQuery.i18n.map["crashes.nonfatal"];
            if (nonfatal > 0) {
                ret.push({"name": name2, "percent": nonfatal});
            }
            var name3 = Math.round(100 - affected) + "% " + jQuery.i18n.map["crashes.notaffected"];
            if (100 - affected > 0) {
                ret.push({"name": name3, "percent": 100 - affected});
            }
            return ret;
        }
        return [];
    };

    countlyCrashes.getFatalBars = function() {
        if (_crashData.crashes.total > 0) {
            var ret = [];
            var total = _crashData.crashes.fatal + _crashData.crashes.nonfatal;
            var fatal = (_crashData.crashes.fatal / total) * 100;
            var nonfatal = (_crashData.crashes.nonfatal / total) * 100;
            var name1 = Math.round(fatal) + "% " + jQuery.i18n.map["crashes.fatal"];
            if (fatal > 0) {
                ret.push({"name": name1, "percent": fatal});
            }
            var name2 = Math.round(nonfatal) + "% " + jQuery.i18n.map["crashes.nonfatal"];
            if (nonfatal > 0) {
                ret.push({"name": name2, "percent": nonfatal});
            }
            return ret;
        }
        return [];
    };

    countlyCrashes.getResolvedBars = function() {
        if (_crashData.crashes.unique > 0) {
            var ret = [];
            var total = Math.max(_crashData.crashes.resolved, 0) + Math.max(_crashData.crashes.unresolved, 0);
            var resolved = (_crashData.crashes.resolved / total) * 100;
            var unresolved = (_crashData.crashes.unresolved / total) * 100;
            var name1 = Math.round(resolved) + "% " + jQuery.i18n.map["crashes.resolved"];
            if (resolved > 0) {
                ret.push({"name": name1, "percent": resolved});
            }
            var name2 = Math.round(unresolved) + "% " + jQuery.i18n.map["crashes.unresolved"];
            if (unresolved > 0) {
                ret.push({"name": name2, "percent": unresolved});
            }
            return ret;
        }
        return [];
    };

    countlyCrashes.getPlatformBars = function() {
        var res = [];
        var data = [];
        var total = 0;
        var i;

        for (i in _crashData.crashes.os) {
            if (_crashData.crashes.os[i] > 0) {
                data.push([i, _crashData.crashes.os[i]]);
            }
        }

        data.sort(function(a, b) {
            return b[1] - a[1];
        });

        var maxItems = 3;
        if (data.length < maxItems) {
            maxItems = data.length;
        }

        for (i = 0; i < maxItems; i++) {
            total += data[i][1];
        }

        for (i = 0; i < maxItems; i++) {
            res.push({"name": Math.round((data[i][1] / total) * 100) + "% " + data[i][0], "percent": (data[i][1] / total) * 100});
        }

        return res;
    };

    countlyCrashes.getBoolBars = function(name) {
        if (_groupData[name]) {
            _groupData[name].yes = _groupData[name].yes || 0;
            _groupData[name].no = _groupData[name].no || 0;
            var total = _groupData[name].yes + _groupData[name].no;
            var yes = (_groupData[name].yes / total) * 100;
            var no = (_groupData[name].no / total) * 100;
            var ret = [];
            if (yes > 0) {
                ret.push({"name": yes.toFixed(2) + "%", "percent": yes});
                ret.push({"name": no.toFixed(2) + "%", "percent": no});
            }
            else {
                ret.push({"name": yes.toFixed(2) + "%", "percent": no, "background": "#86CBDD"});
            }
            return ret;
        }
        return [];
    };

    countlyCrashes.getDashboardData = function() {
        var data = countlyCommon.getDashboardData(_crashTimeline, ["cr", "crnf", "crf", "cru", "crru"], ["cru"], null, countlyCrashes.clearObject);
        var sessions = countlyCommon.getDashboardData(countlySession.getDb(), ["t", "n", "u", "d", "e", "p", "m"], ["u", "p", "m"], {u: "users"}, countlySession.clearObject);

        data.crt = {total: 0, "trend-total": "u", "prev-total": 0, trend: "u", change: 'NA', "total-fatal": 0, "prev-total-fatal": 0, "trend-fatal": "u", "total-nonfatal": 0, "prev-total-nonfatal": 0, "trend-nonfatal": "u"};


        if (sessions.t.total !== 0) {
            data.crt.total = data.cr.total / sessions.t.total;
            data.crt["total-fatal"] = data.crf.total / sessions.t.total;
            data.crt["total-nonfatal"] = data.crnf.total / sessions.t.total;
        }
        if (sessions.t["prev-total"] !== 0) {
            data.crt["prev-total"] = data.cr["prev-total"] / sessions.t["prev-total"];
            data.crt["prev-total-fatal"] = data.crf["prev-total"] / sessions.t["prev-total"];
            data.crt["prev-total-nonfatal"] = data.crnf["prev-total"] / sessions.t["prev-total"];
        }

        if (data.crt["total-fatal"] < data.crt["prev-total-fatal"]) {
            data.crt["trend-fatal"] = "d";
        }
        if (data.crt["total-fatal"] < data.crt["prev-total-fatal"]) {
            data.crt["trend-nonfatal"] = "d";
        }
        if (data.crt.total < data.crt["prev-total"]) {
            data.crt["trend-total"] = "d";
        }

        if (data.crt.total !== 0 && data.crt["prev-total"] !== 0) {
            data.crt.change = 100 - Math.round(data.crt["prev-total"] * 100 / data.crt.total);
            if (data.crt.change < 0) {
                data.crt.trend = "d";
            }
            data.crt.change = data.crt.change + "%";
        }
        else {
            if (data.crt.total !== 0) {
                data.crt.change = "∞";
            }
            else if (data.crt["prev-total"] !== 0) {
                data.crt.trend = "d";
                data.crt.change = "-∞";
            }
        }

        data.crt.total = parseFloat(data.crt.total.toFixed(2));
        data.crt["total-fatal"] = parseFloat(data.crt["total-fatal"].toFixed(2));
        data.crt["total-nonfatal"] = parseFloat(data.crt["total-nonfatal"].toFixed(2));
        return {usage: data};
    };

    countlyCrashes.clearObject = function(obj) {
        if (obj) {
            if (!obj.cr) {
                obj.cr = 0;
            }
            if (!obj.cru) {
                obj.cru = 0;
            }
            if (!obj.crnf) {
                obj.crnf = 0;
            }
            if (!obj.crf) {
                obj.crf = 0;
            }
            if (!obj.crru) {
                obj.crru = 0;
            }
        }
        else {
            obj = {"cr": 0, "cru": 0, "crnf": 0, "crf": 0, "crru": 0};
        }

        return obj;
    };

    /**
     * Set Meta
     */
    function setMeta() {
        if (_crashTimeline.meta) {
            for (var i in _crashTimeline.meta) {
                _metas[i] = (_crashTimeline.meta[i]) ? _crashTimeline.meta[i] : [];
            }
        }
    }

}(window.countlyCrashes = window.countlyCrashes || {}, jQuery));;/**
 * marked - a markdown parser
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 */
(function(){var block={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:noop,hr:/^( *[-*_]){3,} *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:noop,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,blockquote:/^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment|closed|closing) *(?:\n{2,}|\s*$)/,def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,table:noop,paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,text:/^[^\n]+/};block.bullet=/(?:[*+-]|\d+\.)/;block.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;block.item=replace(block.item,"gm")(/bull/g,block.bullet)();block.list=replace(block.list)(/bull/g,block.bullet)("hr","\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))")("def","\\n+(?="+block.def.source+")")();block.blockquote=replace(block.blockquote)("def",block.def)();block._tag="(?!(?:"+"a|em|strong|small|s|cite|q|dfn|abbr|data|time|code"+"|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo"+"|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b";block.html=replace(block.html)("comment",/<!--[\s\S]*?-->/)("closed",/<(tag)[\s\S]+?<\/\1>/)("closing",/<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g,block._tag)();block.paragraph=replace(block.paragraph)("hr",block.hr)("heading",block.heading)("lheading",block.lheading)("blockquote",block.blockquote)("tag","<"+block._tag)("def",block.def)();block.normal=merge({},block);block.gfm=merge({},block.normal,{fences:/^ *(`{3,}|~{3,}) *(\S+)? *\n([\s\S]+?)\s*\1 *(?:\n+|$)/,paragraph:/^/});block.gfm.paragraph=replace(block.paragraph)("(?!","(?!"+block.gfm.fences.source.replace("\\1","\\2")+"|"+block.list.source.replace("\\1","\\3")+"|")();block.tables=merge({},block.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/});function Lexer(options){this.tokens=[];this.tokens.links={};this.options=options||marked.defaults;this.rules=block.normal;if(this.options.gfm){if(this.options.tables){this.rules=block.tables}else{this.rules=block.gfm}}}Lexer.rules=block;Lexer.lex=function(src,options){var lexer=new Lexer(options);return lexer.lex(src)};Lexer.prototype.lex=function(src){src=src.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n");return this.token(src,true)};Lexer.prototype.token=function(src,top,bq){var src=src.replace(/^ +$/gm,""),next,loose,cap,bull,b,item,space,i,l;while(src){if(cap=this.rules.newline.exec(src)){src=src.substring(cap[0].length);if(cap[0].length>1){this.tokens.push({type:"space"})}}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);cap=cap[0].replace(/^ {4}/gm,"");this.tokens.push({type:"code",text:!this.options.pedantic?cap.replace(/\n+$/,""):cap});continue}if(cap=this.rules.fences.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"code",lang:cap[2],text:cap[3]});continue}if(cap=this.rules.heading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:cap[1].length,text:cap[2]});continue}if(top&&(cap=this.rules.nptable.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].split(/ *\| */)}this.tokens.push(item);continue}if(cap=this.rules.lheading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:cap[2]==="="?1:2,text:cap[1]});continue}if(cap=this.rules.hr.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"hr"});continue}if(cap=this.rules.blockquote.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"blockquote_start"});cap=cap[0].replace(/^ *> ?/gm,"");this.token(cap,top,true);this.tokens.push({type:"blockquote_end"});continue}if(cap=this.rules.list.exec(src)){src=src.substring(cap[0].length);bull=cap[2];this.tokens.push({type:"list_start",ordered:bull.length>1});cap=cap[0].match(this.rules.item);next=false;l=cap.length;i=0;for(;i<l;i++){item=cap[i];space=item.length;item=item.replace(/^ *([*+-]|\d+\.) +/,"");if(~item.indexOf("\n ")){space-=item.length;item=!this.options.pedantic?item.replace(new RegExp("^ {1,"+space+"}","gm"),""):item.replace(/^ {1,4}/gm,"")}if(this.options.smartLists&&i!==l-1){b=block.bullet.exec(cap[i+1])[0];if(bull!==b&&!(bull.length>1&&b.length>1)){src=cap.slice(i+1).join("\n")+src;i=l-1}}loose=next||/\n\n(?!\s*$)/.test(item);if(i!==l-1){next=item.charAt(item.length-1)==="\n";if(!loose)loose=next}this.tokens.push({type:loose?"loose_item_start":"list_item_start"});this.token(item,false,bq);this.tokens.push({type:"list_item_end"})}this.tokens.push({type:"list_end"});continue}if(cap=this.rules.html.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:cap[1]==="pre"||cap[1]==="script"||cap[1]==="style",text:cap[0]});continue}if(!bq&&top&&(cap=this.rules.def.exec(src))){src=src.substring(cap[0].length);this.tokens.links[cap[1].toLowerCase()]={href:cap[2],title:cap[3]};continue}if(top&&(cap=this.rules.table.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/(?: *\| *)?\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */)}this.tokens.push(item);continue}if(top&&(cap=this.rules.paragraph.exec(src))){src=src.substring(cap[0].length);this.tokens.push({type:"paragraph",text:cap[1].charAt(cap[1].length-1)==="\n"?cap[1].slice(0,-1):cap[1]});continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"text",text:cap[0]});continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return this.tokens};var inline={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<([^ >]+(@|:\/)[^ >]+)>/,url:noop,tag:/^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:noop,text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/};inline._inside=/(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;inline._href=/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;inline.link=replace(inline.link)("inside",inline._inside)("href",inline._href)();inline.reflink=replace(inline.reflink)("inside",inline._inside)();inline.normal=merge({},inline);inline.pedantic=merge({},inline.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/});inline.gfm=merge({},inline.normal,{escape:replace(inline.escape)("])","~|])")(),url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:replace(inline.text)("]|","~]|")("|","|https?://|")()});inline.breaks=merge({},inline.gfm,{br:replace(inline.br)("{2,}","*")(),text:replace(inline.gfm.text)("{2,}","*")()});function InlineLexer(links,options){this.options=options||marked.defaults;this.links=links;this.rules=inline.normal;this.renderer=this.options.renderer||new Renderer;this.renderer.options=this.options;if(!this.links){throw new Error("Tokens array requires a `links` property.")}if(this.options.gfm){if(this.options.breaks){this.rules=inline.breaks}else{this.rules=inline.gfm}}else if(this.options.pedantic){this.rules=inline.pedantic}}InlineLexer.rules=inline;InlineLexer.output=function(src,links,options){var inline=new InlineLexer(links,options);return inline.output(src)};InlineLexer.prototype.output=function(src){var out="",link,text,href,cap;while(src){if(cap=this.rules.escape.exec(src)){src=src.substring(cap[0].length);out+=cap[1];continue}if(cap=this.rules.autolink.exec(src)){src=src.substring(cap[0].length);if(cap[2]==="@"){text=cap[1].charAt(6)===":"?this.mangle(cap[1].substring(7)):this.mangle(cap[1]);href=this.mangle("mailto:")+text}else{text=escape(cap[1]);href=text}out+=this.renderer.link(href,null,text);continue}if(!this.inLink&&(cap=this.rules.url.exec(src))){src=src.substring(cap[0].length);text=escape(cap[1]);href=text;out+=this.renderer.link(href,null,text);continue}if(cap=this.rules.tag.exec(src)){if(!this.inLink&&/^<a /i.test(cap[0])){this.inLink=true}else if(this.inLink&&/^<\/a>/i.test(cap[0])){this.inLink=false}src=src.substring(cap[0].length);out+=this.options.sanitize?escape(cap[0]):cap[0];continue}if(cap=this.rules.link.exec(src)){src=src.substring(cap[0].length);this.inLink=true;out+=this.outputLink(cap,{href:cap[2],title:cap[3]});this.inLink=false;continue}if((cap=this.rules.reflink.exec(src))||(cap=this.rules.nolink.exec(src))){src=src.substring(cap[0].length);link=(cap[2]||cap[1]).replace(/\s+/g," ");link=this.links[link.toLowerCase()];if(!link||!link.href){out+=cap[0].charAt(0);src=cap[0].substring(1)+src;continue}this.inLink=true;out+=this.outputLink(cap,link);this.inLink=false;continue}if(cap=this.rules.strong.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.strong(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.em.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.em(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.codespan(escape(cap[2],true));continue}if(cap=this.rules.br.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.br();continue}if(cap=this.rules.del.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.del(this.output(cap[1]));continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);out+=escape(this.smartypants(cap[0]));continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return out};InlineLexer.prototype.outputLink=function(cap,link){var href=escape(link.href),title=link.title?escape(link.title):null;return cap[0].charAt(0)!=="!"?this.renderer.link(href,title,this.output(cap[1])):this.renderer.image(href,title,escape(cap[1]))};InlineLexer.prototype.smartypants=function(text){if(!this.options.smartypants)return text;return text.replace(/--/g,"—").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")};InlineLexer.prototype.mangle=function(text){var out="",l=text.length,i=0,ch;for(;i<l;i++){ch=text.charCodeAt(i);if(Math.random()>.5){ch="x"+ch.toString(16)}out+="&#"+ch+";"}return out};function Renderer(options){this.options=options||{}}Renderer.prototype.code=function(code,lang,escaped){if(this.options.highlight){var out=this.options.highlight(code,lang);if(out!=null&&out!==code){escaped=true;code=out}}if(!lang){return"<pre><code>"+(escaped?code:escape(code,true))+"\n</code></pre>"}return'<pre><code class="'+this.options.langPrefix+escape(lang,true)+'">'+(escaped?code:escape(code,true))+"\n</code></pre>\n"};Renderer.prototype.blockquote=function(quote){return"<blockquote>\n"+quote+"</blockquote>\n"};Renderer.prototype.html=function(html){return html};Renderer.prototype.heading=function(text,level,raw){return"<h"+level+' id="'+this.options.headerPrefix+raw.toLowerCase().replace(/[^\w]+/g,"-")+'">'+text+"</h"+level+">\n"};Renderer.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"};Renderer.prototype.list=function(body,ordered){var type=ordered?"ol":"ul";return"<"+type+">\n"+body+"</"+type+">\n"};Renderer.prototype.listitem=function(text){return"<li>"+text+"</li>\n"};Renderer.prototype.paragraph=function(text){return"<p>"+text+"</p>\n"};Renderer.prototype.table=function(header,body){return"<table>\n"+"<thead>\n"+header+"</thead>\n"+"<tbody>\n"+body+"</tbody>\n"+"</table>\n"};Renderer.prototype.tablerow=function(content){return"<tr>\n"+content+"</tr>\n"};Renderer.prototype.tablecell=function(content,flags){var type=flags.header?"th":"td";var tag=flags.align?"<"+type+' style="text-align:'+flags.align+'">':"<"+type+">";return tag+content+"</"+type+">\n"};Renderer.prototype.strong=function(text){return"<strong>"+text+"</strong>"};Renderer.prototype.em=function(text){return"<em>"+text+"</em>"};Renderer.prototype.codespan=function(text){return"<code>"+text+"</code>"};Renderer.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"};Renderer.prototype.del=function(text){return"<del>"+text+"</del>"};Renderer.prototype.link=function(href,title,text){if(this.options.sanitize){try{var prot=decodeURIComponent(unescape(href)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return""}if(prot.indexOf("javascript:")===0){return""}}var out='<a href="'+href+'"';if(title){out+=' title="'+title+'"'}out+=">"+text+"</a>";return out};Renderer.prototype.image=function(href,title,text){var out='<img src="'+href+'" alt="'+text+'"';if(title){out+=' title="'+title+'"'}out+=this.options.xhtml?"/>":">";return out};function Parser(options){this.tokens=[];this.token=null;this.options=options||marked.defaults;this.options.renderer=this.options.renderer||new Renderer;this.renderer=this.options.renderer;this.renderer.options=this.options}Parser.parse=function(src,options,renderer){var parser=new Parser(options,renderer);return parser.parse(src)};Parser.prototype.parse=function(src){this.inline=new InlineLexer(src.links,this.options,this.renderer);this.tokens=src.reverse();var out="";while(this.next()){out+=this.tok()}return out};Parser.prototype.next=function(){return this.token=this.tokens.pop()};Parser.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0};Parser.prototype.parseText=function(){var body=this.token.text;while(this.peek().type==="text"){body+="\n"+this.next().text}return this.inline.output(body)};Parser.prototype.tok=function(){switch(this.token.type){case"space":{return""}case"hr":{return this.renderer.hr()}case"heading":{return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,this.token.text)}case"code":{return this.renderer.code(this.token.text,this.token.lang,this.token.escaped)}case"table":{var header="",body="",i,row,cell,flags,j;cell="";for(i=0;i<this.token.header.length;i++){flags={header:true,align:this.token.align[i]};cell+=this.renderer.tablecell(this.inline.output(this.token.header[i]),{header:true,align:this.token.align[i]})}header+=this.renderer.tablerow(cell);for(i=0;i<this.token.cells.length;i++){row=this.token.cells[i];cell="";for(j=0;j<row.length;j++){cell+=this.renderer.tablecell(this.inline.output(row[j]),{header:false,align:this.token.align[j]})}body+=this.renderer.tablerow(cell)}return this.renderer.table(header,body)}case"blockquote_start":{var body="";while(this.next().type!=="blockquote_end"){body+=this.tok()}return this.renderer.blockquote(body)}case"list_start":{var body="",ordered=this.token.ordered;while(this.next().type!=="list_end"){body+=this.tok()}return this.renderer.list(body,ordered)}case"list_item_start":{var body="";while(this.next().type!=="list_item_end"){body+=this.token.type==="text"?this.parseText():this.tok()}return this.renderer.listitem(body)}case"loose_item_start":{var body="";while(this.next().type!=="list_item_end"){body+=this.tok()}return this.renderer.listitem(body)}case"html":{var html=!this.token.pre&&!this.options.pedantic?this.inline.output(this.token.text):this.token.text;return this.renderer.html(html)}case"paragraph":{return this.renderer.paragraph(this.inline.output(this.token.text))}case"text":{return this.renderer.paragraph(this.parseText())}}};function escape(html,encode){return html.replace(!encode?/&(?!#?\w+;)/g:/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function unescape(html){return html.replace(/&([#\w]+);/g,function(_,n){n=n.toLowerCase();if(n==="colon")return":";if(n.charAt(0)==="#"){return n.charAt(1)==="x"?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1))}return""})}function replace(regex,opt){regex=regex.source;opt=opt||"";return function self(name,val){if(!name)return new RegExp(regex,opt);val=val.source||val;val=val.replace(/(^|[^\[])\^/g,"$1");regex=regex.replace(name,val);return self}}function noop(){}noop.exec=noop;function merge(obj){var i=1,target,key;for(;i<arguments.length;i++){target=arguments[i];for(key in target){if(Object.prototype.hasOwnProperty.call(target,key)){obj[key]=target[key]}}}return obj}function marked(src,opt,callback){if(callback||typeof opt==="function"){if(!callback){callback=opt;opt=null}opt=merge({},marked.defaults,opt||{});var highlight=opt.highlight,tokens,pending,i=0;try{tokens=Lexer.lex(src,opt)}catch(e){return callback(e)}pending=tokens.length;var done=function(err){if(err){opt.highlight=highlight;return callback(err)}var out;try{out=Parser.parse(tokens,opt)}catch(e){err=e}opt.highlight=highlight;return err?callback(err):callback(null,out)};if(!highlight||highlight.length<3){return done()}delete opt.highlight;if(!pending)return done();for(;i<tokens.length;i++){(function(token){if(token.type!=="code"){return--pending||done()}return highlight(token.text,token.lang,function(err,code){if(err)return done(err);if(code==null||code===token.text){return--pending||done()}token.text=code;token.escaped=true;--pending||done()})})(tokens[i])}return}try{if(opt)opt=merge({},marked.defaults,opt);return Parser.parse(Lexer.lex(src,opt),opt)}catch(e){e.message+="\nPlease report this to https://github.com/chjj/marked.";if((opt||marked.defaults).silent){return"<p>An error occured:</p><pre>"+escape(e.message+"",true)+"</pre>"}throw e}}marked.options=marked.setOptions=function(opt){merge(marked.defaults,opt);return marked};marked.defaults={gfm:true,tables:true,breaks:false,pedantic:false,sanitize:false,smartLists:false,silent:false,highlight:null,langPrefix:"lang-",smartypants:false,headerPrefix:"",renderer:new Renderer,xhtml:false};marked.Parser=Parser;marked.parser=Parser.parse;marked.Renderer=Renderer;marked.Lexer=Lexer;marked.lexer=Lexer.lex;marked.InlineLexer=InlineLexer;marked.inlineLexer=InlineLexer.output;marked.parse=marked;if(typeof module!=="undefined"&&typeof exports==="object"){module.exports=marked}else if(typeof define==="function"&&define.amd){define(function(){return marked})}else{this.marked=marked}}).call(function(){return this||(typeof window!=="undefined"?window:global)}());;/*globals countlyView,_,countlyDeviceDetails,countlyDeviceList,marked,addDrill,extendViewWithFilter,hljs,production,countlyUserdata,moment,store,jQuery,countlySession,$,countlyGlobal,Handlebars,countlyCrashes,app,CountlyHelpers,CrashesView,CrashgroupView,countlySegmentation,countlyCommon */
window.CrashesView = countlyView.extend({
    convertFilter: {
        "sg.crash": {prop: "_id", type: "string"},
        "sg.cpu": {prop: "cpu", type: "segment"},
        "sg.opengl": {prop: "opengl", type: "segment"},
        "sg.os": {prop: "os", type: "string"},
        "sg.orientation": {prop: "orientation", type: "segment"},
        "sg.nonfatal": {prop: "nonfatal", type: "booltype"},
        "sg.root": {prop: "root", type: "boolsegment"},
        "sg.online": {prop: "online", type: "boolsegment"},
        "sg.signal": {prop: "signal", type: "boolsegment"},
        "sg.muted": {prop: "muted", type: "boolsegment"},
        "sg.background": {prop: "background", type: "boolsegment"},
        "up.d": {prop: "device", type: "segment"},
        "up.pv": {prop: "os_version", type: "segment"},
        "up.av": {prop: "app_version", type: "segment"},
        "up.r": {prop: "resolution", type: "segment"},
        "up.ls": {prop: "lastTs", type: "date"},
        "up.fs": {prop: "startTs", type: "date"},
        "is_new": {prop: "is_new", type: "booltype"},
        "is_resolved": {prop: "is_resolved", type: "booltype"},
        "is_hidden": {prop: "is_hidden", type: "booltype"},
        "is_renewed": {prop: "is_renewed", type: "booltype"},
        "reports": {prop: "reports", type: "number"},
        "users": {prop: "reports", type: "number"},
        "ram_min": {prop: "ram.min", type: "number"},
        "ram_max": {prop: "ram.max", type: "number"},
        "bat_min": {prop: "bat.min", type: "number"},
        "bat_max": {prop: "bat.max", type: "number"},
        "disk_min": {prop: "disk.min", type: "number"},
        "disk_max": {prop: "disk.max", type: "number"},
        "run_min": {prop: "run.min", type: "number"},
        "run_max": {prop: "run.max", type: "number"}
    },
    initialize: function() {
        this.loaded = true;
        this.filter = (store.get("countly_crashfilter")) ? store.get("countly_crashfilter") : "crash-all";
        this.curMetric = "cr";
        this.metrics = {
            cr: jQuery.i18n.map["crashes.total"],
            cru: jQuery.i18n.map["crashes.unique"],
            crnf: jQuery.i18n.map["crashes.nonfatal"] + " " + jQuery.i18n.map["crashes.title"],
            crf: jQuery.i18n.map["crashes.fatal"] + " " + jQuery.i18n.map["crashes.title"],
            crru: jQuery.i18n.map["crashes.resolved-users"]
        };
    },
    showOnGraph: {"crashes-fatal": true, "crashes-nonfatal": true, "crashes-total": true},
    beforeRender: function() {
        this.selectedCrashes = {};
        this.selectedCrashesIds = [];
        countlySession.initialize();
        if (this.template) {
            return $.when(countlyCrashes.initialize()).then(function() {});
        }
        else {
            var self = this;
            return $.when($.get(countlyGlobal.path + '/crashes/templates/crashes.html', function(src) {
                self.template = Handlebars.compile(src);
            }), countlyCrashes.initialize()).then(function() {});
        }
    },
    getExportAPI: function(tableID) {
        if (tableID === 'd-table-crashes') {
            var userDetails = countlyUserdata.getUserdetails();
            var requestPath = '/o?method=user_crashes&api_key=' + countlyGlobal.member.api_key +
                    "&app_id=" + countlyCommon.ACTIVE_APP_ID + "&uid=" + userDetails.uid +
                    "&iDisplayStart=0&fromExportAPI=true";
            var apiQueryData = {
                api_key: countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID,
                path: requestPath,
                method: "GET",
                filename: "User_Crashes_on_" + moment().format("DD-MMM-YYYY"),
                prop: ['aaData']
            };
            return apiQueryData;
        }
        return null;
    },
    processData: function() {
        var self = this;
        var crashData = countlyCrashes.getData();
        this.dtable = $('#crash-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
            "aaSorting": [[ 5, "desc" ]],
            "bServerSide": true,
            "sAjaxSource": countlyCommon.API_PARTS.data.r + "?api_key=" + countlyGlobal.member.api_key + "&app_id=" + countlyCommon.ACTIVE_APP_ID + "&method=crashes",
            "fnServerData": function(sSource, aoData, fnCallback) {
                $.ajax({
                    "dataType": 'jsonp',
                    "type": "POST",
                    "url": sSource,
                    "data": aoData,
                    "success": function(data) {
                        fnCallback(data);
                        $("#view-filter .bar-values").text(jQuery.i18n.prop('crashes.of-users', data.iTotalDisplayRecords, data.iTotalRecords));
                        $("#view-filter .bar span").text(Math.floor((data.iTotalDisplayRecords / data.iTotalRecords) * 100) + "%");
                        $("#view-filter .bar .bar-inner").animate({width: Math.floor((data.iTotalDisplayRecords / data.iTotalRecords) * 100) + "%"}, 1000);
                    }
                });
            },
            "fnServerParams": function(aoData) {
                if (self.filter) {
                    aoData.push({ "name": "filter", "value": self.filter });
                }
                if (self._query) {
                    aoData.push({ "name": "query", "value": JSON.stringify(self._query) });
                }
            },
            "fnRowCallback": function(nRow, aData) {
                $(nRow).attr("id", aData._id);

                if (aData.is_resolved) {
                    $(nRow).addClass("resolvedcrash");
                }
                else if (aData.is_new) {
                    $(nRow).addClass("newcrash");
                }
                else if (aData.is_renewed) {
                    $(nRow).addClass("renewedcrash");
                }

                $(nRow).find(".tag").tipsy({gravity: 'w'});
            },
            "aoColumns": [
                {
                    "mData": function(row) {
                        if (self.selectedCrashes[row._id]) {
                            return "<a class='fa fa-check-square check-green' id=\"" + row._id + "\"></a>";
                        }
                        else {
                            return "<a class='fa fa-square-o check-green'  id=\"" + row._id + "\"></a>";
                        }
                    },
                    "sType": "numeric",
                    "sClass": "center",
                    "sWidth": "30px",
                    "bSortable": false,
                    "sTitle": "<a class='fa fa-square-o check-green check-header'></a>"
                },
                {
                    "mData": function(row, type) {
                        if (type !== "display") {
                            return row.name;
                        }
                        var tagDivs = "";

                        // This separator is not visible in the UI but | is visible in exported data
                        var separator = "<span class='separator'>|</span>";

                        if (row.is_resolving) {
                            tagDivs += separator + "<div class='tag'>" + "<span style='color:green;'>" + jQuery.i18n.map["crashes.resolving"] + "</span>" + "</div>";
                        }
                        else if (row.is_resolved) {
                            tagDivs += separator + "<div class='tag'>" + "<span style='color:green;'>" + jQuery.i18n.map["crashes.resolved"] + " (" + row.latest_version.replace(/:/g, '.') + ")</span>" + "</div>";
                        }
                        else {
                            tagDivs += separator + "<div class='tag'>" + "<span style='color:red;'>" + jQuery.i18n.map["crashes.unresolved"] + "</span>" + "</div>";
                        }

                        if (row.nonfatal) {
                            tagDivs += separator + "<div class='tag'>" + jQuery.i18n.map["crashes.nonfatal"] + "</div>";
                        }
                        else {
                            tagDivs += separator + "<div class='tag'>" + jQuery.i18n.map["crashes.fatal"] + "</div>";
                        }

                        if (row.session) {
                            tagDivs += separator + "<div class='tag'>" + ((Math.round(row.session.total / row.session.count) * 100) / 100) + " " + jQuery.i18n.map["crashes.sessions"] + "</div>";
                        }
                        else {
                            tagDivs += separator + "<div class='tag'>" + jQuery.i18n.map["crashes.first-crash"] + "</div>";
                        }

                        tagDivs += "<div class='tag not-viewed' title='" + jQuery.i18n.map["crashes.not-viewed"] + "'><i class='fa fa-eye-slash'></i></div>";
                        tagDivs += "<div class='tag re-occurred' title='" + jQuery.i18n.map["crashes.re-occurred"] + "'><i class='fa fa-refresh'></i></div>";

                        return "<div class='truncated'>" + row.name + "</div>" + tagDivs;
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map["crashes.error"]
                },
                {
                    "mData": function(row) {
                        return (row.not_os_specific) ? jQuery.i18n.map["crashes.varies"] : row.os;
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map["crashes.platform"],
                    "sWidth": "90px"
                },
                {
                    "mData": "reports",
                    "sType": "numeric",
                    "sTitle": jQuery.i18n.map["crashes.reports"],
                    "sWidth": "90px"
                },
                {
                    "mData": function(row, type) {
                        row.users = row.users || 1;
                        if (type === "display") {
                            return row.users + " (" + ((row.users / crashData.users.total) * 100).toFixed(2) + "%)";
                        }
                        else {
                            return row.users;
                        }
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map["crashes.users"],
                    "sWidth": "90px"
                },
                {
                    "mData": function(row, type) {
                        if (type === "display") {
                            return countlyCommon.formatTimeAgo(row.lastTs);
                        }
                        else {
                            return row.lastTs;
                        }
                    },
                    "sType": "format-ago",
                    "sTitle": jQuery.i18n.map["crashes.last_time"],
                    "sWidth": "150px"
                },
                {
                    "mData": function(row) {
                        return row.latest_version.replace(/:/g, '.');
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map["crashes.latest_app"],
                    "sWidth": "90px"
                },
                {
                    "mData": function(row) {
                        return "<a class='extable-link table-link green'  href='#/crashes/" + row._id + "'   target='_blank'>" +
                            "<i class='material-icons'>open_in_new</i></a>" +
                            "<a class='table-link green external'>" + jQuery.i18n.map["common.view"] + "</a>";
                    },
                    "sType": "numeric",
                    "sClass": "center",
                    "sWidth": "90px",
                    "bSortable": false
                }
            ],
            "fnInitComplete": function(oSettings, json) {
                $.fn.dataTable.defaults.fnInitComplete(oSettings, json);
                var tableWrapper = $("#" + oSettings.sTableId + "_wrapper");
                tableWrapper.find(".dataTables_filter input").attr("placeholder", jQuery.i18n.map["crashes.search"]);

                // init sticky headers here in order to wait for correct
                // table width (for multi select checkboxes to render)
                self.dtable.stickyTableHeaders();
                $(".extable-link").off('click').on('click', function(e) {
                    e.stopPropagation();
                });
            }
        }));
        //this.dtable.fnSort( [ [5,'desc'] ] );
        this.dtable.find("thead .check-green").click(function() {
            if ($(this).hasClass("fa-check-square")) {
                $(".sticky-header .check-green").removeClass("fa-check-square").addClass("fa-square-o");
                self.dtable.find(".check-green").removeClass("fa-check-square").addClass("fa-square-o");
                self.selectedCrashesIds = [];
                self.selectedCrashes = {};
                $(".action-segmentation").addClass("disabled");
            }
            else {
                $(".sticky-header .check-green").removeClass("fa-square-o").addClass("fa-check-square");
                self.dtable.find(".check-green").removeClass("fa-square-o").addClass("fa-check-square");
                self.dtable.find(".check-green").parents("tr").each(function() {
                    var id = $(this).attr("id");
                    if (id) {
                        if (!self.selectedCrashes[id]) {
                            self.selectedCrashesIds.push(id);
                        }
                        self.selectedCrashes[id] = true;
                        $(".action-segmentation").removeClass("disabled");
                    }
                });
            }
        });



        $('.crashes tbody ').on("click", "tr", function() {
            var id = $(this).attr("id");
            if (id) {
                var link = "#/crashes/" + id ;
                window.open(link, "_self");
            }
        });

        $('.crashes tbody ').on("click", "td:first-child", function(e) {
            e.cancelBubble = true; // IE Stop propagation
            if (e.stopPropagation) {
                e.stopPropagation();
            } // Other Broswers
            var id = $(this).parent().attr("id");
            if (id) {
                if (self.selectedCrashes[id]) {
                    $(this).find(".check-green").removeClass("fa-check-square").addClass("fa-square-o");
                    self.selectedCrashes[id] = null;
                    var index = self.selectedCrashesIds.indexOf(id);
                    if (index !== -1) {
                        self.selectedCrashesIds.splice(index, 1);
                    }
                }
                else {
                    self.selectedCrashes[id] = true;
                    self.selectedCrashesIds.push(id);
                    $(this).find(".check-green").removeClass("fa-square-o").addClass("fa-check-square");
                }

                if (self.selectedCrashesIds.length) {
                    $(".action-segmentation").removeClass("disabled");
                }
                else {
                    $(".action-segmentation").addClass("disabled");
                }
            }
        });

        $(".filter-segmentation").on("cly-select-change", function(e, val) {
            self.filterCrashes(val);
        });
        $(".action-segmentation").on("cly-select-change", function(e, val) {
            if (val !== "") {
                $(".action-segmentation").clySelectSetSelection("", jQuery.i18n.map["crashes.make-action"]);
                if (val === "crash-resolve") {
                    CountlyHelpers.confirm(jQuery.i18n.prop("crashes.confirm-action-resolved", self.selectedCrashesIds.length), "red", function(result) {
                        if (!result) {
                            return true;
                        }
                        countlyCrashes.markResolve(self.selectedCrashesIds, function(data) {
                            if (!data) {
                                CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                                self.resetSelection(true);
                            }
                        });
                    });
                }
                else if (val === "crash-unresolve") {
                    CountlyHelpers.confirm(jQuery.i18n.prop("crashes.confirm-action-unresolved", self.selectedCrashesIds.length), "red", function(result) {
                        if (!result) {
                            return true;
                        }
                        countlyCrashes.markUnresolve(self.selectedCrashesIds, function(data) {
                            if (!data) {
                                CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                            }
                            else {
                                self.resetSelection(true);
                            }
                        });
                    });
                }
                else if (val === "crash-hide") {
                    CountlyHelpers.confirm(jQuery.i18n.prop("crashes.confirm-action-hide", self.selectedCrashesIds.length), "red", function(result) {
                        if (!result) {
                            return true;
                        }
                        countlyCrashes.hide(self.selectedCrashesIds, function(data) {
                            if (!data) {
                                CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                            }
                            else {
                                self.resetSelection(true);
                            }
                        });
                    });
                }
                else if (val === "crash-resolving") {
                    CountlyHelpers.confirm(jQuery.i18n.prop("crashes.confirm-action-resolving", self.selectedCrashesIds.length), "red", function(result) {
                        if (!result) {
                            return true;
                        }
                        countlyCrashes.resolving(self.selectedCrashesIds, function(data) {
                            if (!data) {
                                CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                            }
                            else {
                                self.resetSelection(true);
                            }
                        });
                    });
                }
                else if (val === "crash-delete") {
                    CountlyHelpers.confirm(jQuery.i18n.prop("crashes.confirm-action-delete", self.selectedCrashesIds.length), "red", function(result) {
                        if (!result) {
                            return true;
                        }
                        countlyCrashes.del(self.selectedCrashesIds, function(data) {
                            if (!data) {
                                CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                            }
                            else {
                                self.resetSelection(true);
                            }
                        });
                    });
                }
            }
        });
    },
    resetSelection: function(flash) {
        if (flash) {
            this.dtable.find(".fa-check-square.check-green").parents("tr").addClass("flash");
        }
        this.selectedCrashesIds = [];
        this.selectedCrashes = {};
        this.dtable.find(".check-green").removeClass("fa-check-square").addClass("fa-square-o");
        $(".action-segmentation").addClass("disabled");
        this.refresh();
    },
    renderCommon: function(isRefresh) {
        var crashData = countlyCrashes.getData();
        var chartData = countlyCrashes.getChartData(this.curMetric, this.metrics[this.curMetric]);
        var dashboard = countlyCrashes.getDashboardData();
        this.templateData = {
            "page-title": jQuery.i18n.map["crashes.title"],
            "no-data": jQuery.i18n.map["common.bar.no-data"],
            "usage": [
                {
                    "title": jQuery.i18n.map["crashes.total"],
                    "data": dashboard.usage.cr,
                    "id": "crash-cr",
                    "help": "crashes.help-total"
                },
                {
                    "title": jQuery.i18n.map["crashes.unique"],
                    "data": dashboard.usage.cru,
                    "id": "crash-cru",
                    "help": "crashes.help-unique"
                },
                {
                    "title": jQuery.i18n.map["crashes.nonfatal"] + " " + jQuery.i18n.map["crashes.title"],
                    "data": dashboard.usage.crnf,
                    "id": "crash-crnf",
                    "help": "crashes.help-nonfatal"
                },
                {
                    "title": jQuery.i18n.map["crashes.fatal"] + " " + jQuery.i18n.map["crashes.title"],
                    "data": dashboard.usage.crf,
                    "id": "crash-crf",
                    "help": "crashes.help-fatal"
                },
                {//toal crashes pes session
                    "title": jQuery.i18n.map["crashes.total-per-session"],
                    "data": dashboard.usage.crt,
                    "id": "crash-cr-session",
                    "help": "crashes.help-session"
                }/*,
				{
					"title":jQuery.i18n.map["crashes.resolved-users"],
					"data":dashboard.usage['crru'],
					"id":"crash-crru",
                    "help":"crashes.help-resolved-users"
				}*/
            ],
            "chart-select": [
                {
                    title: jQuery.i18n.map["crashes.total_overall"],
                    trend: dashboard.usage.crt['trend-total'],
                    total: dashboard.usage.crt.total,
                    myclass: "crashes-total"
                },
                {
                    title: jQuery.i18n.map["crashes.fatal"],
                    trend: dashboard.usage.crt['trend-fatal'],
                    total: dashboard.usage.crt['total-fatal'],
                    myclass: "crashes-fatal"
                },
                {
                    title: jQuery.i18n.map["crashes.nonfatal"],
                    trend: dashboard.usage.crt['trend-nonfatal'],
                    total: dashboard.usage.crt['total-nonfatal'],
                    myclass: "crashes-nonfatal"
                },
            ],
            "big-numbers": {
                "items": [
                    {
                        "title": jQuery.i18n.map["crashes.unresolved-crashes"],
                        "total": crashData.crashes.unresolved,
                        "help": "crashes.help-unresolved"
                    },
                    {
                        "title": jQuery.i18n.map["crashes.highest-version"],
                        "total": crashData.crashes.highest_app,
                        "help": "crashes.help-latest-version"
                    },
                    {
                        "title": jQuery.i18n.map["crashes.new-crashes"],
                        "total": crashData.crashes.news,
                        "help": "crashes.help-new"
                    },
                    {
                        "title": jQuery.i18n.map["crashes.renew-crashes"],
                        "total": crashData.crashes.renewed,
                        "help": "crashes.help-reoccurred"
                    }
                ]
            },
            "bars": [
                {
                    "title": jQuery.i18n.map["crashes.resolution-status"],
                    "data": countlyCrashes.getResolvedBars(),
                    "help": "crashes.help-resolved"
                },
                {
                    "title": jQuery.i18n.map["crashes.affected-users"],
                    "data": countlyCrashes.getAffectedUsers(),
                    "help": "crashes.help-affected-levels"
                },
                {
                    "title": jQuery.i18n.map["crashes.platform"],
                    "data": countlyCrashes.getPlatformBars(),
                    "help": "crashes.help-platforms"
                },
                {
                    "title": jQuery.i18n.map["crashes.fatality"],
                    "data": countlyCrashes.getFatalBars(),
                    "help": "crashes.help-fatals"
                }
            ],
            hasDrill: typeof this.initDrill !== "undefined",
            "active-filter": jQuery.i18n.map["crashes.all"],
            "active-action": jQuery.i18n.map["crashes.make-action"]
        };
        if (crashData.loss) {
            this.templateData.loss = true;
            this.templateData["big-numbers"].items.push({
                "title": jQuery.i18n.map["crashes.loss"],
                "total": crashData.loss.toFixed(2),
                "help": "crashes.help-loss"
            });
        }
        var self = this;
        if (!isRefresh) {
            countlyCommon.drawTimeGraph(chartData.chartDP, "#dashboard-graph");
            chartData = countlyCrashes.getChartData(self.curMetric, self.metrics[self.curMetric], self.showOnGraph);
            $(this.el).html(this.template(this.templateData));
            self.switchMetric();
            $("#total-user-estimate-ind").on("click", function() {
                CountlyHelpers.alert(jQuery.i18n.map["common.estimation"], "black");
            });

            $(".filter-segmentation").clySelectSetSelection(this.filter, jQuery.i18n.map["crashes." + this.filter.split("-").pop()]);

            $("#crash-" + this.curMetric).parents(".big-numbers").addClass("active");

            $(".widget-content .inner").click(function() {
                $(".big-numbers").removeClass("active");
                $(".big-numbers .select").removeClass("selected");
                $(this).parent(".big-numbers").addClass("active");
                $(this).find('.select').addClass("selected");
            });

            $(".big-numbers .inner").click(function() {
                var elID = $(this).find('.select').attr("id");
                if (elID) {
                    if (self.curMetric === elID.replace("crash-", "")) {
                        return true;
                    }
                    self.curMetric = elID.replace("crash-", "");
                    self.switchMetric();
                }
            });
            if (typeof self.initDrill !== "undefined") {
                self.byDisabled = true;
                $.when(countlySegmentation.initialize("[CLY]_crash")).then(function() {
                    self.initDrill();
                    setTimeout(function() {
                        self.filterBlockClone = $("#filter-view").clone(true);
                        if (self._filter) {
                            $("#filter-view").show();
                            $(".filter-view-container").show();
                            self.adjustFilters();
                            var lookup = {};
                            for (var i in self.convertFilter) {
                                lookup[self.convertFilter[i].prop] = i;
                            }
                            var filter = self._query;
                            var inputs = [];
                            var subs = {};
                            for (var n in filter) {
                                inputs.push(n);
                                subs[n] = [];
                                for (var j in filter[n]) {
                                    if (filter[n][j].length) {
                                        for (var k = 0; k < filter[n][j].length; k++) {
                                            subs[n].push([j, filter[n][j][k]]);
                                        }
                                    }
                                    else {
                                        subs[n].push([j, filter[n][j]]);
                                    }
                                }
                            }
                            var setInput = function(cur, sub, total) {
                                sub = sub || 0;
                                if (inputs[cur]) {
                                    var filterType = subs[inputs[cur]][sub][0];
                                    if (filterType === "$in" || filterType === "$eq") {
                                        filterType = "=";
                                    }
                                    else if (filterType === "$nin" || filterType === "$ne") {
                                        filterType = "!=";
                                    }
                                    else if (filterType === "$exists") {
                                        if (subs[inputs[cur]][sub][0]) {
                                            filterType = "=";
                                        }
                                        else {
                                            filterType = "!=";
                                        }
                                    }

                                    var val = subs[inputs[cur]][sub][1];
                                    var el = $(".query:nth-child(" + (total) + ")");
                                    el.find(".filter-name").trigger("click");
                                    el.find(".filter-type").trigger("click");
                                    var name = inputs[cur];
                                    if (lookup[name]) {
                                        name = lookup[name];
                                    }
                                    else if (name.indexOf(".") !== -1) {
                                        var parts = name.split(".");
                                        if (lookup[parts[0]]) {
                                            name = lookup[parts[0]];
                                            val = parts[1];
                                        }
                                    }
                                    $(el).data("query_value", val + ""); //saves value as attribute for selected query
                                    el.find(".filter-name").find(".select-items .item[data-value='" + name + "']").trigger("click");
                                    el.find(".filter-type").find(".select-items .item[data-value='" + filterType + "']").trigger("click");
                                    setTimeout(function() {
                                        el.find(".filter-value").not(".hidden").trigger("click");
                                        if (el.find(".filter-value").not(".hidden").find(".select-items .item[data-value='" + val + "']").length) {
                                            el.find(".filter-value").not(".hidden").find(".select-items .item[data-value='" + val + "']").trigger("click");
                                        }
                                        else if (_.isNumber(val) && (val + "").length === 10) {
                                            el.find(".filter-value.date").find("input").val(countlyCommon.formatDate(moment(val * 1000), "DD MMMM, YYYY"));
                                            el.find(".filter-value.date").find("input").data("timestamp", val);
                                        }
                                        else {
                                            el.find(".filter-value").not(".hidden").find("input").val(val);
                                        }

                                        if (subs[inputs[cur]].length === sub + 1) {
                                            cur++;
                                            sub = 0;
                                        }
                                        else {
                                            sub++;
                                        }
                                        total++;
                                        if (inputs[cur]) {
                                            $("#filter-add-container").trigger("click");
                                            if (sub > 0) {
                                                setTimeout(function() {
                                                    el = $(".query:nth-child(" + (total) + ")");
                                                    el.find(".and-or").find(".select-items .item[data-value='OR']").trigger("click");
                                                    setInput(cur, sub, total);
                                                }, 500);
                                            }
                                            else {
                                                setInput(cur, sub, total);
                                            }
                                        }
                                        else {
                                            setTimeout(function() {
                                                $("#apply-filter").removeClass("disabled");
                                                $("#no-filter").hide();
                                                var filterData = self.getFilterObjAndByVal();
                                                $("#current-filter").show().find(".text").text(filterData.bookmarkText);
                                                $("#connector-container").show();
                                            }, 500);
                                        }
                                    }, 500);
                                }
                            };
                            setInput(0, 0, 1);
                        }
                    }, 0);

                    self.processData();
                });
            }
            else {
                $("#view-filter").hide();
                self.processData();
            }

            self.pageScripts();

            $('.action-segmentation').attr('data-tooltip-content', "#action-segmentation-tooltip");

            $('.action-segmentation').tooltipster({
                theme: ['tooltipster-borderless'],
                contentCloning: false,
                interactive: false,
                trigger: 'hover',
                side: 'left',
                zIndex: 2,
                functionBefore: function() {
                    if (!$('.action-segmentation').hasClass("disabled")) {
                        return false;
                    }
                }
            });
        }

    },
    refresh: function() {
        var self = this;
        if (this.loaded) {
            this.loaded = false;
            $.when(countlyCrashes.refresh()).then(function() {
                self.loaded = true;
                if (app.activeView !== self) {
                    return false;
                }
                self.renderCommon(true);
                var chartData = countlyCrashes.getChartData(self.curMetric, self.metrics[self.curMetric], self.showOnGraph);
                var newPage = $("<div>" + self.template(self.templateData) + "</div>");
                $(".crashoveral .dashboard").replaceWith(newPage.find(".dashboard"));
                $(".crash-big-numbers").replaceWith(newPage.find(".crash-big-numbers"));
                $(".dashboard-summary").replaceWith(newPage.find(".dashboard-summary"));
                $("#data-selector").replaceWith(newPage.find("#data-selector"));

                $("#crash-" + self.curMetric).parents(".big-numbers").addClass("active");
                $(".widget-content .inner").click(function() {
                    $(".big-numbers").removeClass("active");
                    $(".big-numbers .select").removeClass("selected");
                    $(this).parent(".big-numbers").addClass("active");
                    $(this).find('.select').addClass("selected");
                });
                $(".big-numbers .inner").click(function() {
                    var elID = $(this).find('.select').attr("id");

                    if (elID) {
                        if (self.curMetric === elID.replace("crash-", "")) {
                            return true;
                        }

                        self.curMetric = elID.replace("crash-", "");
                        self.switchMetric();
                    }
                });

                self.dtable.fnDraw(false);

                self.pageScripts();
                countlyCommon.drawTimeGraph(chartData.chartDP, "#dashboard-graph");

                //app.localize();
            });
        }
    },
    getExportQuery: function() {
        var replacer = function(key, value) {
            if (value instanceof RegExp) {
                return ("__REGEXP " + value.toString());
            }
            else {
                return value;
            }
        };
        var qstring = {
            api_key: countlyGlobal.member.api_key,
            db: "countly",
            collection: "app_crashgroups" + countlyCommon.ACTIVE_APP_ID,
            query: this._query || {}
        };
        if ($('.dataTables_filter input').val().length) {
            qstring.query.name = {"$regex": new RegExp(".*" + $('.dataTables_filter input').val() + ".*", 'i')};
        }
        if (this.filter && this.filter !== "") {
            switch (this.filter) {
            case "crash-resolved":
                qstring.query.is_resolved = true;
                break;
            case "crash-hidden":
                qstring.query.is_hidden = true;
                break;
            case "crash-unresolved":
                qstring.query.is_resolved = false;
                break;
            case "crash-nonfatal":
                qstring.query.nonfatal = true;
                break;
            case "crash-fatal":
                qstring.query.nonfatal = false;
                break;
            case "crash-new":
                qstring.query.is_new = true;
                break;
            case "crash-viewed":
                qstring.query.is_new = false;
                break;
            case "crash-reoccurred":
                qstring.query.is_renewed = true;
                break;
            case "crash-resolving":
                qstring.query.is_resolving = true;
                break;
            }
        }
        if (this.filter !== "crash-hidden") {
            qstring.query.is_hidden = {$ne: true};
        }
        qstring.query._id = {$ne: "meta"};
        qstring.query = JSON.stringify(qstring.query, replacer);
        return qstring;
    },
    filterCrashes: function(filter) {
        this.filter = filter;
        store.set("countly_crashfilter", filter);
        $("#" + this.filter).addClass("selected").addClass("active");
        this.dtable.fnDraw();
    },
    pageScripts: function() {
        var self = this;
        $(".crashes-show-switch").unbind("click");
        $(".crashes-show-switch").removeClass("selected");
        for (var i in this.showOnGraph) {
            if (this.showOnGraph[i]) {
                $(".crashes-show-switch." + i).addClass("selected");
            }
        }

        $(".crashes-show-switch").on("click", function() {
            if ($(this).hasClass("selected")) {
                self.showOnGraph[$(this).data("type")] = false;
            }
            else {
                self.showOnGraph[$(this).data("type")] = true;
            }
            $(this).toggleClass("selected");
            self.refresh();
        });
        if (this.curMetric === "cr-session") {
            $("#data-selector").css("display", "block");
        }
        else {
            $("#data-selector").css("display", "none");
        }
    },
    switchMetric: function() {
        var chartData = countlyCrashes.getChartData(this.curMetric, this.metrics[this.curMetric], this.showOnGraph);
        countlyCommon.drawTimeGraph(chartData.chartDP, "#dashboard-graph");
        this.pageScripts();
    },
    getFilters: function(currEvent) {
        var self = this;
        var usedFilters = {};

        $(".query:visible").each(function() {
            var filterType = $(this).find(".filter-name .text").data("type");
            // number and date types can be used multiple times for range queries
            if (filterType !== "n" && filterType !== "d") {
                usedFilters[$(this).find(".filter-name .text").data("value")] = true;
            }
        });

        var defaultFilters = countlySegmentation.getFilters(currEvent),
            allFilters = "";
        var filters = [];
        for (var i = 0; i < defaultFilters.length; i++) {
            if (defaultFilters[i].id) {
                if (self.convertFilter[defaultFilters[i].id]) {
                    filters.push(defaultFilters[i]);
                }
            }
        }
        var add = {
            "is_new": jQuery.i18n.map["crashes.new-crashes"],
            "is_resolved": jQuery.i18n.map["crashes.resolved"],
            "is_hidden": jQuery.i18n.map["crashes.hidden"],
            "is_renewed": jQuery.i18n.map["crashes.renew-crashes"],
            "reports": jQuery.i18n.map["crashes.reports"],
            "users": jQuery.i18n.map["crashes.affected-users"],
            "ram_min": jQuery.i18n.map["crashes.ram"] + " " + jQuery.i18n.map["crashes.min"].toLowerCase(),
            "ram_max": jQuery.i18n.map["crashes.ram"] + " " + jQuery.i18n.map["crashes.max"].toLowerCase(),
            "bat_min": jQuery.i18n.map["crashes.battery"] + " " + jQuery.i18n.map["crashes.min"].toLowerCase(),
            "bat_max": jQuery.i18n.map["crashes.battery"] + " " + jQuery.i18n.map["crashes.max"].toLowerCase(),
            "disk_min": jQuery.i18n.map["crashes.disk"] + " " + jQuery.i18n.map["crashes.min"].toLowerCase(),
            "disk_max": jQuery.i18n.map["crashes.disk"] + " " + jQuery.i18n.map["crashes.max"].toLowerCase(),
            "run_min": jQuery.i18n.map["crashes.run"] + " " + jQuery.i18n.map["crashes.min"].toLowerCase(),
            "run_max": jQuery.i18n.map["crashes.run"] + " " + jQuery.i18n.map["crashes.max"].toLowerCase()
        };

        for (var addKey in add) {
            filters.push({id: addKey, name: add[addKey], type: (addKey.indexOf("is_") === 0) ? "l" : "n"});
        }

        if (filters.length === 0) {
            CountlyHelpers.alert(jQuery.i18n.map["drill.no-filters"], "black");
        }

        for (i = 0; i < filters.length; i++) {
            if (typeof filters[i].id !== "undefined") {
                if (usedFilters[filters[i].id] === true) {
                    continue;
                }

                var tmpItem = $("<div>");

                tmpItem.addClass("item");
                tmpItem.attr("data-type", filters[i].type);
                tmpItem.attr("data-value", filters[i].id);
                tmpItem.text(filters[i].name);

                allFilters += tmpItem.prop('outerHTML');
            }
            else {
                var tmpItemWithFilterName = $("<div>");

                tmpItemWithFilterName.addClass("group");
                tmpItemWithFilterName.text(filters[i].name);

                allFilters += tmpItemWithFilterName.prop('outerHTML');
            }
        }

        return allFilters;
    },
    setUpFilters: function(elem) {
        var rootHTML = $(elem).parents(".query").find(".filter-value .select-items>div");
        if (this.convertFilter[$(elem).data("value")] && this.convertFilter[$(elem).data("value")].type === "boolsegment") {
            this.setUpFilterValues(rootHTML, ["yes", "no"], ["yes", "no"]);
        }
        else if (this.convertFilter[$(elem).data("value")] && this.convertFilter[$(elem).data("value")].type === "booltype") {
            this.setUpFilterValues(rootHTML, [true, false], ["yes", "no"]);
        }
        else {
            this.setUpFilterValues(rootHTML, countlySegmentation.getFilterValues($(elem).data("value")), countlySegmentation.getFilterNames($(elem).data("value")));
        }
    },
    generateFilter: function(filterObj, filterObjTypes) {
        var self = this;
        var dbFilter = {};
        for (var prop in filterObj) {
            var filter = (self.convertFilter[prop]) ? self.convertFilter[prop].prop : prop.replace("sg.", "");
            for (var i = 0; i < filterObj[prop].length; i++) {
                if (_.isObject(filterObj[prop][i])) {
                    dbFilter[filter] = {};
                    for (var tmpFilter in filterObj[prop][i]) {
                        dbFilter[filter][tmpFilter] = filterObj[prop][i][tmpFilter];
                    }
                }
                else if (filterObjTypes[prop][i] === "!=") {
                    if (!self.convertFilter[prop] || self.convertFilter[prop].type === "segment" || self.convertFilter[prop].type === "boolsegment") {
                        if (filter === "os_version") {
                            filterObj[prop][i] = countlyDeviceDetails.getCleanVersion(filterObj[prop][i]);
                        }
                        dbFilter[filter + "." + filterObj[prop][i]] = {$exists: false};
                    }
                    else if (self.convertFilter[prop].type === "booltype") {
                        if (filterObj[prop][i] === "true") {
                            dbFilter[filter] = {$ne: true};
                        }
                        else {
                            dbFilter[filter] = {$eq: true};
                        }
                    }
                    else {
                        dbFilter[filter] = {};
                        if (!dbFilter[filter].$nin) {
                            dbFilter[filter].$nin = [];
                        }
                        dbFilter[filter].$nin.push(filterObj[prop][i]);
                    }
                }
                else {
                    if (!self.convertFilter[prop] || self.convertFilter[prop].type === "segment" || self.convertFilter[prop].type === "boolsegment") {
                        if (filter === "os_version") {
                            filterObj[prop][i] = countlyDeviceDetails.getCleanVersion(filterObj[prop][i]);
                        }
                        dbFilter[filter + "." + filterObj[prop][i]] = {$exists: true};
                    }
                    else if (self.convertFilter[prop].type === "booltype") {
                        if (filterObj[prop][i] === "true") {
                            dbFilter[filter] = {$eq: true};
                        }
                        else {
                            dbFilter[filter] = {$ne: true};
                        }
                    }
                    else {
                        dbFilter[filter] = {};
                        if (!dbFilter[filter].$in) {
                            dbFilter[filter].$in = [];
                        }
                        dbFilter[filter].$in.push(filterObj[prop][i]);
                    }
                }
            }
        }
        return dbFilter;
    },
    loadAndRefresh: function() {
        var filter = {};
        for (var i in this.filterObj) {
            filter[i.replace("up.", "")] = this.filterObj[i];
        }
        this._query = filter;
        app.navigate("/crashes/filter/" + JSON.stringify(filter), false);
        this.dtable.fnPageChange(0);
        this.refresh(true);
    }
});

window.CrashgroupView = countlyView.extend({
    initialize: function() {
        this.loaded = true;
    },
    beforeRender: function() {
        countlyCrashes.reset();
        if (this.template) {
            return $.when(countlyCrashes.initialize(this.id)).then(function() {});
        }
        else {
            var self = this;
            return $.when($.get(countlyGlobal.path + '/crashes/templates/crashgroup.html', function(src) {
                self.template = Handlebars.compile(src);
            }), countlyCrashes.initialize(this.id)).then(function() {});
        }
    },
    renderCommon: function(isRefresh) {
        var url = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + countlyGlobal.path + "/crash/";
        var crashData = countlyCrashes.getGroupData();
        if (crashData.url) {
            url += crashData.url;
        }
        crashData.latest_version = crashData.latest_version.replace(/:/g, '.');

        this.comments = {};

        if (typeof marked !== "undefined") {
            marked.setOptions({
                breaks: true
            });
        }

        if (crashData.comments) {
            for (var i = 0; i < crashData.comments.length; i++) {
                this.comments[crashData.comments[i]._id] = crashData.comments[i].text;
                if (typeof marked !== "undefined") {
                    crashData.comments[i].html = marked(crashData.comments[i].text);
                }
                else {
                    crashData.comments[i].html = crashData.comments[i].text;
                }
            }
        }

        if (!isRefresh) {
            this.metrics = countlyCrashes.getMetrics();
            for (var k in this.metrics) {
                for (var j in this.metrics[k]) {
                    this.curMetric = j;
                    this.curTitle = this.metrics[k][j];
                    break;
                }
                break;
            }
        }
        var ranges = ["ram", "disk", "bat", "run"];
        for (var r = 0; r < ranges.length; r++) {
            if (!crashData[ranges[r]]) {
                crashData[ranges[r]] = {min: 0, max: 0, total: 0, count: 1};
            }
        }
        this.templateData = {
            "page-title": jQuery.i18n.map["crashes.crashes-by"],
            "note-placeholder": jQuery.i18n.map["crashes.editnote"],
            "hasPermission": (countlyGlobal.member.global_admin || countlyGlobal.admin_apps[countlyCommon.ACTIVE_APP_ID]) ? true : false,
            "url": url,
            "data": crashData,
            "error": crashData.name.substr(0, 80),
            "fatal": (crashData.nonfatal) ? jQuery.i18n.map["crashes.nonfatal"] : jQuery.i18n.map["crashes.fatal"],
            "active-segmentation": this.curTitle,
            "segmentations": this.metrics,
            "big-numbers": {
                "class": "four-column",
                "items": [
                    {
                        "title": jQuery.i18n.map["crashes.platform"],
                        "total": (crashData.not_os_specific) ? jQuery.i18n.map["crashes.varies"] : crashData.os,
                        "help": "crashes.help-platform"
                    },
                    {
                        "title": jQuery.i18n.map["crashes.reports"],
                        "total": crashData.reports,
                        "help": "crashes.help-reports"
                    },
                    {
                        "title": jQuery.i18n.map["crashes.affected-users"],
                        "total": crashData.users + " (" + ((crashData.users / crashData.total) * 100).toFixed(2) + "%)",
                        "help": "crashes.help-affected"
                    },
                    {
                        "title": jQuery.i18n.map["crashes.highest-version"],
                        "total": crashData.latest_version.replace(/:/g, '.'),
                        "help": "crashes.help-app-version"
                    }
                ]
            }
        };
        if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type !== "web") {
            this.templateData.ranges = [
                {
                    "title": jQuery.i18n.map["crashes.ram"],
                    "icon": "memory",
                    "help": "crashes.help-ram",
                    "min": crashData.ram.min + " %",
                    "max": crashData.ram.max + " %",
                    "avg": (crashData.ram.total / crashData.ram.count).toFixed(2) + " %"
                },
                {
                    "title": jQuery.i18n.map["crashes.disk"],
                    "icon": "sd_storage",
                    "help": "crashes.help-disk",
                    "min": crashData.disk.min + " %",
                    "max": crashData.disk.max + " %",
                    "avg": (crashData.disk.total / crashData.disk.count).toFixed(2) + " %"
                },
                {
                    "title": jQuery.i18n.map["crashes.battery"],
                    "icon": "battery_full",
                    "help": "crashes.help-battery",
                    "min": crashData.bat.min + " %",
                    "max": crashData.bat.max + " %",
                    "avg": (crashData.bat.total / crashData.bat.count).toFixed(2) + " %"
                },
                {
                    "title": jQuery.i18n.map["crashes.run"],
                    "icon": "play_arrow",
                    "help": "crashes.help-run",
                    "min": countlyCommon.timeString(crashData.run.min / 60),
                    "max": countlyCommon.timeString(crashData.run.max / 60),
                    "avg": countlyCommon.timeString((crashData.run.total / crashData.run.count) / 60)
                }
            ];

            this.templateData.bars = [
                {
                    "title": jQuery.i18n.map["crashes.root"],
                    "data": countlyCrashes.getBoolBars("root"),
                    "help": "crashes.help-root"
                },
                {
                    "title": jQuery.i18n.map["crashes.online"],
                    "data": countlyCrashes.getBoolBars("online"),
                    "help": "crashes.help-online"
                },
                {
                    "title": jQuery.i18n.map["crashes.muted"],
                    "data": countlyCrashes.getBoolBars("muted"),
                    "help": "crashes.help-muted"
                },
                {
                    "title": jQuery.i18n.map["crashes.background"],
                    "data": countlyCrashes.getBoolBars("background"),
                    "help": "crashes.help-background"
                }
            ];
        }
        if (crashData.loss) {
            this.templateData.loss = true;
            this.templateData["big-numbers"].items.push({
                "title": jQuery.i18n.map["crashes.loss"],
                "total": parseFloat(crashData.loss).toFixed(2),
                "help": "crashes.help-loss"
            });
        }

        if (this.templateData["big-numbers"].items.length === 3) {
            this.templateData["big-numbers"].class = "three-column";
        }
        else if (this.templateData["big-numbers"].items.length === 5) {
            this.templateData["big-numbers"].class = "five-column";
        }

        if (crashData.session && this.templateData.ranges) {
            this.templateData.frequency = true;
            this.templateData.ranges.push({
                "title": jQuery.i18n.map["crashes.sessions"],
                "icon": "repeat",
                "help": "crashes.help-frequency",
                "min": crashData.session.min,
                "max": crashData.session.max,
                "avg": ((Math.round(crashData.session.total / crashData.session.count) * 100) / 100)
            });
        }

        var changeResolveStateText = function() {
            var selectOptions = "";

            if (crashData.is_resolving) {
                $("#resolve-state").text(jQuery.i18n.map["crashes.resolving"]);
                $("#resolve-state").attr('class', 'resolving-text');

                selectOptions += '<div class="item" data-value="crash-resolve" data-localize="crashes.action-resolved"></div>'
                    + '<div class="item" data-value="crash-unresolve" data-localize="crashes.action-unresolved"></div>';

            }
            else if (crashData.is_resolved) {
                $("#resolve-state").text(jQuery.i18n.map["crashes.resolved"] + "(" + crashData.resolved_version + ")");
                $("#resolve-state").attr('class', 'resolved-text');

                selectOptions += '<div class="item" data-value="crash-unresolve" data-localize="crashes.action-unresolved"></div>'
                + '<div class="item" data-value="crash-resolving" data-localize="crashes.action-resolving"></div>';

            }
            else {
                $("#resolve-state").text(jQuery.i18n.map["crashes.unresolved"]);
                $("#resolve-state").attr('class', 'unresolved-text');

                selectOptions += '<div class="item" data-value="crash-resolve" data-localize="crashes.action-resolved"></div>'
                + '<div class="item" data-value="crash-resolving" data-localize="crashes.action-resolving"></div>';
            }

            if (crashData.is_hidden) {
                selectOptions += '<div class="item" data-value="crash-show" data-localize="crashes.action-show"></div>';
            }
            else {
                selectOptions += '<div class="item" data-value="crash-hide" data-localize="crashes.action-hide"></div>';
            }
            selectOptions += '<div class="item" data-value="crash-delete" data-localize="crashes.action-delete"></div>';
            $(".performan-action-slection").html(selectOptions);
            app.localize();
        };


        var self = this;
        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            changeResolveStateText(crashData);
            if (typeof addDrill !== "undefined") {
                $("#content .widget:first-child .widget-header>.right").append(addDrill("sg.crash", this.id, "[CLY]_crash"));
            }
            $(".back-link").click(function(e) {
                e.preventDefault();
                app.back("/crashes");
                return false;
            });
            if (crashData.comments) {
                var count = 0;
                for (var n = 0; n < crashData.comments.length; n++) {
                    if (!crashData.comments[n].is_owner && typeof store.get("countly_" + this.id + "_" + crashData.comments[n]._id) === "undefined") {
                        count++;
                    }
                }
                if (count > 0) {
                    $(".crash-comment-count span").text(count + "");
                    $(".crash-comment-count").show();
                }
            }
            $(".segmentation-option").on("click", function() {
                self.switchMetric($(this).data("value"));
            });
            this.dtable = $('.d-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaSorting": [[1, 'desc']],
                "aaData": crashData.data || [],
                "fnRowCallback": function(nRow, aData) {
                    $(nRow).attr("id", aData._id);
                },
                "aoColumns": [
                    CountlyHelpers.expandRowIconColumn(),
                    {
                        "mData": function(row, type) {
                            if (type === "display") {
                                return countlyCommon.formatTimeAgo(row.ts);
                            }
                            else {
                                return row.ts;
                            }
                        },
                        "sType": "format-ago",
                        "sTitle": jQuery.i18n.map["crashes.crashed"]
                    },
                    {
                        "mData": function(row) {
                            var str = row.os; if (row.os_version) {
                                str += " " + row.os_version.replace(/:/g, '.');
                            } return str;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["crashes.os_version"]
                    },
                    {
                        "mData": function(row) {
                            var str = ""; if (row.manufacture) {
                                str += row.manufacture + " ";
                            } if (row.device) {
                                str += countlyDeviceList[row.device] || row.device;
                            } return str;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["crashes.device"]
                    },
                    {
                        "mData": function(row) {
                            return row.app_version.replace(/:/g, '.');
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["crashes.app_version"]
                    }
                ]
            }));
            this.dtable.stickyTableHeaders();

            /*$('.crash-reports tbody').on("click", "tr", function (){
				var id = $(this).attr("id");
				if(id)
					window.location.hash = window.location.hash.toString()+"/"+id;
			});*/
            CountlyHelpers.expandRows(this.dtable, this.formatData);
            countlyCommon.drawGraph(crashData.dp[this.curMetric], "#dashboard-graph", "bar");


            $(".btn-share-crash").click(function() {
                if ($(this).hasClass("active")) {
                    $(this).removeClass("active");
                    $("#crash-share-list").hide();
                }
                else {
                    $(this).addClass("active");
                    $("#crash-share-list").show();
                }
            });

            $("#share-crash-done").click(function() {
                $(".btn-share-crash").removeClass("active");
                $("#crash-share-list").hide();
            });

            if (crashData.is_public) {
                $('#crash-share-public').attr('checked', true);
                $(".crash-share").show();
            }
            else {
                $('#crash-share-public').attr('checked', false);
                $(".crash-share").hide();
            }

            if (crashData.share) {
                for (var c in crashData.share) {
                    if (crashData.share[c]) {
                        $('#crash-share-' + c).attr('checked', true);
                    }
                }
            }

            $('.crash-share input[type=checkbox]').change(function() {
                var opts = {};
                $('.crash-share input[type=checkbox]').each(function() {
                    opts[this.id.replace("crash-share-", "")] = ($(this).is(":checked")) ? 1 : 0;
                });
                countlyCrashes.modifyShare(crashData._id, opts);
            });

            $('#crash-share-public').change(function() {
                if ($(this).is(":checked")) {
                    countlyCrashes.share(crashData._id, function(data) {
                        if (data) {
                            $(".crash-share").show();
                        }
                        else {
                            CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                        }
                    });
                }
                else {
                    countlyCrashes.unshare(crashData._id, function(data) {
                        if (data) {
                            $(".crash-share").hide();
                        }
                        else {
                            CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                        }
                    });
                }
            });

            $("#tabs").tabs({
                select: function() {
                    $(".flot-text").hide().show(0);
                }
            });
            $("#crash-notes").click(function() {
                var crashNoteData = countlyCrashes.getGroupData();
                if (crashNoteData.comments) {
                    for (var a = 0; a < crashNoteData.comments.length; a++) {
                        store.set("countly_" + self.id + "_" + crashNoteData.comments[a]._id, true);
                    }
                    $(".crash-comment-count").hide();
                }
            });
            $("#add_comment").click(function() {
                var comment = {};
                comment.time = new Date().getTime();
                comment.text = $("#comment").val();
                countlyCrashes.addComment(crashData._id, comment, function(data) {
                    if (data) {
                        self.refresh();
                        $("#comment").val("");
                    }
                    else {
                        CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                    }
                });
            });
            $("#notes").on("click", ".crash-comment-edit", function() {
                var container = $(this).parents(".comment");
                if (!container.find("#comment_edit").length) {
                    var comment_id = $(this).data("id");
                    container.find(".text").hide();
                    container.append($("#comment_edit").clone());
                    container.find("textarea").val(self.comments[comment_id]);
                    container.find(".cancel_comment").click(function() {
                        container.find("#comment_edit").remove();
                        container.find(".text").show();
                    });
                    container.find(".edit_comment").click(function() {
                        var comment = {};
                        comment.time = new Date().getTime();
                        comment.text = container.find("#edited_comment").val();
                        comment.comment_id = comment_id;
                        countlyCrashes.editComment(crashData._id, comment, function(data) {
                            if (data) {
                                self.refresh();
                                container.find("#comment_edit").remove();
                                container.find(".text").show();
                            }
                            else {
                                CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                            }
                        });
                    });
                }
            });
            $("#notes").on("click", ".crash-comment-delete", function() {
                var ob = {};
                ob.comment_id = $(this).data("id");
                CountlyHelpers.confirm(jQuery.i18n.map["crashes.confirm-comment-delete"], "red", function(result) {
                    if (!result) {
                        return true;
                    }
                    countlyCrashes.deleteComment(crashData._id, ob, function(data) {
                        if (data) {
                            $("#comment_" + ob.comment_id).remove();
                            self.refresh();
                        }
                        else {
                            CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                        }
                    });
                });
            });

            $("#expand-crash").on("click", function() {
                $(this).toggleClass("active");
                $("#expandable").toggleClass("collapsed");
            });

            var errorHeight = $("#expandable").find("code").outerHeight();

            if (errorHeight < 200) {
                $("#expandable").removeClass("collapsed");
                $("#expand-crash").hide();
            }
            else {
                $("#expandable").addClass("collapsed");
                $("#expand-crash").show();
            }
        }

        $("document").ready(function() {
            self.redecorateStacktrace();
        });

        $(".crash-manipulate-options").on("cly-select-change", function(e, val) {
            if (val !== "") {
                $(".crash-manipulate-options").clySelectSetSelection("", jQuery.i18n.map["crashes.make-action"]);
                if (val === "crash-resolve") {
                    countlyCrashes.markResolve(crashData._id, function(version) {
                        if (version) {
                            crashData.is_resolved = true;
                            crashData.is_resolving = false;
                            crashData.resolved_version = version;
                            changeResolveStateText(crashData);
                        }
                        else {
                            CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                        }
                    });
                }
                else if (val === "crash-resolving") {
                    countlyCrashes.resolving([crashData._id], function(data) {
                        if (!data) {
                            CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                        }
                        else {
                            crashData.is_resolving = true;
                            changeResolveStateText(crashData);
                        }
                    });
                }
                else if (val === "crash-unresolve") {
                    countlyCrashes.markUnresolve(crashData._id, function(data) {
                        if (data) {
                            crashData.is_resolved = false;
                            crashData.is_resolving = false;
                            changeResolveStateText(crashData);
                        }
                        else {
                            CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                        }
                    });
                }
                else if (val === "crash-hide") {
                    countlyCrashes.hide(crashData._id, function(data) {
                        if (data) {
                            crashData.is_hidden = true;
                            changeResolveStateText(crashData);
                        }
                        else {
                            CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                        }
                    });
                }
                else if (val === "crash-show") {
                    countlyCrashes.show(crashData._id, function(data) {
                        if (data) {
                            crashData.is_hidden = false;
                            changeResolveStateText(crashData);
                        }
                        else {
                            CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                        }
                    });
                }
                else if (val === "crash-delete") {
                    CountlyHelpers.confirm(jQuery.i18n.map["crashes.confirm-delete"], "red", function(result) {
                        if (!result) {
                            return true;
                        }
                        countlyCrashes.del(crashData._id, function(data) {
                            if (data) {
                                if (data.result === "Success") {
                                    window.location.hash = "/crashes";
                                }
                                else {
                                    CountlyHelpers.alert(data.result, "red");
                                }
                            }
                            else {
                                CountlyHelpers.alert(jQuery.i18n.map["crashes.try-later"], "red");
                            }
                        });
                    });
                }
            }
        });
    },
    redecorateStacktrace: function() {
        $(".crash-stack .line-number").remove();
        $(".crash-stack .cl").remove();
        var pre = $(".crash-stack pre")[0];
        pre.innerHTML = '<span class="line-number"></span>' + pre.innerHTML + '<span class="cl"></span>';
        var num = pre.innerHTML.split(/\n/).length;
        for (var i = 0; i < num; i++) {
            var line_num = pre.getElementsByTagName('span')[0];
            line_num.innerHTML += '<span>' + (i + 1) + '</span>';
        }
        $('pre code').each(function(a, block) {
            if (typeof Worker !== "undefined") {
                var worker = new Worker(countlyGlobal.path + '/javascripts/utils/highlight/highlight.worker.js');
                worker.onmessage = function(event) {
                    block.innerHTML = event.data;
                    worker.terminate();
                    worker = undefined;
                };
                worker.postMessage(block.textContent);
            }
            else if (typeof hljs !== "undefined") {
                hljs.highlightBlock(block);
            }
        });
    },
    refresh: function() {
        var self = this;
        if (this.loaded) {
            this.loaded = false;
            $.when(countlyCrashes.initialize(this.id, true)).then(function() {
                self.loaded = true;
                if (app.activeView !== self) {
                    return false;
                }
                self.renderCommon(true);
                var newPage = $("<div>" + self.template(self.templateData) + "</div>");
                $("#big-numbers-container").replaceWith(newPage.find("#big-numbers-container"));
                $(".grouped-numbers").replaceWith(newPage.find(".grouped-numbers"));
                $(".crash-bars").replaceWith(newPage.find(".crash-bars"));

                var crashData = countlyCrashes.getGroupData();
                $("#error pre code").html(crashData.error);
                var errorHeight = $("#expandable").find("code").outerHeight();

                if (errorHeight < 200) {
                    $("#expandable").removeClass("collapsed");
                    $("#expand-crash").hide();
                }
                else {
                    if ($('#expand-crash:visible').length === 0) {
                        $("#expandable").addClass("collapsed");
                        $("#expand-crash").show();
                    }
                }

                self.redecorateStacktrace();
                if (crashData.comments) {
                    var container = $("#comments");
                    var comment, parent;
                    var count = 0;
                    for (var i = 0; i < crashData.comments.length; i++) {
                        self.comments[crashData.comments[i]._id] = crashData.comments[i].text;
                        comment = crashData.comments[i];
                        if (container.find("#comment_" + comment._id).length) {
                            parent = container.find("#comment_" + comment._id);
                            parent.find(".text").html(newPage.find("#comment_" + comment._id + " .text").html());
                            parent.find(".author").html(newPage.find("#comment_" + comment._id + " .author").html());
                            parent.find(".time").html(newPage.find("#comment_" + comment._id + " .time").html());
                        }
                        else {
                            container.append(newPage.find("#comment_" + comment._id));
                        }

                        if (!crashData.comments[i].is_owner && typeof store.get("countly_" + self.id + "_" + comment._id) === "undefined") {
                            count++;
                        }
                    }
                    if (count > 0) {
                        $(".crash-comment-count span").text(count + "");
                        $(".crash-comment-count").show();
                    }
                }
                CountlyHelpers.refreshTable(self.dtable, crashData.data);
                countlyCommon.drawGraph(crashData.dp[self.curMetric], "#dashboard-graph", "bar");
                CountlyHelpers.reopenRows(self.dtable, self.formatData);
                app.localize();
            });
        }
    },
    formatData: function(data) {
        // `d` is the original data object for the row
        var str = '';
        if (data) {
            str += '<div class="datatablesubrow">' +
				'<table style="width: 100%;">' +
						'<tr>' +
							'<td class="text-left">' + jQuery.i18n.map["crashes.app_version"] + '</td>' +
							'<td class="text-left">' + jQuery.i18n.map["crashes.device"] + '</td>' +
							'<td class="text-left">' + jQuery.i18n.map["crashes.state"] + '</td>';
            if (data.custom) {
                str += '<td class="text-left">' + jQuery.i18n.map["crashes.custom"] + '</td>';
            }
            str += '</tr>' +
						'<tr>' +
							'<td class="text-left">' + data.app_version.replace(/:/g, '.') + '</td>' +
							'<td class="text-left">' + data.os + ' ';
            if (data.os_version) {
                str += data.os_version.replace(/:/g, '.') + '<br/>';
            }
            if (data.manufacture) {
                str += data.manufacture;
            }+' ';
            if (data.device) {
                str += data.device;
            }
            if (data.cpu) {
                str += ' (' + data.cpu + ')';
            }
            str += '<br/>';
            if (data.opengl) {
                str += jQuery.i18n.map["crashes.opengl"] + ': ' + data.opengl + '<br/>';
            }
            if (data.resolution) {
                str += jQuery.i18n.map["crashes.resolution"] + ': ' + data.resolution + '<br/>';
            }
            str += jQuery.i18n.map["crashes.root"] + ': ' + ((data.root) ? "yes" : "no") + '<br/>';
            str += '</td>' +
                            '<td class="text-left">';
            if (data.ram_current && data.ram_total) {
                str += jQuery.i18n.map["crashes.ram"] + ': ' + data.ram_current + '/' + data.ram_total + ' Mb<br/>';
            }
            if (data.disk_current && data.disk_total) {
                str += jQuery.i18n.map["crashes.disk"] + ': ' + data.disk_current + '/' + data.disk_total + ' Mb<br/>';
            }
            if (data.bat_current) {
                str += jQuery.i18n.map["crashes.battery"] + ': ' + data.bat_current + '%<br/>';
            }
            if (data.run) {
                str += jQuery.i18n.map["crashes.run"] + ': ' + countlyCommon.timeString(data.run / 60) + '<br/>';
            }
            if (data.session) {
                str += jQuery.i18n.map["crashes.after"] + ' ' + data.session + ' ' + jQuery.i18n.map["crashes.sessions"] + '<br/>';
            }
            else {
                str += jQuery.i18n.map["crashes.frequency"] + ': ' + jQuery.i18n.map["crashes.first-crash"] + '<br/>';
            }
            str += jQuery.i18n.map["crashes.online"] + ": " + ((data.online) ? "yes" : "no") + "<br/>";
            str += jQuery.i18n.map["crashes.background"] + ": " + ((data.background) ? "yes" : "no") + "<br/>";
            str += jQuery.i18n.map["crashes.muted"] + ": " + ((data.muted) ? "yes" : "no") + "<br/>";
            str += '</td>';
            if (data.custom) {
                str += '<td class="text-left">';
                for (var i in data.custom) {
                    str += i + ': ' + data.custom[i] + '<br/>';
                }
                str += '</td>';
            }
            str += '</tr>' +
                        '<tr>' +
                        '<td colspan="4" class="stack-trace">';
            str += '<pre>' + data.error + '</pre></td>' +
						'</tr>';
            if (data.logs) {
                str += '<tr>' +
                                '<td class="text-left">' + jQuery.i18n.map["crashes.logs"] + '</td>' +
                            '</tr>' +
                            '<tr>' +
                            '<td colspan="4">' +
                                '<pre>' + data.logs + '</pre></td>' +
                            '</tr>';
            }
            str += '</table>' +
			'</div>';
        }
        return str;
    },
    switchMetric: function(metric) {
        this.curMetric = metric;
        var crashData = countlyCrashes.getGroupData();
        countlyCommon.drawGraph(crashData.dp[this.curMetric], "#dashboard-graph", "bar");
    }
});

//register views
app.crashesView = new CrashesView();
app.crashgroupView = new CrashgroupView();

app.route('/crashes', 'crashes', function() {
    this.crashesView._filter = false;
    this.crashesView._query = null;
    this.renderWhenReady(this.crashesView);
});

app.route('/crashes/filter/*query', 'userdata', function(query) {
    try {
        query = JSON.parse(query);
    }
    catch (ex) {
        query = null;
    }
    this.crashesView._query = query;
    this.crashesView._filter = true;
    this.renderWhenReady(this.crashesView);
});

app.route('/crashes/:group', 'crashgroup', function(group) {
    this.crashgroupView.id = group;
    this.renderWhenReady(this.crashgroupView);
});

app.addPageScript("/drill#", function() {
    var drillClone;
    var self = app.drillView;
    if (countlyGlobal.record_crashes) {
        $("#drill-types").append('<div id="drill-type-crashes" class="item">' + jQuery.i18n.map["crashes.title"] + '</div>');
        $("#drill-type-crashes").on("click", function() {
            if ($(this).hasClass("active")) {
                return true;
            }

            $("#drill-types").find(".item").removeClass("active");
            $(this).addClass("active");
            $("#event-selector").hide();

            $("#drill-no-event").fadeOut();
            $("#segmentation-start").fadeOut().remove();
            $(this).parents(".cly-select").removeClass("dark");

            $(".event-select.cly-select").find(".text").text(jQuery.i18n.map["drill.select-event"]);
            $(".event-select.cly-select").find(".text").data("value", "");

            var currEvent = "[CLY]_crash";

            self.graphType = "line";
            self.graphVal = "times";
            self.filterObj = {};
            self.byVal = "";
            self.drillChartDP = {};
            self.drillChartData = {};
            self.activeSegmentForTable = "";
            countlySegmentation.reset();

            $("#drill-navigation").find(".menu[data-open=table-view]").hide();

            $.when(countlySegmentation.initialize(currEvent)).then(function() {
                $("#drill").replaceWith(drillClone.clone(true));
                self.adjustFilters();
                self.draw(true, false);
            });
        });
        setTimeout(function() {
            drillClone = $("#drill").clone(true);
        }, 0);
    }
});

app.addPageScript("/users/#", function() {
    if (app.activeView && app.activeView.tabs) {
        app.activeView.tabs.tabs('add', '#usertab-crashes', jQuery.i18n.map["crashes.title"]);
        app.activeView.tabs.tabs("refresh");
        var userDetails = countlyUserdata.getUserdetails();
        $("#usertab-crashes").append("<div class='widget-header'><div class='left'><div class='title'>" + jQuery.i18n.map["userdata.crashes"] + "</div></div></div><table  data-view='crashesView' id='d-table-crashes' class='d-table sortable help-zone-vb' cellpadding='0' cellspacing='0'></table>");
        app.activeView.dtablecrashes = $('#d-table-crashes').dataTable($.extend({}, $.fn.dataTable.defaults, {
            "iDisplayLength": 30,
            "aaSorting": [[ 2, "desc" ]],
            "bServerSide": true,
            "bFilter": false,
            "sAjaxSource": countlyCommon.API_PARTS.data.r + "?api_key=" + countlyGlobal.member.api_key + "&app_id=" + countlyCommon.ACTIVE_APP_ID + "&method=user_crashes&uid=" + userDetails.uid,
            "fnServerData": function(sSource, aoData, fnCallback) {
                self.request = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    "data": aoData,
                    "success": function(data) {
                        fnCallback(data);
                    }
                });
            },
            "aoColumns": [
                {
                    "mData": function(row) {
                        return countlyCrashes.getCrashName(row.group);
                    },
                    "sType": "numeric",
                    "sTitle": jQuery.i18n.map["crashes.error"],
                    "sClass": "break web-50",
                    "bSortable": false,
                    "sWidth": "45%"
                },
                {
                    "mData": function(row) {
                        return row.reports;
                    },
                    "sType": "numeric",
                    "sTitle": jQuery.i18n.map["crashes.reports"],
                    "sWidth": "20%"
                },
                {
                    "mData": function(row, type) {
                        if (type === "display") {
                            return (row.last === 0) ? jQuery.i18n.map["common.unknown"] + "&nbsp;<a class='extable-link table-link green' href='#/crashes/" + row.group + "' target='_blank'><i class='material-icons'>open_in_new</i></a><a class='extable-link table-link green' href='#/crashes/" + row.group + "' style='float: right;' >" + jQuery.i18n.map["common.view"] + "</a>" : countlyCommon.formatTimeAgo(row.last) + "&nbsp;<a class='extable-link table-link green' href='#/crashes/" + row.group + "' target='_blank'><i class='material-icons'>open_in_new</i></a><a class='extable-link table-link green' href='#/crashes/" + row.group + "' style='float: right;' >" + jQuery.i18n.map["common.view"] + "</a>";
                        }
                        else {
                            return row.last;
                        }
                    },
                    "sType": "numeric",
                    "sTitle": jQuery.i18n.map["crashes.last_time"]
                }
            ]
        }));
    }
});

$(document).ready(function() {
    if (typeof extendViewWithFilter === "function") {
        extendViewWithFilter(app.crashesView);
    }
    app.addAppSwitchCallback(function(appId) {
        if (app._isFirstLoad !== true) {
            countlyCrashes.loadList(appId);
        }
    });
    if (!production) {
        CountlyHelpers.loadJS("crashes/javascripts/marked.min.js");
    }

    var menu = '<a class="item" id="sidebar-crashes">' +
        '<div class="logo ion-alert-circled"></div>' +
        '<div class="text" data-localize="crashes.title"></div>' +
    '</a>' +
    '<div class="sidebar-submenu" id="crash-submenu">' +
        '<a href="#/crashes" class="item">' +
            '<div class="logo-icon fa fa-line-chart"></div>' +
            '<div class="text" data-localize="sidebar.dashboard">Overview</div>' +
        '</a>' +
    '</div>';
    if ($('.sidebar-menu #management-menu').length) {
        $('.sidebar-menu #management-menu').before(menu);
    }
    else {
        $('.sidebar-menu').append(menu);
    }

    //check if configuration view exists
    if (app.configurationsView) {
        app.configurationsView.registerLabel("crashes", "crashes.title");
    }
});;/* global Promise */
'use strict'

;(function (global, factory) { // eslint-disable-line
    /* eslint-disable no-undef */
    var m = factory(global);
    /*	Set dependencies when no window for isomorphic compatibility */
    if(typeof window === 'undefined') {
        m.deps({
            document: typeof document !== 'undefined' ? document : {},
            location: typeof location !== 'undefined' ? location : {},
            clearTimeout: clearTimeout,
            setTimeout: setTimeout
        });
    }
    if (typeof module === 'object' && module != null && module.exports) {
        module.exports = m;
    } else if (typeof define === 'function' && define.amd) {
        define(function () { return m; });
    } else {
        global.m = m;
    }
    /* eslint-enable no-undef */
})(typeof window !== "undefined" ? window : this, function factory(global, undefined) { // eslint-disable-line
    'use strict';

    m.version = function () {
        return 'v0.2.8';
    };

    var hasOwn = {}.hasOwnProperty;
    var type = {}.toString;

    function isFunction(object) {
        return typeof object === 'function';
    }

    function isObject(object) {
        return type.call(object) === '[object Object]';
    }

    function isString(object) {
        return type.call(object) === '[object String]';
    }

    var isArray = Array.isArray || function (object) {
        return type.call(object) === '[object Array]';
    };

    function noop() {}

    var voidElements = {
        AREA: 1,
        BASE: 1,
        BR: 1,
        COL: 1,
        COMMAND: 1,
        EMBED: 1,
        HR: 1,
        IMG: 1,
        INPUT: 1,
        KEYGEN: 1,
        LINK: 1,
        META: 1,
        PARAM: 1,
        SOURCE: 1,
        TRACK: 1,
        WBR: 1
    };

    // caching commonly used variables
    var $document, $location, $requestAnimationFrame, $cancelAnimationFrame;

    // self invoking function needed because of the way mocks work
    function initialize(mock) {
        $document = mock.document;
        $location = mock.location;
        $cancelAnimationFrame = mock.cancelAnimationFrame || mock.clearTimeout;
        $requestAnimationFrame = mock.requestAnimationFrame || mock.setTimeout;
    }

    // testing API
    m.deps = function (mock) {
        initialize(global = mock || window);
        return global;
    };

    m.deps.factory = m.factory = factory;

    m.deps(global);

    /**
	 * @typedef {String} Tag
	 * A string that looks like -> div.classname#id[param=one][param2=two]
	 * Which describes a DOM node
	 */

    function parseTagAttrs(cell, tag) {
        var classes = [];
        /* eslint-disable max-len */
        var parser = /(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g;
        /* eslint-enable max-len */
        var match;

        while ((match = parser.exec(tag))) {
            if (match[1] === '' && match[2]) {
                cell.tag = match[2];
            } else if (match[1] === '#') {
                cell.attrs.id = match[2];
            } else if (match[1] === '.') {
                classes.push(match[2]);
            } else if (match[3].charAt(0) === '[') { // #1195
                var attrValue = match[6];
                if (attrValue) attrValue = attrValue.replace(/\\(["'])/g, '$1');
                if (match[4] === 'class') classes.push(attrValue);
                else cell.attrs[match[4]] = attrValue || true;
            }
        }

        return classes;
    }

    function getVirtualChildren(args, hasAttrs) {
        var children = hasAttrs ? args.slice(1) : args;

        if (children.length === 1 && isArray(children[0])) {
            return children[0];
        } else {
            return children;
        }
    }

    function assignAttrs(target, attrs, classes) {
        var classAttr = 'class' in attrs ? 'class' : 'className';

        for (var attrName in attrs) {
            if (hasOwn.call(attrs, attrName)) {
                if (attrName === classAttr &&
						attrs[attrName] != null &&
						attrs[attrName] !== '') {
                    classes.push(attrs[attrName]);
                    // create key in correct iteration order
                    target[attrName] = '';
                } else {
                    target[attrName] = attrs[attrName];
                }
            }
        }

        if (classes.length) target[classAttr] = classes.join(' ');
    }

    /**
	 *
	 * @param {Tag} The DOM node tag
	 * @param {Object=[]} optional key-value pairs to be mapped to DOM attrs
	 * @param {...mNode=[]} Zero or more Mithril child nodes. Can be an array,
	 *                      or splat (optional)
	 */
    function m(tag, pairs) {
        var args = [];

        for (var i = 1, length = arguments.length; i < length; i++) {
            args[i - 1] = arguments[i];
        }

        if (tag && isFunction(tag.view)) return parameterize(tag, args);

        if (!isString(tag)) {
            throw new Error('selector in m(selector, attrs, children) should ' +
				'be a string');
        }

        var hasAttrs = pairs != null && isObject(pairs) &&
			!('tag' in pairs || 'view' in pairs || 'subtree' in pairs);

        var attrs = hasAttrs ? pairs : {};
        var cell = {
            tag: 'div',
            attrs: {},
            children: getVirtualChildren(args, hasAttrs)
        };

        assignAttrs(cell.attrs, attrs, parseTagAttrs(cell, tag));
        return cell;
    }

    function forEach(list, f) {
        for (var i = 0; i < list.length && !f(list[i], i++);) {
            // function called in condition
        }
    }

    function forKeys(list, f) {
        forEach(list, function (attrs, i) {
            return (attrs = attrs && attrs.attrs) &&
				attrs.key != null &&
				f(attrs, i);
        });
    }
    // This function was causing deopts in Chrome.
    function dataToString(data) {
        // data.toString() might throw or return null if data is the return
        // value of Console.log in some versions of Firefox (behavior depends on
        // version)
        try {
            if (typeof data !== 'boolean' &&
					data != null &&
					data.toString() != null) return data;
        } catch (e) {
            // silently ignore errors
        }
        return '';
    }

    // This function was causing deopts in Chrome.
    function injectTextNode(parentElement, first, index, data) {
        try {
            insertNode(parentElement, first, index);
            first.nodeValue = data;
        } catch (e) {
            // IE erroneously throws error when appending an empty text node
            // after a null
        }
    }

    function flatten(list) {
        // recursively flatten array
        for (var i = 0; i < list.length; i++) {
            if (isArray(list[i])) {
                list = list.concat.apply([], list);
                // check current index again and flatten until there are no more
                // nested arrays at that index
                i--;
            }
        }
        return list;
    }

    function insertNode(parentElement, node, index) {
        parentElement.insertBefore(node,
            parentElement.childNodes[index] || null);
    }

    var DELETION = 1;
    var INSERTION = 2;
    var MOVE = 3;

    function handleKeysDiffer(data, existing, cached, parentElement) {
        forKeys(data, function (key, i) {
            existing[key = key.key] = existing[key] ? {
                action: MOVE,
                index: i,
                from: existing[key].index,
                element: cached.nodes[existing[key].index] ||
					$document.createElement('div')
            } : {action: INSERTION, index: i};
        });

        var actions = [];
        for (var prop in existing) {
            if (hasOwn.call(existing, prop)) {
                actions.push(existing[prop]);
            }
        }

        var changes = actions.sort(sortChanges);
        var newCached = new Array(cached.length);

        newCached.nodes = cached.nodes.slice();

        forEach(changes, function (change) {
            var index = change.index;
            if (change.action === DELETION) {
                clear(cached[index].nodes, cached[index]);
                newCached.splice(index, 1);
            }
            if (change.action === INSERTION) {
                var dummy = $document.createElement('div');
                dummy.key = data[index].attrs.key;
                insertNode(parentElement, dummy, index);
                newCached.splice(index, 0, {
                    attrs: {key: data[index].attrs.key},
                    nodes: [dummy]
                });
                newCached.nodes[index] = dummy;
            }

            if (change.action === MOVE) {
                var changeElement = change.element;
                var maybeChanged = parentElement.childNodes[index];
                if (maybeChanged !== changeElement && changeElement !== null) {
                    parentElement.insertBefore(changeElement,
                        maybeChanged || null);
                }
                newCached[index] = cached[change.from];
                newCached.nodes[index] = changeElement;
            }
        });

        return newCached;
    }

    function diffKeys(data, cached, existing, parentElement) {
        var keysDiffer = data.length !== cached.length;

        if (!keysDiffer) {
            forKeys(data, function (attrs, i) {
                var cachedCell = cached[i];
                return keysDiffer = cachedCell &&
					cachedCell.attrs &&
					cachedCell.attrs.key !== attrs.key;
            });
        }

        if (keysDiffer) {
            return handleKeysDiffer(data, existing, cached, parentElement);
        } else {
            return cached;
        }
    }

    function diffArray(data, cached, nodes) {
        // diff the array itself

        // update the list of DOM nodes by collecting the nodes from each item
        forEach(data, function (_, i) {
            if (cached[i] != null) nodes.push.apply(nodes, cached[i].nodes);
        });
        // remove items from the end of the array if the new array is shorter
        // than the old one. if errors ever happen here, the issue is most
        // likely a bug in the construction of the `cached` data structure
        // somewhere earlier in the program
        forEach(cached.nodes, function (node, i) {
            if (node.parentNode != null && nodes.indexOf(node) < 0) {
                clear([node], [cached[i]]);
            }
        });

        if (data.length < cached.length) cached.length = data.length;
        cached.nodes = nodes;
    }

    function buildArrayKeys(data) {
        var guid = 0;
        forKeys(data, function () {
            forEach(data, function (attrs) {
                if ((attrs = attrs && attrs.attrs) && attrs.key == null) {
                    attrs.key = '__mithril__' + guid++;
                }
            });
            return 1;
        });
    }

    function isDifferentEnough(data, cached, dataAttrKeys) {
        if (data.tag !== cached.tag) return true;

        if (dataAttrKeys.sort().join() !==
				Object.keys(cached.attrs).sort().join()) {
            return true;
        }

        if (data.attrs.id !== cached.attrs.id) {
            return true;
        }

        if (data.attrs.key !== cached.attrs.key) {
            return true;
        }

        if (m.redraw.strategy() === 'all') {
            return !cached.configContext || cached.configContext.retain !== true;
        }

        if (m.redraw.strategy() === 'diff') {
            return cached.configContext && cached.configContext.retain === false;
        }

        return false;
    }

    function maybeRecreateObject(data, cached, dataAttrKeys) {
        // if an element is different enough from the one in cache, recreate it
        if (isDifferentEnough(data, cached, dataAttrKeys)) {
            if (cached.nodes.length) clear(cached.nodes);

            if (cached.configContext &&
					isFunction(cached.configContext.onunload)) {
                cached.configContext.onunload();
            }

            if (cached.controllers) {
                forEach(cached.controllers, function (controller) {
                    if (controller.onunload) {
                        controller.onunload({preventDefault: noop});
                    }
                });
            }
        }
    }

    function getObjectNamespace(data, namespace) {
        if (data.attrs.xmlns) return data.attrs.xmlns;
        if (data.tag === 'svg') return 'http://www.w3.org/2000/svg';
        if (data.tag === 'math') return 'http://www.w3.org/1998/Math/MathML';
        return namespace;
    }

    var pendingRequests = 0;
    m.startComputation = function () { pendingRequests++; };
    m.endComputation = function () {
        if (pendingRequests > 1) {
            pendingRequests--;
        } else {
            pendingRequests = 0;
            m.redraw();
        }
    };

    function unloadCachedControllers(cached, views, controllers) {
        if (controllers.length) {
            cached.views = views;
            cached.controllers = controllers;
            forEach(controllers, function (controller) {
                if (controller.onunload && controller.onunload.$old) {
                    controller.onunload = controller.onunload.$old;
                }

                if (pendingRequests && controller.onunload) {
                    var onunload = controller.onunload;
                    controller.onunload = function (){};
                    controller.onunload.$old = onunload;
                }
            });
        }
    }

    function scheduleConfigsToBeCalled(configs, data, node, isNew, cached) {
        // schedule configs to be called. They are called after `build` finishes
        // running
        if (isFunction(data.attrs.config)) {
            var context = cached.configContext = cached.configContext || {};

            // bind
            configs.push(function () {
                return data.attrs.config.call(data, node, !isNew, context,
                    cached);
            });
        }
    }

    function buildUpdatedNode(
        cached,
        data,
        editable,
        hasKeys,
        namespace,
        views,
        configs,
        controllers
    ) {
        var node = cached.nodes[0];

        if (hasKeys) {
            setAttributes(node, data.tag, data.attrs, cached.attrs, namespace);
        }

        cached.children = build(
            node,
            data.tag,
            undefined,
            undefined,
            data.children,
            cached.children,
            false,
            0,
            data.attrs.contenteditable ? node : editable,
            namespace,
            configs
        );

        cached.nodes.intact = true;

        if (controllers.length) {
            cached.views = views;
            cached.controllers = controllers;
        }

        return node;
    }

    function handleNonexistentNodes(data, parentElement, index) {
        var nodes;
        if (data.$trusted) {
            nodes = injectHTML(parentElement, index, data);
        } else {
            nodes = [$document.createTextNode(data)];
            if (!(parentElement.nodeName in voidElements)) {
                insertNode(parentElement, nodes[0], index);
            }
        }

        var cached;

        if (typeof data === 'string' ||
				typeof data === 'number' ||
				typeof data === 'boolean') {
            cached = new data.constructor(data);
        } else {
            cached = data;
        }

        cached.nodes = nodes;
        return cached;
    }

    function reattachNodes(
        data,
        cached,
        parentElement,
        editable,
        index,
        parentTag
    ) {
        var nodes = cached.nodes;
        if (!editable || editable !== $document.activeElement ||
				data !== cached) {
            if (data.$trusted) {
                clear(nodes, cached);
                nodes = injectHTML(parentElement, index, data);
            } else if (parentTag === 'textarea') {
                // <textarea> uses `value` instead of `nodeValue`.
                parentElement.value = data;
            } else if (editable) {
                // contenteditable nodes use `innerHTML` instead of `nodeValue`.
                editable.innerHTML = data;
                nodes = [].slice.call(editable.childNodes);
            } else {
                // was a trusted string
                if (nodes[0].nodeType === 1 || nodes.length > 1 ||
						(nodes[0].nodeValue.trim &&
							!nodes[0].nodeValue.trim())) {
                    clear(cached.nodes, cached);
                    nodes = [$document.createTextNode(data)];
                }

                injectTextNode(parentElement, nodes[0], index, data);
            }
        }
        cached = new data.constructor(data);
        cached.nodes = nodes;
        cached.$trusted = data.$trusted;
        return cached;
    }

    function handleTextNode(
        cached,
        data,
        index,
        parentElement,
        shouldReattach,
        editable,
        parentTag
    ) {
        if (!cached.nodes.length) {
            return handleNonexistentNodes(data, parentElement, index);
        } else if (cached.valueOf() !== data.valueOf() || shouldReattach) {
            return reattachNodes(data, cached, parentElement, editable, index,
                parentTag);
        } else {
            return (cached.nodes.intact = true, cached);
        }
    }

    function getSubArrayCount(item) {
        if (item.$trusted) {
            // fix offset of next element if item was a trusted string w/ more
            // than one html element
            return item.nodes.length;
        } else if (isArray(item)) {
            return item.length;
        }
        return 1;
    }

    function buildArray(
        data,
        cached,
        parentElement,
        index,
        parentTag,
        shouldReattach,
        editable,
        namespace,
        configs
    ) {
        data = flatten(data);
        var nodes = [];
        var intact = cached.length === data.length;
        var subArrayCount = 0;

        // keys algorithm: sort elements without recreating them if keys are
        // present
        //
        // 1) create a map of all existing keys, and mark all for deletion
        // 2) add new keys to map and mark them for addition
        // 3) if key exists in new list, change action from deletion to a move
        // 4) for each key, handle its corresponding action as marked in
        //    previous steps

        var existing = {};
        var shouldMaintainIdentities = false;

        forKeys(cached, function (attrs, i) {
            shouldMaintainIdentities = true;
            existing[cached[i].attrs.key] = {action: DELETION, index: i};
        });

        buildArrayKeys(data);
        if (shouldMaintainIdentities) {
            cached = diffKeys(data, cached, existing, parentElement);
        }
        // end key algorithm

        var cacheCount = 0;
        // faster explicitly written
        for (var i = 0, len = data.length; i < len; i++) {
            // diff each item in the array
            var item = build(
                parentElement,
                parentTag,
                cached,
                index,
                data[i],
                cached[cacheCount],
                shouldReattach,
                index + subArrayCount || subArrayCount,
                editable,
                namespace,
                configs);

            if (item !== undefined) {
                intact = intact && item.nodes.intact;
                subArrayCount += getSubArrayCount(item);
                cached[cacheCount++] = item;
            }
        }

        if (!intact) diffArray(data, cached, nodes);
        return cached;
    }

    function makeCache(data, cached, index, parentIndex, parentCache) {
        if (cached != null) {
            if (type.call(cached) === type.call(data)) return cached;

            if (parentCache && parentCache.nodes) {
                var offset = index - parentIndex;
                var end = offset + (isArray(data) ? data : cached.nodes).length;
                clear(
                    parentCache.nodes.slice(offset, end),
                    parentCache.slice(offset, end));
            } else if (cached.nodes) {
                clear(cached.nodes, cached);
            }
        }

        cached = new data.constructor();
        // if constructor creates a virtual dom element, use a blank object as
        // the base cached node instead of copying the virtual el (#277)
        if (cached.tag) cached = {};
        cached.nodes = [];
        return cached;
    }

    function constructNode(data, namespace) {
        if (data.attrs.is) {
            if (namespace == null) {
                return $document.createElement(data.tag, data.attrs.is);
            } else {
                return $document.createElementNS(namespace, data.tag,
                    data.attrs.is);
            }
        } else if (namespace == null) {
            return $document.createElement(data.tag);
        } else {
            return $document.createElementNS(namespace, data.tag);
        }
    }

    function constructAttrs(data, node, namespace, hasKeys) {
        if (hasKeys) {
            return setAttributes(node, data.tag, data.attrs, {}, namespace);
        } else {
            return data.attrs;
        }
    }

    function constructChildren(
        data,
        node,
        cached,
        editable,
        namespace,
        configs
    ) {
        if (data.children != null && data.children.length > 0) {
            return build(
                node,
                data.tag,
                undefined,
                undefined,
                data.children,
                cached.children,
                true,
                0,
                data.attrs.contenteditable ? node : editable,
                namespace,
                configs);
        } else {
            return data.children;
        }
    }

    function reconstructCached(
        data,
        attrs,
        children,
        node,
        namespace,
        views,
        controllers
    ) {
        var cached = {
            tag: data.tag,
            attrs: attrs,
            children: children,
            nodes: [node]
        };

        unloadCachedControllers(cached, views, controllers);

        if (cached.children && !cached.children.nodes) {
            cached.children.nodes = [];
        }

        return cached;
    }

    function getController(views, view, cachedControllers, controller) {
        var controllerIndex;

        if (m.redraw.strategy() === 'diff' && views) {
            controllerIndex = views.indexOf(view);
        } else {
            controllerIndex = -1;
        }

        if (controllerIndex > -1) {
            return cachedControllers[controllerIndex];
        } else if (isFunction(controller)) {
            return new controller();
        } else {
            return {};
        }
    }

    var unloaders = [];

    function updateLists(views, controllers, view, controller) {
        if (controller.onunload != null &&
				unloaders.map(function (u) { return u.handler; })
				    .indexOf(controller.onunload) < 0) {
            unloaders.push({
                controller: controller,
                handler: controller.onunload
            });
        }

        views.push(view);
        controllers.push(controller);
    }

    var forcing = false;
    function checkView(
        data,
        view,
        cached,
        cachedControllers,
        controllers,
        views
    ) {
        var controller = getController(
            cached.views,
            view,
            cachedControllers,
            data.controller);

        var key = data && data.attrs && data.attrs.key;

        if (pendingRequests === 0 ||
				forcing ||
				cachedControllers &&
					cachedControllers.indexOf(controller) > -1) {
            data = data.view(controller);
        } else {
            data = {tag: 'placeholder'};
        }

        if (data.subtree === 'retain') return data;
        data.attrs = data.attrs || {};
        data.attrs.key = key;
        updateLists(views, controllers, view, controller);
        return data;
    }

    function markViews(data, cached, views, controllers) {
        var cachedControllers = cached && cached.controllers;

        while (data.view != null) {
            data = checkView(
                data,
                data.view.$original || data.view,
                cached,
                cachedControllers,
                controllers,
                views);
        }

        return data;
    }

    function buildObject( // eslint-disable-line max-statements
        data,
        cached,
        editable,
        parentElement,
        index,
        shouldReattach,
        namespace,
        configs
    ) {
        var views = [];
        var controllers = [];

        data = markViews(data, cached, views, controllers);

        if (data.subtree === 'retain') return cached;

        if (!data.tag && controllers.length) {
            throw new Error('Component template must return a virtual ' +
				'element, not an array, string, etc.');
        }

        data.attrs = data.attrs || {};
        cached.attrs = cached.attrs || {};

        var dataAttrKeys = Object.keys(data.attrs);
        var hasKeys = dataAttrKeys.length > ('key' in data.attrs ? 1 : 0);

        maybeRecreateObject(data, cached, dataAttrKeys);

        if (!isString(data.tag)) return;

        var isNew = cached.nodes.length === 0;

        namespace = getObjectNamespace(data, namespace);

        var node;
        if (isNew) {
            node = constructNode(data, namespace);
            // set attributes first, then create children
            var attrs = constructAttrs(data, node, namespace, hasKeys);

            // add the node to its parent before attaching children to it
            insertNode(parentElement, node, index);

            var children = constructChildren(data, node, cached, editable,
                namespace, configs);

            cached = reconstructCached(
                data,
                attrs,
                children,
                node,
                namespace,
                views,
                controllers);
        } else {
            node = buildUpdatedNode(
                cached,
                data,
                editable,
                hasKeys,
                namespace,
                views,
                configs,
                controllers);
        }

        // edge case: setting value on <select> doesn't work before children
        // exist, so set it again after children have been created/updated
        if (data.tag === 'select' && 'value' in data.attrs) {
            setAttributes(node, data.tag, {value: data.attrs.value}, {},
                namespace);
        }

        if (!isNew && shouldReattach === true && node != null) {
            insertNode(parentElement, node, index);
        }

        // The configs are called after `build` finishes running
        scheduleConfigsToBeCalled(configs, data, node, isNew, cached);

        return cached;
    }

    function build(
        parentElement,
        parentTag,
        parentCache,
        parentIndex,
        data,
        cached,
        shouldReattach,
        index,
        editable,
        namespace,
        configs
    ) {
        /*
		 * `build` is a recursive function that manages creation/diffing/removal
		 * of DOM elements based on comparison between `data` and `cached` the
		 * diff algorithm can be summarized as this:
		 *
		 * 1 - compare `data` and `cached`
		 * 2 - if they are different, copy `data` to `cached` and update the DOM
		 *     based on what the difference is
		 * 3 - recursively apply this algorithm for every array and for the
		 *     children of every virtual element
		 *
		 * The `cached` data structure is essentially the same as the previous
		 * redraw's `data` data structure, with a few additions:
		 * - `cached` always has a property called `nodes`, which is a list of
		 *    DOM elements that correspond to the data represented by the
		 *    respective virtual element
		 * - in order to support attaching `nodes` as a property of `cached`,
		 *    `cached` is *always* a non-primitive object, i.e. if the data was
		 *    a string, then cached is a String instance. If data was `null` or
		 *    `undefined`, cached is `new String("")`
		 * - `cached also has a `configContext` property, which is the state
		 *    storage object exposed by config(element, isInitialized, context)
		 * - when `cached` is an Object, it represents a virtual element; when
		 *    it's an Array, it represents a list of elements; when it's a
		 *    String, Number or Boolean, it represents a text node
		 *
		 * `parentElement` is a DOM element used for W3C DOM API calls
		 * `parentTag` is only used for handling a corner case for textarea
		 * values
		 * `parentCache` is used to remove nodes in some multi-node cases
		 * `parentIndex` and `index` are used to figure out the offset of nodes.
		 * They're artifacts from before arrays started being flattened and are
		 * likely refactorable
		 * `data` and `cached` are, respectively, the new and old nodes being
		 * diffed
		 * `shouldReattach` is a flag indicating whether a parent node was
		 * recreated (if so, and if this node is reused, then this node must
		 * reattach itself to the new parent)
		 * `editable` is a flag that indicates whether an ancestor is
		 * contenteditable
		 * `namespace` indicates the closest HTML namespace as it cascades down
		 * from an ancestor
		 * `configs` is a list of config functions to run after the topmost
		 * `build` call finishes running
		 *
		 * there's logic that relies on the assumption that null and undefined
		 * data are equivalent to empty strings
		 * - this prevents lifecycle surprises from procedural helpers that mix
		 *   implicit and explicit return statements (e.g.
		 *   function foo() {if (cond) return m("div")}
		 * - it simplifies diffing code
		 */
        data = dataToString(data);
        if (data.subtree === 'retain') return cached;
        cached = makeCache(data, cached, index, parentIndex, parentCache);

        if (isArray(data)) {
            return buildArray(
                data,
                cached,
                parentElement,
                index,
                parentTag,
                shouldReattach,
                editable,
                namespace,
                configs);
        } else if (data != null && isObject(data)) {
            return buildObject(
                data,
                cached,
                editable,
                parentElement,
                index,
                shouldReattach,
                namespace,
                configs);
        } else if (!isFunction(data)) {
            return handleTextNode(
                cached,
                data,
                index,
                parentElement,
                shouldReattach,
                editable,
                parentTag);
        } else {
            return cached;
        }
    }

    function sortChanges(a, b) {
        return a.action - b.action || a.index - b.index;
    }

    function copyStyleAttrs(node, dataAttr, cachedAttr) {
        if (cachedAttr === dataAttr) {
            node.style = '';
            cachedAttr = {};
        }
        for (var rule in dataAttr) {
            if (hasOwn.call(dataAttr, rule)) {
                if (cachedAttr == null || cachedAttr[rule] !== dataAttr[rule]) {
                    node.style[rule] = dataAttr[rule];
                }
            }
        }

        for (rule in cachedAttr) {
            if (hasOwn.call(cachedAttr, rule)) {
                if (!hasOwn.call(dataAttr, rule)) node.style[rule] = '';
            }
        }
    }

    var shouldUseSetAttribute = {
        list: 1,
        style: 1,
        form: 1,
        type: 1,
        width: 1,
        height: 1
    };

    function setSingleAttr(
        node,
        attrName,
        dataAttr,
        cachedAttr,
        tag,
        namespace
    ) {
        if (attrName === 'config' || attrName === 'key') {
            // `config` isn't a real attribute, so ignore it
            return true;
        } else if (isFunction(dataAttr) && attrName.slice(0, 2) === 'on') {
            // hook event handlers to the auto-redrawing system
            node[attrName] = autoredraw(dataAttr, node);
        } else if (attrName === 'style' && dataAttr != null &&
				isObject(dataAttr)) {
            // handle `style: {...}`
            copyStyleAttrs(node, dataAttr, cachedAttr);
        } else if (namespace != null) {
            // handle SVG
            if (attrName === 'href') {
                node.setAttributeNS('http://www.w3.org/1999/xlink',
                    'href', dataAttr);
            } else {
                node.setAttribute(
                    attrName === 'className' ? 'class' : attrName,
                    dataAttr);
            }
        } else if (attrName in node && !shouldUseSetAttribute[attrName]) {
            // handle cases that are properties (but ignore cases where we
            // should use setAttribute instead)
            //
            // - list and form are typically used as strings, but are DOM
            //   element references in js
            //
            // - when using CSS selectors (e.g. `m("[style='']")`), style is
            //   used as a string, but it's an object in js
            //
            // #348 don't set the value if not needed - otherwise, cursor
            // placement breaks in Chrome
            // #1252 likewise when `contenteditable` is set on an element.
            try {
                if (
                    tag !== 'input' && !node.isContentEditable ||
					node[attrName] != dataAttr // eslint-disable-line eqeqeq
                ) {
                    node[attrName] = dataAttr;
                }
            } catch (e) {
                node.setAttribute(attrName, dataAttr);
            }
        } else {
            try {
                node.setAttribute(attrName, dataAttr);
            } catch (e) {
                // IE8 doesn't allow change input attributes and throws
                // an exception. Unfortunately it cannot be handled, because
                // error code is not informative.
            }
        }
    }

    function trySetAttr(
        node,
        attrName,
        dataAttr,
        cachedAttr,
        cachedAttrs,
        tag,
        namespace
    ) {
        if (!(attrName in cachedAttrs) ||
				(cachedAttr !== dataAttr) ||
				typeof dataAttr === 'object' ||
				($document.activeElement === node)) {
            cachedAttrs[attrName] = dataAttr;
            try {
                return setSingleAttr(
                    node,
                    attrName,
                    dataAttr,
                    cachedAttr,
                    tag,
                    namespace);
            } catch (e) {
                // swallow IE's invalid argument errors to mimic HTML's
                // fallback-to-doing-nothing-on-invalid-attributes behavior
                if (e.message.indexOf('Invalid argument') < 0) throw e;
            }
        } else if (attrName === 'value' && tag === 'input' &&
								/* eslint-disable eqeqeq */
								node.value != dataAttr) {
            // #348 dataAttr may not be a string,
            // so use loose comparison
            /* eslint-enable eqeqeq */
            node.value = dataAttr;
        }
    }

    function setAttributes(node, tag, dataAttrs, cachedAttrs, namespace) {
        for (var attrName in dataAttrs) {
            if (hasOwn.call(dataAttrs, attrName)) {
                if (trySetAttr(
                    node,
                    attrName,
                    dataAttrs[attrName],
                    cachedAttrs[attrName],
                    cachedAttrs,
                    tag,
                    namespace)) {
                    continue;
                }
            }
        }
        return cachedAttrs;
    }

    function clear(nodes, cached) {
        for (var i = nodes.length - 1; i > -1; i--) {
            if (nodes[i] && nodes[i].parentNode) {
                try {
                    nodes[i].parentNode.removeChild(nodes[i]);
                } catch (e) {
                    /* eslint-disable max-len */
                    // ignore if this fails due to order of events (see
                    // http://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node)
                    /* eslint-enable max-len */
                }
                cached = [].concat(cached);
                if (cached[i]) unload(cached[i]);
            }
        }
        // release memory if nodes is an array. This check should fail if nodes
        // is a NodeList (see loop above)
        if (nodes.length) {
            nodes.length = 0;
        }
    }

    function unload(cached) {
        if (cached.configContext && isFunction(cached.configContext.onunload)) {
            cached.configContext.onunload();
            cached.configContext.onunload = null;
        }
        if (cached.controllers) {
            forEach(cached.controllers, function (controller) {
                if (isFunction(controller.onunload)) {
                    controller.onunload({preventDefault: noop});
                }
            });
        }
        if (cached.children) {
            if (isArray(cached.children)) forEach(cached.children, unload);
            else if (cached.children.tag) unload(cached.children);
        }
    }

    function appendTextFragment(parentElement, data) {
        try {
            parentElement.appendChild(
                $document.createRange().createContextualFragment(data));
        } catch (e) {
            parentElement.insertAdjacentHTML('beforeend', data);
            replaceScriptNodes(parentElement);
        }
    }

    // Replace script tags inside given DOM element with executable ones.
    // Will also check children recursively and replace any found script
    // tags in same manner.
    function replaceScriptNodes(node) {
        if (node.tagName === 'SCRIPT') {
            node.parentNode.replaceChild(buildExecutableNode(node), node);
        } else {
            var children = node.childNodes;
            if (children && children.length) {
                for (var i = 0; i < children.length; i++) {
                    replaceScriptNodes(children[i]);
                }
            }
        }

        return node;
    }

    // Replace script element with one whose contents are executable.
    function buildExecutableNode(node){
        var scriptEl = document.createElement('script');
        var attrs = node.attributes;

        for (var i = 0; i < attrs.length; i++) {
            scriptEl.setAttribute(attrs[i].name, attrs[i].value);
        }

        scriptEl.text = node.innerHTML;
        return scriptEl;
    }

    function injectHTML(parentElement, index, data) {
        var nextSibling = parentElement.childNodes[index];
        if (nextSibling) {
            var isElement = nextSibling.nodeType !== 1;
            var placeholder = $document.createElement('span');
            if (isElement) {
                parentElement.insertBefore(placeholder, nextSibling || null);
                placeholder.insertAdjacentHTML('beforebegin', data);
                parentElement.removeChild(placeholder);
            } else {
                nextSibling.insertAdjacentHTML('beforebegin', data);
            }
        } else {
            appendTextFragment(parentElement, data);
        }

        var nodes = [];

        while (parentElement.childNodes[index] !== nextSibling) {
            nodes.push(parentElement.childNodes[index]);
            index++;
        }

        return nodes;
    }

    function autoredraw(callback, object) {
        return function (e) {
            e = e || event;
            m.redraw.strategy('diff');
            m.startComputation();
            try {
                return callback.call(object, e);
            } finally {
                endFirstComputation();
            }
        };
    }

    var html;
    var documentNode = {
        appendChild: function (node) {
            if (html === undefined) html = $document.createElement('html');
            if ($document.documentElement &&
					$document.documentElement !== node) {
                $document.replaceChild(node, $document.documentElement);
            } else {
                $document.appendChild(node);
            }

            this.childNodes = $document.childNodes;
        },

        insertBefore: function (node) {
            this.appendChild(node);
        },

        childNodes: []
    };

    var nodeCache = [];
    var cellCache = {};

    m.render = function (root, cell, forceRecreation) {
        if (!root) {
            throw new Error('Ensure the DOM element being passed to ' +
				'm.route/m.mount/m.render is not undefined.');
        }
        var configs = [];
        var id = getCellCacheKey(root);
        var isDocumentRoot = root === $document;
        var node;

        if (isDocumentRoot || root === $document.documentElement) {
            node = documentNode;
        } else {
            node = root;
        }

        if (isDocumentRoot && cell.tag !== 'html') {
            cell = {tag: 'html', attrs: {}, children: cell};
        }

        if (cellCache[id] === undefined) clear(node.childNodes);
        if (forceRecreation === true) reset(root);

        cellCache[id] = build(
            node,
            null,
            undefined,
            undefined,
            cell,
            cellCache[id],
            false,
            0,
            null,
            undefined,
            configs);

        forEach(configs, function (config) { config(); });
    };

    function getCellCacheKey(element) {
        var index = nodeCache.indexOf(element);
        return index < 0 ? nodeCache.push(element) - 1 : index;
    }

    m.trust = function (value) {
        value = new String(value); // eslint-disable-line no-new-wrappers
        value.$trusted = true;
        return value;
    };

    function gettersetter(store) {
        function prop() {
            if (arguments.length) store = arguments[0];
            return store;
        }

        prop.toJSON = function () {
            if (store && isFunction(store.toJSON)) return store.toJSON();
            return store;
        };

        return prop;
    }

    m.prop = function (store) {
        if ((store != null && (isObject(store) || isFunction(store)) ||
					((typeof Promise !== 'undefined') &&
						(store instanceof Promise))) &&
				isFunction(store.then)) {
            return propify(store);
        }

        return gettersetter(store);
    };

    var roots = [];
    var components = [];
    var controllers = [];
    var lastRedrawId = null;
    var lastRedrawCallTime = 0;
    var computePreRedrawHook = null;
    var computePostRedrawHook = null;
    var topComponent;
    var FRAME_BUDGET = 16; // 60 frames per second = 1 call per 16 ms

    function parameterize(component, args) {
        function controller() {
            /* eslint-disable no-invalid-this */
            return (component.controller || noop).apply(this, args) || this;
            /* eslint-enable no-invalid-this */
        }

        if (component.controller) {
            controller.prototype = component.controller.prototype;
        }

        function view(ctrl) {
            var currentArgs = [ctrl].concat(args);
            for (var i = 1; i < arguments.length; i++) {
                currentArgs.push(arguments[i]);
            }

            return component.view.apply(component, currentArgs);
        }

        view.$original = component.view;
        var output = {controller: controller, view: view};
        if (args[0] && args[0].key != null) output.attrs = {key: args[0].key};
        return output;
    }

    m.component = function (component) {
        var args = new Array(arguments.length - 1);

        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }

        return parameterize(component, args);
    };

    var currentRoute, previousRoute;

    function checkPrevented(component, root, index, isPrevented) {
        if (!isPrevented) {
            m.redraw.strategy('all');
            m.startComputation();
            roots[index] = root;
            var currentComponent;

            if (component) {
                currentComponent = topComponent = component;
            } else {
                currentComponent = topComponent = component = {controller: noop};
            }

            var controller = new (component.controller || noop)();

            // controllers may call m.mount recursively (via m.route redirects,
            // for example)
            // this conditional ensures only the last recursive m.mount call is
            // applied
            if (currentComponent === topComponent) {
                controllers[index] = controller;
                components[index] = component;
            }
            endFirstComputation();
            if (component === null) {
                removeRootElement(root, index);
            }
            return controllers[index];
        } else {
            if (component == null) {
                removeRootElement(root, index);
            }

            if (previousRoute) {
                currentRoute = previousRoute;
            }
        }
    }

    m.mount = m.module = function (root, component) {
        if (!root) {
            throw new Error('Ensure the DOM element being passed to ' +
				'm.route/m.mount/m.render is not undefined.');
        }

        var index = roots.indexOf(root);
        if (index < 0) index = roots.length;

        var isPrevented = false;
        var event = {
            preventDefault: function () {
                isPrevented = true;
                computePreRedrawHook = computePostRedrawHook = null;
            }
        };

        forEach(unloaders, function (unloader) {
            unloader.handler.call(unloader.controller, event);
            unloader.controller.onunload = null;
        });

        if (isPrevented) {
            forEach(unloaders, function (unloader) {
                unloader.controller.onunload = unloader.handler;
            });
        } else {
            unloaders = [];
        }

        if (controllers[index] && isFunction(controllers[index].onunload)) {
            controllers[index].onunload(event);
        }

        return checkPrevented(component, root, index, isPrevented);
    };

    function removeRootElement(root, index) {
        roots.splice(index, 1);
        controllers.splice(index, 1);
        components.splice(index, 1);
        reset(root);
        nodeCache.splice(getCellCacheKey(root), 1);
        unloaders = [];
    }

    var redrawing = false;
    m.redraw = function (force) {
        if (redrawing) return;
        redrawing = true;
        if (force) forcing = true;

        try {
            // lastRedrawId is a positive number if a second redraw is requested
            // before the next animation frame
            // lastRedrawId is null if it's the first redraw and not an event
            // handler
            if (lastRedrawId && !force) {
                // when setTimeout: only reschedule redraw if time between now
                // and previous redraw is bigger than a frame, otherwise keep
                // currently scheduled timeout
                // when rAF: always reschedule redraw
                if ($requestAnimationFrame === global.requestAnimationFrame ||
						new Date() - lastRedrawCallTime > FRAME_BUDGET) {
                    if (lastRedrawId > 0) $cancelAnimationFrame(lastRedrawId);
                    lastRedrawId = $requestAnimationFrame(redraw, FRAME_BUDGET);
                }
            } else {
                redraw();
                lastRedrawId = $requestAnimationFrame(function () {
                    lastRedrawId = null;
                }, FRAME_BUDGET);
            }
        } finally {
            redrawing = forcing = false;
        }
    };

    m.redraw.strategy = m.prop();
    function redraw() {
        if (computePreRedrawHook) {
            computePreRedrawHook();
            computePreRedrawHook = null;
        }
        forEach(roots, function (root, i) {
            var component = components[i];
            if (controllers[i]) {
                var args = [controllers[i]];
                m.render(root,
                    component.view ? component.view(controllers[i], args) : '');
            }
        });
        // after rendering within a routed context, we need to scroll back to
        // the top, and fetch the document title for history.pushState
        if (computePostRedrawHook) {
            computePostRedrawHook();
            computePostRedrawHook = null;
        }
        lastRedrawId = null;
        lastRedrawCallTime = new Date();
        m.redraw.strategy('diff');
    }

    function endFirstComputation() {
        if (m.redraw.strategy() === 'none') {
            pendingRequests--;
            m.redraw.strategy('diff');
        } else {
            m.endComputation();
        }
    }

    m.withAttr = function (prop, withAttrCallback, callbackThis) {
        return function (e) {
            e = e || window.event;
            /* eslint-disable no-invalid-this */
            var currentTarget = e.currentTarget || this;
            var _this = callbackThis || this;
            /* eslint-enable no-invalid-this */
            var target = prop in currentTarget ?
                currentTarget[prop] :
                currentTarget.getAttribute(prop);
            withAttrCallback.call(_this, target);
        };
    };

    // routing
    var modes = {pathname: '', hash: '#', search: '?'};
    var redirect = noop;
    var isDefaultRoute = false;
    var routeParams;

	m.route = function (root, arg1, arg2, vdom) { // eslint-disable-line
        // m.route()
        if (arguments.length === 0) return currentRoute;
        // m.route(el, defaultRoute, routes)
        if (arguments.length === 3 && isString(arg1)) {
            redirect = function (source) {
                var path = currentRoute = normalizeRoute(source);
                if (!routeByValue(root, arg2, path)) {
                    if (isDefaultRoute) {
                        throw new Error('Ensure the default route matches ' +
							'one of the routes defined in m.route');
                    }

                    isDefaultRoute = true;
                    m.route(arg1, true);
                    isDefaultRoute = false;
                }
            };

            var listener = m.route.mode === 'hash' ?
                'onhashchange' :
                'onpopstate';

            global[listener] = function () {
                var path = $location[m.route.mode];
                if (m.route.mode === 'pathname') path += $location.search;
                if (currentRoute !== normalizeRoute(path)) redirect(path);
            };

            computePreRedrawHook = setScroll;
            global[listener]();

            return;
        }

        // config: m.route
        if (root.addEventListener || root.attachEvent) {
            var base = m.route.mode !== 'pathname' ? $location.pathname : '';
            root.href = base + modes[m.route.mode] + vdom.attrs.href;
            if (root.addEventListener) {
                root.removeEventListener('click', routeUnobtrusive);
                root.addEventListener('click', routeUnobtrusive);
            } else {
                root.detachEvent('onclick', routeUnobtrusive);
                root.attachEvent('onclick', routeUnobtrusive);
            }

            return;
        }
        // m.route(route, params, shouldReplaceHistoryEntry)
        if (isString(root)) {
            previousRoute = currentRoute;
            currentRoute = root;

            var args = arg1 || {};
            var queryIndex = currentRoute.indexOf('?');
            var params;

            if (queryIndex > -1) {
                params = parseQueryString(currentRoute.slice(queryIndex + 1));
            } else {
                params = {};
            }

            for (var i in args) {
                if (hasOwn.call(args, i)) {
                    params[i] = args[i];
                }
            }

            var querystring = buildQueryString(params);
            var currentPath;

            if (queryIndex > -1) {
                currentPath = currentRoute.slice(0, queryIndex);
            } else {
                currentPath = currentRoute;
            }

            if (querystring) {
                currentRoute = currentPath +
					(currentPath.indexOf('?') === -1 ? '?' : '&') +
					querystring;
            }

            var replaceHistory =
				(arguments.length === 3 ? arg2 : arg1) === true ||
				previousRoute === currentRoute;

            if (global.history.pushState) {
                var method = replaceHistory ? 'replaceState' : 'pushState';
                computePreRedrawHook = setScroll;
                computePostRedrawHook = function () {
                    try {
                        global.history[method](null, $document.title,
                            modes[m.route.mode] + currentRoute);
                    } catch (err) {
                        // In the event of a pushState or replaceState failure,
                        // fallback to a standard redirect. This is specifically
                        // to address a Safari security error when attempting to
                        // call pushState more than 100 times.
                        $location[m.route.mode] = currentRoute;
                    }
                };
                redirect(modes[m.route.mode] + currentRoute);
            } else {
                $location[m.route.mode] = currentRoute;
                redirect(modes[m.route.mode] + currentRoute);
            }

            previousRoute = null;
        }
    };

    m.route.param = function (key) {
        if (!routeParams) {
            throw new Error('You must call m.route(element, defaultRoute, ' +
				'routes) before calling m.route.param()');
        }

        if (!key) {
            return routeParams;
        }

        return routeParams[key];
    };

    m.route.mode = 'search';

    function normalizeRoute(route) {
        return route.slice(modes[m.route.mode].length);
    }

    function routeByValue(root, router, path) {
        routeParams = {};

        var queryStart = path.indexOf('?');
        if (queryStart !== -1) {
            routeParams = parseQueryString(
                path.substr(queryStart + 1, path.length));
            path = path.substr(0, queryStart);
        }

        // Get all routes and check if there's
        // an exact match for the current path
        var keys = Object.keys(router);
        var index = keys.indexOf(path);

        if (index !== -1){
            m.mount(root, router[keys [index]]);
            return true;
        }

        for (var route in router) {
            if (hasOwn.call(router, route)) {
                if (route === path) {
                    m.mount(root, router[route]);
                    return true;
                }

                var matcher = new RegExp('^' + route
                    .replace(/:[^\/]+?\.{3}/g, '(.*?)')
                    .replace(/:[^\/]+/g, '([^\\/]+)') + '\/?$');

                if (matcher.test(path)) {
                    /* eslint-disable no-loop-func */
                    path.replace(matcher, function () {
                        var keys = route.match(/:[^\/]+/g) || [];
                        var values = [].slice.call(arguments, 1, -2);
                        forEach(keys, function (key, i) {
                            routeParams[key.replace(/:|\./g, '')] =
								decodeURIComponent(values[i]);
                        });
                        m.mount(root, router[route]);
                    });
                    /* eslint-enable no-loop-func */
                    return true;
                }
            }
        }
    }

    function routeUnobtrusive(e) {
        e = e || event;
        if (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return;

        if (e.preventDefault) {
            e.preventDefault();
        } else {
            e.returnValue = false;
        }

        var currentTarget = e.currentTarget || e.srcElement;
        var args;

        if (m.route.mode === 'pathname' && currentTarget.search) {
            args = parseQueryString(currentTarget.search.slice(1));
        } else {
            args = {};
        }

        while (currentTarget && !/a/i.test(currentTarget.nodeName)) {
            currentTarget = currentTarget.parentNode;
        }

        // clear pendingRequests because we want an immediate route change
        pendingRequests = 0;
        m.route(currentTarget[m.route.mode]
            .slice(modes[m.route.mode].length), args);
    }

    function setScroll() {
        if (m.route.mode !== 'hash' && $location.hash) {
            $location.hash = $location.hash;
        } else {
            global.scrollTo(0, 0);
        }
    }

    function buildQueryString(object, prefix) {
        var duplicates = {};
        var str = [];

        for (var prop in object) {
            if (hasOwn.call(object, prop)) {
                var key = prefix ? prefix + '[' + prop + ']' : prop;
                var value = object[prop];

                if (value === null) {
                    str.push(encodeURIComponent(key));
                } else if (isObject(value)) {
                    str.push(buildQueryString(value, key));
                } else if (isArray(value)) {
                    var keys = [];
                    duplicates[key] = duplicates[key] || {};
                    /* eslint-disable no-loop-func */
                    forEach(value, function (item) {
                        /* eslint-enable no-loop-func */
                        if (!duplicates[key][item]) {
                            duplicates[key][item] = true;
                            keys.push(encodeURIComponent(key) + '=' +
								encodeURIComponent(item));
                        }
                    });
                    str.push(keys.join('&'));
                } else if (value !== undefined) {
                    str.push(encodeURIComponent(key) + '=' +
						encodeURIComponent(value));
                }
            }
        }

        return str.join('&');
    }

    function parseQueryString(str) {
        if (str === '' || str == null) return {};
        if (str.charAt(0) === '?') str = str.slice(1);

        var pairs = str.split('&');
        var params = {};

        forEach(pairs, function (string) {
            var pair = string.split('=');
            var key = decodeURIComponent(pair[0]);
            var value = pair.length === 2 ? decodeURIComponent(pair[1]) : null;
            if (params[key] != null) {
                if (!isArray(params[key])) params[key] = [params[key]];
                params[key].push(value);
            } else params[key] = value;
        });

        return params;
    }

    m.route.buildQueryString = buildQueryString;
    m.route.parseQueryString = parseQueryString;

    function reset(root) {
        var cacheKey = getCellCacheKey(root);
        clear(root.childNodes, cellCache[cacheKey]);
        cellCache[cacheKey] = undefined;
    }

    m.deferred = function () {
        var deferred = new Deferred();
        deferred.promise = propify(deferred.promise);
        return deferred;
    };

    function propify(promise, initialValue) {
        var prop = m.prop(initialValue);
        promise.then(prop);
        prop.then = function (resolve, reject) {
            return propify(promise.then(resolve, reject), initialValue);
        };

        prop['catch'] = prop.then.bind(null, null);
        return prop;
    }
    // Promiz.mithril.js | Zolmeister | MIT
    // a modified version of Promiz.js, which does not conform to Promises/A+
    // for two reasons:
    //
    // 1) `then` callbacks are called synchronously (because setTimeout is too
    //    slow, and the setImmediate polyfill is too big
    //
    // 2) throwing subclasses of Error cause the error to be bubbled up instead
    //    of triggering rejection (because the spec does not account for the
    //    important use case of default browser error handling, i.e. message w/
    //    line number)

    var RESOLVING = 1;
    var REJECTING = 2;
    var RESOLVED = 3;
    var REJECTED = 4;

    function Deferred(onSuccess, onFailure) {
        var self = this;
        var state = 0;
        var promiseValue = 0;
        var next = [];

        self.promise = {};

        self.resolve = function (value) {
            if (!state) {
                promiseValue = value;
                state = RESOLVING;

                fire();
            }

            return self;
        };

        self.reject = function (value) {
            if (!state) {
                promiseValue = value;
                state = REJECTING;

                fire();
            }

            return self;
        };

        self.promise.then = function (onSuccess, onFailure) {
            var deferred = new Deferred(onSuccess, onFailure);

            if (state === RESOLVED) {
                deferred.resolve(promiseValue);
            } else if (state === REJECTED) {
                deferred.reject(promiseValue);
            } else {
                next.push(deferred);
            }

            return deferred.promise;
        };

        function finish(type) {
            state = type || REJECTED;
            next.map(function (deferred) {
                if (state === RESOLVED) {
                    deferred.resolve(promiseValue);
                } else {
                    deferred.reject(promiseValue);
                }
            });
        }

        function thennable(then, success, failure, notThennable) {
            if (((promiseValue != null && isObject(promiseValue)) ||
					isFunction(promiseValue)) && isFunction(then)) {
                try {
                    // count protects against abuse calls from spec checker
                    var count = 0;
                    then.call(promiseValue, function (value) {
                        if (count++) return;
                        promiseValue = value;
                        success();
                    }, function (value) {
                        if (count++) return;
                        promiseValue = value;
                        failure();
                    });
                } catch (e) {
                    m.deferred.onerror(e);
                    promiseValue = e;
                    failure();
                }
            } else {
                notThennable();
            }
        }

        function fire() {
            // check if it's a thenable
            var then;
            try {
                then = promiseValue && promiseValue.then;
            } catch (e) {
                m.deferred.onerror(e);
                promiseValue = e;
                state = REJECTING;
                return fire();
            }

            if (state === REJECTING) {
                m.deferred.onerror(promiseValue);
            }

            thennable(then, function () {
                state = RESOLVING;
                fire();
            }, function () {
                state = REJECTING;
                fire();
            }, function () {
                try {
                    if (state === RESOLVING && isFunction(onSuccess)) {
                        promiseValue = onSuccess(promiseValue);
                    } else if (state === REJECTING && isFunction(onFailure)) {
                        promiseValue = onFailure(promiseValue);
                        state = RESOLVING;
                    }
                } catch (e) {
                    m.deferred.onerror(e);
                    promiseValue = e;
                    return finish();
                }

                if (promiseValue === self) {
                    promiseValue = TypeError();
                    finish();
                } else {
                    thennable(then, function () {
                        finish(RESOLVED);
                    }, finish, function () {
                        finish(state === RESOLVING && RESOLVED);
                    });
                }
            });
        }
    }

    m.deferred.onerror = function (e) {
        if (type.call(e) === '[object Error]' &&
				!/ Error/.test(e.constructor.toString())) {
            pendingRequests = 0;
            throw e;
        }
    };

    m.sync = function (args) {
        var deferred = m.deferred();
        var outstanding = args.length;
        var results = [];
        var method = 'resolve';

        function synchronizer(pos, resolved) {
            return function (value) {
                results[pos] = value;
                if (!resolved) method = 'reject';
                if (--outstanding === 0) {
                    deferred.promise(results);
                    deferred[method](results);
                }
                return value;
            };
        }

        if (args.length > 0) {
            forEach(args, function (arg, i) {
                arg.then(synchronizer(i, true), synchronizer(i, false));
            });
        } else {
            deferred.resolve([]);
        }

        return deferred.promise;
    };

    function identity(value) { return value; }

    function handleJsonp(options) {
        var callbackKey = options.callbackName || 'mithril_callback_' +
			new Date().getTime() + '_' +
			(Math.round(Math.random() * 1e16)).toString(36);

        var script = $document.createElement('script');

        global[callbackKey] = function (resp) {
            script.parentNode.removeChild(script);
            options.onload({
                type: 'load',
                target: {
                    responseText: resp
                }
            });
            global[callbackKey] = undefined;
        };

        script.onerror = function () {
            script.parentNode.removeChild(script);

            options.onerror({
                type: 'error',
                target: {
                    status: 500,
                    responseText: JSON.stringify({
                        error: 'Error making jsonp request'
                    })
                }
            });
            global[callbackKey] = undefined;

            return false;
        };

        script.onload = function () {
            return false;
        };

        script.src = options.url +
			(options.url.indexOf('?') > 0 ? '&' : '?') +
			(options.callbackKey ? options.callbackKey : 'callback') +
			'=' + callbackKey +
			'&' + buildQueryString(options.data || {});

        $document.body.appendChild(script);
    }

    function createXhr(options) {
        var xhr = new global.XMLHttpRequest();
        xhr.open(options.method, options.url, true, options.user,
            options.password);

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                if (xhr.status >= 200 && xhr.status < 300) {
                    options.onload({type: 'load', target: xhr});
                } else {
                    options.onerror({type: 'error', target: xhr});
                }
            }
        };

        if (options.serialize === JSON.stringify &&
				options.data &&
				options.method !== 'GET') {
            xhr.setRequestHeader('Content-Type',
                'application/json; charset=utf-8');
        }

        if (options.deserialize === JSON.parse) {
            xhr.setRequestHeader('Accept', 'application/json, text/*');
        }

        if (isObject(options.headers)) {
            for (var header in options.headers) {
                if (hasOwn.call(options.headers, header)) {
                    xhr.setRequestHeader(header, options.headers[header]);
                }
            }
        }

        if (isFunction(options.config)) {
            var maybeXhr = options.config(xhr, options);
            if (maybeXhr != null) xhr = maybeXhr;
        }

        var data = options.method === 'GET' || !options.data ? '' : options.data;

        if (data && !isString(data) && data.constructor !== global.FormData) {
            throw new Error('Request data should be either be a string or ' +
				'FormData. Check the `serialize` option in `m.request`');
        }

        xhr.send(data);
        return xhr;
    }

    function ajax(options) {
        if (options.dataType && options.dataType.toLowerCase() === 'jsonp') {
            return handleJsonp(options);
        } else {
            return createXhr(options);
        }
    }

    function bindData(options, data, serialize) {
        if (options.method === 'GET' && options.dataType !== 'jsonp') {
            var prefix = options.url.indexOf('?') < 0 ? '?' : '&';
            var querystring = buildQueryString(data);
            options.url += (querystring ? prefix + querystring : '');
        } else {
            options.data = serialize(data);
        }
    }

    function parameterizeUrl(url, data) {
        if (data) {
            url = url.replace(/:[a-z]\w+/gi, function (token){
                var key = token.slice(1);
                var value = data[key] || token;
                delete data[key];
                return value;
            });
        }
        return url;
    }

    m.request = function (options) {
        if (options.background !== true) m.startComputation();
        var deferred = new Deferred();
        var isJSONP = options.dataType &&
			options.dataType.toLowerCase() === 'jsonp';

        var serialize, deserialize, extract;

        if (isJSONP) {
            serialize = options.serialize =
			deserialize = options.deserialize = identity;

            extract = function (jsonp) { return jsonp.responseText; };
        } else {
            serialize = options.serialize = options.serialize || JSON.stringify;

            deserialize = options.deserialize =
				options.deserialize || JSON.parse;
            extract = options.extract || function (xhr) {
                if (xhr.responseText.length || deserialize !== JSON.parse) {
                    return xhr.responseText;
                } else {
                    return null;
                }
            };
        }

        options.method = (options.method || 'GET').toUpperCase();
        options.url = parameterizeUrl(options.url, options.data);
        bindData(options, options.data, serialize);
        options.onload = options.onerror = function (ev) {
            try {
                ev = ev || event;
                var response = deserialize(extract(ev.target, options));
                if (ev.type === 'load') {
                    if (options.unwrapSuccess) {
                        response = options.unwrapSuccess(response, ev.target);
                    }

                    if (isArray(response) && options.type) {
                        forEach(response, function (res, i) {
                            response[i] = new options.type(res);
                        });
                    } else if (options.type) {
                        response = new options.type(response);
                    }

                    deferred.resolve(response);
                } else {
                    if (options.unwrapError) {
                        response = options.unwrapError(response, ev.target);
                    }

                    deferred.reject(response);
                }
            } catch (e) {
                deferred.reject(e);
                m.deferred.onerror(e);
            } finally {
                if (options.background !== true) m.endComputation();
            }
        };

        ajax(options);
        deferred.promise = propify(deferred.promise, options.initialValue);
        return deferred.promise;
    };

    return m;
}); // eslint-disable-line;'use strict';

/* jshint undef: true, unused: true */

if (!window.component) {
    window.dot = function(obj, is, value, deep) {
        if (typeof is === 'string') {
            return window.dot(obj, is.split('.'), value, deep);
        } else if (is.length === 1 && value !== undefined) {
            obj[is[0]] = value;
            return value;
        } else if (is.length === 0) {
            return obj;
        } else if (!obj) {
            return obj;
        } else {
            if (deep && value && !(is[0] in obj)) { obj[is[0]] = {}; }
            var next = obj[is[0]];
            return window.dot(typeof next === 'function' ? next.apply(obj) : next, is.slice(1), value, deep);
        }
    };

    window.component = function(name, obj) {
        if (!window.components) {
            window.components = {};
        }
        if (typeof obj === 'function') {
            obj(window.dot(window.components, name) || window.dot(window.components, name, {}, true));
        } else {
            return window.dot(window.components, name) || window.dot(window.components, name, obj, true);
        }
    };

    window.vprop = function(val, validator, errorText, property) {
        var prop = property || m.prop(), 
            f = function() {
                if (arguments.length) {
                    f.valid = validator(arguments[0]);
                    return prop(arguments[0]);
                } else {
                    return prop();
                }
            };
        f.errorText = errorText;
        f(val);
        return f;
    };
}
;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

if (!window.components) {
    window.components = {};
}

if (!window.components.t) {
    var overrides = {};

    window.components.t = function(key, def) {
        return (key in overrides) ? overrides[key] : window.jQuery.i18n.map[key] || (typeof def === 'undefined' ? key : def);
    };

    window.components.t.set = function(key, text) {
        overrides[key] = text;
    };

    window.components.t.p = function() {
        return window.jQuery.i18n.prop.apply(window.jQuery.i18n, arguments);
    };

    window.components.t.n = function(key, count) {
        if (count == 1) {
            return window.jQuery.i18n.prop(key + '.s', count);
        } else {
            return window.jQuery.i18n.prop(key + '.m', count);
        }
    };

    window.components.t.nn = function(key, count) {
        return count + ' ' + window.components.t.n(key, count);
    };
}

;(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _jquery = __webpack_require__(1);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _EmojiEditor = __webpack_require__(3);

	var _EmojiEditor2 = _interopRequireDefault(_EmojiEditor);

	var _EmojiCategory = __webpack_require__(7);

	var _EmojiCategory2 = _interopRequireDefault(_EmojiCategory);

	var _Converters = __webpack_require__(4);

	var _Converters2 = _interopRequireDefault(_Converters);

	var _rmTooltip = __webpack_require__(14);

	var _rmTooltip2 = _interopRequireDefault(_rmTooltip);

	var _data = __webpack_require__(15);

	var _data2 = _interopRequireDefault(_data);

	var _defaults = __webpack_require__(6);

	var _defaults2 = _interopRequireDefault(_defaults);

	var _picker2 = __webpack_require__(16);

	var _picker3 = _interopRequireDefault(_picker2);

	var _icon_tooltip = __webpack_require__(17);

	var _icon_tooltip2 = _interopRequireDefault(_icon_tooltip);

	__webpack_require__(9);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	"use strict";

	var EmojiPicker = function () {

	    /**
	     *
	     * @param {undefined|Object} options
	     */
	    function EmojiPicker() {
	        var _this = this;

	        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

	        _classCallCheck(this, EmojiPicker);

	        this._callback = undefined;

	        /**
	         * A copy of the defaults object so that state is not
	         * mutated with new instances.
	         *
	         * @type {*}
	         */
	        this.defaults = Object.assign({}, _defaults2.default);

	        if ((typeof options === "undefined" ? "undefined" : _typeof(options)) === "object") {
	            this._setDefaults(options);
	        }

	        if (typeof options === "function") {
	            this._callback = options;
	        }

	        /**
	         *
	         * @type {Array.<EmojiCategory>}
	         */
	        this.categories = this._getCategories();

	        /**
	         * @type {jQuery}
	         */
	        this.$picker = this._getPicker();

	        /**
	         * @type {jQuery}
	         */
	        this.$active_title = this.$picker.find('#active-title');

	        /**
	         * @type {jQuery}
	         */
	        this.$preview_emoji = this.$picker.find('#emoji-large-preview');

	        /**
	         * @type {jQuery}
	         */
	        this.$preview_name = this.$picker.find('#emoji-name');

	        /**
	         * @type {jQuery}
	         */
	        this.$preview_colon = this.$picker.find('#colon-display');

	        /**
	         * @type {jQuery}
	         */
	        this.$content = this.$picker.find('.emoji-content');

	        /**
	         * @type {jQuery}
	         */
	        this.$default_footer = this.$picker.find('.default-content');

	        /**
	         * @type {jQuery}
	         */
	        this.$preview = this.$picker.find('.emoji-preview');

	        /**
	         * @type {jQuery}
	         */
	        this.$search = this.$picker.find('.search-emojis');

	        /**
	         *
	         * @type {HTMLElement|undefined}
	         * @private
	         */
	        this._icon = undefined;

	        /**
	         *
	         * @type {HTMLElement|undefined}
	         * @private
	         */
	        this._container = undefined;

	        /**
	         *
	         * @type {HTMLInputElement|HTMLTextAreaElement|HTMLElement|undefined}
	         * @private
	         */
	        this._input = undefined;

	        /**
	         * Keeps track of placing the emoji in the input, getting
	         * the contents of the editor
	         *
	         * @type {EmojiEditor|undefined}
	         */
	        this.editor = undefined;

	        var _open = false;
	        Object.defineProperty(this, 'picker_open', {
	            get: function get() {
	                return _open;
	            },
	            set: function set(value) {
	                if (value !== _open) {
	                    _open = value;
	                    if (_open) {
	                        _this.openPicker();
	                    } else {
	                        _this.$picker.detach();
	                    }
	                }
	            }
	        });

	        var _active_cat = void 0;
	        Object.defineProperty(this, 'active_category', {
	            get: function get() {
	                return _active_cat;
	            },
	            set: function set(value) {
	                if (!_active_cat || value instanceof _EmojiCategory2.default && value.title !== _active_cat.title) {
	                    _active_cat = value;
	                    _this.setActiveCategory();
	                }
	            }
	        });

	        var _emoji = void 0;
	        Object.defineProperty(this, 'active_emoji', {
	            get: function get() {
	                return _emoji;
	            },
	            set: function set(value) {
	                if (!_emoji || !value || value.full_name !== _emoji.full_name) {
	                    _emoji = value;
	                    _this._updatePreview();
	                }
	            }
	        });

	        this.active_category = this.categories[0];

	        this._onScroll()._onCatClick()._onSearch()._setCategoryTooltips();
	    }

	    /**
	     * Renders html or text containing emojis
	     *
	     * @param str
	     * @returns {string}
	     */


	    _createClass(EmojiPicker, [{
	        key: "listenOn",


	        /**
	         *
	         * @param {HTMLElement} icon
	         * @param {HTMLElement} container
	         * @param {HTMLTextAreaElement|HTMLElement} input
	         */
	        value: function listenOn(icon, container, input) {
	            this._removeOldEvents();
	            this._icon = icon;
	            this._container = container;
	            this._input = input;
	            this.editor = new _EmojiEditor2.default(input, this.defaults.prevent_new_line);

	            this._onIconClick();
	        }

	        /**
	         * Appends the emoji picker to the DOM
	         *
	         * @returns {EmojiPicker}
	         */

	    }, {
	        key: "openPicker",
	        value: function openPicker() {

	            var tooltip = new _rmTooltip2.default(this._icon, this._container, this.$picker);
	            tooltip.center();
	            //If the developer supplied a function to position the tooltip
	            if (typeof this.defaults.positioning === "function") {
	                this.defaults.positioning(tooltip);
	            } else {

	                switch (this.defaults.positioning) {
	                    case "autoplace":
	                        tooltip.autoPlace(43, 10);
	                        break;
	                    case "vertical":
	                        tooltip.autoPlaceVertically(10);
	                        break;
	                    case "horizontal":
	                        tooltip.autoPlaceHorizontally(10);
	                        break;
	                    default:
	                        tooltip.autoPlace(43, 10);
	                        break;
	                }
	            }

	            this._onTooltipClick(tooltip, event);
	            this.$content.get(0).scrollTop = this.active_category.offset_top;

	            return this;
	        }

	        /**
	         * Getter for the input's text.
	         *
	         * @returns {*}
	         */

	    }, {
	        key: "getText",
	        value: function getText() {
	            if (this.editor) {
	                return this.editor.getText();
	            }

	            throw new Error("Did you call this listenOn method first? The listenOn method constructs an instance of EmojiEditor and it appears to be undefined.");
	        }

	        /**
	         * Empties out the input from the editor.
	         */

	    }, {
	        key: "emptyInput",
	        value: function emptyInput() {
	            if (this.editor) {
	                this.editor.empty();
	            } else {
	                console.log("Did you call the listenOn method first? The EmojiEditor instance is undefined.");
	            }
	        }

	        /**
	         * Updates the dom based on the category that became active.
	         *
	         * @returns {EmojiPicker}
	         */

	    }, {
	        key: "setActiveCategory",
	        value: function setActiveCategory() {

	            var picker = this;
	            this.$picker.find('.select-category').each( /**@this {HTMLElement}*/function () {
	                var title = this.getAttribute('data-name');
	                if (title === picker.active_category.title) {
	                    this.classList.add('active');
	                    picker.$active_title.text(picker.active_category.title);
	                } else {
	                    this.classList.remove('active');
	                }
	            });

	            return this;
	        }

	        /**
	         * Find an emoji category by name.
	         *
	         * @param name
	         * @returns {EmojiCategory}
	         */

	    }, {
	        key: "getCategory",
	        value: function getCategory(name) {
	            return this.categories.find(function (cat) {
	                return cat.title === name;
	            });
	        }

	        /**
	         * Finds an individual emoji by name. If the category is known
	         * it can be supplied as the second argument to speed up the search.
	         *
	         * @param {String} name
	         * @param {EmojiCategory} category
	         * @returns {*}
	         */

	    }, {
	        key: "getEmoji",
	        value: function getEmoji(name) {
	            var category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

	            if (category) {
	                return category.emojis.find(function (emote) {
	                    return emote.full_name === name;
	                });
	            }

	            return this.categories.find(function (cat) {
	                return cat.emojis.find(function (emote) {
	                    return emote.full_name === name;
	                });
	            });
	        }

	        /**
	         * Sets default options based on developer-supplied parameters
	         *
	         * @param options
	         * @private
	         */

	    }, {
	        key: "_setDefaults",
	        value: function _setDefaults(options) {
	            var _this2 = this;

	            var keys = Object.keys(options);
	            keys.forEach(function (key) {
	                if (_this2.defaults.hasOwnProperty(key)) {
	                    _this2.defaults[key] = options[key];
	                }
	            });

	            if (this.defaults.use_sheets) {
	                _Converters2.default.setSheets(this.defaults.sheets);
	            }
	        }

	        /**
	         * Events from EmojiCategory or Emoji bubble up through a callback
	         *
	         * @param action
	         * @param emoji
	         * @param category
	         * @private
	         */

	    }, {
	        key: "_dispatchBubble",
	        value: function _dispatchBubble(action, emoji, category) {

	            var events = _defaults2.default.events;
	            switch (action) {
	                case events.SELECTED:
	                    this._handleSelection(emoji, category);
	                    break;
	                case events.EMOJI_MOUSEENTER:
	                    this.active_emoji = emoji;
	                    break;
	                case events.EMOJI_MOUSELEAVE:
	                    this.active_emoji = undefined;
	                    break;
	                default:
	                    break;
	            }
	        }

	        /**
	         * When an emoji gets clicked on the selection bubbles up
	         * to the EmojiPicker object. First, we place the emoji in
	         * the input and then fire off any callback that were supplied.
	         *
	         *
	         * @param {Emoji} emoji
	         * @param {EmojiCategory} category
	         * @private
	         */

	    }, {
	        key: "_handleSelection",
	        value: function _handleSelection(emoji, category) {

	            var node = this.editor.placeEmoji(emoji);

	            if (typeof this._callback === "function") {
	                this._callback(emoji, category, node);
	            }

	            if (typeof this.defaults.callback === "function") {
	                this.defaults.callback(emoji, category, node);
	            }

	            //Close the picker
	            this.picker_open = false;
	            this.active_emoji = undefined;
	        }

	        /**
	         *
	         * @returns {Array<EmojiCategory>}
	         * @private
	         */

	    }, {
	        key: "_getCategories",
	        value: function _getCategories() {
	            var _this3 = this;

	            var cats = this.defaults.categories.map(function (cat) {
	                return _EmojiCategory2.default.factory(cat, _data2.default[cat.title], _this3._dispatchBubble.bind(_this3));
	            });

	            cats[0].$category.addClass('first');
	            return cats;
	        }

	        /**
	         * Retrieves the emoji picker
	         *
	         * @returns {jQuery|HTMLElement}
	         * @private
	         */

	    }, {
	        key: "_getPicker",
	        value: function _getPicker() {
	            var $picker = (0, _jquery2.default)((0, _picker3.default)({
	                default_content: _defaults2.default.default_footer_message,
	                categories: this.categories.map(function (cat) {
	                    return cat.exportContents();
	                }),
	                search_icon: this.defaults.search_icon
	            }));

	            var $contents = $picker.find('.emoji-content');

	            this.categories.forEach(function (cat) {
	                $contents.append(cat.getMarkup());
	            });

	            return $picker;
	        }

	        /**
	         * Sets a helper tooltip on each category's icon
	         *
	         * @returns {EmojiPicker}
	         * @private
	         */

	    }, {
	        key: "_setCategoryTooltips",
	        value: function _setCategoryTooltips() {
	            //Only proceed if the picker has been initialized and the developer opted to show tooltips
	            if (this.$picker && this.defaults.show_icon_tooltips) {
	                //cache an array of category icon wrappers
	                var $cats = this.$picker.find('.select-category');
	                //Set up a reference to the class instance
	                var _picker = this;
	                var tooltip = void 0;
	                $cats.off('mouseenter.emoji').on('mouseenter.emoji', /**@this {HTMLElement}*/function (event) {
	                    //On mouseenter, get the name of the category, then create the tooltip
	                    var title = this.getAttribute('data-name');
	                    tooltip = new _rmTooltip2.default(this, _picker.$picker.get(0), (0, _jquery2.default)((0, _icon_tooltip2.default)({
	                        text: title
	                    })));

	                    tooltip.below();
	                }).off('mouseleave.emoji').on('mouseleave.emoji', function () {
	                    tooltip.destroy();
	                });
	            }

	            return this;
	        }

	        /**
	         * Removes any old click handlers on the icon.
	         *
	         * @returns {EmojiPicker}
	         * @private
	         */

	    }, {
	        key: "_removeOldEvents",
	        value: function _removeOldEvents() {
	            if (this._icon) {
	                (0, _jquery2.default)(this._icon).off('click.emoji-picker');
	            }

	            return this;
	        }

	        /**
	         * Toggle the visibility of the picker when the icon
	         * gets clicked.
	         *
	         * @returns {EmojiPicker}
	         * @private
	         */

	    }, {
	        key: "_onIconClick",
	        value: function _onIconClick() {
	            var _this4 = this;

	            (0, _jquery2.default)(this._icon).off('click.emoji').on('click.emoji', function (event) {
	                _this4.picker_open = !_this4.picker_open;
	            });

	            return this;
	        }

	        /**
	         *
	         * @param {Tooltip} tooltip
	         * @param {Event} event
	         * @private
	         */

	    }, {
	        key: "_onTooltipClick",
	        value: function _onTooltipClick(tooltip, event) {
	            var _this5 = this;

	            tooltip.setClickCallback(event, function (target, $tooltip) {
	                var $picker = (0, _jquery2.default)(target).closest('#emoji-picker');
	                var is_icon = (0, _jquery2.default)(target).is(_this5._icon);

	                //If the click occurred outside of the tooltip
	                if (!$picker.length && !is_icon) {
	                    _this5.picker_open = false;
	                }
	            });
	        }

	        /**
	         *
	         * @returns {EmojiPicker}
	         * @private
	         */

	    }, {
	        key: "_onScroll",
	        value: function _onScroll() {
	            var _this6 = this;

	            this.$content.off('scroll.emoji').on('scroll.emoji', function (event) {
	                _this6.active_category = _this6._getActiveCategory();
	            });

	            return this;
	        }
	    }, {
	        key: "_onCatClick",
	        value: function _onCatClick() {

	            var picker = this;
	            this.$picker.find('.select-category').off('click.emoji').on('click.emoji', /**@this {HTMLElement}*/function () {
	                var cat = picker.getCategory(this.getAttribute('data-name'));
	                picker.$content.get(0).scrollTop = cat.offset_top;
	                picker.active_category = picker._getActiveCategory();
	            });

	            return this;
	        }

	        /**
	         *
	         *
	         * @returns {EmojiPicker}
	         * @private
	         */

	    }, {
	        key: "_onSearch",
	        value: function _onSearch() {
	            var _this7 = this;

	            this.$search.off('input.emoji').on('input.emoji', function () {
	                var search = _this7.$search.val().trim();
	                _this7.categories.forEach(function (cat) {
	                    return cat.search_term = search;
	                });
	                _this7.$active_title.text("Results for: " + search);
	                if (search.length === 0) {
	                    _this7.active_category = _this7._getActiveCategory();
	                    //Manually call this in case the category hadn't changed since the search started
	                    _this7.setActiveCategory();
	                }
	            });

	            return this;
	        }

	        /**
	         * Gets the active category based on scroll position
	         *
	         * @returns {EmojiCategory}
	         * @private
	         */

	    }, {
	        key: "_getActiveCategory",
	        value: function _getActiveCategory() {

	            var scroll_top = this.$content.get(0).scrollTop;
	            var cat = this.categories[0];

	            for (var i = 0; i < this.categories.length; i++) {
	                if (this.categories[i].offset_top > scroll_top) {
	                    return cat;
	                }
	                cat = this.categories[i];
	            }

	            return this.categories[this.categories.length - 1];
	        }

	        /**
	         * Updates the preview section with either the default content
	         * or
	         *
	         * @private
	         */

	    }, {
	        key: "_updatePreview",
	        value: function _updatePreview() {

	            var emoji = this.active_emoji;
	            if (emoji) {
	                this.$default_footer.hide();
	                this.$preview_emoji.html(emoji.getPreview());
	                this.$preview_name.text(emoji.short_name);
	                if (this.defaults.show_colon_preview) {
	                    this.$preview_colon.text(emoji.getColons());
	                    this.$preview_name.removeClass('name-only');
	                } else {
	                    this.$preview_name.addClass('name-only');
	                }
	                this.$preview.show();
	            } else {
	                this.$preview.hide();
	                this.$default_footer.show();
	            }
	        }
	    }], [{
	        key: "render",
	        value: function render(str) {

	            var converter = _Converters2.default.withEnvironment();
	            //If the code is running on a mobile device, don't run replace_unified
	            if (_Converters2.default.is_mobile) {
	                return converter.replace_colons(str);
	            }
	            //Otherwise, make an attempt to replace both colons and unified code.
	            return converter.replace_unified(converter.replace_colons(str));
	        }

	        /**
	         *
	         * @param {object} sheets
	         */

	    }, {
	        key: "setSheets",
	        value: function setSheets() {
	            var sheets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

	            sheets = sheets || _defaults2.default.sheets;
	            _Converters2.default.setSheets(sheets);
	        }
	    }]);

	    return EmojiPicker;
	}();

	exports.default = EmojiPicker;


	window.EmojiPicker = EmojiPicker;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*!
	 * jQuery JavaScript Library v3.2.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2017-03-20T18:59Z
	 */
	(function (global, factory) {

		"use strict";

		if (( false ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ? factory(global, true) : function (w) {
				if (!w.document) {
					throw new Error("jQuery requires a window with a document");
				}
				return factory(w);
			};
		} else {
			factory(global);
		}

		// Pass this if window is not defined yet
	})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {

		// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
		// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
		// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
		// enough that all such attempts are guarded in a try block.
		"use strict";

		var arr = [];

		var document = window.document;

		var getProto = Object.getPrototypeOf;

		var _slice = arr.slice;

		var concat = arr.concat;

		var push = arr.push;

		var indexOf = arr.indexOf;

		var class2type = {};

		var toString = class2type.toString;

		var hasOwn = class2type.hasOwnProperty;

		var fnToString = hasOwn.toString;

		var ObjectFunctionString = fnToString.call(Object);

		var support = {};

		function DOMEval(code, doc) {
			doc = doc || document;

			var script = doc.createElement("script");

			script.text = code;
			doc.head.appendChild(script).parentNode.removeChild(script);
		}
		/* global Symbol */
		// Defining this global in .eslintrc.json would create a danger of using the global
		// unguarded in another place, it seems safer to define global only for this module


		var version = "3.2.1",


		// Define a local copy of jQuery
		jQuery = function jQuery(selector, context) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init(selector, context);
		},


		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		    rdashAlpha = /-([a-z])/g,


		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function fcamelCase(all, letter) {
			return letter.toUpperCase();
		};

		jQuery.fn = jQuery.prototype = {

			// The current version of jQuery being used
			jquery: version,

			constructor: jQuery,

			// The default length of a jQuery object is 0
			length: 0,

			toArray: function toArray() {
				return _slice.call(this);
			},

			// Get the Nth element in the matched element set OR
			// Get the whole matched element set as a clean array
			get: function get(num) {

				// Return all the elements in a clean array
				if (num == null) {
					return _slice.call(this);
				}

				// Return just the one element from the set
				return num < 0 ? this[num + this.length] : this[num];
			},

			// Take an array of elements and push it onto the stack
			// (returning the new matched element set)
			pushStack: function pushStack(elems) {

				// Build a new jQuery matched element set
				var ret = jQuery.merge(this.constructor(), elems);

				// Add the old object onto the stack (as a reference)
				ret.prevObject = this;

				// Return the newly-formed element set
				return ret;
			},

			// Execute a callback for every element in the matched set.
			each: function each(callback) {
				return jQuery.each(this, callback);
			},

			map: function map(callback) {
				return this.pushStack(jQuery.map(this, function (elem, i) {
					return callback.call(elem, i, elem);
				}));
			},

			slice: function slice() {
				return this.pushStack(_slice.apply(this, arguments));
			},

			first: function first() {
				return this.eq(0);
			},

			last: function last() {
				return this.eq(-1);
			},

			eq: function eq(i) {
				var len = this.length,
				    j = +i + (i < 0 ? len : 0);
				return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
			},

			end: function end() {
				return this.prevObject || this.constructor();
			},

			// For internal use only.
			// Behaves like an Array's method, not like a jQuery method.
			push: push,
			sort: arr.sort,
			splice: arr.splice
		};

		jQuery.extend = jQuery.fn.extend = function () {
			var options,
			    name,
			    src,
			    copy,
			    copyIsArray,
			    clone,
			    target = arguments[0] || {},
			    i = 1,
			    length = arguments.length,
			    deep = false;

			// Handle a deep copy situation
			if (typeof target === "boolean") {
				deep = target;

				// Skip the boolean and the target
				target = arguments[i] || {};
				i++;
			}

			// Handle case when target is a string or something (possible in deep copy)
			if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
				target = {};
			}

			// Extend jQuery itself if only one argument is passed
			if (i === length) {
				target = this;
				i--;
			}

			for (; i < length; i++) {

				// Only deal with non-null/undefined values
				if ((options = arguments[i]) != null) {

					// Extend the base object
					for (name in options) {
						src = target[name];
						copy = options[name];

						// Prevent never-ending loop
						if (target === copy) {
							continue;
						}

						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {

							if (copyIsArray) {
								copyIsArray = false;
								clone = src && Array.isArray(src) ? src : [];
							} else {
								clone = src && jQuery.isPlainObject(src) ? src : {};
							}

							// Never move original objects, clone them
							target[name] = jQuery.extend(deep, clone, copy);

							// Don't bring in undefined values
						} else if (copy !== undefined) {
							target[name] = copy;
						}
					}
				}
			}

			// Return the modified object
			return target;
		};

		jQuery.extend({

			// Unique for each copy of jQuery on the page
			expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

			// Assume jQuery is ready without the ready module
			isReady: true,

			error: function error(msg) {
				throw new Error(msg);
			},

			noop: function noop() {},

			isFunction: function isFunction(obj) {
				return jQuery.type(obj) === "function";
			},

			isWindow: function isWindow(obj) {
				return obj != null && obj === obj.window;
			},

			isNumeric: function isNumeric(obj) {

				// As of jQuery 3.0, isNumeric is limited to
				// strings and numbers (primitives or objects)
				// that can be coerced to finite numbers (gh-2662)
				var type = jQuery.type(obj);
				return (type === "number" || type === "string") &&

				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN(obj - parseFloat(obj));
			},

			isPlainObject: function isPlainObject(obj) {
				var proto, Ctor;

				// Detect obvious negatives
				// Use toString instead of jQuery.type to catch host objects
				if (!obj || toString.call(obj) !== "[object Object]") {
					return false;
				}

				proto = getProto(obj);

				// Objects with no prototype (e.g., `Object.create( null )`) are plain
				if (!proto) {
					return true;
				}

				// Objects with prototype are plain iff they were constructed by a global Object function
				Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
				return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
			},

			isEmptyObject: function isEmptyObject(obj) {

				/* eslint-disable no-unused-vars */
				// See https://github.com/eslint/eslint/issues/6125
				var name;

				for (name in obj) {
					return false;
				}
				return true;
			},

			type: function type(obj) {
				if (obj == null) {
					return obj + "";
				}

				// Support: Android <=2.3 only (functionish RegExp)
				return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
			},

			// Evaluates a script in a global context
			globalEval: function globalEval(code) {
				DOMEval(code);
			},

			// Convert dashed to camelCase; used by the css and data modules
			// Support: IE <=9 - 11, Edge 12 - 13
			// Microsoft forgot to hump their vendor prefix (#9572)
			camelCase: function camelCase(string) {
				return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
			},

			each: function each(obj, callback) {
				var length,
				    i = 0;

				if (isArrayLike(obj)) {
					length = obj.length;
					for (; i < length; i++) {
						if (callback.call(obj[i], i, obj[i]) === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
						if (callback.call(obj[i], i, obj[i]) === false) {
							break;
						}
					}
				}

				return obj;
			},

			// Support: Android <=4.0 only
			trim: function trim(text) {
				return text == null ? "" : (text + "").replace(rtrim, "");
			},

			// results is for internal usage only
			makeArray: function makeArray(arr, results) {
				var ret = results || [];

				if (arr != null) {
					if (isArrayLike(Object(arr))) {
						jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
					} else {
						push.call(ret, arr);
					}
				}

				return ret;
			},

			inArray: function inArray(elem, arr, i) {
				return arr == null ? -1 : indexOf.call(arr, elem, i);
			},

			// Support: Android <=4.0 only, PhantomJS 1 only
			// push.apply(_, arraylike) throws on ancient WebKit
			merge: function merge(first, second) {
				var len = +second.length,
				    j = 0,
				    i = first.length;

				for (; j < len; j++) {
					first[i++] = second[j];
				}

				first.length = i;

				return first;
			},

			grep: function grep(elems, callback, invert) {
				var callbackInverse,
				    matches = [],
				    i = 0,
				    length = elems.length,
				    callbackExpect = !invert;

				// Go through the array, only saving the items
				// that pass the validator function
				for (; i < length; i++) {
					callbackInverse = !callback(elems[i], i);
					if (callbackInverse !== callbackExpect) {
						matches.push(elems[i]);
					}
				}

				return matches;
			},

			// arg is for internal usage only
			map: function map(elems, callback, arg) {
				var length,
				    value,
				    i = 0,
				    ret = [];

				// Go through the array, translating each of the items to their new values
				if (isArrayLike(elems)) {
					length = elems.length;
					for (; i < length; i++) {
						value = callback(elems[i], i, arg);

						if (value != null) {
							ret.push(value);
						}
					}

					// Go through every key on the object,
				} else {
					for (i in elems) {
						value = callback(elems[i], i, arg);

						if (value != null) {
							ret.push(value);
						}
					}
				}

				// Flatten any nested arrays
				return concat.apply([], ret);
			},

			// A global GUID counter for objects
			guid: 1,

			// Bind a function to a context, optionally partially applying any
			// arguments.
			proxy: function proxy(fn, context) {
				var tmp, args, proxy;

				if (typeof context === "string") {
					tmp = fn[context];
					context = fn;
					fn = tmp;
				}

				// Quick check to determine if target is callable, in the spec
				// this throws a TypeError, but we will just return undefined.
				if (!jQuery.isFunction(fn)) {
					return undefined;
				}

				// Simulated bind
				args = _slice.call(arguments, 2);
				proxy = function proxy() {
					return fn.apply(context || this, args.concat(_slice.call(arguments)));
				};

				// Set the guid of unique handler to the same of original handler, so it can be removed
				proxy.guid = fn.guid = fn.guid || jQuery.guid++;

				return proxy;
			},

			now: Date.now,

			// jQuery.support is not used in Core but other projects attach their
			// properties to it so it needs to exist.
			support: support
		});

		if (typeof Symbol === "function") {
			jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
		}

		// Populate the class2type map
		jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
			class2type["[object " + name + "]"] = name.toLowerCase();
		});

		function isArrayLike(obj) {

			// Support: real iOS 8.2 only (not reproducible in simulator)
			// `in` check used to prevent JIT error (gh-2145)
			// hasOwn isn't used here due to false negatives
			// regarding Nodelist length in IE
			var length = !!obj && "length" in obj && obj.length,
			    type = jQuery.type(obj);

			if (type === "function" || jQuery.isWindow(obj)) {
				return false;
			}

			return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
		}
		var Sizzle =
		/*!
	  * Sizzle CSS Selector Engine v2.3.3
	  * https://sizzlejs.com/
	  *
	  * Copyright jQuery Foundation and other contributors
	  * Released under the MIT license
	  * http://jquery.org/license
	  *
	  * Date: 2016-08-08
	  */
		function (window) {

			var i,
			    support,
			    Expr,
			    getText,
			    isXML,
			    tokenize,
			    compile,
			    select,
			    outermostContext,
			    sortInput,
			    hasDuplicate,


			// Local document vars
			setDocument,
			    document,
			    docElem,
			    documentIsHTML,
			    rbuggyQSA,
			    rbuggyMatches,
			    matches,
			    contains,


			// Instance-specific data
			expando = "sizzle" + 1 * new Date(),
			    preferredDoc = window.document,
			    dirruns = 0,
			    done = 0,
			    classCache = createCache(),
			    tokenCache = createCache(),
			    compilerCache = createCache(),
			    sortOrder = function sortOrder(a, b) {
				if (a === b) {
					hasDuplicate = true;
				}
				return 0;
			},


			// Instance methods
			hasOwn = {}.hasOwnProperty,
			    arr = [],
			    pop = arr.pop,
			    push_native = arr.push,
			    push = arr.push,
			    slice = arr.slice,

			// Use a stripped-down indexOf as it's faster than native
			// https://jsperf.com/thor-indexof-vs-for/5
			indexOf = function indexOf(list, elem) {
				var i = 0,
				    len = list.length;
				for (; i < len; i++) {
					if (list[i] === elem) {
						return i;
					}
				}
				return -1;
			},
			    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


			// Regular expressions

			// http://www.w3.org/TR/css3-selectors/#whitespace
			whitespace = "[\\x20\\t\\r\\n\\f]",


			// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
			identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",


			// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
			attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
			    pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" + ")\\)|)",


			// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
			rwhitespace = new RegExp(whitespace + "+", "g"),
			    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
			    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
			    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
			    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
			    rpseudo = new RegExp(pseudos),
			    ridentifier = new RegExp("^" + identifier + "$"),
			    matchExpr = {
				"ID": new RegExp("^#(" + identifier + ")"),
				"CLASS": new RegExp("^\\.(" + identifier + ")"),
				"TAG": new RegExp("^(" + identifier + "|[*])"),
				"ATTR": new RegExp("^" + attributes),
				"PSEUDO": new RegExp("^" + pseudos),
				"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
				"bool": new RegExp("^(?:" + booleans + ")$", "i"),
				// For use in libraries implementing .is()
				// We use this for POS matching in `select`
				"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
			},
			    rinputs = /^(?:input|select|textarea|button)$/i,
			    rheader = /^h\d$/i,
			    rnative = /^[^{]+\{\s*\[native \w/,


			// Easily-parseable/retrievable ID or TAG or CLASS selectors
			rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
			    rsibling = /[+~]/,


			// CSS escapes
			// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
			runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
			    funescape = function funescape(_, escaped, escapedWhitespace) {
				var high = "0x" + escaped - 0x10000;
				// NaN means non-codepoint
				// Support: Firefox<24
				// Workaround erroneous numeric interpretation of +"0x"
				return high !== high || escapedWhitespace ? escaped : high < 0 ?
				// BMP codepoint
				String.fromCharCode(high + 0x10000) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
			},


			// CSS string/identifier serialization
			// https://drafts.csswg.org/cssom/#common-serializing-idioms
			rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
			    fcssescape = function fcssescape(ch, asCodePoint) {
				if (asCodePoint) {

					// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
					if (ch === "\0") {
						return "\uFFFD";
					}

					// Control characters and (dependent upon position) numbers get escaped as code points
					return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
				}

				// Other potentially-special ASCII characters get backslash-escaped
				return "\\" + ch;
			},


			// Used for iframes
			// See setDocument()
			// Removing the function wrapper causes a "Permission Denied"
			// error in IE
			unloadHandler = function unloadHandler() {
				setDocument();
			},
			    disabledAncestor = addCombinator(function (elem) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			}, { dir: "parentNode", next: "legend" });

			// Optimize for push.apply( _, NodeList )
			try {
				push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
				// Support: Android<4.0
				// Detect silently failing push.apply
				arr[preferredDoc.childNodes.length].nodeType;
			} catch (e) {
				push = { apply: arr.length ?

					// Leverage slice if possible
					function (target, els) {
						push_native.apply(target, slice.call(els));
					} :

					// Support: IE<9
					// Otherwise append directly
					function (target, els) {
						var j = target.length,
						    i = 0;
						// Can't trust NodeList.length
						while (target[j++] = els[i++]) {}
						target.length = j - 1;
					}
				};
			}

			function Sizzle(selector, context, results, seed) {
				var m,
				    i,
				    elem,
				    nid,
				    match,
				    groups,
				    newSelector,
				    newContext = context && context.ownerDocument,


				// nodeType defaults to 9, since context defaults to document
				nodeType = context ? context.nodeType : 9;

				results = results || [];

				// Return early from calls with invalid selector or context
				if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

					return results;
				}

				// Try to shortcut find operations (as opposed to filters) in HTML documents
				if (!seed) {

					if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
						setDocument(context);
					}
					context = context || document;

					if (documentIsHTML) {

						// If the selector is sufficiently simple, try using a "get*By*" DOM method
						// (excepting DocumentFragment context, where the methods don't exist)
						if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

							// ID selector
							if (m = match[1]) {

								// Document context
								if (nodeType === 9) {
									if (elem = context.getElementById(m)) {

										// Support: IE, Opera, Webkit
										// TODO: identify versions
										// getElementById can match elements by name instead of ID
										if (elem.id === m) {
											results.push(elem);
											return results;
										}
									} else {
										return results;
									}

									// Element context
								} else {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
									if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

										results.push(elem);
										return results;
									}
								}

								// Type selector
							} else if (match[2]) {
								push.apply(results, context.getElementsByTagName(selector));
								return results;

								// Class selector
							} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

								push.apply(results, context.getElementsByClassName(m));
								return results;
							}
						}

						// Take advantage of querySelectorAll
						if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {

							if (nodeType !== 1) {
								newContext = context;
								newSelector = selector;

								// qSA looks outside Element context, which is not what we want
								// Thanks to Andrew Dupont for this workaround technique
								// Support: IE <=8
								// Exclude object elements
							} else if (context.nodeName.toLowerCase() !== "object") {

								// Capture the context ID, setting it first if necessary
								if (nid = context.getAttribute("id")) {
									nid = nid.replace(rcssescape, fcssescape);
								} else {
									context.setAttribute("id", nid = expando);
								}

								// Prefix every selector in the list
								groups = tokenize(selector);
								i = groups.length;
								while (i--) {
									groups[i] = "#" + nid + " " + toSelector(groups[i]);
								}
								newSelector = groups.join(",");

								// Expand context for sibling selectors
								newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
							}

							if (newSelector) {
								try {
									push.apply(results, newContext.querySelectorAll(newSelector));
									return results;
								} catch (qsaError) {} finally {
									if (nid === expando) {
										context.removeAttribute("id");
									}
								}
							}
						}
					}
				}

				// All others
				return select(selector.replace(rtrim, "$1"), context, results, seed);
			}

			/**
	   * Create key-value caches of limited size
	   * @returns {function(string, object)} Returns the Object data after storing it on itself with
	   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	   *	deleting the oldest entry
	   */
			function createCache() {
				var keys = [];

				function cache(key, value) {
					// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
					if (keys.push(key + " ") > Expr.cacheLength) {
						// Only keep the most recent entries
						delete cache[keys.shift()];
					}
					return cache[key + " "] = value;
				}
				return cache;
			}

			/**
	   * Mark a function for special use by Sizzle
	   * @param {Function} fn The function to mark
	   */
			function markFunction(fn) {
				fn[expando] = true;
				return fn;
			}

			/**
	   * Support testing using an element
	   * @param {Function} fn Passed the created element and returns a boolean result
	   */
			function assert(fn) {
				var el = document.createElement("fieldset");

				try {
					return !!fn(el);
				} catch (e) {
					return false;
				} finally {
					// Remove from its parent by default
					if (el.parentNode) {
						el.parentNode.removeChild(el);
					}
					// release memory in IE
					el = null;
				}
			}

			/**
	   * Adds the same handler for all of the specified attrs
	   * @param {String} attrs Pipe-separated list of attributes
	   * @param {Function} handler The method that will be applied
	   */
			function addHandle(attrs, handler) {
				var arr = attrs.split("|"),
				    i = arr.length;

				while (i--) {
					Expr.attrHandle[arr[i]] = handler;
				}
			}

			/**
	   * Checks document order of two siblings
	   * @param {Element} a
	   * @param {Element} b
	   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	   */
			function siblingCheck(a, b) {
				var cur = b && a,
				    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;

				// Use IE sourceIndex if available on both nodes
				if (diff) {
					return diff;
				}

				// Check if b follows a
				if (cur) {
					while (cur = cur.nextSibling) {
						if (cur === b) {
							return -1;
						}
					}
				}

				return a ? 1 : -1;
			}

			/**
	   * Returns a function to use in pseudos for input types
	   * @param {String} type
	   */
			function createInputPseudo(type) {
				return function (elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === type;
				};
			}

			/**
	   * Returns a function to use in pseudos for buttons
	   * @param {String} type
	   */
			function createButtonPseudo(type) {
				return function (elem) {
					var name = elem.nodeName.toLowerCase();
					return (name === "input" || name === "button") && elem.type === type;
				};
			}

			/**
	   * Returns a function to use in pseudos for :enabled/:disabled
	   * @param {Boolean} disabled true for :disabled; false for :enabled
	   */
			function createDisabledPseudo(disabled) {

				// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
				return function (elem) {

					// Only certain elements can match :enabled or :disabled
					// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
					// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
					if ("form" in elem) {

						// Check for inherited disabledness on relevant non-disabled elements:
						// * listed form-associated elements in a disabled fieldset
						//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
						//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
						// * option elements in a disabled optgroup
						//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
						// All such elements have a "form" property.
						if (elem.parentNode && elem.disabled === false) {

							// Option elements defer to a parent optgroup if present
							if ("label" in elem) {
								if ("label" in elem.parentNode) {
									return elem.parentNode.disabled === disabled;
								} else {
									return elem.disabled === disabled;
								}
							}

							// Support: IE 6 - 11
							// Use the isDisabled shortcut property to check for disabled fieldset ancestors
							return elem.isDisabled === disabled ||

							// Where there is no isDisabled, check manually
							/* jshint -W018 */
							elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
						}

						return elem.disabled === disabled;

						// Try to winnow out elements that can't be disabled before trusting the disabled property.
						// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
						// even exist on them, let alone have a boolean value.
					} else if ("label" in elem) {
						return elem.disabled === disabled;
					}

					// Remaining elements are neither :enabled nor :disabled
					return false;
				};
			}

			/**
	   * Returns a function to use in pseudos for positionals
	   * @param {Function} fn
	   */
			function createPositionalPseudo(fn) {
				return markFunction(function (argument) {
					argument = +argument;
					return markFunction(function (seed, matches) {
						var j,
						    matchIndexes = fn([], seed.length, argument),
						    i = matchIndexes.length;

						// Match elements found at the specified indexes
						while (i--) {
							if (seed[j = matchIndexes[i]]) {
								seed[j] = !(matches[j] = seed[j]);
							}
						}
					});
				});
			}

			/**
	   * Checks a node for validity as a Sizzle context
	   * @param {Element|Object=} context
	   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	   */
			function testContext(context) {
				return context && typeof context.getElementsByTagName !== "undefined" && context;
			}

			// Expose support vars for convenience
			support = Sizzle.support = {};

			/**
	   * Detects XML nodes
	   * @param {Element|Object} elem An element or a document
	   * @returns {Boolean} True iff elem is a non-HTML XML node
	   */
			isXML = Sizzle.isXML = function (elem) {
				// documentElement is verified for cases where it doesn't yet exist
				// (such as loading iframes in IE - #4833)
				var documentElement = elem && (elem.ownerDocument || elem).documentElement;
				return documentElement ? documentElement.nodeName !== "HTML" : false;
			};

			/**
	   * Sets document-related variables once based on the current document
	   * @param {Element|Object} [doc] An element or document object to use to set the document
	   * @returns {Object} Returns the current document
	   */
			setDocument = Sizzle.setDocument = function (node) {
				var hasCompare,
				    subWindow,
				    doc = node ? node.ownerDocument || node : preferredDoc;

				// Return early if doc is invalid or already selected
				if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
					return document;
				}

				// Update global variables
				document = doc;
				docElem = document.documentElement;
				documentIsHTML = !isXML(document);

				// Support: IE 9-11, Edge
				// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
				if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {

					// Support: IE 11, Edge
					if (subWindow.addEventListener) {
						subWindow.addEventListener("unload", unloadHandler, false);

						// Support: IE 9 - 10 only
					} else if (subWindow.attachEvent) {
						subWindow.attachEvent("onunload", unloadHandler);
					}
				}

				/* Attributes
	   ---------------------------------------------------------------------- */

				// Support: IE<8
				// Verify that getAttribute really returns attributes and not properties
				// (excepting IE8 booleans)
				support.attributes = assert(function (el) {
					el.className = "i";
					return !el.getAttribute("className");
				});

				/* getElement(s)By*
	   ---------------------------------------------------------------------- */

				// Check if getElementsByTagName("*") returns only elements
				support.getElementsByTagName = assert(function (el) {
					el.appendChild(document.createComment(""));
					return !el.getElementsByTagName("*").length;
				});

				// Support: IE<9
				support.getElementsByClassName = rnative.test(document.getElementsByClassName);

				// Support: IE<10
				// Check if getElementById returns elements by name
				// The broken getElementById methods don't pick up programmatically-set names,
				// so use a roundabout getElementsByName test
				support.getById = assert(function (el) {
					docElem.appendChild(el).id = expando;
					return !document.getElementsByName || !document.getElementsByName(expando).length;
				});

				// ID filter and find
				if (support.getById) {
					Expr.filter["ID"] = function (id) {
						var attrId = id.replace(runescape, funescape);
						return function (elem) {
							return elem.getAttribute("id") === attrId;
						};
					};
					Expr.find["ID"] = function (id, context) {
						if (typeof context.getElementById !== "undefined" && documentIsHTML) {
							var elem = context.getElementById(id);
							return elem ? [elem] : [];
						}
					};
				} else {
					Expr.filter["ID"] = function (id) {
						var attrId = id.replace(runescape, funescape);
						return function (elem) {
							var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
							return node && node.value === attrId;
						};
					};

					// Support: IE 6 - 7 only
					// getElementById is not reliable as a find shortcut
					Expr.find["ID"] = function (id, context) {
						if (typeof context.getElementById !== "undefined" && documentIsHTML) {
							var node,
							    i,
							    elems,
							    elem = context.getElementById(id);

							if (elem) {

								// Verify the id attribute
								node = elem.getAttributeNode("id");
								if (node && node.value === id) {
									return [elem];
								}

								// Fall back on getElementsByName
								elems = context.getElementsByName(id);
								i = 0;
								while (elem = elems[i++]) {
									node = elem.getAttributeNode("id");
									if (node && node.value === id) {
										return [elem];
									}
								}
							}

							return [];
						}
					};
				}

				// Tag
				Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
					if (typeof context.getElementsByTagName !== "undefined") {
						return context.getElementsByTagName(tag);

						// DocumentFragment nodes don't have gEBTN
					} else if (support.qsa) {
						return context.querySelectorAll(tag);
					}
				} : function (tag, context) {
					var elem,
					    tmp = [],
					    i = 0,

					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName(tag);

					// Filter out possible comments
					if (tag === "*") {
						while (elem = results[i++]) {
							if (elem.nodeType === 1) {
								tmp.push(elem);
							}
						}

						return tmp;
					}
					return results;
				};

				// Class
				Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
					if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
						return context.getElementsByClassName(className);
					}
				};

				/* QSA/matchesSelector
	   ---------------------------------------------------------------------- */

				// QSA and matchesSelector support

				// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
				rbuggyMatches = [];

				// qSa(:focus) reports false when true (Chrome 21)
				// We allow this because of a bug in IE8/9 that throws an error
				// whenever `document.activeElement` is accessed on an iframe
				// So, we allow :focus to pass through QSA all the time to avoid the IE error
				// See https://bugs.jquery.com/ticket/13378
				rbuggyQSA = [];

				if (support.qsa = rnative.test(document.querySelectorAll)) {
					// Build QSA regex
					// Regex strategy adopted from Diego Perini
					assert(function (el) {
						// Select is set to empty string on purpose
						// This is to test IE's treatment of not explicitly
						// setting a boolean content attribute,
						// since its presence should be enough
						// https://bugs.jquery.com/ticket/12359
						docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

						// Support: IE8, Opera 11-12.16
						// Nothing should be selected when empty strings follow ^= or $= or *=
						// The test attribute must be unknown in Opera but "safe" for WinRT
						// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
						if (el.querySelectorAll("[msallowcapture^='']").length) {
							rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
						}

						// Support: IE8
						// Boolean attributes and "value" are not treated correctly
						if (!el.querySelectorAll("[selected]").length) {
							rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
						}

						// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
						if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
							rbuggyQSA.push("~=");
						}

						// Webkit/Opera - :checked should return selected option elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						// IE8 throws error here and will not see later tests
						if (!el.querySelectorAll(":checked").length) {
							rbuggyQSA.push(":checked");
						}

						// Support: Safari 8+, iOS 8+
						// https://bugs.webkit.org/show_bug.cgi?id=136851
						// In-page `selector#id sibling-combinator selector` fails
						if (!el.querySelectorAll("a#" + expando + "+*").length) {
							rbuggyQSA.push(".#.+[+~]");
						}
					});

					assert(function (el) {
						el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";

						// Support: Windows 8 Native Apps
						// The type and name attributes are restricted during .innerHTML assignment
						var input = document.createElement("input");
						input.setAttribute("type", "hidden");
						el.appendChild(input).setAttribute("name", "D");

						// Support: IE8
						// Enforce case-sensitivity of name attribute
						if (el.querySelectorAll("[name=d]").length) {
							rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
						}

						// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
						// IE8 throws error here and will not see later tests
						if (el.querySelectorAll(":enabled").length !== 2) {
							rbuggyQSA.push(":enabled", ":disabled");
						}

						// Support: IE9-11+
						// IE's :disabled selector does not pick up the children of disabled fieldsets
						docElem.appendChild(el).disabled = true;
						if (el.querySelectorAll(":disabled").length !== 2) {
							rbuggyQSA.push(":enabled", ":disabled");
						}

						// Opera 10-11 does not throw on post-comma invalid pseudos
						el.querySelectorAll("*,:x");
						rbuggyQSA.push(",.*:");
					});
				}

				if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

					assert(function (el) {
						// Check to see if it's possible to do matchesSelector
						// on a disconnected node (IE 9)
						support.disconnectedMatch = matches.call(el, "*");

						// This should fail with an exception
						// Gecko does not error, returns false instead
						matches.call(el, "[s!='']:x");
						rbuggyMatches.push("!=", pseudos);
					});
				}

				rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
				rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

				/* Contains
	   ---------------------------------------------------------------------- */
				hasCompare = rnative.test(docElem.compareDocumentPosition);

				// Element contains another
				// Purposefully self-exclusive
				// As in, an element does not contain itself
				contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
					var adown = a.nodeType === 9 ? a.documentElement : a,
					    bup = b && b.parentNode;
					return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
				} : function (a, b) {
					if (b) {
						while (b = b.parentNode) {
							if (b === a) {
								return true;
							}
						}
					}
					return false;
				};

				/* Sorting
	   ---------------------------------------------------------------------- */

				// Document order sorting
				sortOrder = hasCompare ? function (a, b) {

					// Flag for duplicate removal
					if (a === b) {
						hasDuplicate = true;
						return 0;
					}

					// Sort on method existence if only one input has compareDocumentPosition
					var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
					if (compare) {
						return compare;
					}

					// Calculate position if both inputs belong to the same document
					compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

					// Otherwise we know they are disconnected
					1;

					// Disconnected nodes
					if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

						// Choose the first element that is related to our preferred document
						if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
							return -1;
						}
						if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
							return 1;
						}

						// Maintain original order
						return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
					}

					return compare & 4 ? -1 : 1;
				} : function (a, b) {
					// Exit early if the nodes are identical
					if (a === b) {
						hasDuplicate = true;
						return 0;
					}

					var cur,
					    i = 0,
					    aup = a.parentNode,
					    bup = b.parentNode,
					    ap = [a],
					    bp = [b];

					// Parentless nodes are either documents or disconnected
					if (!aup || !bup) {
						return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

						// If the nodes are siblings, we can do a quick check
					} else if (aup === bup) {
						return siblingCheck(a, b);
					}

					// Otherwise we need full lists of their ancestors for comparison
					cur = a;
					while (cur = cur.parentNode) {
						ap.unshift(cur);
					}
					cur = b;
					while (cur = cur.parentNode) {
						bp.unshift(cur);
					}

					// Walk down the tree looking for a discrepancy
					while (ap[i] === bp[i]) {
						i++;
					}

					return i ?
					// Do a sibling check if the nodes have a common ancestor
					siblingCheck(ap[i], bp[i]) :

					// Otherwise nodes in our document sort first
					ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
				};

				return document;
			};

			Sizzle.matches = function (expr, elements) {
				return Sizzle(expr, null, null, elements);
			};

			Sizzle.matchesSelector = function (elem, expr) {
				// Set document vars if needed
				if ((elem.ownerDocument || elem) !== document) {
					setDocument(elem);
				}

				// Make sure that attribute selectors are quoted
				expr = expr.replace(rattributeQuotes, "='$1']");

				if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

					try {
						var ret = matches.call(elem, expr);

						// IE 9's matchesSelector returns false on disconnected nodes
						if (ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11) {
							return ret;
						}
					} catch (e) {}
				}

				return Sizzle(expr, document, null, [elem]).length > 0;
			};

			Sizzle.contains = function (context, elem) {
				// Set document vars if needed
				if ((context.ownerDocument || context) !== document) {
					setDocument(context);
				}
				return contains(context, elem);
			};

			Sizzle.attr = function (elem, name) {
				// Set document vars if needed
				if ((elem.ownerDocument || elem) !== document) {
					setDocument(elem);
				}

				var fn = Expr.attrHandle[name.toLowerCase()],

				// Don't get fooled by Object.prototype properties (jQuery #13807)
				val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

				return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
			};

			Sizzle.escape = function (sel) {
				return (sel + "").replace(rcssescape, fcssescape);
			};

			Sizzle.error = function (msg) {
				throw new Error("Syntax error, unrecognized expression: " + msg);
			};

			/**
	   * Document sorting and removing duplicates
	   * @param {ArrayLike} results
	   */
			Sizzle.uniqueSort = function (results) {
				var elem,
				    duplicates = [],
				    j = 0,
				    i = 0;

				// Unless we *know* we can detect duplicates, assume their presence
				hasDuplicate = !support.detectDuplicates;
				sortInput = !support.sortStable && results.slice(0);
				results.sort(sortOrder);

				if (hasDuplicate) {
					while (elem = results[i++]) {
						if (elem === results[i]) {
							j = duplicates.push(i);
						}
					}
					while (j--) {
						results.splice(duplicates[j], 1);
					}
				}

				// Clear input after sorting to release objects
				// See https://github.com/jquery/sizzle/pull/225
				sortInput = null;

				return results;
			};

			/**
	   * Utility function for retrieving the text value of an array of DOM nodes
	   * @param {Array|Element} elem
	   */
			getText = Sizzle.getText = function (elem) {
				var node,
				    ret = "",
				    i = 0,
				    nodeType = elem.nodeType;

				if (!nodeType) {
					// If no nodeType, this is expected to be an array
					while (node = elem[i++]) {
						// Do not traverse comment nodes
						ret += getText(node);
					}
				} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
					// Use textContent for elements
					// innerText usage removed for consistency of new lines (jQuery #11153)
					if (typeof elem.textContent === "string") {
						return elem.textContent;
					} else {
						// Traverse its children
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							ret += getText(elem);
						}
					}
				} else if (nodeType === 3 || nodeType === 4) {
					return elem.nodeValue;
				}
				// Do not include comment or processing instruction nodes

				return ret;
			};

			Expr = Sizzle.selectors = {

				// Can be adjusted by the user
				cacheLength: 50,

				createPseudo: markFunction,

				match: matchExpr,

				attrHandle: {},

				find: {},

				relative: {
					">": { dir: "parentNode", first: true },
					" ": { dir: "parentNode" },
					"+": { dir: "previousSibling", first: true },
					"~": { dir: "previousSibling" }
				},

				preFilter: {
					"ATTR": function ATTR(match) {
						match[1] = match[1].replace(runescape, funescape);

						// Move the given value to match[3] whether quoted or unquoted
						match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

						if (match[2] === "~=") {
							match[3] = " " + match[3] + " ";
						}

						return match.slice(0, 4);
					},

					"CHILD": function CHILD(match) {
						/* matches from matchExpr["CHILD"]
	     	1 type (only|nth|...)
	     	2 what (child|of-type)
	     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
	     	4 xn-component of xn+y argument ([+-]?\d*n|)
	     	5 sign of xn-component
	     	6 x of xn-component
	     	7 sign of y-component
	     	8 y of y-component
	     */
						match[1] = match[1].toLowerCase();

						if (match[1].slice(0, 3) === "nth") {
							// nth-* requires argument
							if (!match[3]) {
								Sizzle.error(match[0]);
							}

							// numeric x and y parameters for Expr.filter.CHILD
							// remember that false/true cast respectively to 0/1
							match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
							match[5] = +(match[7] + match[8] || match[3] === "odd");

							// other types prohibit arguments
						} else if (match[3]) {
							Sizzle.error(match[0]);
						}

						return match;
					},

					"PSEUDO": function PSEUDO(match) {
						var excess,
						    unquoted = !match[6] && match[2];

						if (matchExpr["CHILD"].test(match[0])) {
							return null;
						}

						// Accept quoted arguments as-is
						if (match[3]) {
							match[2] = match[4] || match[5] || "";

							// Strip excess characters from unquoted arguments
						} else if (unquoted && rpseudo.test(unquoted) && (
						// Get excess from tokenize (recursively)
						excess = tokenize(unquoted, true)) && (
						// advance to the next closing parenthesis
						excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

							// excess is a negative index
							match[0] = match[0].slice(0, excess);
							match[2] = unquoted.slice(0, excess);
						}

						// Return only captures needed by the pseudo filter method (type and argument)
						return match.slice(0, 3);
					}
				},

				filter: {

					"TAG": function TAG(nodeNameSelector) {
						var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
						return nodeNameSelector === "*" ? function () {
							return true;
						} : function (elem) {
							return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
						};
					},

					"CLASS": function CLASS(className) {
						var pattern = classCache[className + " "];

						return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
							return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
						});
					},

					"ATTR": function ATTR(name, operator, check) {
						return function (elem) {
							var result = Sizzle.attr(elem, name);

							if (result == null) {
								return operator === "!=";
							}
							if (!operator) {
								return true;
							}

							result += "";

							return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
						};
					},

					"CHILD": function CHILD(type, what, argument, first, last) {
						var simple = type.slice(0, 3) !== "nth",
						    forward = type.slice(-4) !== "last",
						    ofType = what === "of-type";

						return first === 1 && last === 0 ?

						// Shortcut for :nth-*(n)
						function (elem) {
							return !!elem.parentNode;
						} : function (elem, context, xml) {
							var cache,
							    uniqueCache,
							    outerCache,
							    node,
							    nodeIndex,
							    start,
							    dir = simple !== forward ? "nextSibling" : "previousSibling",
							    parent = elem.parentNode,
							    name = ofType && elem.nodeName.toLowerCase(),
							    useCache = !xml && !ofType,
							    diff = false;

							if (parent) {

								// :(first|last|only)-(child|of-type)
								if (simple) {
									while (dir) {
										node = elem;
										while (node = node[dir]) {
											if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

												return false;
											}
										}
										// Reverse direction for :only-* (if we haven't yet done so)
										start = dir = type === "only" && !start && "nextSibling";
									}
									return true;
								}

								start = [forward ? parent.firstChild : parent.lastChild];

								// non-xml :nth-child(...) stores cache data on `parent`
								if (forward && useCache) {

									// Seek `elem` from a previously-cached index

									// ...in a gzip-friendly way
									node = parent;
									outerCache = node[expando] || (node[expando] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex && cache[2];
									node = nodeIndex && parent.childNodes[nodeIndex];

									while (node = ++nodeIndex && node && node[dir] || (

									// Fallback to seeking `elem` from the start
									diff = nodeIndex = 0) || start.pop()) {

										// When found, cache indexes on `parent` and break
										if (node.nodeType === 1 && ++diff && node === elem) {
											uniqueCache[type] = [dirruns, nodeIndex, diff];
											break;
										}
									}
								} else {
									// Use previously-cached element index if available
									if (useCache) {
										// ...in a gzip-friendly way
										node = elem;
										outerCache = node[expando] || (node[expando] = {});

										// Support: IE <9 only
										// Defend against cloned attroperties (jQuery gh-1709)
										uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

										cache = uniqueCache[type] || [];
										nodeIndex = cache[0] === dirruns && cache[1];
										diff = nodeIndex;
									}

									// xml :nth-child(...)
									// or :nth-last-child(...) or :nth(-last)?-of-type(...)
									if (diff === false) {
										// Use the same loop as above to seek `elem` from the start
										while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

											if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

												// Cache the index of each encountered element
												if (useCache) {
													outerCache = node[expando] || (node[expando] = {});

													// Support: IE <9 only
													// Defend against cloned attroperties (jQuery gh-1709)
													uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

													uniqueCache[type] = [dirruns, diff];
												}

												if (node === elem) {
													break;
												}
											}
										}
									}
								}

								// Incorporate the offset, then check against cycle size
								diff -= last;
								return diff === first || diff % first === 0 && diff / first >= 0;
							}
						};
					},

					"PSEUDO": function PSEUDO(pseudo, argument) {
						// pseudo-class names are case-insensitive
						// http://www.w3.org/TR/selectors/#pseudo-classes
						// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
						// Remember that setFilters inherits from pseudos
						var args,
						    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

						// The user may use createPseudo to indicate that
						// arguments are needed to create the filter function
						// just as Sizzle does
						if (fn[expando]) {
							return fn(argument);
						}

						// But maintain support for old signatures
						if (fn.length > 1) {
							args = [pseudo, pseudo, "", argument];
							return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
								var idx,
								    matched = fn(seed, argument),
								    i = matched.length;
								while (i--) {
									idx = indexOf(seed, matched[i]);
									seed[idx] = !(matches[idx] = matched[i]);
								}
							}) : function (elem) {
								return fn(elem, 0, args);
							};
						}

						return fn;
					}
				},

				pseudos: {
					// Potentially complex pseudos
					"not": markFunction(function (selector) {
						// Trim the selector passed to compile
						// to avoid treating leading and trailing
						// spaces as combinators
						var input = [],
						    results = [],
						    matcher = compile(selector.replace(rtrim, "$1"));

						return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
							var elem,
							    unmatched = matcher(seed, null, xml, []),
							    i = seed.length;

							// Match elements unmatched by `matcher`
							while (i--) {
								if (elem = unmatched[i]) {
									seed[i] = !(matches[i] = elem);
								}
							}
						}) : function (elem, context, xml) {
							input[0] = elem;
							matcher(input, null, xml, results);
							// Don't keep the element (issue #299)
							input[0] = null;
							return !results.pop();
						};
					}),

					"has": markFunction(function (selector) {
						return function (elem) {
							return Sizzle(selector, elem).length > 0;
						};
					}),

					"contains": markFunction(function (text) {
						text = text.replace(runescape, funescape);
						return function (elem) {
							return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
						};
					}),

					// "Whether an element is represented by a :lang() selector
					// is based solely on the element's language value
					// being equal to the identifier C,
					// or beginning with the identifier C immediately followed by "-".
					// The matching of C against the element's language value is performed case-insensitively.
					// The identifier C does not have to be a valid language name."
					// http://www.w3.org/TR/selectors/#lang-pseudo
					"lang": markFunction(function (lang) {
						// lang value must be a valid identifier
						if (!ridentifier.test(lang || "")) {
							Sizzle.error("unsupported lang: " + lang);
						}
						lang = lang.replace(runescape, funescape).toLowerCase();
						return function (elem) {
							var elemLang;
							do {
								if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

									elemLang = elemLang.toLowerCase();
									return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
								}
							} while ((elem = elem.parentNode) && elem.nodeType === 1);
							return false;
						};
					}),

					// Miscellaneous
					"target": function target(elem) {
						var hash = window.location && window.location.hash;
						return hash && hash.slice(1) === elem.id;
					},

					"root": function root(elem) {
						return elem === docElem;
					},

					"focus": function focus(elem) {
						return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
					},

					// Boolean properties
					"enabled": createDisabledPseudo(false),
					"disabled": createDisabledPseudo(true),

					"checked": function checked(elem) {
						// In CSS3, :checked should return both checked and selected elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						var nodeName = elem.nodeName.toLowerCase();
						return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
					},

					"selected": function selected(elem) {
						// Accessing this property makes selected-by-default
						// options in Safari work properly
						if (elem.parentNode) {
							elem.parentNode.selectedIndex;
						}

						return elem.selected === true;
					},

					// Contents
					"empty": function empty(elem) {
						// http://www.w3.org/TR/selectors/#empty-pseudo
						// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
						//   but not by others (comment: 8; processing instruction: 7; etc.)
						// nodeType < 6 works because attributes (2) do not appear as children
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							if (elem.nodeType < 6) {
								return false;
							}
						}
						return true;
					},

					"parent": function parent(elem) {
						return !Expr.pseudos["empty"](elem);
					},

					// Element/input types
					"header": function header(elem) {
						return rheader.test(elem.nodeName);
					},

					"input": function input(elem) {
						return rinputs.test(elem.nodeName);
					},

					"button": function button(elem) {
						var name = elem.nodeName.toLowerCase();
						return name === "input" && elem.type === "button" || name === "button";
					},

					"text": function text(elem) {
						var attr;
						return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

						// Support: IE<8
						// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
						(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
					},

					// Position-in-collection
					"first": createPositionalPseudo(function () {
						return [0];
					}),

					"last": createPositionalPseudo(function (matchIndexes, length) {
						return [length - 1];
					}),

					"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
						return [argument < 0 ? argument + length : argument];
					}),

					"even": createPositionalPseudo(function (matchIndexes, length) {
						var i = 0;
						for (; i < length; i += 2) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"odd": createPositionalPseudo(function (matchIndexes, length) {
						var i = 1;
						for (; i < length; i += 2) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
						var i = argument < 0 ? argument + length : argument;
						for (; --i >= 0;) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
						var i = argument < 0 ? argument + length : argument;
						for (; ++i < length;) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					})
				}
			};

			Expr.pseudos["nth"] = Expr.pseudos["eq"];

			// Add button/input type pseudos
			for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
				Expr.pseudos[i] = createInputPseudo(i);
			}
			for (i in { submit: true, reset: true }) {
				Expr.pseudos[i] = createButtonPseudo(i);
			}

			// Easy API for creating new setFilters
			function setFilters() {}
			setFilters.prototype = Expr.filters = Expr.pseudos;
			Expr.setFilters = new setFilters();

			tokenize = Sizzle.tokenize = function (selector, parseOnly) {
				var matched,
				    match,
				    tokens,
				    type,
				    soFar,
				    groups,
				    preFilters,
				    cached = tokenCache[selector + " "];

				if (cached) {
					return parseOnly ? 0 : cached.slice(0);
				}

				soFar = selector;
				groups = [];
				preFilters = Expr.preFilter;

				while (soFar) {

					// Comma and first run
					if (!matched || (match = rcomma.exec(soFar))) {
						if (match) {
							// Don't consume trailing commas as valid
							soFar = soFar.slice(match[0].length) || soFar;
						}
						groups.push(tokens = []);
					}

					matched = false;

					// Combinators
					if (match = rcombinators.exec(soFar)) {
						matched = match.shift();
						tokens.push({
							value: matched,
							// Cast descendant combinators to space
							type: match[0].replace(rtrim, " ")
						});
						soFar = soFar.slice(matched.length);
					}

					// Filters
					for (type in Expr.filter) {
						if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
							matched = match.shift();
							tokens.push({
								value: matched,
								type: type,
								matches: match
							});
							soFar = soFar.slice(matched.length);
						}
					}

					if (!matched) {
						break;
					}
				}

				// Return the length of the invalid excess
				// if we're just parsing
				// Otherwise, throw an error or return tokens
				return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
				// Cache the tokens
				tokenCache(selector, groups).slice(0);
			};

			function toSelector(tokens) {
				var i = 0,
				    len = tokens.length,
				    selector = "";
				for (; i < len; i++) {
					selector += tokens[i].value;
				}
				return selector;
			}

			function addCombinator(matcher, combinator, base) {
				var dir = combinator.dir,
				    skip = combinator.next,
				    key = skip || dir,
				    checkNonElements = base && key === "parentNode",
				    doneName = done++;

				return combinator.first ?
				// Check against closest ancestor/preceding element
				function (elem, context, xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							return matcher(elem, context, xml);
						}
					}
					return false;
				} :

				// Check against all ancestor/preceding elements
				function (elem, context, xml) {
					var oldCache,
					    uniqueCache,
					    outerCache,
					    newCache = [dirruns, doneName];

					// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
					if (xml) {
						while (elem = elem[dir]) {
							if (elem.nodeType === 1 || checkNonElements) {
								if (matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					} else {
						while (elem = elem[dir]) {
							if (elem.nodeType === 1 || checkNonElements) {
								outerCache = elem[expando] || (elem[expando] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

								if (skip && skip === elem.nodeName.toLowerCase()) {
									elem = elem[dir] || elem;
								} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

									// Assign to newCache so results back-propagate to previous elements
									return newCache[2] = oldCache[2];
								} else {
									// Reuse newcache so results back-propagate to previous elements
									uniqueCache[key] = newCache;

									// A match means we're done; a fail means we have to keep checking
									if (newCache[2] = matcher(elem, context, xml)) {
										return true;
									}
								}
							}
						}
					}
					return false;
				};
			}

			function elementMatcher(matchers) {
				return matchers.length > 1 ? function (elem, context, xml) {
					var i = matchers.length;
					while (i--) {
						if (!matchers[i](elem, context, xml)) {
							return false;
						}
					}
					return true;
				} : matchers[0];
			}

			function multipleContexts(selector, contexts, results) {
				var i = 0,
				    len = contexts.length;
				for (; i < len; i++) {
					Sizzle(selector, contexts[i], results);
				}
				return results;
			}

			function condense(unmatched, map, filter, context, xml) {
				var elem,
				    newUnmatched = [],
				    i = 0,
				    len = unmatched.length,
				    mapped = map != null;

				for (; i < len; i++) {
					if (elem = unmatched[i]) {
						if (!filter || filter(elem, context, xml)) {
							newUnmatched.push(elem);
							if (mapped) {
								map.push(i);
							}
						}
					}
				}

				return newUnmatched;
			}

			function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
				if (postFilter && !postFilter[expando]) {
					postFilter = setMatcher(postFilter);
				}
				if (postFinder && !postFinder[expando]) {
					postFinder = setMatcher(postFinder, postSelector);
				}
				return markFunction(function (seed, results, context, xml) {
					var temp,
					    i,
					    elem,
					    preMap = [],
					    postMap = [],
					    preexisting = results.length,


					// Get initial elements from seed or context
					elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


					// Prefilter to get matcher input, preserving a map for seed-results synchronization
					matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
					    matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || (seed ? preFilter : preexisting || postFilter) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results : matcherIn;

					// Find primary matches
					if (matcher) {
						matcher(matcherIn, matcherOut, context, xml);
					}

					// Apply postFilter
					if (postFilter) {
						temp = condense(matcherOut, postMap);
						postFilter(temp, [], context, xml);

						// Un-match failing elements by moving them back to matcherIn
						i = temp.length;
						while (i--) {
							if (elem = temp[i]) {
								matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
							}
						}
					}

					if (seed) {
						if (postFinder || preFilter) {
							if (postFinder) {
								// Get the final matcherOut by condensing this intermediate into postFinder contexts
								temp = [];
								i = matcherOut.length;
								while (i--) {
									if (elem = matcherOut[i]) {
										// Restore matcherIn since elem is not yet a final match
										temp.push(matcherIn[i] = elem);
									}
								}
								postFinder(null, matcherOut = [], temp, xml);
							}

							// Move matched elements from seed to results to keep them synchronized
							i = matcherOut.length;
							while (i--) {
								if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

									seed[temp] = !(results[temp] = elem);
								}
							}
						}

						// Add elements to results, through postFinder if defined
					} else {
						matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
						if (postFinder) {
							postFinder(null, results, matcherOut, xml);
						} else {
							push.apply(results, matcherOut);
						}
					}
				});
			}

			function matcherFromTokens(tokens) {
				var checkContext,
				    matcher,
				    j,
				    len = tokens.length,
				    leadingRelative = Expr.relative[tokens[0].type],
				    implicitRelative = leadingRelative || Expr.relative[" "],
				    i = leadingRelative ? 1 : 0,


				// The foundational matcher ensures that elements are reachable from top-level context(s)
				matchContext = addCombinator(function (elem) {
					return elem === checkContext;
				}, implicitRelative, true),
				    matchAnyContext = addCombinator(function (elem) {
					return indexOf(checkContext, elem) > -1;
				}, implicitRelative, true),
				    matchers = [function (elem, context, xml) {
					var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
					// Avoid hanging onto element (issue #299)
					checkContext = null;
					return ret;
				}];

				for (; i < len; i++) {
					if (matcher = Expr.relative[tokens[i].type]) {
						matchers = [addCombinator(elementMatcher(matchers), matcher)];
					} else {
						matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

						// Return special upon seeing a positional matcher
						if (matcher[expando]) {
							// Find the next relative operator (if any) for proper handling
							j = ++i;
							for (; j < len; j++) {
								if (Expr.relative[tokens[j].type]) {
									break;
								}
							}
							return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
						}
						matchers.push(matcher);
					}
				}

				return elementMatcher(matchers);
			}

			function matcherFromGroupMatchers(elementMatchers, setMatchers) {
				var bySet = setMatchers.length > 0,
				    byElement = elementMatchers.length > 0,
				    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
					var elem,
					    j,
					    matcher,
					    matchedCount = 0,
					    i = "0",
					    unmatched = seed && [],
					    setMatched = [],
					    contextBackup = outermostContext,

					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]("*", outermost),

					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
					    len = elems.length;

					if (outermost) {
						outermostContext = context === document || context || outermost;
					}

					// Add elements passing elementMatchers directly to results
					// Support: IE<9, Safari
					// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
					for (; i !== len && (elem = elems[i]) != null; i++) {
						if (byElement && elem) {
							j = 0;
							if (!context && elem.ownerDocument !== document) {
								setDocument(elem);
								xml = !documentIsHTML;
							}
							while (matcher = elementMatchers[j++]) {
								if (matcher(elem, context || document, xml)) {
									results.push(elem);
									break;
								}
							}
							if (outermost) {
								dirruns = dirrunsUnique;
							}
						}

						// Track unmatched elements for set filters
						if (bySet) {
							// They will have gone through all possible matchers
							if (elem = !matcher && elem) {
								matchedCount--;
							}

							// Lengthen the array for every element, matched or not
							if (seed) {
								unmatched.push(elem);
							}
						}
					}

					// `i` is now the count of elements visited above, and adding it to `matchedCount`
					// makes the latter nonnegative.
					matchedCount += i;

					// Apply set filters to unmatched elements
					// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
					// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
					// no element matchers and no seed.
					// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
					// case, which will result in a "00" `matchedCount` that differs from `i` but is also
					// numerically zero.
					if (bySet && i !== matchedCount) {
						j = 0;
						while (matcher = setMatchers[j++]) {
							matcher(unmatched, setMatched, context, xml);
						}

						if (seed) {
							// Reintegrate element matches to eliminate the need for sorting
							if (matchedCount > 0) {
								while (i--) {
									if (!(unmatched[i] || setMatched[i])) {
										setMatched[i] = pop.call(results);
									}
								}
							}

							// Discard index placeholder values to get only actual matches
							setMatched = condense(setMatched);
						}

						// Add matches to results
						push.apply(results, setMatched);

						// Seedless set matches succeeding multiple successful matchers stipulate sorting
						if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

							Sizzle.uniqueSort(results);
						}
					}

					// Override manipulation of globals by nested matchers
					if (outermost) {
						dirruns = dirrunsUnique;
						outermostContext = contextBackup;
					}

					return unmatched;
				};

				return bySet ? markFunction(superMatcher) : superMatcher;
			}

			compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
				var i,
				    setMatchers = [],
				    elementMatchers = [],
				    cached = compilerCache[selector + " "];

				if (!cached) {
					// Generate a function of recursive functions that can be used to check each element
					if (!match) {
						match = tokenize(selector);
					}
					i = match.length;
					while (i--) {
						cached = matcherFromTokens(match[i]);
						if (cached[expando]) {
							setMatchers.push(cached);
						} else {
							elementMatchers.push(cached);
						}
					}

					// Cache the compiled function
					cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

					// Save selector and tokenization
					cached.selector = selector;
				}
				return cached;
			};

			/**
	   * A low-level selection function that works with Sizzle's compiled
	   *  selector functions
	   * @param {String|Function} selector A selector or a pre-compiled
	   *  selector function built with Sizzle.compile
	   * @param {Element} context
	   * @param {Array} [results]
	   * @param {Array} [seed] A set of elements to match against
	   */
			select = Sizzle.select = function (selector, context, results, seed) {
				var i,
				    tokens,
				    token,
				    type,
				    find,
				    compiled = typeof selector === "function" && selector,
				    match = !seed && tokenize(selector = compiled.selector || selector);

				results = results || [];

				// Try to minimize operations if there is only one selector in the list and no seed
				// (the latter of which guarantees us context)
				if (match.length === 1) {

					// Reduce context if the leading compound selector is an ID
					tokens = match[0] = match[0].slice(0);
					if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

						context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
						if (!context) {
							return results;

							// Precompiled matchers will still verify ancestry, so step up a level
						} else if (compiled) {
							context = context.parentNode;
						}

						selector = selector.slice(tokens.shift().value.length);
					}

					// Fetch a seed set for right-to-left matching
					i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
					while (i--) {
						token = tokens[i];

						// Abort if we hit a combinator
						if (Expr.relative[type = token.type]) {
							break;
						}
						if (find = Expr.find[type]) {
							// Search, expanding context for leading sibling combinators
							if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

								// If seed is empty or no tokens remain, we can return early
								tokens.splice(i, 1);
								selector = seed.length && toSelector(tokens);
								if (!selector) {
									push.apply(results, seed);
									return results;
								}

								break;
							}
						}
					}
				}

				// Compile and execute a filtering function if one is not provided
				// Provide `match` to avoid retokenization if we modified the selector above
				(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
				return results;
			};

			// One-time assignments

			// Sort stability
			support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

			// Support: Chrome 14-35+
			// Always assume duplicates if they aren't passed to the comparison function
			support.detectDuplicates = !!hasDuplicate;

			// Initialize against the default document
			setDocument();

			// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
			// Detached nodes confoundingly follow *each other*
			support.sortDetached = assert(function (el) {
				// Should return 1, but returns 4 (following)
				return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
			});

			// Support: IE<8
			// Prevent attribute/property "interpolation"
			// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
			if (!assert(function (el) {
				el.innerHTML = "<a href='#'></a>";
				return el.firstChild.getAttribute("href") === "#";
			})) {
				addHandle("type|href|height|width", function (elem, name, isXML) {
					if (!isXML) {
						return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
					}
				});
			}

			// Support: IE<9
			// Use defaultValue in place of getAttribute("value")
			if (!support.attributes || !assert(function (el) {
				el.innerHTML = "<input/>";
				el.firstChild.setAttribute("value", "");
				return el.firstChild.getAttribute("value") === "";
			})) {
				addHandle("value", function (elem, name, isXML) {
					if (!isXML && elem.nodeName.toLowerCase() === "input") {
						return elem.defaultValue;
					}
				});
			}

			// Support: IE<9
			// Use getAttributeNode to fetch booleans when getAttribute lies
			if (!assert(function (el) {
				return el.getAttribute("disabled") == null;
			})) {
				addHandle(booleans, function (elem, name, isXML) {
					var val;
					if (!isXML) {
						return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
					}
				});
			}

			return Sizzle;
		}(window);

		jQuery.find = Sizzle;
		jQuery.expr = Sizzle.selectors;

		// Deprecated
		jQuery.expr[":"] = jQuery.expr.pseudos;
		jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
		jQuery.text = Sizzle.getText;
		jQuery.isXMLDoc = Sizzle.isXML;
		jQuery.contains = Sizzle.contains;
		jQuery.escapeSelector = Sizzle.escape;

		var dir = function dir(elem, _dir, until) {
			var matched = [],
			    truncate = until !== undefined;

			while ((elem = elem[_dir]) && elem.nodeType !== 9) {
				if (elem.nodeType === 1) {
					if (truncate && jQuery(elem).is(until)) {
						break;
					}
					matched.push(elem);
				}
			}
			return matched;
		};

		var _siblings = function _siblings(n, elem) {
			var matched = [];

			for (; n; n = n.nextSibling) {
				if (n.nodeType === 1 && n !== elem) {
					matched.push(n);
				}
			}

			return matched;
		};

		var rneedsContext = jQuery.expr.match.needsContext;

		function nodeName(elem, name) {

			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		};
		var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

		var risSimple = /^.[^:#\[\.,]*$/;

		// Implement the identical functionality for filter and not
		function winnow(elements, qualifier, not) {
			if (jQuery.isFunction(qualifier)) {
				return jQuery.grep(elements, function (elem, i) {
					return !!qualifier.call(elem, i, elem) !== not;
				});
			}

			// Single element
			if (qualifier.nodeType) {
				return jQuery.grep(elements, function (elem) {
					return elem === qualifier !== not;
				});
			}

			// Arraylike of elements (jQuery, arguments, Array)
			if (typeof qualifier !== "string") {
				return jQuery.grep(elements, function (elem) {
					return indexOf.call(qualifier, elem) > -1 !== not;
				});
			}

			// Simple selector that can be filtered directly, removing non-Elements
			if (risSimple.test(qualifier)) {
				return jQuery.filter(qualifier, elements, not);
			}

			// Complex selector, compare the two sets, removing non-Elements
			qualifier = jQuery.filter(qualifier, elements);
			return jQuery.grep(elements, function (elem) {
				return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1;
			});
		}

		jQuery.filter = function (expr, elems, not) {
			var elem = elems[0];

			if (not) {
				expr = ":not(" + expr + ")";
			}

			if (elems.length === 1 && elem.nodeType === 1) {
				return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
			}

			return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
				return elem.nodeType === 1;
			}));
		};

		jQuery.fn.extend({
			find: function find(selector) {
				var i,
				    ret,
				    len = this.length,
				    self = this;

				if (typeof selector !== "string") {
					return this.pushStack(jQuery(selector).filter(function () {
						for (i = 0; i < len; i++) {
							if (jQuery.contains(self[i], this)) {
								return true;
							}
						}
					}));
				}

				ret = this.pushStack([]);

				for (i = 0; i < len; i++) {
					jQuery.find(selector, self[i], ret);
				}

				return len > 1 ? jQuery.uniqueSort(ret) : ret;
			},
			filter: function filter(selector) {
				return this.pushStack(winnow(this, selector || [], false));
			},
			not: function not(selector) {
				return this.pushStack(winnow(this, selector || [], true));
			},
			is: function is(selector) {
				return !!winnow(this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
			}
		});

		// Initialize a jQuery object


		// A central reference to the root jQuery(document)
		var rootjQuery,


		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
		    init = jQuery.fn.init = function (selector, context, root) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if (!selector) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if (typeof selector === "string") {
				if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [null, selector, null];
				} else {
					match = rquickExpr.exec(selector);
				}

				// Match html or make sure no context is specified for #id
				if (match && (match[1] || !context)) {

					// HANDLE: $(html) -> $(array)
					if (match[1]) {
						context = context instanceof jQuery ? context[0] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

						// HANDLE: $(html, props)
						if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
							for (match in context) {

								// Properties of context are called as methods if possible
								if (jQuery.isFunction(this[match])) {
									this[match](context[match]);

									// ...and otherwise set as attributes
								} else {
									this.attr(match, context[match]);
								}
							}
						}

						return this;

						// HANDLE: $(#id)
					} else {
						elem = document.getElementById(match[2]);

						if (elem) {

							// Inject the element directly into the jQuery object
							this[0] = elem;
							this.length = 1;
						}
						return this;
					}

					// HANDLE: $(expr, $(...))
				} else if (!context || context.jquery) {
					return (context || root).find(selector);

					// HANDLE: $(expr, context)
					// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor(context).find(selector);
				}

				// HANDLE: $(DOMElement)
			} else if (selector.nodeType) {
				this[0] = selector;
				this.length = 1;
				return this;

				// HANDLE: $(function)
				// Shortcut for document ready
			} else if (jQuery.isFunction(selector)) {
				return root.ready !== undefined ? root.ready(selector) :

				// Execute immediately if ready is not present
				selector(jQuery);
			}

			return jQuery.makeArray(selector, this);
		};

		// Give the init function the jQuery prototype for later instantiation
		init.prototype = jQuery.fn;

		// Initialize central reference
		rootjQuery = jQuery(document);

		var rparentsprev = /^(?:parents|prev(?:Until|All))/,


		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

		jQuery.fn.extend({
			has: function has(target) {
				var targets = jQuery(target, this),
				    l = targets.length;

				return this.filter(function () {
					var i = 0;
					for (; i < l; i++) {
						if (jQuery.contains(this, targets[i])) {
							return true;
						}
					}
				});
			},

			closest: function closest(selectors, context) {
				var cur,
				    i = 0,
				    l = this.length,
				    matched = [],
				    targets = typeof selectors !== "string" && jQuery(selectors);

				// Positional selectors never match, since there's no _selection_ context
				if (!rneedsContext.test(selectors)) {
					for (; i < l; i++) {
						for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

							// Always skip document fragments
							if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

								matched.push(cur);
								break;
							}
						}
					}
				}

				return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
			},

			// Determine the position of an element within the set
			index: function index(elem) {

				// No argument, return index in parent
				if (!elem) {
					return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
				}

				// Index in selector
				if (typeof elem === "string") {
					return indexOf.call(jQuery(elem), this[0]);
				}

				// Locate the position of the desired element
				return indexOf.call(this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[0] : elem);
			},

			add: function add(selector, context) {
				return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
			},

			addBack: function addBack(selector) {
				return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
			}
		});

		function sibling(cur, dir) {
			while ((cur = cur[dir]) && cur.nodeType !== 1) {}
			return cur;
		}

		jQuery.each({
			parent: function parent(elem) {
				var parent = elem.parentNode;
				return parent && parent.nodeType !== 11 ? parent : null;
			},
			parents: function parents(elem) {
				return dir(elem, "parentNode");
			},
			parentsUntil: function parentsUntil(elem, i, until) {
				return dir(elem, "parentNode", until);
			},
			next: function next(elem) {
				return sibling(elem, "nextSibling");
			},
			prev: function prev(elem) {
				return sibling(elem, "previousSibling");
			},
			nextAll: function nextAll(elem) {
				return dir(elem, "nextSibling");
			},
			prevAll: function prevAll(elem) {
				return dir(elem, "previousSibling");
			},
			nextUntil: function nextUntil(elem, i, until) {
				return dir(elem, "nextSibling", until);
			},
			prevUntil: function prevUntil(elem, i, until) {
				return dir(elem, "previousSibling", until);
			},
			siblings: function siblings(elem) {
				return _siblings((elem.parentNode || {}).firstChild, elem);
			},
			children: function children(elem) {
				return _siblings(elem.firstChild);
			},
			contents: function contents(elem) {
				if (nodeName(elem, "iframe")) {
					return elem.contentDocument;
				}

				// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
				// Treat the template element as a regular one in browsers that
				// don't support it.
				if (nodeName(elem, "template")) {
					elem = elem.content || elem;
				}

				return jQuery.merge([], elem.childNodes);
			}
		}, function (name, fn) {
			jQuery.fn[name] = function (until, selector) {
				var matched = jQuery.map(this, fn, until);

				if (name.slice(-5) !== "Until") {
					selector = until;
				}

				if (selector && typeof selector === "string") {
					matched = jQuery.filter(selector, matched);
				}

				if (this.length > 1) {

					// Remove duplicates
					if (!guaranteedUnique[name]) {
						jQuery.uniqueSort(matched);
					}

					// Reverse order for parents* and prev-derivatives
					if (rparentsprev.test(name)) {
						matched.reverse();
					}
				}

				return this.pushStack(matched);
			};
		});
		var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

		// Convert String-formatted options into Object-formatted ones
		function createOptions(options) {
			var object = {};
			jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
				object[flag] = true;
			});
			return object;
		}

		/*
	  * Create a callback list using the following parameters:
	  *
	  *	options: an optional list of space-separated options that will change how
	  *			the callback list behaves or a more traditional option object
	  *
	  * By default a callback list will act like an event callback list and can be
	  * "fired" multiple times.
	  *
	  * Possible options:
	  *
	  *	once:			will ensure the callback list can only be fired once (like a Deferred)
	  *
	  *	memory:			will keep track of previous values and will call any callback added
	  *					after the list has been fired right away with the latest "memorized"
	  *					values (like a Deferred)
	  *
	  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	  *
	  *	stopOnFalse:	interrupt callings when a callback returns false
	  *
	  */
		jQuery.Callbacks = function (options) {

			// Convert options from String-formatted to Object-formatted if needed
			// (we check in cache first)
			options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

			var // Flag to know if list is currently firing
			firing,


			// Last fire value for non-forgettable lists
			memory,


			// Flag to know if list was already fired
			_fired,


			// Flag to prevent firing
			_locked,


			// Actual callback list
			list = [],


			// Queue of execution data for repeatable lists
			queue = [],


			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,


			// Fire callbacks
			fire = function fire() {

				// Enforce single-firing
				_locked = _locked || options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				_fired = firing = true;
				for (; queue.length; firingIndex = -1) {
					memory = queue.shift();
					while (++firingIndex < list.length) {

						// Run callback and check for early termination
						if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if (!options.memory) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if (_locked) {

					// Keep an empty list if we have data for future add calls
					if (memory) {
						list = [];

						// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},


			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function add() {
					if (list) {

						// If we have memory from a past run, we should fire after adding
						if (memory && !firing) {
							firingIndex = list.length - 1;
							queue.push(memory);
						}

						(function add(args) {
							jQuery.each(args, function (_, arg) {
								if (jQuery.isFunction(arg)) {
									if (!options.unique || !self.has(arg)) {
										list.push(arg);
									}
								} else if (arg && arg.length && jQuery.type(arg) !== "string") {

									// Inspect recursively
									add(arg);
								}
							});
						})(arguments);

						if (memory && !firing) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function remove() {
					jQuery.each(arguments, function (_, arg) {
						var index;
						while ((index = jQuery.inArray(arg, list, index)) > -1) {
							list.splice(index, 1);

							// Handle firing indexes
							if (index <= firingIndex) {
								firingIndex--;
							}
						}
					});
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function has(fn) {
					return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function empty() {
					if (list) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function disable() {
					_locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function disabled() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function lock() {
					_locked = queue = [];
					if (!memory && !firing) {
						list = memory = "";
					}
					return this;
				},
				locked: function locked() {
					return !!_locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function fireWith(context, args) {
					if (!_locked) {
						args = args || [];
						args = [context, args.slice ? args.slice() : args];
						queue.push(args);
						if (!firing) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function fire() {
					self.fireWith(this, arguments);
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function fired() {
					return !!_fired;
				}
			};

			return self;
		};

		function Identity(v) {
			return v;
		}
		function Thrower(ex) {
			throw ex;
		}

		function adoptValue(value, resolve, reject, noValue) {
			var method;

			try {

				// Check for promise aspect first to privilege synchronous behavior
				if (value && jQuery.isFunction(method = value.promise)) {
					method.call(value).done(resolve).fail(reject);

					// Other thenables
				} else if (value && jQuery.isFunction(method = value.then)) {
					method.call(value, resolve, reject);

					// Other non-thenables
				} else {

					// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
					// * false: [ value ].slice( 0 ) => resolve( value )
					// * true: [ value ].slice( 1 ) => resolve()
					resolve.apply(undefined, [value].slice(noValue));
				}

				// For Promises/A+, convert exceptions into rejections
				// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
				// Deferred#then to conditionally suppress rejection.
			} catch (value) {

				// Support: Android 4.0 only
				// Strict mode functions invoked without .call/.apply get global-object context
				reject.apply(undefined, [value]);
			}
		}

		jQuery.extend({

			Deferred: function Deferred(func) {
				var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
				    _state = "pending",
				    _promise = {
					state: function state() {
						return _state;
					},
					always: function always() {
						deferred.done(arguments).fail(arguments);
						return this;
					},
					"catch": function _catch(fn) {
						return _promise.then(null, fn);
					},

					// Keep pipe for back-compat
					pipe: function pipe() /* fnDone, fnFail, fnProgress */{
						var fns = arguments;

						return jQuery.Deferred(function (newDefer) {
							jQuery.each(tuples, function (i, tuple) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[tuple[1]](function () {
									var returned = fn && fn.apply(this, arguments);
									if (returned && jQuery.isFunction(returned.promise)) {
										returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
									} else {
										newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
									}
								});
							});
							fns = null;
						}).promise();
					},
					then: function then(onFulfilled, onRejected, onProgress) {
						var maxDepth = 0;
						function resolve(depth, deferred, handler, special) {
							return function () {
								var that = this,
								    args = arguments,
								    mightThrow = function mightThrow() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if (depth < maxDepth) {
										return;
									}

									returned = handler.apply(that, args);

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if (returned === deferred.promise()) {
										throw new TypeError("Thenable self-resolution");
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned && (

									// Support: Promises/A+ section 2.3.4
									// https://promisesaplus.com/#point-64
									// Only check objects and functions for thenability
									(typeof returned === "undefined" ? "undefined" : _typeof(returned)) === "object" || typeof returned === "function") && returned.then;

									// Handle a returned thenable
									if (jQuery.isFunction(then)) {

										// Special processors (notify) just wait for resolution
										if (special) {
											then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

											// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
										}

										// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if (handler !== Identity) {
											that = undefined;
											args = [returned];
										}

										// Process the value(s)
										// Default process is resolve
										(special || deferred.resolveWith)(that, args);
									}
								},


								// Only normal processors (resolve) catch and reject exceptions
								process = special ? mightThrow : function () {
									try {
										mightThrow();
									} catch (e) {

										if (jQuery.Deferred.exceptionHook) {
											jQuery.Deferred.exceptionHook(e, process.stackTrace);
										}

										// Support: Promises/A+ section 2.3.3.3.4.1
										// https://promisesaplus.com/#point-61
										// Ignore post-resolution exceptions
										if (depth + 1 >= maxDepth) {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if (handler !== Thrower) {
												that = undefined;
												args = [e];
											}

											deferred.rejectWith(that, args);
										}
									}
								};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if (depth) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if (jQuery.Deferred.getStackHook) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout(process);
								}
							};
						}

						return jQuery.Deferred(function (newDefer) {

							// progress_handlers.add( ... )
							tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

							// fulfilled_handlers.add( ... )
							tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));

							// rejected_handlers.add( ... )
							tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower));
						}).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function promise(obj) {
						return obj != null ? jQuery.extend(obj, _promise) : _promise;
					}
				},
				    deferred = {};

				// Add list-specific methods
				jQuery.each(tuples, function (i, tuple) {
					var list = tuple[2],
					    stateString = tuple[5];

					// promise.progress = list.add
					// promise.done = list.add
					// promise.fail = list.add
					_promise[tuple[1]] = list.add;

					// Handle state
					if (stateString) {
						list.add(function () {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							_state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[3 - i][2].disable,

						// progress_callbacks.lock
						tuples[0][2].lock);
					}

					// progress_handlers.fire
					// fulfilled_handlers.fire
					// rejected_handlers.fire
					list.add(tuple[3].fire);

					// deferred.notify = function() { deferred.notifyWith(...) }
					// deferred.resolve = function() { deferred.resolveWith(...) }
					// deferred.reject = function() { deferred.rejectWith(...) }
					deferred[tuple[0]] = function () {
						deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
						return this;
					};

					// deferred.notifyWith = list.fireWith
					// deferred.resolveWith = list.fireWith
					// deferred.rejectWith = list.fireWith
					deferred[tuple[0] + "With"] = list.fireWith;
				});

				// Make the deferred a promise
				_promise.promise(deferred);

				// Call given func if any
				if (func) {
					func.call(deferred, deferred);
				}

				// All done!
				return deferred;
			},

			// Deferred helper
			when: function when(singleValue) {
				var

				// count of uncompleted subordinates
				remaining = arguments.length,


				// count of unprocessed arguments
				i = remaining,


				// subordinate fulfillment data
				resolveContexts = Array(i),
				    resolveValues = _slice.call(arguments),


				// the master Deferred
				master = jQuery.Deferred(),


				// subordinate callback factory
				updateFunc = function updateFunc(i) {
					return function (value) {
						resolveContexts[i] = this;
						resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
						if (! --remaining) {
							master.resolveWith(resolveContexts, resolveValues);
						}
					};
				};

				// Single- and empty arguments are adopted like Promise.resolve
				if (remaining <= 1) {
					adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);

					// Use .then() to unwrap secondary thenables (cf. gh-3000)
					if (master.state() === "pending" || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {

						return master.then();
					}
				}

				// Multiple arguments are aggregated like Promise.all array elements
				while (i--) {
					adoptValue(resolveValues[i], updateFunc(i), master.reject);
				}

				return master.promise();
			}
		});

		// These usually indicate a programmer mistake during development,
		// warn about them ASAP rather than swallowing them by default.
		var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

		jQuery.Deferred.exceptionHook = function (error, stack) {

			// Support: IE 8 - 9 only
			// Console exists when dev tools are open, which can happen at any time
			if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
				window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
			}
		};

		jQuery.readyException = function (error) {
			window.setTimeout(function () {
				throw error;
			});
		};

		// The deferred used on DOM ready
		var readyList = jQuery.Deferred();

		jQuery.fn.ready = function (fn) {

			readyList.then(fn)

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch(function (error) {
				jQuery.readyException(error);
			});

			return this;
		};

		jQuery.extend({

			// Is the DOM ready to be used? Set to true once it occurs.
			isReady: false,

			// A counter to track how many items to wait for before
			// the ready event fires. See #6781
			readyWait: 1,

			// Handle when the DOM is ready
			ready: function ready(wait) {

				// Abort if there are pending holds or we're already ready
				if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
					return;
				}

				// Remember that the DOM is ready
				jQuery.isReady = true;

				// If a normal DOM Ready event fired, decrement, and wait if need be
				if (wait !== true && --jQuery.readyWait > 0) {
					return;
				}

				// If there are functions bound, to execute
				readyList.resolveWith(document, [jQuery]);
			}
		});

		jQuery.ready.then = readyList.then;

		// The ready event handler and self cleanup method
		function completed() {
			document.removeEventListener("DOMContentLoaded", completed);
			window.removeEventListener("load", completed);
			jQuery.ready();
		}

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE <=9 - 10 only
		// Older IE sometimes signals "interactive" too soon
		if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout(jQuery.ready);
		} else {

			// Use the handy event callback
			document.addEventListener("DOMContentLoaded", completed);

			// A fallback to window.onload, that will always work
			window.addEventListener("load", completed);
		}

		// Multifunctional method to get and set values of a collection
		// The value/s can optionally be executed if it's a function
		var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
			var i = 0,
			    len = elems.length,
			    bulk = key == null;

			// Sets many values
			if (jQuery.type(key) === "object") {
				chainable = true;
				for (i in key) {
					access(elems, fn, i, key[i], true, emptyGet, raw);
				}

				// Sets one value
			} else if (value !== undefined) {
				chainable = true;

				if (!jQuery.isFunction(value)) {
					raw = true;
				}

				if (bulk) {

					// Bulk operations run against the entire set
					if (raw) {
						fn.call(elems, value);
						fn = null;

						// ...except when executing function values
					} else {
						bulk = fn;
						fn = function fn(elem, key, value) {
							return bulk.call(jQuery(elem), value);
						};
					}
				}

				if (fn) {
					for (; i < len; i++) {
						fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
					}
				}
			}

			if (chainable) {
				return elems;
			}

			// Gets
			if (bulk) {
				return fn.call(elems);
			}

			return len ? fn(elems[0], key) : emptyGet;
		};
		var acceptData = function acceptData(owner) {

			// Accepts only:
			//  - Node
			//    - Node.ELEMENT_NODE
			//    - Node.DOCUMENT_NODE
			//  - Object
			//    - Any
			return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
		};

		function Data() {
			this.expando = jQuery.expando + Data.uid++;
		}

		Data.uid = 1;

		Data.prototype = {

			cache: function cache(owner) {

				// Check if the owner object already has a cache
				var value = owner[this.expando];

				// If not, create one
				if (!value) {
					value = {};

					// We can accept data for non-element nodes in modern browsers,
					// but we should not, see #8335.
					// Always return an empty object.
					if (acceptData(owner)) {

						// If it is a node unlikely to be stringify-ed or looped over
						// use plain assignment
						if (owner.nodeType) {
							owner[this.expando] = value;

							// Otherwise secure it in a non-enumerable property
							// configurable must be true to allow the property to be
							// deleted when data is removed
						} else {
							Object.defineProperty(owner, this.expando, {
								value: value,
								configurable: true
							});
						}
					}
				}

				return value;
			},
			set: function set(owner, data, value) {
				var prop,
				    cache = this.cache(owner);

				// Handle: [ owner, key, value ] args
				// Always use camelCase key (gh-2257)
				if (typeof data === "string") {
					cache[jQuery.camelCase(data)] = value;

					// Handle: [ owner, { properties } ] args
				} else {

					// Copy the properties one-by-one to the cache object
					for (prop in data) {
						cache[jQuery.camelCase(prop)] = data[prop];
					}
				}
				return cache;
			},
			get: function get(owner, key) {
				return key === undefined ? this.cache(owner) :

				// Always use camelCase key (gh-2257)
				owner[this.expando] && owner[this.expando][jQuery.camelCase(key)];
			},
			access: function access(owner, key, value) {

				// In cases where either:
				//
				//   1. No key was specified
				//   2. A string key was specified, but no value provided
				//
				// Take the "read" path and allow the get method to determine
				// which value to return, respectively either:
				//
				//   1. The entire cache object
				//   2. The data stored at the key
				//
				if (key === undefined || key && typeof key === "string" && value === undefined) {

					return this.get(owner, key);
				}

				// When the key is not a string, or both a key and value
				// are specified, set or extend (existing objects) with either:
				//
				//   1. An object of properties
				//   2. A key and value
				//
				this.set(owner, key, value);

				// Since the "set" path can have two possible entry points
				// return the expected data based on which path was taken[*]
				return value !== undefined ? value : key;
			},
			remove: function remove(owner, key) {
				var i,
				    cache = owner[this.expando];

				if (cache === undefined) {
					return;
				}

				if (key !== undefined) {

					// Support array or space separated string of keys
					if (Array.isArray(key)) {

						// If key is an array of keys...
						// We always set camelCase keys, so remove that.
						key = key.map(jQuery.camelCase);
					} else {
						key = jQuery.camelCase(key);

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
					}

					i = key.length;

					while (i--) {
						delete cache[key[i]];
					}
				}

				// Remove the expando if there's no more data
				if (key === undefined || jQuery.isEmptyObject(cache)) {

					// Support: Chrome <=35 - 45
					// Webkit & Blink performance suffers when deleting properties
					// from DOM nodes, so set to undefined instead
					// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
					if (owner.nodeType) {
						owner[this.expando] = undefined;
					} else {
						delete owner[this.expando];
					}
				}
			},
			hasData: function hasData(owner) {
				var cache = owner[this.expando];
				return cache !== undefined && !jQuery.isEmptyObject(cache);
			}
		};
		var dataPriv = new Data();

		var dataUser = new Data();

		//	Implementation Summary
		//
		//	1. Enforce API surface and semantic compatibility with 1.9.x branch
		//	2. Improve the module's maintainability by reducing the storage
		//		paths to a single mechanism.
		//	3. Use the same single mechanism to support "private" and "user" data.
		//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
		//	5. Avoid exposing implementation details on user objects (eg. expando properties)
		//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

		var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		    rmultiDash = /[A-Z]/g;

		function getData(data) {
			if (data === "true") {
				return true;
			}

			if (data === "false") {
				return false;
			}

			if (data === "null") {
				return null;
			}

			// Only convert to a number if it doesn't change the string
			if (data === +data + "") {
				return +data;
			}

			if (rbrace.test(data)) {
				return JSON.parse(data);
			}

			return data;
		}

		function dataAttr(elem, key, data) {
			var name;

			// If nothing was found internally, try to fetch any
			// data from the HTML5 data-* attribute
			if (data === undefined && elem.nodeType === 1) {
				name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
				data = elem.getAttribute(name);

				if (typeof data === "string") {
					try {
						data = getData(data);
					} catch (e) {}

					// Make sure we set the data so it isn't changed later
					dataUser.set(elem, key, data);
				} else {
					data = undefined;
				}
			}
			return data;
		}

		jQuery.extend({
			hasData: function hasData(elem) {
				return dataUser.hasData(elem) || dataPriv.hasData(elem);
			},

			data: function data(elem, name, _data) {
				return dataUser.access(elem, name, _data);
			},

			removeData: function removeData(elem, name) {
				dataUser.remove(elem, name);
			},

			// TODO: Now that all calls to _data and _removeData have been replaced
			// with direct calls to dataPriv methods, these can be deprecated.
			_data: function _data(elem, name, data) {
				return dataPriv.access(elem, name, data);
			},

			_removeData: function _removeData(elem, name) {
				dataPriv.remove(elem, name);
			}
		});

		jQuery.fn.extend({
			data: function data(key, value) {
				var i,
				    name,
				    data,
				    elem = this[0],
				    attrs = elem && elem.attributes;

				// Gets all values
				if (key === undefined) {
					if (this.length) {
						data = dataUser.get(elem);

						if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
							i = attrs.length;
							while (i--) {

								// Support: IE 11 only
								// The attrs elements can be null (#14894)
								if (attrs[i]) {
									name = attrs[i].name;
									if (name.indexOf("data-") === 0) {
										name = jQuery.camelCase(name.slice(5));
										dataAttr(elem, name, data[name]);
									}
								}
							}
							dataPriv.set(elem, "hasDataAttrs", true);
						}
					}

					return data;
				}

				// Sets multiple values
				if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
					return this.each(function () {
						dataUser.set(this, key);
					});
				}

				return access(this, function (value) {
					var data;

					// The calling jQuery object (element matches) is not empty
					// (and therefore has an element appears at this[ 0 ]) and the
					// `value` parameter was not undefined. An empty jQuery object
					// will result in `undefined` for elem = this[ 0 ] which will
					// throw an exception if an attempt to read a data cache is made.
					if (elem && value === undefined) {

						// Attempt to get data from the cache
						// The key will always be camelCased in Data
						data = dataUser.get(elem, key);
						if (data !== undefined) {
							return data;
						}

						// Attempt to "discover" the data in
						// HTML5 custom data-* attrs
						data = dataAttr(elem, key);
						if (data !== undefined) {
							return data;
						}

						// We tried really hard, but the data doesn't exist.
						return;
					}

					// Set the data...
					this.each(function () {

						// We always store the camelCased key
						dataUser.set(this, key, value);
					});
				}, null, value, arguments.length > 1, null, true);
			},

			removeData: function removeData(key) {
				return this.each(function () {
					dataUser.remove(this, key);
				});
			}
		});

		jQuery.extend({
			queue: function queue(elem, type, data) {
				var queue;

				if (elem) {
					type = (type || "fx") + "queue";
					queue = dataPriv.get(elem, type);

					// Speed up dequeue by getting out quickly if this is just a lookup
					if (data) {
						if (!queue || Array.isArray(data)) {
							queue = dataPriv.access(elem, type, jQuery.makeArray(data));
						} else {
							queue.push(data);
						}
					}
					return queue || [];
				}
			},

			dequeue: function dequeue(elem, type) {
				type = type || "fx";

				var queue = jQuery.queue(elem, type),
				    startLength = queue.length,
				    fn = queue.shift(),
				    hooks = jQuery._queueHooks(elem, type),
				    next = function next() {
					jQuery.dequeue(elem, type);
				};

				// If the fx queue is dequeued, always remove the progress sentinel
				if (fn === "inprogress") {
					fn = queue.shift();
					startLength--;
				}

				if (fn) {

					// Add a progress sentinel to prevent the fx queue from being
					// automatically dequeued
					if (type === "fx") {
						queue.unshift("inprogress");
					}

					// Clear up the last queue stop function
					delete hooks.stop;
					fn.call(elem, next, hooks);
				}

				if (!startLength && hooks) {
					hooks.empty.fire();
				}
			},

			// Not public - generate a queueHooks object, or return the current one
			_queueHooks: function _queueHooks(elem, type) {
				var key = type + "queueHooks";
				return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
					empty: jQuery.Callbacks("once memory").add(function () {
						dataPriv.remove(elem, [type + "queue", key]);
					})
				});
			}
		});

		jQuery.fn.extend({
			queue: function queue(type, data) {
				var setter = 2;

				if (typeof type !== "string") {
					data = type;
					type = "fx";
					setter--;
				}

				if (arguments.length < setter) {
					return jQuery.queue(this[0], type);
				}

				return data === undefined ? this : this.each(function () {
					var queue = jQuery.queue(this, type, data);

					// Ensure a hooks for this queue
					jQuery._queueHooks(this, type);

					if (type === "fx" && queue[0] !== "inprogress") {
						jQuery.dequeue(this, type);
					}
				});
			},
			dequeue: function dequeue(type) {
				return this.each(function () {
					jQuery.dequeue(this, type);
				});
			},
			clearQueue: function clearQueue(type) {
				return this.queue(type || "fx", []);
			},

			// Get a promise resolved when queues of a certain type
			// are emptied (fx is the type by default)
			promise: function promise(type, obj) {
				var tmp,
				    count = 1,
				    defer = jQuery.Deferred(),
				    elements = this,
				    i = this.length,
				    resolve = function resolve() {
					if (! --count) {
						defer.resolveWith(elements, [elements]);
					}
				};

				if (typeof type !== "string") {
					obj = type;
					type = undefined;
				}
				type = type || "fx";

				while (i--) {
					tmp = dataPriv.get(elements[i], type + "queueHooks");
					if (tmp && tmp.empty) {
						count++;
						tmp.empty.add(resolve);
					}
				}
				resolve();
				return defer.promise(obj);
			}
		});
		var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

		var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

		var cssExpand = ["Top", "Right", "Bottom", "Left"];

		var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" || elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
		};

		var swap = function swap(elem, options, callback, args) {
			var ret,
			    name,
			    old = {};

			// Remember the old values, and insert the new ones
			for (name in options) {
				old[name] = elem.style[name];
				elem.style[name] = options[name];
			}

			ret = callback.apply(elem, args || []);

			// Revert the old values
			for (name in options) {
				elem.style[name] = old[name];
			}

			return ret;
		};

		function adjustCSS(elem, prop, valueParts, tween) {
			var adjusted,
			    scale = 1,
			    maxIterations = 20,
			    currentValue = tween ? function () {
				return tween.cur();
			} : function () {
				return jQuery.css(elem, prop, "");
			},
			    initial = currentValue(),
			    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


			// Starting value computation is required for potential unit mismatches
			initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

			if (initialInUnit && initialInUnit[3] !== unit) {

				// Trust units reported by jQuery.css
				unit = unit || initialInUnit[3];

				// Make sure we update the tween properties later on
				valueParts = valueParts || [];

				// Iteratively approximate from a nonzero starting point
				initialInUnit = +initial || 1;

				do {

					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					initialInUnit = initialInUnit / scale;
					jQuery.style(elem, prop, initialInUnit + unit);

					// Update scale, tolerating zero or NaN from tween.cur()
					// Break the loop if scale is unchanged or perfect, or if we've just had enough.
				} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
			}

			if (valueParts) {
				initialInUnit = +initialInUnit || +initial || 0;

				// Apply relative offset (+=/-=) if specified
				adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
				if (tween) {
					tween.unit = unit;
					tween.start = initialInUnit;
					tween.end = adjusted;
				}
			}
			return adjusted;
		}

		var defaultDisplayMap = {};

		function getDefaultDisplay(elem) {
			var temp,
			    doc = elem.ownerDocument,
			    nodeName = elem.nodeName,
			    display = defaultDisplayMap[nodeName];

			if (display) {
				return display;
			}

			temp = doc.body.appendChild(doc.createElement(nodeName));
			display = jQuery.css(temp, "display");

			temp.parentNode.removeChild(temp);

			if (display === "none") {
				display = "block";
			}
			defaultDisplayMap[nodeName] = display;

			return display;
		}

		function showHide(elements, show) {
			var display,
			    elem,
			    values = [],
			    index = 0,
			    length = elements.length;

			// Determine new display value for elements that need to change
			for (; index < length; index++) {
				elem = elements[index];
				if (!elem.style) {
					continue;
				}

				display = elem.style.display;
				if (show) {

					// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
					// check is required in this first loop unless we have a nonempty display value (either
					// inline or about-to-be-restored)
					if (display === "none") {
						values[index] = dataPriv.get(elem, "display") || null;
						if (!values[index]) {
							elem.style.display = "";
						}
					}
					if (elem.style.display === "" && isHiddenWithinTree(elem)) {
						values[index] = getDefaultDisplay(elem);
					}
				} else {
					if (display !== "none") {
						values[index] = "none";

						// Remember what we're overwriting
						dataPriv.set(elem, "display", display);
					}
				}
			}

			// Set the display of the elements in a second loop to avoid constant reflow
			for (index = 0; index < length; index++) {
				if (values[index] != null) {
					elements[index].style.display = values[index];
				}
			}

			return elements;
		}

		jQuery.fn.extend({
			show: function show() {
				return showHide(this, true);
			},
			hide: function hide() {
				return showHide(this);
			},
			toggle: function toggle(state) {
				if (typeof state === "boolean") {
					return state ? this.show() : this.hide();
				}

				return this.each(function () {
					if (isHiddenWithinTree(this)) {
						jQuery(this).show();
					} else {
						jQuery(this).hide();
					}
				});
			}
		});
		var rcheckableType = /^(?:checkbox|radio)$/i;

		var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;

		var rscriptType = /^$|\/(?:java|ecma)script/i;

		// We have to close these tags to support XHTML (#13200)
		var wrapMap = {

			// Support: IE <=9 only
			option: [1, "<select multiple='multiple'>", "</select>"],

			// XHTML parsers do not magically insert elements in the
			// same way that tag soup parsers do. So we cannot shorten
			// this by omitting <tbody> or other required elements.
			thead: [1, "<table>", "</table>"],
			col: [2, "<table><colgroup>", "</colgroup></table>"],
			tr: [2, "<table><tbody>", "</tbody></table>"],
			td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

			_default: [0, "", ""]
		};

		// Support: IE <=9 only
		wrapMap.optgroup = wrapMap.option;

		wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
		wrapMap.th = wrapMap.td;

		function getAll(context, tag) {

			// Support: IE <=9 - 11 only
			// Use typeof to avoid zero-argument method invocation on host objects (#15151)
			var ret;

			if (typeof context.getElementsByTagName !== "undefined") {
				ret = context.getElementsByTagName(tag || "*");
			} else if (typeof context.querySelectorAll !== "undefined") {
				ret = context.querySelectorAll(tag || "*");
			} else {
				ret = [];
			}

			if (tag === undefined || tag && nodeName(context, tag)) {
				return jQuery.merge([context], ret);
			}

			return ret;
		}

		// Mark scripts as having already been evaluated
		function setGlobalEval(elems, refElements) {
			var i = 0,
			    l = elems.length;

			for (; i < l; i++) {
				dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
			}
		}

		var rhtml = /<|&#?\w+;/;

		function buildFragment(elems, context, scripts, selection, ignored) {
			var elem,
			    tmp,
			    tag,
			    wrap,
			    contains,
			    j,
			    fragment = context.createDocumentFragment(),
			    nodes = [],
			    i = 0,
			    l = elems.length;

			for (; i < l; i++) {
				elem = elems[i];

				if (elem || elem === 0) {

					// Add nodes directly
					if (jQuery.type(elem) === "object") {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

						// Convert non-html into a text node
					} else if (!rhtml.test(elem)) {
						nodes.push(context.createTextNode(elem));

						// Convert html into DOM nodes
					} else {
						tmp = tmp || fragment.appendChild(context.createElement("div"));

						// Deserialize a standard representation
						tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
						wrap = wrapMap[tag] || wrapMap._default;
						tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

						// Descend through wrappers to the right content
						j = wrap[0];
						while (j--) {
							tmp = tmp.lastChild;
						}

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge(nodes, tmp.childNodes);

						// Remember the top-level container
						tmp = fragment.firstChild;

						// Ensure the created nodes are orphaned (#12392)
						tmp.textContent = "";
					}
				}
			}

			// Remove wrapper from fragment
			fragment.textContent = "";

			i = 0;
			while (elem = nodes[i++]) {

				// Skip elements already in the context collection (trac-4087)
				if (selection && jQuery.inArray(elem, selection) > -1) {
					if (ignored) {
						ignored.push(elem);
					}
					continue;
				}

				contains = jQuery.contains(elem.ownerDocument, elem);

				// Append to fragment
				tmp = getAll(fragment.appendChild(elem), "script");

				// Preserve script evaluation history
				if (contains) {
					setGlobalEval(tmp);
				}

				// Capture executables
				if (scripts) {
					j = 0;
					while (elem = tmp[j++]) {
						if (rscriptType.test(elem.type || "")) {
							scripts.push(elem);
						}
					}
				}
			}

			return fragment;
		}

		(function () {
			var fragment = document.createDocumentFragment(),
			    div = fragment.appendChild(document.createElement("div")),
			    input = document.createElement("input");

			// Support: Android 4.0 - 4.3 only
			// Check state lost if the name is set (#11217)
			// Support: Windows Web Apps (WWA)
			// `name` and `type` must use .setAttribute for WWA (#14901)
			input.setAttribute("type", "radio");
			input.setAttribute("checked", "checked");
			input.setAttribute("name", "t");

			div.appendChild(input);

			// Support: Android <=4.1 only
			// Older WebKit doesn't clone checked state correctly in fragments
			support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

			// Support: IE <=11 only
			// Make sure textarea (and checkbox) defaultValue is properly cloned
			div.innerHTML = "<textarea>x</textarea>";
			support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
		})();
		var documentElement = document.documentElement;

		var rkeyEvent = /^key/,
		    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

		function returnTrue() {
			return true;
		}

		function returnFalse() {
			return false;
		}

		// Support: IE <=9 only
		// See #13393 for more info
		function safeActiveElement() {
			try {
				return document.activeElement;
			} catch (err) {}
		}

		function _on(elem, types, selector, data, fn, one) {
			var origFn, type;

			// Types can be a map of types/handlers
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

				// ( types-Object, selector, data )
				if (typeof selector !== "string") {

					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for (type in types) {
					_on(elem, type, selector, data, types[type], one);
				}
				return elem;
			}

			if (data == null && fn == null) {

				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if (fn == null) {
				if (typeof selector === "string") {

					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {

					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if (fn === false) {
				fn = returnFalse;
			} else if (!fn) {
				return elem;
			}

			if (one === 1) {
				origFn = fn;
				fn = function fn(event) {

					// Can use an empty set, since event contains the info
					jQuery().off(event);
					return origFn.apply(this, arguments);
				};

				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
			}
			return elem.each(function () {
				jQuery.event.add(this, types, fn, data, selector);
			});
		}

		/*
	  * Helper functions for managing events -- not part of the public interface.
	  * Props to Dean Edwards' addEvent library for many of the ideas.
	  */
		jQuery.event = {

			global: {},

			add: function add(elem, types, handler, data, selector) {

				var handleObjIn,
				    eventHandle,
				    tmp,
				    events,
				    t,
				    handleObj,
				    special,
				    handlers,
				    type,
				    namespaces,
				    origType,
				    elemData = dataPriv.get(elem);

				// Don't attach events to noData or text/comment nodes (but allow plain objects)
				if (!elemData) {
					return;
				}

				// Caller can pass in an object of custom data in lieu of the handler
				if (handler.handler) {
					handleObjIn = handler;
					handler = handleObjIn.handler;
					selector = handleObjIn.selector;
				}

				// Ensure that invalid selectors throw exceptions at attach time
				// Evaluate against documentElement in case elem is a non-element node (e.g., document)
				if (selector) {
					jQuery.find.matchesSelector(documentElement, selector);
				}

				// Make sure that the handler has a unique ID, used to find/remove it later
				if (!handler.guid) {
					handler.guid = jQuery.guid++;
				}

				// Init the element's event structure and main handler, if this is the first
				if (!(events = elemData.events)) {
					events = elemData.events = {};
				}
				if (!(eventHandle = elemData.handle)) {
					eventHandle = elemData.handle = function (e) {

						// Discard the second event of a jQuery.event.trigger() and
						// when an event is called after a page has unloaded
						return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
					};
				}

				// Handle multiple events separated by a space
				types = (types || "").match(rnothtmlwhite) || [""];
				t = types.length;
				while (t--) {
					tmp = rtypenamespace.exec(types[t]) || [];
					type = origType = tmp[1];
					namespaces = (tmp[2] || "").split(".").sort();

					// There *must* be a type, no attaching namespace-only handlers
					if (!type) {
						continue;
					}

					// If event changes its type, use the special event handlers for the changed type
					special = jQuery.event.special[type] || {};

					// If selector defined, determine special event api type, otherwise given type
					type = (selector ? special.delegateType : special.bindType) || type;

					// Update special based on newly reset type
					special = jQuery.event.special[type] || {};

					// handleObj is passed to all event handlers
					handleObj = jQuery.extend({
						type: type,
						origType: origType,
						data: data,
						handler: handler,
						guid: handler.guid,
						selector: selector,
						needsContext: selector && jQuery.expr.match.needsContext.test(selector),
						namespace: namespaces.join(".")
					}, handleObjIn);

					// Init the event handler queue if we're the first
					if (!(handlers = events[type])) {
						handlers = events[type] = [];
						handlers.delegateCount = 0;

						// Only use addEventListener if the special events handler returns false
						if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

							if (elem.addEventListener) {
								elem.addEventListener(type, eventHandle);
							}
						}
					}

					if (special.add) {
						special.add.call(elem, handleObj);

						if (!handleObj.handler.guid) {
							handleObj.handler.guid = handler.guid;
						}
					}

					// Add to the element's handler list, delegates in front
					if (selector) {
						handlers.splice(handlers.delegateCount++, 0, handleObj);
					} else {
						handlers.push(handleObj);
					}

					// Keep track of which events have ever been used, for event optimization
					jQuery.event.global[type] = true;
				}
			},

			// Detach an event or set of events from an element
			remove: function remove(elem, types, handler, selector, mappedTypes) {

				var j,
				    origCount,
				    tmp,
				    events,
				    t,
				    handleObj,
				    special,
				    handlers,
				    type,
				    namespaces,
				    origType,
				    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

				if (!elemData || !(events = elemData.events)) {
					return;
				}

				// Once for each type.namespace in types; type may be omitted
				types = (types || "").match(rnothtmlwhite) || [""];
				t = types.length;
				while (t--) {
					tmp = rtypenamespace.exec(types[t]) || [];
					type = origType = tmp[1];
					namespaces = (tmp[2] || "").split(".").sort();

					// Unbind all events (on this namespace, if provided) for the element
					if (!type) {
						for (type in events) {
							jQuery.event.remove(elem, type + types[t], handler, selector, true);
						}
						continue;
					}

					special = jQuery.event.special[type] || {};
					type = (selector ? special.delegateType : special.bindType) || type;
					handlers = events[type] || [];
					tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

					// Remove matching events
					origCount = j = handlers.length;
					while (j--) {
						handleObj = handlers[j];

						if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
							handlers.splice(j, 1);

							if (handleObj.selector) {
								handlers.delegateCount--;
							}
							if (special.remove) {
								special.remove.call(elem, handleObj);
							}
						}
					}

					// Remove generic event handler if we removed something and no more handlers exist
					// (avoids potential for endless recursion during removal of special event handlers)
					if (origCount && !handlers.length) {
						if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

							jQuery.removeEvent(elem, type, elemData.handle);
						}

						delete events[type];
					}
				}

				// Remove data and the expando if it's no longer used
				if (jQuery.isEmptyObject(events)) {
					dataPriv.remove(elem, "handle events");
				}
			},

			dispatch: function dispatch(nativeEvent) {

				// Make a writable jQuery.Event from the native event object
				var event = jQuery.event.fix(nativeEvent);

				var i,
				    j,
				    ret,
				    matched,
				    handleObj,
				    handlerQueue,
				    args = new Array(arguments.length),
				    handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
				    special = jQuery.event.special[event.type] || {};

				// Use the fix-ed jQuery.Event rather than the (read-only) native event
				args[0] = event;

				for (i = 1; i < arguments.length; i++) {
					args[i] = arguments[i];
				}

				event.delegateTarget = this;

				// Call the preDispatch hook for the mapped type, and let it bail if desired
				if (special.preDispatch && special.preDispatch.call(this, event) === false) {
					return;
				}

				// Determine handlers
				handlerQueue = jQuery.event.handlers.call(this, event, handlers);

				// Run delegates first; they may want to stop propagation beneath us
				i = 0;
				while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
					event.currentTarget = matched.elem;

					j = 0;
					while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

						// Triggered event must either 1) have no namespace, or 2) have namespace(s)
						// a subset or equal to those in the bound event (both can have no namespace).
						if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

							event.handleObj = handleObj;
							event.data = handleObj.data;

							ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

							if (ret !== undefined) {
								if ((event.result = ret) === false) {
									event.preventDefault();
									event.stopPropagation();
								}
							}
						}
					}
				}

				// Call the postDispatch hook for the mapped type
				if (special.postDispatch) {
					special.postDispatch.call(this, event);
				}

				return event.result;
			},

			handlers: function handlers(event, _handlers) {
				var i,
				    handleObj,
				    sel,
				    matchedHandlers,
				    matchedSelectors,
				    handlerQueue = [],
				    delegateCount = _handlers.delegateCount,
				    cur = event.target;

				// Find delegate handlers
				if (delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!(event.type === "click" && event.button >= 1)) {

					for (; cur !== this; cur = cur.parentNode || this) {

						// Don't check non-elements (#13208)
						// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
						if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
							matchedHandlers = [];
							matchedSelectors = {};
							for (i = 0; i < delegateCount; i++) {
								handleObj = _handlers[i];

								// Don't conflict with Object.prototype properties (#13203)
								sel = handleObj.selector + " ";

								if (matchedSelectors[sel] === undefined) {
									matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
								}
								if (matchedSelectors[sel]) {
									matchedHandlers.push(handleObj);
								}
							}
							if (matchedHandlers.length) {
								handlerQueue.push({ elem: cur, handlers: matchedHandlers });
							}
						}
					}
				}

				// Add the remaining (directly-bound) handlers
				cur = this;
				if (delegateCount < _handlers.length) {
					handlerQueue.push({ elem: cur, handlers: _handlers.slice(delegateCount) });
				}

				return handlerQueue;
			},

			addProp: function addProp(name, hook) {
				Object.defineProperty(jQuery.Event.prototype, name, {
					enumerable: true,
					configurable: true,

					get: jQuery.isFunction(hook) ? function () {
						if (this.originalEvent) {
							return hook(this.originalEvent);
						}
					} : function () {
						if (this.originalEvent) {
							return this.originalEvent[name];
						}
					},

					set: function set(value) {
						Object.defineProperty(this, name, {
							enumerable: true,
							configurable: true,
							writable: true,
							value: value
						});
					}
				});
			},

			fix: function fix(originalEvent) {
				return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
			},

			special: {
				load: {

					// Prevent triggered image.load events from bubbling to window.load
					noBubble: true
				},
				focus: {

					// Fire native event if possible so blur/focus sequence is correct
					trigger: function trigger() {
						if (this !== safeActiveElement() && this.focus) {
							this.focus();
							return false;
						}
					},
					delegateType: "focusin"
				},
				blur: {
					trigger: function trigger() {
						if (this === safeActiveElement() && this.blur) {
							this.blur();
							return false;
						}
					},
					delegateType: "focusout"
				},
				click: {

					// For checkbox, fire native event so checked state will be right
					trigger: function trigger() {
						if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
							this.click();
							return false;
						}
					},

					// For cross-browser consistency, don't fire native .click() on links
					_default: function _default(event) {
						return nodeName(event.target, "a");
					}
				},

				beforeunload: {
					postDispatch: function postDispatch(event) {

						// Support: Firefox 20+
						// Firefox doesn't alert if the returnValue field is not set.
						if (event.result !== undefined && event.originalEvent) {
							event.originalEvent.returnValue = event.result;
						}
					}
				}
			}
		};

		jQuery.removeEvent = function (elem, type, handle) {

			// This "if" is needed for plain objects
			if (elem.removeEventListener) {
				elem.removeEventListener(type, handle);
			}
		};

		jQuery.Event = function (src, props) {

			// Allow instantiation without the 'new' keyword
			if (!(this instanceof jQuery.Event)) {
				return new jQuery.Event(src, props);
			}

			// Event object
			if (src && src.type) {
				this.originalEvent = src;
				this.type = src.type;

				// Events bubbling up the document may have been marked as prevented
				// by a handler lower down the tree; reflect the correct value.
				this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ? returnTrue : returnFalse;

				// Create target properties
				// Support: Safari <=6 - 7 only
				// Target should not be a text node (#504, #13143)
				this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;

				this.currentTarget = src.currentTarget;
				this.relatedTarget = src.relatedTarget;

				// Event type
			} else {
				this.type = src;
			}

			// Put explicitly provided properties onto the event object
			if (props) {
				jQuery.extend(this, props);
			}

			// Create a timestamp if incoming event doesn't have one
			this.timeStamp = src && src.timeStamp || jQuery.now();

			// Mark it as fixed
			this[jQuery.expando] = true;
		};

		// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
		// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
		jQuery.Event.prototype = {
			constructor: jQuery.Event,
			isDefaultPrevented: returnFalse,
			isPropagationStopped: returnFalse,
			isImmediatePropagationStopped: returnFalse,
			isSimulated: false,

			preventDefault: function preventDefault() {
				var e = this.originalEvent;

				this.isDefaultPrevented = returnTrue;

				if (e && !this.isSimulated) {
					e.preventDefault();
				}
			},
			stopPropagation: function stopPropagation() {
				var e = this.originalEvent;

				this.isPropagationStopped = returnTrue;

				if (e && !this.isSimulated) {
					e.stopPropagation();
				}
			},
			stopImmediatePropagation: function stopImmediatePropagation() {
				var e = this.originalEvent;

				this.isImmediatePropagationStopped = returnTrue;

				if (e && !this.isSimulated) {
					e.stopImmediatePropagation();
				}

				this.stopPropagation();
			}
		};

		// Includes all common event props including KeyEvent and MouseEvent specific props
		jQuery.each({
			altKey: true,
			bubbles: true,
			cancelable: true,
			changedTouches: true,
			ctrlKey: true,
			detail: true,
			eventPhase: true,
			metaKey: true,
			pageX: true,
			pageY: true,
			shiftKey: true,
			view: true,
			"char": true,
			charCode: true,
			key: true,
			keyCode: true,
			button: true,
			buttons: true,
			clientX: true,
			clientY: true,
			offsetX: true,
			offsetY: true,
			pointerId: true,
			pointerType: true,
			screenX: true,
			screenY: true,
			targetTouches: true,
			toElement: true,
			touches: true,

			which: function which(event) {
				var button = event.button;

				// Add which for key events
				if (event.which == null && rkeyEvent.test(event.type)) {
					return event.charCode != null ? event.charCode : event.keyCode;
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
					if (button & 1) {
						return 1;
					}

					if (button & 2) {
						return 3;
					}

					if (button & 4) {
						return 2;
					}

					return 0;
				}

				return event.which;
			}
		}, jQuery.event.addProp);

		// Create mouseenter/leave events using mouseover/out and event-time checks
		// so that event delegation works in jQuery.
		// Do the same for pointerenter/pointerleave and pointerover/pointerout
		//
		// Support: Safari 7 only
		// Safari sends mouseenter too often; see:
		// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
		// for the description of the bug (it existed in older Chrome versions as well).
		jQuery.each({
			mouseenter: "mouseover",
			mouseleave: "mouseout",
			pointerenter: "pointerover",
			pointerleave: "pointerout"
		}, function (orig, fix) {
			jQuery.event.special[orig] = {
				delegateType: fix,
				bindType: fix,

				handle: function handle(event) {
					var ret,
					    target = this,
					    related = event.relatedTarget,
					    handleObj = event.handleObj;

					// For mouseenter/leave call the handler if related is outside the target.
					// NB: No relatedTarget if the mouse left/entered the browser window
					if (!related || related !== target && !jQuery.contains(target, related)) {
						event.type = handleObj.origType;
						ret = handleObj.handler.apply(this, arguments);
						event.type = fix;
					}
					return ret;
				}
			};
		});

		jQuery.fn.extend({

			on: function on(types, selector, data, fn) {
				return _on(this, types, selector, data, fn);
			},
			one: function one(types, selector, data, fn) {
				return _on(this, types, selector, data, fn, 1);
			},
			off: function off(types, selector, fn) {
				var handleObj, type;
				if (types && types.preventDefault && types.handleObj) {

					// ( event )  dispatched jQuery.Event
					handleObj = types.handleObj;
					jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
					return this;
				}
				if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

					// ( types-object [, selector] )
					for (type in types) {
						this.off(type, selector, types[type]);
					}
					return this;
				}
				if (selector === false || typeof selector === "function") {

					// ( types [, fn] )
					fn = selector;
					selector = undefined;
				}
				if (fn === false) {
					fn = returnFalse;
				}
				return this.each(function () {
					jQuery.event.remove(this, types, fn, selector);
				});
			}
		});

		var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,


		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,


		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		    rscriptTypeMasked = /^true\/(.*)/,
		    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

		// Prefer a tbody over its parent table for containing new rows
		function manipulationTarget(elem, content) {
			if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

				return jQuery(">tbody", elem)[0] || elem;
			}

			return elem;
		}

		// Replace/restore the type attribute of script elements for safe DOM manipulation
		function disableScript(elem) {
			elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
			return elem;
		}
		function restoreScript(elem) {
			var match = rscriptTypeMasked.exec(elem.type);

			if (match) {
				elem.type = match[1];
			} else {
				elem.removeAttribute("type");
			}

			return elem;
		}

		function cloneCopyEvent(src, dest) {
			var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

			if (dest.nodeType !== 1) {
				return;
			}

			// 1. Copy private data: events, handlers, etc.
			if (dataPriv.hasData(src)) {
				pdataOld = dataPriv.access(src);
				pdataCur = dataPriv.set(dest, pdataOld);
				events = pdataOld.events;

				if (events) {
					delete pdataCur.handle;
					pdataCur.events = {};

					for (type in events) {
						for (i = 0, l = events[type].length; i < l; i++) {
							jQuery.event.add(dest, type, events[type][i]);
						}
					}
				}
			}

			// 2. Copy user data
			if (dataUser.hasData(src)) {
				udataOld = dataUser.access(src);
				udataCur = jQuery.extend({}, udataOld);

				dataUser.set(dest, udataCur);
			}
		}

		// Fix IE bugs, see support tests
		function fixInput(src, dest) {
			var nodeName = dest.nodeName.toLowerCase();

			// Fails to persist the checked state of a cloned checkbox or radio button.
			if (nodeName === "input" && rcheckableType.test(src.type)) {
				dest.checked = src.checked;

				// Fails to return the selected option to the default selected state when cloning options
			} else if (nodeName === "input" || nodeName === "textarea") {
				dest.defaultValue = src.defaultValue;
			}
		}

		function domManip(collection, args, callback, ignored) {

			// Flatten any nested arrays
			args = concat.apply([], args);

			var fragment,
			    first,
			    scripts,
			    hasScripts,
			    node,
			    doc,
			    i = 0,
			    l = collection.length,
			    iNoClone = l - 1,
			    value = args[0],
			    isFunction = jQuery.isFunction(value);

			// We can't cloneNode fragments that contain checked, in WebKit
			if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
				return collection.each(function (index) {
					var self = collection.eq(index);
					if (isFunction) {
						args[0] = value.call(this, index, self.html());
					}
					domManip(self, args, callback, ignored);
				});
			}

			if (l) {
				fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
				first = fragment.firstChild;

				if (fragment.childNodes.length === 1) {
					fragment = first;
				}

				// Require either new content or an interest in ignored elements to invoke the callback
				if (first || ignored) {
					scripts = jQuery.map(getAll(fragment, "script"), disableScript);
					hasScripts = scripts.length;

					// Use the original fragment for the last item
					// instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for (; i < l; i++) {
						node = fragment;

						if (i !== iNoClone) {
							node = jQuery.clone(node, true, true);

							// Keep references to cloned scripts for later restoration
							if (hasScripts) {

								// Support: Android <=4.0 only, PhantomJS 1 only
								// push.apply(_, arraylike) throws on ancient WebKit
								jQuery.merge(scripts, getAll(node, "script"));
							}
						}

						callback.call(collection[i], node, i);
					}

					if (hasScripts) {
						doc = scripts[scripts.length - 1].ownerDocument;

						// Reenable scripts
						jQuery.map(scripts, restoreScript);

						// Evaluate executable scripts on first document insertion
						for (i = 0; i < hasScripts; i++) {
							node = scripts[i];
							if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

								if (node.src) {

									// Optional AJAX dependency, but won't run scripts if not present
									if (jQuery._evalUrl) {
										jQuery._evalUrl(node.src);
									}
								} else {
									DOMEval(node.textContent.replace(rcleanScript, ""), doc);
								}
							}
						}
					}
				}
			}

			return collection;
		}

		function _remove(elem, selector, keepData) {
			var node,
			    nodes = selector ? jQuery.filter(selector, elem) : elem,
			    i = 0;

			for (; (node = nodes[i]) != null; i++) {
				if (!keepData && node.nodeType === 1) {
					jQuery.cleanData(getAll(node));
				}

				if (node.parentNode) {
					if (keepData && jQuery.contains(node.ownerDocument, node)) {
						setGlobalEval(getAll(node, "script"));
					}
					node.parentNode.removeChild(node);
				}
			}

			return elem;
		}

		jQuery.extend({
			htmlPrefilter: function htmlPrefilter(html) {
				return html.replace(rxhtmlTag, "<$1></$2>");
			},

			clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
				var i,
				    l,
				    srcElements,
				    destElements,
				    clone = elem.cloneNode(true),
				    inPage = jQuery.contains(elem.ownerDocument, elem);

				// Fix IE cloning issues
				if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

					// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
					destElements = getAll(clone);
					srcElements = getAll(elem);

					for (i = 0, l = srcElements.length; i < l; i++) {
						fixInput(srcElements[i], destElements[i]);
					}
				}

				// Copy the events from the original to the clone
				if (dataAndEvents) {
					if (deepDataAndEvents) {
						srcElements = srcElements || getAll(elem);
						destElements = destElements || getAll(clone);

						for (i = 0, l = srcElements.length; i < l; i++) {
							cloneCopyEvent(srcElements[i], destElements[i]);
						}
					} else {
						cloneCopyEvent(elem, clone);
					}
				}

				// Preserve script evaluation history
				destElements = getAll(clone, "script");
				if (destElements.length > 0) {
					setGlobalEval(destElements, !inPage && getAll(elem, "script"));
				}

				// Return the cloned set
				return clone;
			},

			cleanData: function cleanData(elems) {
				var data,
				    elem,
				    type,
				    special = jQuery.event.special,
				    i = 0;

				for (; (elem = elems[i]) !== undefined; i++) {
					if (acceptData(elem)) {
						if (data = elem[dataPriv.expando]) {
							if (data.events) {
								for (type in data.events) {
									if (special[type]) {
										jQuery.event.remove(elem, type);

										// This is a shortcut to avoid jQuery.event.remove's overhead
									} else {
										jQuery.removeEvent(elem, type, data.handle);
									}
								}
							}

							// Support: Chrome <=35 - 45+
							// Assign undefined instead of using delete, see Data#remove
							elem[dataPriv.expando] = undefined;
						}
						if (elem[dataUser.expando]) {

							// Support: Chrome <=35 - 45+
							// Assign undefined instead of using delete, see Data#remove
							elem[dataUser.expando] = undefined;
						}
					}
				}
			}
		});

		jQuery.fn.extend({
			detach: function detach(selector) {
				return _remove(this, selector, true);
			},

			remove: function remove(selector) {
				return _remove(this, selector);
			},

			text: function text(value) {
				return access(this, function (value) {
					return value === undefined ? jQuery.text(this) : this.empty().each(function () {
						if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
							this.textContent = value;
						}
					});
				}, null, value, arguments.length);
			},

			append: function append() {
				return domManip(this, arguments, function (elem) {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						var target = manipulationTarget(this, elem);
						target.appendChild(elem);
					}
				});
			},

			prepend: function prepend() {
				return domManip(this, arguments, function (elem) {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						var target = manipulationTarget(this, elem);
						target.insertBefore(elem, target.firstChild);
					}
				});
			},

			before: function before() {
				return domManip(this, arguments, function (elem) {
					if (this.parentNode) {
						this.parentNode.insertBefore(elem, this);
					}
				});
			},

			after: function after() {
				return domManip(this, arguments, function (elem) {
					if (this.parentNode) {
						this.parentNode.insertBefore(elem, this.nextSibling);
					}
				});
			},

			empty: function empty() {
				var elem,
				    i = 0;

				for (; (elem = this[i]) != null; i++) {
					if (elem.nodeType === 1) {

						// Prevent memory leaks
						jQuery.cleanData(getAll(elem, false));

						// Remove any remaining nodes
						elem.textContent = "";
					}
				}

				return this;
			},

			clone: function clone(dataAndEvents, deepDataAndEvents) {
				dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
				deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

				return this.map(function () {
					return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
				});
			},

			html: function html(value) {
				return access(this, function (value) {
					var elem = this[0] || {},
					    i = 0,
					    l = this.length;

					if (value === undefined && elem.nodeType === 1) {
						return elem.innerHTML;
					}

					// See if we can take a shortcut and just use innerHTML
					if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

						value = jQuery.htmlPrefilter(value);

						try {
							for (; i < l; i++) {
								elem = this[i] || {};

								// Remove element nodes and prevent memory leaks
								if (elem.nodeType === 1) {
									jQuery.cleanData(getAll(elem, false));
									elem.innerHTML = value;
								}
							}

							elem = 0;

							// If using innerHTML throws an exception, use the fallback method
						} catch (e) {}
					}

					if (elem) {
						this.empty().append(value);
					}
				}, null, value, arguments.length);
			},

			replaceWith: function replaceWith() {
				var ignored = [];

				// Make the changes, replacing each non-ignored context element with the new content
				return domManip(this, arguments, function (elem) {
					var parent = this.parentNode;

					if (jQuery.inArray(this, ignored) < 0) {
						jQuery.cleanData(getAll(this));
						if (parent) {
							parent.replaceChild(elem, this);
						}
					}

					// Force callback invocation
				}, ignored);
			}
		});

		jQuery.each({
			appendTo: "append",
			prependTo: "prepend",
			insertBefore: "before",
			insertAfter: "after",
			replaceAll: "replaceWith"
		}, function (name, original) {
			jQuery.fn[name] = function (selector) {
				var elems,
				    ret = [],
				    insert = jQuery(selector),
				    last = insert.length - 1,
				    i = 0;

				for (; i <= last; i++) {
					elems = i === last ? this : this.clone(true);
					jQuery(insert[i])[original](elems);

					// Support: Android <=4.0 only, PhantomJS 1 only
					// .get() because push.apply(_, arraylike) throws on ancient WebKit
					push.apply(ret, elems.get());
				}

				return this.pushStack(ret);
			};
		});
		var rmargin = /^margin/;

		var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

		var getStyles = function getStyles(elem) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if (!view || !view.opener) {
				view = window;
			}

			return view.getComputedStyle(elem);
		};

		(function () {

			// Executing both pixelPosition & boxSizingReliable tests require only one layout
			// so they're executed at the same time to save the second computation.
			function computeStyleTests() {

				// This is a singleton, we need to execute it only once
				if (!div) {
					return;
				}

				div.style.cssText = "box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
				div.innerHTML = "";
				documentElement.appendChild(container);

				var divStyle = window.getComputedStyle(div);
				pixelPositionVal = divStyle.top !== "1%";

				// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
				reliableMarginLeftVal = divStyle.marginLeft === "2px";
				boxSizingReliableVal = divStyle.width === "4px";

				// Support: Android 4.0 - 4.3 only
				// Some styles come back with percentage values, even though they shouldn't
				div.style.marginRight = "50%";
				pixelMarginRightVal = divStyle.marginRight === "4px";

				documentElement.removeChild(container);

				// Nullify the div so it wouldn't be stored in the memory and
				// it will also be a sign that checks already performed
				div = null;
			}

			var pixelPositionVal,
			    boxSizingReliableVal,
			    pixelMarginRightVal,
			    reliableMarginLeftVal,
			    container = document.createElement("div"),
			    div = document.createElement("div");

			// Finish early in limited (non-browser) environments
			if (!div.style) {
				return;
			}

			// Support: IE <=9 - 11 only
			// Style of cloned element affects source element cloned (#8908)
			div.style.backgroundClip = "content-box";
			div.cloneNode(true).style.backgroundClip = "";
			support.clearCloneStyle = div.style.backgroundClip === "content-box";

			container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
			container.appendChild(div);

			jQuery.extend(support, {
				pixelPosition: function pixelPosition() {
					computeStyleTests();
					return pixelPositionVal;
				},
				boxSizingReliable: function boxSizingReliable() {
					computeStyleTests();
					return boxSizingReliableVal;
				},
				pixelMarginRight: function pixelMarginRight() {
					computeStyleTests();
					return pixelMarginRightVal;
				},
				reliableMarginLeft: function reliableMarginLeft() {
					computeStyleTests();
					return reliableMarginLeftVal;
				}
			});
		})();

		function curCSS(elem, name, computed) {
			var width,
			    minWidth,
			    maxWidth,
			    ret,


			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;

			computed = computed || getStyles(elem);

			// getPropertyValue is needed for:
			//   .css('filter') (IE 9 only, #12537)
			//   .css('--customProperty) (#3144)
			if (computed) {
				ret = computed.getPropertyValue(name) || computed[name];

				if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
					ret = jQuery.style(elem, name);
				}

				// A tribute to the "awesome hack by Dean Edwards"
				// Android Browser returns percentage for some values,
				// but width seems to be reliably pixels.
				// This is against the CSSOM draft spec:
				// https://drafts.csswg.org/cssom/#resolved-values
				if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

					// Remember the original values
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;

					// Put in the new values to get a computed value out
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;

					// Revert the changed values
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}

			return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" : ret;
		}

		function addGetHookIf(conditionFn, hookFn) {

			// Define the hook, we'll check on the first run if it's really needed.
			return {
				get: function get() {
					if (conditionFn()) {

						// Hook not needed (or it's not possible to use it due
						// to missing dependency), remove it.
						delete this.get;
						return;
					}

					// Hook needed; redefine it so that the support test is not executed again.
					return (this.get = hookFn).apply(this, arguments);
				}
			};
		}

		var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		    rcustomProp = /^--/,
		    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		    cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
		    cssPrefixes = ["Webkit", "Moz", "ms"],
		    emptyStyle = document.createElement("div").style;

		// Return a css property mapped to a potentially vendor prefixed property
		function vendorPropName(name) {

			// Shortcut for names that are not vendor prefixed
			if (name in emptyStyle) {
				return name;
			}

			// Check for vendor prefixed names
			var capName = name[0].toUpperCase() + name.slice(1),
			    i = cssPrefixes.length;

			while (i--) {
				name = cssPrefixes[i] + capName;
				if (name in emptyStyle) {
					return name;
				}
			}
		}

		// Return a property mapped along what jQuery.cssProps suggests or to
		// a vendor prefixed property.
		function finalPropName(name) {
			var ret = jQuery.cssProps[name];
			if (!ret) {
				ret = jQuery.cssProps[name] = vendorPropName(name) || name;
			}
			return ret;
		}

		function setPositiveNumber(elem, value, subtract) {

			// Any relative (+/-) values have already been
			// normalized at this point
			var matches = rcssNum.exec(value);
			return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
		}

		function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
			var i,
			    val = 0;

			// If we already have the right measurement, avoid augmentation
			if (extra === (isBorderBox ? "border" : "content")) {
				i = 4;

				// Otherwise initialize for horizontal or vertical properties
			} else {
				i = name === "width" ? 1 : 0;
			}

			for (; i < 4; i += 2) {

				// Both box models exclude margin, so add it if we want it
				if (extra === "margin") {
					val += jQuery.css(elem, extra + cssExpand[i], true, styles);
				}

				if (isBorderBox) {

					// border-box includes padding, so remove it if we want content
					if (extra === "content") {
						val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
					}

					// At this point, extra isn't border nor margin, so remove border
					if (extra !== "margin") {
						val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
					}
				} else {

					// At this point, extra isn't content, so add padding
					val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

					// At this point, extra isn't content nor padding, so add border
					if (extra !== "padding") {
						val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
					}
				}
			}

			return val;
		}

		function getWidthOrHeight(elem, name, extra) {

			// Start with computed style
			var valueIsBorderBox,
			    styles = getStyles(elem),
			    val = curCSS(elem, name, styles),
			    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

			// Computed unit is not pixels. Stop here and return.
			if (rnumnonpx.test(val)) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

			// Fall back to offsetWidth/Height when value is "auto"
			// This happens for inline elements with no explicit setting (gh-3571)
			if (val === "auto") {
				val = elem["offset" + name[0].toUpperCase() + name.slice(1)];
			}

			// Normalize "", auto, and prepare for extra
			val = parseFloat(val) || 0;

			// Use the active box-sizing model to add/subtract irrelevant styles
			return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
		}

		jQuery.extend({

			// Add in style property hooks for overriding the default
			// behavior of getting and setting a style property
			cssHooks: {
				opacity: {
					get: function get(elem, computed) {
						if (computed) {

							// We should always get a number back from opacity
							var ret = curCSS(elem, "opacity");
							return ret === "" ? "1" : ret;
						}
					}
				}
			},

			// Don't automatically add "px" to these possibly-unitless properties
			cssNumber: {
				"animationIterationCount": true,
				"columnCount": true,
				"fillOpacity": true,
				"flexGrow": true,
				"flexShrink": true,
				"fontWeight": true,
				"lineHeight": true,
				"opacity": true,
				"order": true,
				"orphans": true,
				"widows": true,
				"zIndex": true,
				"zoom": true
			},

			// Add in properties whose names you wish to fix before
			// setting or getting the value
			cssProps: {
				"float": "cssFloat"
			},

			// Get and set the style property on a DOM Node
			style: function style(elem, name, value, extra) {

				// Don't set styles on text and comment nodes
				if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
					return;
				}

				// Make sure that we're working with the right name
				var ret,
				    type,
				    hooks,
				    origName = jQuery.camelCase(name),
				    isCustomProp = rcustomProp.test(name),
				    style = elem.style;

				// Make sure that we're working with the right name. We don't
				// want to query the value if it is a CSS custom property
				// since they are user-defined.
				if (!isCustomProp) {
					name = finalPropName(origName);
				}

				// Gets hook for the prefixed version, then unprefixed version
				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

				// Check if we're setting a value
				if (value !== undefined) {
					type = typeof value === "undefined" ? "undefined" : _typeof(value);

					// Convert "+=" or "-=" to relative numbers (#7345)
					if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
						value = adjustCSS(elem, name, ret);

						// Fixes bug #9237
						type = "number";
					}

					// Make sure that null and NaN values aren't set (#7116)
					if (value == null || value !== value) {
						return;
					}

					// If a number was passed in, add the unit (except for certain CSS properties)
					if (type === "number") {
						value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
					}

					// background-* props affect original clone's values
					if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
						style[name] = "inherit";
					}

					// If a hook was provided, use that value, otherwise just set the specified value
					if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

						if (isCustomProp) {
							style.setProperty(name, value);
						} else {
							style[name] = value;
						}
					}
				} else {

					// If a hook was provided get the non-computed value from there
					if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

						return ret;
					}

					// Otherwise just get the value from the style object
					return style[name];
				}
			},

			css: function css(elem, name, extra, styles) {
				var val,
				    num,
				    hooks,
				    origName = jQuery.camelCase(name),
				    isCustomProp = rcustomProp.test(name);

				// Make sure that we're working with the right name. We don't
				// want to modify the value if it is a CSS custom property
				// since they are user-defined.
				if (!isCustomProp) {
					name = finalPropName(origName);
				}

				// Try prefixed name followed by the unprefixed name
				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

				// If a hook was provided get the computed value from there
				if (hooks && "get" in hooks) {
					val = hooks.get(elem, true, extra);
				}

				// Otherwise, if a way to get the computed value exists, use that
				if (val === undefined) {
					val = curCSS(elem, name, styles);
				}

				// Convert "normal" to computed value
				if (val === "normal" && name in cssNormalTransform) {
					val = cssNormalTransform[name];
				}

				// Make numeric if forced or a qualifier was provided and val looks numeric
				if (extra === "" || extra) {
					num = parseFloat(val);
					return extra === true || isFinite(num) ? num || 0 : val;
				}

				return val;
			}
		});

		jQuery.each(["height", "width"], function (i, name) {
			jQuery.cssHooks[name] = {
				get: function get(elem, computed, extra) {
					if (computed) {

						// Certain elements can have dimension info if we invisibly show them
						// but it must have a current display style that would benefit
						return rdisplayswap.test(jQuery.css(elem, "display")) && (

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
							return getWidthOrHeight(elem, name, extra);
						}) : getWidthOrHeight(elem, name, extra);
					}
				},

				set: function set(elem, value, extra) {
					var matches,
					    styles = extra && getStyles(elem),
					    subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles);

					// Convert to pixels if value adjustment is needed
					if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

						elem.style[name] = value;
						value = jQuery.css(elem, name);
					}

					return setPositiveNumber(elem, value, subtract);
				}
			};
		});

		jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
			if (computed) {
				return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
					return elem.getBoundingClientRect().left;
				})) + "px";
			}
		});

		// These hooks are used by animate to expand properties
		jQuery.each({
			margin: "",
			padding: "",
			border: "Width"
		}, function (prefix, suffix) {
			jQuery.cssHooks[prefix + suffix] = {
				expand: function expand(value) {
					var i = 0,
					    expanded = {},


					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [value];

					for (; i < 4; i++) {
						expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
					}

					return expanded;
				}
			};

			if (!rmargin.test(prefix)) {
				jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
			}
		});

		jQuery.fn.extend({
			css: function css(name, value) {
				return access(this, function (elem, name, value) {
					var styles,
					    len,
					    map = {},
					    i = 0;

					if (Array.isArray(name)) {
						styles = getStyles(elem);
						len = name.length;

						for (; i < len; i++) {
							map[name[i]] = jQuery.css(elem, name[i], false, styles);
						}

						return map;
					}

					return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
				}, name, value, arguments.length > 1);
			}
		});

		function Tween(elem, options, prop, end, easing) {
			return new Tween.prototype.init(elem, options, prop, end, easing);
		}
		jQuery.Tween = Tween;

		Tween.prototype = {
			constructor: Tween,
			init: function init(elem, options, prop, end, easing, unit) {
				this.elem = elem;
				this.prop = prop;
				this.easing = easing || jQuery.easing._default;
				this.options = options;
				this.start = this.now = this.cur();
				this.end = end;
				this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
			},
			cur: function cur() {
				var hooks = Tween.propHooks[this.prop];

				return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
			},
			run: function run(percent) {
				var eased,
				    hooks = Tween.propHooks[this.prop];

				if (this.options.duration) {
					this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
				} else {
					this.pos = eased = percent;
				}
				this.now = (this.end - this.start) * eased + this.start;

				if (this.options.step) {
					this.options.step.call(this.elem, this.now, this);
				}

				if (hooks && hooks.set) {
					hooks.set(this);
				} else {
					Tween.propHooks._default.set(this);
				}
				return this;
			}
		};

		Tween.prototype.init.prototype = Tween.prototype;

		Tween.propHooks = {
			_default: {
				get: function get(tween) {
					var result;

					// Use a property on the element directly when it is not a DOM element,
					// or when there is no matching style property that exists.
					if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
						return tween.elem[tween.prop];
					}

					// Passing an empty string as a 3rd parameter to .css will automatically
					// attempt a parseFloat and fallback to a string if the parse fails.
					// Simple values such as "10px" are parsed to Float;
					// complex values such as "rotate(1rad)" are returned as-is.
					result = jQuery.css(tween.elem, tween.prop, "");

					// Empty strings, null, undefined and "auto" are converted to 0.
					return !result || result === "auto" ? 0 : result;
				},
				set: function set(tween) {

					// Use step hook for back compat.
					// Use cssHook if its there.
					// Use .style if available and use plain properties where available.
					if (jQuery.fx.step[tween.prop]) {
						jQuery.fx.step[tween.prop](tween);
					} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
						jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
					} else {
						tween.elem[tween.prop] = tween.now;
					}
				}
			}
		};

		// Support: IE <=9 only
		// Panic based approach to setting things on disconnected nodes
		Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
			set: function set(tween) {
				if (tween.elem.nodeType && tween.elem.parentNode) {
					tween.elem[tween.prop] = tween.now;
				}
			}
		};

		jQuery.easing = {
			linear: function linear(p) {
				return p;
			},
			swing: function swing(p) {
				return 0.5 - Math.cos(p * Math.PI) / 2;
			},
			_default: "swing"
		};

		jQuery.fx = Tween.prototype.init;

		// Back compat <1.8 extension point
		jQuery.fx.step = {};

		var fxNow,
		    inProgress,
		    rfxtypes = /^(?:toggle|show|hide)$/,
		    rrun = /queueHooks$/;

		function schedule() {
			if (inProgress) {
				if (document.hidden === false && window.requestAnimationFrame) {
					window.requestAnimationFrame(schedule);
				} else {
					window.setTimeout(schedule, jQuery.fx.interval);
				}

				jQuery.fx.tick();
			}
		}

		// Animations created synchronously will run synchronously
		function createFxNow() {
			window.setTimeout(function () {
				fxNow = undefined;
			});
			return fxNow = jQuery.now();
		}

		// Generate parameters to create a standard animation
		function genFx(type, includeWidth) {
			var which,
			    i = 0,
			    attrs = { height: type };

			// If we include width, step value is 1 to do all cssExpand values,
			// otherwise step value is 2 to skip over Left and Right
			includeWidth = includeWidth ? 1 : 0;
			for (; i < 4; i += 2 - includeWidth) {
				which = cssExpand[i];
				attrs["margin" + which] = attrs["padding" + which] = type;
			}

			if (includeWidth) {
				attrs.opacity = attrs.width = type;
			}

			return attrs;
		}

		function createTween(value, prop, animation) {
			var tween,
			    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
			    index = 0,
			    length = collection.length;
			for (; index < length; index++) {
				if (tween = collection[index].call(animation, prop, value)) {

					// We're done with this property
					return tween;
				}
			}
		}

		function defaultPrefilter(elem, props, opts) {
			var prop,
			    value,
			    toggle,
			    hooks,
			    oldfire,
			    propTween,
			    restoreDisplay,
			    display,
			    isBox = "width" in props || "height" in props,
			    anim = this,
			    orig = {},
			    style = elem.style,
			    hidden = elem.nodeType && isHiddenWithinTree(elem),
			    dataShow = dataPriv.get(elem, "fxshow");

			// Queue-skipping animations hijack the fx hooks
			if (!opts.queue) {
				hooks = jQuery._queueHooks(elem, "fx");
				if (hooks.unqueued == null) {
					hooks.unqueued = 0;
					oldfire = hooks.empty.fire;
					hooks.empty.fire = function () {
						if (!hooks.unqueued) {
							oldfire();
						}
					};
				}
				hooks.unqueued++;

				anim.always(function () {

					// Ensure the complete handler is called before this completes
					anim.always(function () {
						hooks.unqueued--;
						if (!jQuery.queue(elem, "fx").length) {
							hooks.empty.fire();
						}
					});
				});
			}

			// Detect show/hide animations
			for (prop in props) {
				value = props[prop];
				if (rfxtypes.test(value)) {
					delete props[prop];
					toggle = toggle || value === "toggle";
					if (value === (hidden ? "hide" : "show")) {

						// Pretend to be hidden if this is a "show" and
						// there is still data from a stopped show/hide
						if (value === "show" && dataShow && dataShow[prop] !== undefined) {
							hidden = true;

							// Ignore all other no-op show/hide data
						} else {
							continue;
						}
					}
					orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
				}
			}

			// Bail out if this is a no-op like .hide().hide()
			propTween = !jQuery.isEmptyObject(props);
			if (!propTween && jQuery.isEmptyObject(orig)) {
				return;
			}

			// Restrict "overflow" and "display" styles during box animations
			if (isBox && elem.nodeType === 1) {

				// Support: IE <=9 - 11, Edge 12 - 13
				// Record all 3 overflow attributes because IE does not infer the shorthand
				// from identically-valued overflowX and overflowY
				opts.overflow = [style.overflow, style.overflowX, style.overflowY];

				// Identify a display type, preferring old show/hide data over the CSS cascade
				restoreDisplay = dataShow && dataShow.display;
				if (restoreDisplay == null) {
					restoreDisplay = dataPriv.get(elem, "display");
				}
				display = jQuery.css(elem, "display");
				if (display === "none") {
					if (restoreDisplay) {
						display = restoreDisplay;
					} else {

						// Get nonempty value(s) by temporarily forcing visibility
						showHide([elem], true);
						restoreDisplay = elem.style.display || restoreDisplay;
						display = jQuery.css(elem, "display");
						showHide([elem]);
					}
				}

				// Animate inline elements as inline-block
				if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
					if (jQuery.css(elem, "float") === "none") {

						// Restore the original display value at the end of pure show/hide animations
						if (!propTween) {
							anim.done(function () {
								style.display = restoreDisplay;
							});
							if (restoreDisplay == null) {
								display = style.display;
								restoreDisplay = display === "none" ? "" : display;
							}
						}
						style.display = "inline-block";
					}
				}
			}

			if (opts.overflow) {
				style.overflow = "hidden";
				anim.always(function () {
					style.overflow = opts.overflow[0];
					style.overflowX = opts.overflow[1];
					style.overflowY = opts.overflow[2];
				});
			}

			// Implement show/hide animations
			propTween = false;
			for (prop in orig) {

				// General show/hide setup for this element animation
				if (!propTween) {
					if (dataShow) {
						if ("hidden" in dataShow) {
							hidden = dataShow.hidden;
						}
					} else {
						dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
					}

					// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
					if (toggle) {
						dataShow.hidden = !hidden;
					}

					// Show elements before animating them
					if (hidden) {
						showHide([elem], true);
					}

					/* eslint-disable no-loop-func */

					anim.done(function () {

						/* eslint-enable no-loop-func */

						// The final step of a "hide" animation is actually hiding the element
						if (!hidden) {
							showHide([elem]);
						}
						dataPriv.remove(elem, "fxshow");
						for (prop in orig) {
							jQuery.style(elem, prop, orig[prop]);
						}
					});
				}

				// Per-property setup
				propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
				if (!(prop in dataShow)) {
					dataShow[prop] = propTween.start;
					if (hidden) {
						propTween.end = propTween.start;
						propTween.start = 0;
					}
				}
			}
		}

		function propFilter(props, specialEasing) {
			var index, name, easing, value, hooks;

			// camelCase, specialEasing and expand cssHook pass
			for (index in props) {
				name = jQuery.camelCase(index);
				easing = specialEasing[name];
				value = props[index];
				if (Array.isArray(value)) {
					easing = value[1];
					value = props[index] = value[0];
				}

				if (index !== name) {
					props[name] = value;
					delete props[index];
				}

				hooks = jQuery.cssHooks[name];
				if (hooks && "expand" in hooks) {
					value = hooks.expand(value);
					delete props[name];

					// Not quite $.extend, this won't overwrite existing keys.
					// Reusing 'index' because we have the correct "name"
					for (index in value) {
						if (!(index in props)) {
							props[index] = value[index];
							specialEasing[index] = easing;
						}
					}
				} else {
					specialEasing[name] = easing;
				}
			}
		}

		function Animation(elem, properties, options) {
			var result,
			    stopped,
			    index = 0,
			    length = Animation.prefilters.length,
			    deferred = jQuery.Deferred().always(function () {

				// Don't match elem in the :animated selector
				delete tick.elem;
			}),
			    tick = function tick() {
				if (stopped) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
				    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				    percent = 1 - temp,
				    index = 0,
				    length = animation.tweens.length;

				for (; index < length; index++) {
					animation.tweens[index].run(percent);
				}

				deferred.notifyWith(elem, [animation, percent, remaining]);

				// If there's more to do, yield
				if (percent < 1 && length) {
					return remaining;
				}

				// If this was an empty animation, synthesize a final progress notification
				if (!length) {
					deferred.notifyWith(elem, [animation, 1, 0]);
				}

				// Resolve the animation and report its conclusion
				deferred.resolveWith(elem, [animation]);
				return false;
			},
			    animation = deferred.promise({
				elem: elem,
				props: jQuery.extend({}, properties),
				opts: jQuery.extend(true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function createTween(prop, end) {
					var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
					animation.tweens.push(tween);
					return tween;
				},
				stop: function stop(gotoEnd) {
					var index = 0,


					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
					if (stopped) {
						return this;
					}
					stopped = true;
					for (; index < length; index++) {
						animation.tweens[index].run(1);
					}

					// Resolve when we played the last frame; otherwise, reject
					if (gotoEnd) {
						deferred.notifyWith(elem, [animation, 1, 0]);
						deferred.resolveWith(elem, [animation, gotoEnd]);
					} else {
						deferred.rejectWith(elem, [animation, gotoEnd]);
					}
					return this;
				}
			}),
			    props = animation.props;

			propFilter(props, animation.opts.specialEasing);

			for (; index < length; index++) {
				result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
				if (result) {
					if (jQuery.isFunction(result.stop)) {
						jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
					}
					return result;
				}
			}

			jQuery.map(props, createTween, animation);

			if (jQuery.isFunction(animation.opts.start)) {
				animation.opts.start.call(elem, animation);
			}

			// Attach callbacks from options
			animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);

			jQuery.fx.timer(jQuery.extend(tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			}));

			return animation;
		}

		jQuery.Animation = jQuery.extend(Animation, {

			tweeners: {
				"*": [function (prop, value) {
					var tween = this.createTween(prop, value);
					adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
					return tween;
				}]
			},

			tweener: function tweener(props, callback) {
				if (jQuery.isFunction(props)) {
					callback = props;
					props = ["*"];
				} else {
					props = props.match(rnothtmlwhite);
				}

				var prop,
				    index = 0,
				    length = props.length;

				for (; index < length; index++) {
					prop = props[index];
					Animation.tweeners[prop] = Animation.tweeners[prop] || [];
					Animation.tweeners[prop].unshift(callback);
				}
			},

			prefilters: [defaultPrefilter],

			prefilter: function prefilter(callback, prepend) {
				if (prepend) {
					Animation.prefilters.unshift(callback);
				} else {
					Animation.prefilters.push(callback);
				}
			}
		});

		jQuery.speed = function (speed, easing, fn) {
			var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
				complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
				duration: speed,
				easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
			};

			// Go to the end state if fx are off
			if (jQuery.fx.off) {
				opt.duration = 0;
			} else {
				if (typeof opt.duration !== "number") {
					if (opt.duration in jQuery.fx.speeds) {
						opt.duration = jQuery.fx.speeds[opt.duration];
					} else {
						opt.duration = jQuery.fx.speeds._default;
					}
				}
			}

			// Normalize opt.queue - true/undefined/null -> "fx"
			if (opt.queue == null || opt.queue === true) {
				opt.queue = "fx";
			}

			// Queueing
			opt.old = opt.complete;

			opt.complete = function () {
				if (jQuery.isFunction(opt.old)) {
					opt.old.call(this);
				}

				if (opt.queue) {
					jQuery.dequeue(this, opt.queue);
				}
			};

			return opt;
		};

		jQuery.fn.extend({
			fadeTo: function fadeTo(speed, to, easing, callback) {

				// Show any hidden elements after setting opacity to 0
				return this.filter(isHiddenWithinTree).css("opacity", 0).show()

				// Animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback);
			},
			animate: function animate(prop, speed, easing, callback) {
				var empty = jQuery.isEmptyObject(prop),
				    optall = jQuery.speed(speed, easing, callback),
				    doAnimation = function doAnimation() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation(this, jQuery.extend({}, prop), optall);

					// Empty animations, or finishing resolves immediately
					if (empty || dataPriv.get(this, "finish")) {
						anim.stop(true);
					}
				};
				doAnimation.finish = doAnimation;

				return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
			},
			stop: function stop(type, clearQueue, gotoEnd) {
				var stopQueue = function stopQueue(hooks) {
					var stop = hooks.stop;
					delete hooks.stop;
					stop(gotoEnd);
				};

				if (typeof type !== "string") {
					gotoEnd = clearQueue;
					clearQueue = type;
					type = undefined;
				}
				if (clearQueue && type !== false) {
					this.queue(type || "fx", []);
				}

				return this.each(function () {
					var dequeue = true,
					    index = type != null && type + "queueHooks",
					    timers = jQuery.timers,
					    data = dataPriv.get(this);

					if (index) {
						if (data[index] && data[index].stop) {
							stopQueue(data[index]);
						}
					} else {
						for (index in data) {
							if (data[index] && data[index].stop && rrun.test(index)) {
								stopQueue(data[index]);
							}
						}
					}

					for (index = timers.length; index--;) {
						if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

							timers[index].anim.stop(gotoEnd);
							dequeue = false;
							timers.splice(index, 1);
						}
					}

					// Start the next in the queue if the last step wasn't forced.
					// Timers currently will call their complete callbacks, which
					// will dequeue but only if they were gotoEnd.
					if (dequeue || !gotoEnd) {
						jQuery.dequeue(this, type);
					}
				});
			},
			finish: function finish(type) {
				if (type !== false) {
					type = type || "fx";
				}
				return this.each(function () {
					var index,
					    data = dataPriv.get(this),
					    queue = data[type + "queue"],
					    hooks = data[type + "queueHooks"],
					    timers = jQuery.timers,
					    length = queue ? queue.length : 0;

					// Enable finishing flag on private data
					data.finish = true;

					// Empty the queue first
					jQuery.queue(this, type, []);

					if (hooks && hooks.stop) {
						hooks.stop.call(this, true);
					}

					// Look for any active animations, and finish them
					for (index = timers.length; index--;) {
						if (timers[index].elem === this && timers[index].queue === type) {
							timers[index].anim.stop(true);
							timers.splice(index, 1);
						}
					}

					// Look for any animations in the old queue and finish them
					for (index = 0; index < length; index++) {
						if (queue[index] && queue[index].finish) {
							queue[index].finish.call(this);
						}
					}

					// Turn off finishing flag
					delete data.finish;
				});
			}
		});

		jQuery.each(["toggle", "show", "hide"], function (i, name) {
			var cssFn = jQuery.fn[name];
			jQuery.fn[name] = function (speed, easing, callback) {
				return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
			};
		});

		// Generate shortcuts for custom animations
		jQuery.each({
			slideDown: genFx("show"),
			slideUp: genFx("hide"),
			slideToggle: genFx("toggle"),
			fadeIn: { opacity: "show" },
			fadeOut: { opacity: "hide" },
			fadeToggle: { opacity: "toggle" }
		}, function (name, props) {
			jQuery.fn[name] = function (speed, easing, callback) {
				return this.animate(props, speed, easing, callback);
			};
		});

		jQuery.timers = [];
		jQuery.fx.tick = function () {
			var timer,
			    i = 0,
			    timers = jQuery.timers;

			fxNow = jQuery.now();

			for (; i < timers.length; i++) {
				timer = timers[i];

				// Run the timer and safely remove it when done (allowing for external removal)
				if (!timer() && timers[i] === timer) {
					timers.splice(i--, 1);
				}
			}

			if (!timers.length) {
				jQuery.fx.stop();
			}
			fxNow = undefined;
		};

		jQuery.fx.timer = function (timer) {
			jQuery.timers.push(timer);
			jQuery.fx.start();
		};

		jQuery.fx.interval = 13;
		jQuery.fx.start = function () {
			if (inProgress) {
				return;
			}

			inProgress = true;
			schedule();
		};

		jQuery.fx.stop = function () {
			inProgress = null;
		};

		jQuery.fx.speeds = {
			slow: 600,
			fast: 200,

			// Default speed
			_default: 400
		};

		// Based off of the plugin by Clint Helfers, with permission.
		// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
		jQuery.fn.delay = function (time, type) {
			time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
			type = type || "fx";

			return this.queue(type, function (next, hooks) {
				var timeout = window.setTimeout(next, time);
				hooks.stop = function () {
					window.clearTimeout(timeout);
				};
			});
		};

		(function () {
			var input = document.createElement("input"),
			    select = document.createElement("select"),
			    opt = select.appendChild(document.createElement("option"));

			input.type = "checkbox";

			// Support: Android <=4.3 only
			// Default value for a checkbox should be "on"
			support.checkOn = input.value !== "";

			// Support: IE <=11 only
			// Must access selectedIndex to make default options select
			support.optSelected = opt.selected;

			// Support: IE <=11 only
			// An input loses its value after becoming a radio
			input = document.createElement("input");
			input.value = "t";
			input.type = "radio";
			support.radioValue = input.value === "t";
		})();

		var boolHook,
		    attrHandle = jQuery.expr.attrHandle;

		jQuery.fn.extend({
			attr: function attr(name, value) {
				return access(this, jQuery.attr, name, value, arguments.length > 1);
			},

			removeAttr: function removeAttr(name) {
				return this.each(function () {
					jQuery.removeAttr(this, name);
				});
			}
		});

		jQuery.extend({
			attr: function attr(elem, name, value) {
				var ret,
				    hooks,
				    nType = elem.nodeType;

				// Don't get/set attributes on text, comment and attribute nodes
				if (nType === 3 || nType === 8 || nType === 2) {
					return;
				}

				// Fallback to prop when attributes are not supported
				if (typeof elem.getAttribute === "undefined") {
					return jQuery.prop(elem, name, value);
				}

				// Attribute hooks are determined by the lowercase version
				// Grab necessary hook if one is defined
				if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
					hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
				}

				if (value !== undefined) {
					if (value === null) {
						jQuery.removeAttr(elem, name);
						return;
					}

					if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
						return ret;
					}

					elem.setAttribute(name, value + "");
					return value;
				}

				if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
					return ret;
				}

				ret = jQuery.find.attr(elem, name);

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ? undefined : ret;
			},

			attrHooks: {
				type: {
					set: function set(elem, value) {
						if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
							var val = elem.value;
							elem.setAttribute("type", value);
							if (val) {
								elem.value = val;
							}
							return value;
						}
					}
				}
			},

			removeAttr: function removeAttr(elem, value) {
				var name,
				    i = 0,


				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match(rnothtmlwhite);

				if (attrNames && elem.nodeType === 1) {
					while (name = attrNames[i++]) {
						elem.removeAttribute(name);
					}
				}
			}
		});

		// Hooks for boolean attributes
		boolHook = {
			set: function set(elem, value, name) {
				if (value === false) {

					// Remove boolean attributes when set to false
					jQuery.removeAttr(elem, name);
				} else {
					elem.setAttribute(name, name);
				}
				return name;
			}
		};

		jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
			var getter = attrHandle[name] || jQuery.find.attr;

			attrHandle[name] = function (elem, name, isXML) {
				var ret,
				    handle,
				    lowercaseName = name.toLowerCase();

				if (!isXML) {

					// Avoid an infinite loop by temporarily removing this function from the getter
					handle = attrHandle[lowercaseName];
					attrHandle[lowercaseName] = ret;
					ret = getter(elem, name, isXML) != null ? lowercaseName : null;
					attrHandle[lowercaseName] = handle;
				}
				return ret;
			};
		});

		var rfocusable = /^(?:input|select|textarea|button)$/i,
		    rclickable = /^(?:a|area)$/i;

		jQuery.fn.extend({
			prop: function prop(name, value) {
				return access(this, jQuery.prop, name, value, arguments.length > 1);
			},

			removeProp: function removeProp(name) {
				return this.each(function () {
					delete this[jQuery.propFix[name] || name];
				});
			}
		});

		jQuery.extend({
			prop: function prop(elem, name, value) {
				var ret,
				    hooks,
				    nType = elem.nodeType;

				// Don't get/set properties on text, comment and attribute nodes
				if (nType === 3 || nType === 8 || nType === 2) {
					return;
				}

				if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

					// Fix name and attach hooks
					name = jQuery.propFix[name] || name;
					hooks = jQuery.propHooks[name];
				}

				if (value !== undefined) {
					if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
						return ret;
					}

					return elem[name] = value;
				}

				if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
					return ret;
				}

				return elem[name];
			},

			propHooks: {
				tabIndex: {
					get: function get(elem) {

						// Support: IE <=9 - 11 only
						// elem.tabIndex doesn't always return the
						// correct value when it hasn't been explicitly set
						// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
						// Use proper attribute retrieval(#12072)
						var tabindex = jQuery.find.attr(elem, "tabindex");

						if (tabindex) {
							return parseInt(tabindex, 10);
						}

						if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
							return 0;
						}

						return -1;
					}
				}
			},

			propFix: {
				"for": "htmlFor",
				"class": "className"
			}
		});

		// Support: IE <=11 only
		// Accessing the selectedIndex property
		// forces the browser to respect setting selected
		// on the option
		// The getter ensures a default option is selected
		// when in an optgroup
		// eslint rule "no-unused-expressions" is disabled for this code
		// since it considers such accessions noop
		if (!support.optSelected) {
			jQuery.propHooks.selected = {
				get: function get(elem) {

					/* eslint no-unused-expressions: "off" */

					var parent = elem.parentNode;
					if (parent && parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
					return null;
				},
				set: function set(elem) {

					/* eslint no-unused-expressions: "off" */

					var parent = elem.parentNode;
					if (parent) {
						parent.selectedIndex;

						if (parent.parentNode) {
							parent.parentNode.selectedIndex;
						}
					}
				}
			};
		}

		jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
			jQuery.propFix[this.toLowerCase()] = this;
		});

		// Strip and collapse whitespace according to HTML spec
		// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
		function stripAndCollapse(value) {
			var tokens = value.match(rnothtmlwhite) || [];
			return tokens.join(" ");
		}

		function getClass(elem) {
			return elem.getAttribute && elem.getAttribute("class") || "";
		}

		jQuery.fn.extend({
			addClass: function addClass(value) {
				var classes,
				    elem,
				    cur,
				    curValue,
				    clazz,
				    j,
				    finalValue,
				    i = 0;

				if (jQuery.isFunction(value)) {
					return this.each(function (j) {
						jQuery(this).addClass(value.call(this, j, getClass(this)));
					});
				}

				if (typeof value === "string" && value) {
					classes = value.match(rnothtmlwhite) || [];

					while (elem = this[i++]) {
						curValue = getClass(elem);
						cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

						if (cur) {
							j = 0;
							while (clazz = classes[j++]) {
								if (cur.indexOf(" " + clazz + " ") < 0) {
									cur += clazz + " ";
								}
							}

							// Only assign if different to avoid unneeded rendering.
							finalValue = stripAndCollapse(cur);
							if (curValue !== finalValue) {
								elem.setAttribute("class", finalValue);
							}
						}
					}
				}

				return this;
			},

			removeClass: function removeClass(value) {
				var classes,
				    elem,
				    cur,
				    curValue,
				    clazz,
				    j,
				    finalValue,
				    i = 0;

				if (jQuery.isFunction(value)) {
					return this.each(function (j) {
						jQuery(this).removeClass(value.call(this, j, getClass(this)));
					});
				}

				if (!arguments.length) {
					return this.attr("class", "");
				}

				if (typeof value === "string" && value) {
					classes = value.match(rnothtmlwhite) || [];

					while (elem = this[i++]) {
						curValue = getClass(elem);

						// This expression is here for better compressibility (see addClass)
						cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

						if (cur) {
							j = 0;
							while (clazz = classes[j++]) {

								// Remove *all* instances
								while (cur.indexOf(" " + clazz + " ") > -1) {
									cur = cur.replace(" " + clazz + " ", " ");
								}
							}

							// Only assign if different to avoid unneeded rendering.
							finalValue = stripAndCollapse(cur);
							if (curValue !== finalValue) {
								elem.setAttribute("class", finalValue);
							}
						}
					}
				}

				return this;
			},

			toggleClass: function toggleClass(value, stateVal) {
				var type = typeof value === "undefined" ? "undefined" : _typeof(value);

				if (typeof stateVal === "boolean" && type === "string") {
					return stateVal ? this.addClass(value) : this.removeClass(value);
				}

				if (jQuery.isFunction(value)) {
					return this.each(function (i) {
						jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
					});
				}

				return this.each(function () {
					var className, i, self, classNames;

					if (type === "string") {

						// Toggle individual class names
						i = 0;
						self = jQuery(this);
						classNames = value.match(rnothtmlwhite) || [];

						while (className = classNames[i++]) {

							// Check each className given, space separated list
							if (self.hasClass(className)) {
								self.removeClass(className);
							} else {
								self.addClass(className);
							}
						}

						// Toggle whole class name
					} else if (value === undefined || type === "boolean") {
						className = getClass(this);
						if (className) {

							// Store className if set
							dataPriv.set(this, "__className__", className);
						}

						// If the element has a class name or if we're passed `false`,
						// then remove the whole classname (if there was one, the above saved it).
						// Otherwise bring back whatever was previously saved (if anything),
						// falling back to the empty string if nothing was stored.
						if (this.setAttribute) {
							this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
						}
					}
				});
			},

			hasClass: function hasClass(selector) {
				var className,
				    elem,
				    i = 0;

				className = " " + selector + " ";
				while (elem = this[i++]) {
					if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
						return true;
					}
				}

				return false;
			}
		});

		var rreturn = /\r/g;

		jQuery.fn.extend({
			val: function val(value) {
				var hooks,
				    ret,
				    isFunction,
				    elem = this[0];

				if (!arguments.length) {
					if (elem) {
						hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

						if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
							return ret;
						}

						ret = elem.value;

						// Handle most common string cases
						if (typeof ret === "string") {
							return ret.replace(rreturn, "");
						}

						// Handle cases where value is null/undef or number
						return ret == null ? "" : ret;
					}

					return;
				}

				isFunction = jQuery.isFunction(value);

				return this.each(function (i) {
					var val;

					if (this.nodeType !== 1) {
						return;
					}

					if (isFunction) {
						val = value.call(this, i, jQuery(this).val());
					} else {
						val = value;
					}

					// Treat null/undefined as ""; convert numbers to string
					if (val == null) {
						val = "";
					} else if (typeof val === "number") {
						val += "";
					} else if (Array.isArray(val)) {
						val = jQuery.map(val, function (value) {
							return value == null ? "" : value + "";
						});
					}

					hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

					// If set returns undefined, fall back to normal setting
					if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
						this.value = val;
					}
				});
			}
		});

		jQuery.extend({
			valHooks: {
				option: {
					get: function get(elem) {

						var val = jQuery.find.attr(elem, "value");
						return val != null ? val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse(jQuery.text(elem));
					}
				},
				select: {
					get: function get(elem) {
						var value,
						    option,
						    i,
						    options = elem.options,
						    index = elem.selectedIndex,
						    one = elem.type === "select-one",
						    values = one ? null : [],
						    max = one ? index + 1 : options.length;

						if (index < 0) {
							i = max;
						} else {
							i = one ? index : 0;
						}

						// Loop through all the selected options
						for (; i < max; i++) {
							option = options[i];

							// Support: IE <=9 only
							// IE8-9 doesn't update selected after form reset (#2551)
							if ((option.selected || i === index) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {

								// Get the specific value for the option
								value = jQuery(option).val();

								// We don't need an array for one selects
								if (one) {
									return value;
								}

								// Multi-Selects return an array
								values.push(value);
							}
						}

						return values;
					},

					set: function set(elem, value) {
						var optionSet,
						    option,
						    options = elem.options,
						    values = jQuery.makeArray(value),
						    i = options.length;

						while (i--) {
							option = options[i];

							/* eslint-disable no-cond-assign */

							if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
								optionSet = true;
							}

							/* eslint-enable no-cond-assign */
						}

						// Force browsers to behave consistently when non-matching value is set
						if (!optionSet) {
							elem.selectedIndex = -1;
						}
						return values;
					}
				}
			}
		});

		// Radios and checkboxes getter/setter
		jQuery.each(["radio", "checkbox"], function () {
			jQuery.valHooks[this] = {
				set: function set(elem, value) {
					if (Array.isArray(value)) {
						return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
					}
				}
			};
			if (!support.checkOn) {
				jQuery.valHooks[this].get = function (elem) {
					return elem.getAttribute("value") === null ? "on" : elem.value;
				};
			}
		});

		// Return jQuery for attributes-only inclusion


		var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

		jQuery.extend(jQuery.event, {

			trigger: function trigger(event, data, elem, onlyHandlers) {

				var i,
				    cur,
				    tmp,
				    bubbleType,
				    ontype,
				    handle,
				    special,
				    eventPath = [elem || document],
				    type = hasOwn.call(event, "type") ? event.type : event,
				    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

				cur = tmp = elem = elem || document;

				// Don't do events on text and comment nodes
				if (elem.nodeType === 3 || elem.nodeType === 8) {
					return;
				}

				// focus/blur morphs to focusin/out; ensure we're not firing them right now
				if (rfocusMorph.test(type + jQuery.event.triggered)) {
					return;
				}

				if (type.indexOf(".") > -1) {

					// Namespaced trigger; create a regexp to match event type in handle()
					namespaces = type.split(".");
					type = namespaces.shift();
					namespaces.sort();
				}
				ontype = type.indexOf(":") < 0 && "on" + type;

				// Caller can pass in a jQuery.Event object, Object, or just an event type string
				event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

				// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
				event.isTrigger = onlyHandlers ? 2 : 3;
				event.namespace = namespaces.join(".");
				event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

				// Clean up the event in case it is being reused
				event.result = undefined;
				if (!event.target) {
					event.target = elem;
				}

				// Clone any incoming data and prepend the event, creating the handler arg list
				data = data == null ? [event] : jQuery.makeArray(data, [event]);

				// Allow special events to draw outside the lines
				special = jQuery.event.special[type] || {};
				if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
					return;
				}

				// Determine event propagation path in advance, per W3C events spec (#9951)
				// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
				if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

					bubbleType = special.delegateType || type;
					if (!rfocusMorph.test(bubbleType + type)) {
						cur = cur.parentNode;
					}
					for (; cur; cur = cur.parentNode) {
						eventPath.push(cur);
						tmp = cur;
					}

					// Only add window if we got to document (e.g., not plain obj or detached DOM)
					if (tmp === (elem.ownerDocument || document)) {
						eventPath.push(tmp.defaultView || tmp.parentWindow || window);
					}
				}

				// Fire handlers on the event path
				i = 0;
				while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

					event.type = i > 1 ? bubbleType : special.bindType || type;

					// jQuery handler
					handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
					if (handle) {
						handle.apply(cur, data);
					}

					// Native handler
					handle = ontype && cur[ontype];
					if (handle && handle.apply && acceptData(cur)) {
						event.result = handle.apply(cur, data);
						if (event.result === false) {
							event.preventDefault();
						}
					}
				}
				event.type = type;

				// If nobody prevented the default action, do it now
				if (!onlyHandlers && !event.isDefaultPrevented()) {

					if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

						// Call a native DOM method on the target with the same name as the event.
						// Don't do default actions on window, that's where global variables be (#6170)
						if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

							// Don't re-trigger an onFOO event when we call its FOO() method
							tmp = elem[ontype];

							if (tmp) {
								elem[ontype] = null;
							}

							// Prevent re-triggering of the same event, since we already bubbled it above
							jQuery.event.triggered = type;
							elem[type]();
							jQuery.event.triggered = undefined;

							if (tmp) {
								elem[ontype] = tmp;
							}
						}
					}
				}

				return event.result;
			},

			// Piggyback on a donor event to simulate a different one
			// Used only for `focus(in | out)` events
			simulate: function simulate(type, elem, event) {
				var e = jQuery.extend(new jQuery.Event(), event, {
					type: type,
					isSimulated: true
				});

				jQuery.event.trigger(e, null, elem);
			}

		});

		jQuery.fn.extend({

			trigger: function trigger(type, data) {
				return this.each(function () {
					jQuery.event.trigger(type, data, this);
				});
			},
			triggerHandler: function triggerHandler(type, data) {
				var elem = this[0];
				if (elem) {
					return jQuery.event.trigger(type, data, elem, true);
				}
			}
		});

		jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {

			// Handle event binding
			jQuery.fn[name] = function (data, fn) {
				return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
			};
		});

		jQuery.fn.extend({
			hover: function hover(fnOver, fnOut) {
				return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
			}
		});

		support.focusin = "onfocusin" in window;

		// Support: Firefox <=44
		// Firefox doesn't have focus(in | out) events
		// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
		//
		// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
		// focus(in | out) events fire after focus & blur events,
		// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
		// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
		if (!support.focusin) {
			jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

				// Attach a single capturing handler on the document while someone wants focusin/focusout
				var handler = function handler(event) {
					jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
				};

				jQuery.event.special[fix] = {
					setup: function setup() {
						var doc = this.ownerDocument || this,
						    attaches = dataPriv.access(doc, fix);

						if (!attaches) {
							doc.addEventListener(orig, handler, true);
						}
						dataPriv.access(doc, fix, (attaches || 0) + 1);
					},
					teardown: function teardown() {
						var doc = this.ownerDocument || this,
						    attaches = dataPriv.access(doc, fix) - 1;

						if (!attaches) {
							doc.removeEventListener(orig, handler, true);
							dataPriv.remove(doc, fix);
						} else {
							dataPriv.access(doc, fix, attaches);
						}
					}
				};
			});
		}
		var location = window.location;

		var nonce = jQuery.now();

		var rquery = /\?/;

		// Cross-browser xml parsing
		jQuery.parseXML = function (data) {
			var xml;
			if (!data || typeof data !== "string") {
				return null;
			}

			// Support: IE 9 - 11 only
			// IE throws on parseFromString with invalid input.
			try {
				xml = new window.DOMParser().parseFromString(data, "text/xml");
			} catch (e) {
				xml = undefined;
			}

			if (!xml || xml.getElementsByTagName("parsererror").length) {
				jQuery.error("Invalid XML: " + data);
			}
			return xml;
		};

		var rbracket = /\[\]$/,
		    rCRLF = /\r?\n/g,
		    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		    rsubmittable = /^(?:input|select|textarea|keygen)/i;

		function buildParams(prefix, obj, traditional, add) {
			var name;

			if (Array.isArray(obj)) {

				// Serialize array item.
				jQuery.each(obj, function (i, v) {
					if (traditional || rbracket.test(prefix)) {

						// Treat each array item as a scalar.
						add(prefix, v);
					} else {

						// Item is non-scalar (array or object), encode its numeric index.
						buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" && v != null ? i : "") + "]", v, traditional, add);
					}
				});
			} else if (!traditional && jQuery.type(obj) === "object") {

				// Serialize object item.
				for (name in obj) {
					buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
				}
			} else {

				// Serialize scalar item.
				add(prefix, obj);
			}
		}

		// Serialize an array of form elements or a set of
		// key/values into a query string
		jQuery.param = function (a, traditional) {
			var prefix,
			    s = [],
			    add = function add(key, valueOrFunction) {

				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;

				s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
			};

			// If an array was passed in, assume that it is an array of form elements.
			if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

				// Serialize the form elements
				jQuery.each(a, function () {
					add(this.name, this.value);
				});
			} else {

				// If traditional, encode the "old" way (the way 1.3.2 or older
				// did it), otherwise encode params recursively.
				for (prefix in a) {
					buildParams(prefix, a[prefix], traditional, add);
				}
			}

			// Return the resulting serialization
			return s.join("&");
		};

		jQuery.fn.extend({
			serialize: function serialize() {
				return jQuery.param(this.serializeArray());
			},
			serializeArray: function serializeArray() {
				return this.map(function () {

					// Can add propHook for "elements" to filter or add form elements
					var elements = jQuery.prop(this, "elements");
					return elements ? jQuery.makeArray(elements) : this;
				}).filter(function () {
					var type = this.type;

					// Use .is( ":disabled" ) so that fieldset[disabled] works
					return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
				}).map(function (i, elem) {
					var val = jQuery(this).val();

					if (val == null) {
						return null;
					}

					if (Array.isArray(val)) {
						return jQuery.map(val, function (val) {
							return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
						});
					}

					return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
				}).get();
			}
		});

		var r20 = /%20/g,
		    rhash = /#.*$/,
		    rantiCache = /([?&])_=[^&]*/,
		    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		    rnoContent = /^(?:GET|HEAD)$/,
		    rprotocol = /^\/\//,


		/* Prefilters
	  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	  * 2) These are called:
	  *    - BEFORE asking for a transport
	  *    - AFTER param serialization (s.data is a string if s.processData is true)
	  * 3) key is the dataType
	  * 4) the catchall symbol "*" can be used
	  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	  */
		prefilters = {},


		/* Transports bindings
	  * 1) key is the dataType
	  * 2) the catchall symbol "*" can be used
	  * 3) selection will start with transport dataType and THEN go to "*" if needed
	  */
		transports = {},


		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat("*"),


		// Anchor tag for parsing the document origin
		originAnchor = document.createElement("a");
		originAnchor.href = location.href;

		// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
		function addToPrefiltersOrTransports(structure) {

			// dataTypeExpression is optional and defaults to "*"
			return function (dataTypeExpression, func) {

				if (typeof dataTypeExpression !== "string") {
					func = dataTypeExpression;
					dataTypeExpression = "*";
				}

				var dataType,
				    i = 0,
				    dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

				if (jQuery.isFunction(func)) {

					// For each dataType in the dataTypeExpression
					while (dataType = dataTypes[i++]) {

						// Prepend if requested
						if (dataType[0] === "+") {
							dataType = dataType.slice(1) || "*";
							(structure[dataType] = structure[dataType] || []).unshift(func);

							// Otherwise append
						} else {
							(structure[dataType] = structure[dataType] || []).push(func);
						}
					}
				}
			};
		}

		// Base inspection function for prefilters and transports
		function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

			var inspected = {},
			    seekingTransport = structure === transports;

			function inspect(dataType) {
				var selected;
				inspected[dataType] = true;
				jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
					var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
					if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

						options.dataTypes.unshift(dataTypeOrTransport);
						inspect(dataTypeOrTransport);
						return false;
					} else if (seekingTransport) {
						return !(selected = dataTypeOrTransport);
					}
				});
				return selected;
			}

			return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
		}

		// A special extend for ajax options
		// that takes "flat" options (not to be deep extended)
		// Fixes #9887
		function ajaxExtend(target, src) {
			var key,
			    deep,
			    flatOptions = jQuery.ajaxSettings.flatOptions || {};

			for (key in src) {
				if (src[key] !== undefined) {
					(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
				}
			}
			if (deep) {
				jQuery.extend(true, target, deep);
			}

			return target;
		}

		/* Handles responses to an ajax request:
	  * - finds the right dataType (mediates between content-type and expected dataType)
	  * - returns the corresponding response
	  */
		function ajaxHandleResponses(s, jqXHR, responses) {

			var ct,
			    type,
			    finalDataType,
			    firstDataType,
			    contents = s.contents,
			    dataTypes = s.dataTypes;

			// Remove auto dataType and get content-type in the process
			while (dataTypes[0] === "*") {
				dataTypes.shift();
				if (ct === undefined) {
					ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
				}
			}

			// Check if we're dealing with a known content-type
			if (ct) {
				for (type in contents) {
					if (contents[type] && contents[type].test(ct)) {
						dataTypes.unshift(type);
						break;
					}
				}
			}

			// Check to see if we have a response for the expected dataType
			if (dataTypes[0] in responses) {
				finalDataType = dataTypes[0];
			} else {

				// Try convertible dataTypes
				for (type in responses) {
					if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
						finalDataType = type;
						break;
					}
					if (!firstDataType) {
						firstDataType = type;
					}
				}

				// Or just use first one
				finalDataType = finalDataType || firstDataType;
			}

			// If we found a dataType
			// We add the dataType to the list if needed
			// and return the corresponding response
			if (finalDataType) {
				if (finalDataType !== dataTypes[0]) {
					dataTypes.unshift(finalDataType);
				}
				return responses[finalDataType];
			}
		}

		/* Chain conversions given the request and the original response
	  * Also sets the responseXXX fields on the jqXHR instance
	  */
		function ajaxConvert(s, response, jqXHR, isSuccess) {
			var conv2,
			    current,
			    conv,
			    tmp,
			    prev,
			    converters = {},


			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

			// Create converters map with lowercased keys
			if (dataTypes[1]) {
				for (conv in s.converters) {
					converters[conv.toLowerCase()] = s.converters[conv];
				}
			}

			current = dataTypes.shift();

			// Convert to each sequential dataType
			while (current) {

				if (s.responseFields[current]) {
					jqXHR[s.responseFields[current]] = response;
				}

				// Apply the dataFilter if provided
				if (!prev && isSuccess && s.dataFilter) {
					response = s.dataFilter(response, s.dataType);
				}

				prev = current;
				current = dataTypes.shift();

				if (current) {

					// There's only work to do if current dataType is non-auto
					if (current === "*") {

						current = prev;

						// Convert response if prev dataType is non-auto and differs from current
					} else if (prev !== "*" && prev !== current) {

						// Seek a direct converter
						conv = converters[prev + " " + current] || converters["* " + current];

						// If none found, seek a pair
						if (!conv) {
							for (conv2 in converters) {

								// If conv2 outputs current
								tmp = conv2.split(" ");
								if (tmp[1] === current) {

									// If prev can be converted to accepted input
									conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
									if (conv) {

										// Condense equivalence converters
										if (conv === true) {
											conv = converters[conv2];

											// Otherwise, insert the intermediate dataType
										} else if (converters[conv2] !== true) {
											current = tmp[0];
											dataTypes.unshift(tmp[1]);
										}
										break;
									}
								}
							}
						}

						// Apply converter (if not an equivalence)
						if (conv !== true) {

							// Unless errors are allowed to bubble, catch and return them
							if (conv && s.throws) {
								response = conv(response);
							} else {
								try {
									response = conv(response);
								} catch (e) {
									return {
										state: "parsererror",
										error: conv ? e : "No conversion from " + prev + " to " + current
									};
								}
							}
						}
					}
				}
			}

			return { state: "success", data: response };
		}

		jQuery.extend({

			// Counter for holding the number of active queries
			active: 0,

			// Last-Modified header cache for next request
			lastModified: {},
			etag: {},

			ajaxSettings: {
				url: location.href,
				type: "GET",
				isLocal: rlocalProtocol.test(location.protocol),
				global: true,
				processData: true,
				async: true,
				contentType: "application/x-www-form-urlencoded; charset=UTF-8",

				/*
	   timeout: 0,
	   data: null,
	   dataType: null,
	   username: null,
	   password: null,
	   cache: null,
	   throws: false,
	   traditional: false,
	   headers: {},
	   */

				accepts: {
					"*": allTypes,
					text: "text/plain",
					html: "text/html",
					xml: "application/xml, text/xml",
					json: "application/json, text/javascript"
				},

				contents: {
					xml: /\bxml\b/,
					html: /\bhtml/,
					json: /\bjson\b/
				},

				responseFields: {
					xml: "responseXML",
					text: "responseText",
					json: "responseJSON"
				},

				// Data converters
				// Keys separate source (or catchall "*") and destination types with a single space
				converters: {

					// Convert anything to text
					"* text": String,

					// Text to html (true = no transformation)
					"text html": true,

					// Evaluate text as a json expression
					"text json": JSON.parse,

					// Parse text as xml
					"text xml": jQuery.parseXML
				},

				// For options that shouldn't be deep extended:
				// you can add your own custom options here if
				// and when you create one that shouldn't be
				// deep extended (see ajaxExtend)
				flatOptions: {
					url: true,
					context: true
				}
			},

			// Creates a full fledged settings object into target
			// with both ajaxSettings and settings fields.
			// If target is omitted, writes into ajaxSettings.
			ajaxSetup: function ajaxSetup(target, settings) {
				return settings ?

				// Building a settings object
				ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

				// Extending ajaxSettings
				ajaxExtend(jQuery.ajaxSettings, target);
			},

			ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
			ajaxTransport: addToPrefiltersOrTransports(transports),

			// Main method
			ajax: function ajax(url, options) {

				// If url is an object, simulate pre-1.5 signature
				if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
					options = url;
					url = undefined;
				}

				// Force options to be an object
				options = options || {};

				var transport,


				// URL without anti-cache param
				cacheURL,


				// Response headers
				responseHeadersString,
				    responseHeaders,


				// timeout handle
				timeoutTimer,


				// Url cleanup var
				urlAnchor,


				// Request state (becomes false upon send and true upon completion)
				completed,


				// To know if global events are to be dispatched
				fireGlobals,


				// Loop variable
				i,


				// uncached part of the url
				uncached,


				// Create the final options object
				s = jQuery.ajaxSetup({}, options),


				// Callbacks context
				callbackContext = s.context || s,


				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


				// Deferreds
				deferred = jQuery.Deferred(),
				    completeDeferred = jQuery.Callbacks("once memory"),


				// Status-dependent callbacks
				_statusCode = s.statusCode || {},


				// Headers (they are sent all at once)
				requestHeaders = {},
				    requestHeadersNames = {},


				// Default abort message
				strAbort = "canceled",


				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function getResponseHeader(key) {
						var match;
						if (completed) {
							if (!responseHeaders) {
								responseHeaders = {};
								while (match = rheaders.exec(responseHeadersString)) {
									responseHeaders[match[1].toLowerCase()] = match[2];
								}
							}
							match = responseHeaders[key.toLowerCase()];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function getAllResponseHeaders() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function setRequestHeader(name, value) {
						if (completed == null) {
							name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
							requestHeaders[name] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function overrideMimeType(type) {
						if (completed == null) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function statusCode(map) {
						var code;
						if (map) {
							if (completed) {

								// Execute the appropriate callbacks
								jqXHR.always(map[jqXHR.status]);
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for (code in map) {
									_statusCode[code] = [_statusCode[code], map[code]];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function abort(statusText) {
						var finalText = statusText || strAbort;
						if (transport) {
							transport.abort(finalText);
						}
						done(0, finalText);
						return this;
					}
				};

				// Attach deferreds
				deferred.promise(jqXHR);

				// Add protocol if not provided (prefilters might expect it)
				// Handle falsy url in the settings object (#10093: consistency with old signature)
				// We also use the url parameter if available
				s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

				// Alias method option to type as per ticket #12004
				s.type = options.method || options.type || s.method || s.type;

				// Extract dataTypes list
				s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

				// A cross-domain request is in order when the origin doesn't match the current origin.
				if (s.crossDomain == null) {
					urlAnchor = document.createElement("a");

					// Support: IE <=8 - 11, Edge 12 - 13
					// IE throws exception on accessing the href property if url is malformed,
					// e.g. http://example.com:80x/
					try {
						urlAnchor.href = s.url;

						// Support: IE <=8 - 11 only
						// Anchor's host property isn't correctly set when s.url is relative
						urlAnchor.href = urlAnchor.href;
						s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
					} catch (e) {

						// If there is an error parsing the URL, assume it is crossDomain,
						// it can be rejected by the transport if it is invalid
						s.crossDomain = true;
					}
				}

				// Convert data if not already a string
				if (s.data && s.processData && typeof s.data !== "string") {
					s.data = jQuery.param(s.data, s.traditional);
				}

				// Apply prefilters
				inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

				// If request was aborted inside a prefilter, stop there
				if (completed) {
					return jqXHR;
				}

				// We can fire global events as of now if asked to
				// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
				fireGlobals = jQuery.event && s.global;

				// Watch for a new set of requests
				if (fireGlobals && jQuery.active++ === 0) {
					jQuery.event.trigger("ajaxStart");
				}

				// Uppercase the type
				s.type = s.type.toUpperCase();

				// Determine if request has content
				s.hasContent = !rnoContent.test(s.type);

				// Save the URL in case we're toying with the If-Modified-Since
				// and/or If-None-Match header later on
				// Remove hash to simplify url manipulation
				cacheURL = s.url.replace(rhash, "");

				// More options handling for requests with no content
				if (!s.hasContent) {

					// Remember the hash so we can put it back
					uncached = s.url.slice(cacheURL.length);

					// If data is available, append data to url
					if (s.data) {
						cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

						// #9682: remove data so that it's not used in an eventual retry
						delete s.data;
					}

					// Add or update anti-cache param if needed
					if (s.cache === false) {
						cacheURL = cacheURL.replace(rantiCache, "$1");
						uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
					}

					// Put hash and anti-cache on the URL that will be requested (gh-1732)
					s.url = cacheURL + uncached;

					// Change '%20' to '+' if this is encoded form body content (gh-2658)
				} else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
					s.data = s.data.replace(r20, "+");
				}

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if (s.ifModified) {
					if (jQuery.lastModified[cacheURL]) {
						jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
					}
					if (jQuery.etag[cacheURL]) {
						jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
					}
				}

				// Set the correct header, if data is being sent
				if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
					jqXHR.setRequestHeader("Content-Type", s.contentType);
				}

				// Set the Accepts header for the server, depending on the dataType
				jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

				// Check for headers option
				for (i in s.headers) {
					jqXHR.setRequestHeader(i, s.headers[i]);
				}

				// Allow custom headers/mimetypes and early abort
				if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

					// Abort if not done already and return
					return jqXHR.abort();
				}

				// Aborting is no longer a cancellation
				strAbort = "abort";

				// Install callbacks on deferreds
				completeDeferred.add(s.complete);
				jqXHR.done(s.success);
				jqXHR.fail(s.error);

				// Get transport
				transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

				// If no transport, we auto-abort
				if (!transport) {
					done(-1, "No Transport");
				} else {
					jqXHR.readyState = 1;

					// Send global event
					if (fireGlobals) {
						globalEventContext.trigger("ajaxSend", [jqXHR, s]);
					}

					// If request was aborted inside ajaxSend, stop there
					if (completed) {
						return jqXHR;
					}

					// Timeout
					if (s.async && s.timeout > 0) {
						timeoutTimer = window.setTimeout(function () {
							jqXHR.abort("timeout");
						}, s.timeout);
					}

					try {
						completed = false;
						transport.send(requestHeaders, done);
					} catch (e) {

						// Rethrow post-completion exceptions
						if (completed) {
							throw e;
						}

						// Propagate others as results
						done(-1, e);
					}
				}

				// Callback for when everything is done
				function done(status, nativeStatusText, responses, headers) {
					var isSuccess,
					    success,
					    error,
					    response,
					    modified,
					    statusText = nativeStatusText;

					// Ignore repeat invocations
					if (completed) {
						return;
					}

					completed = true;

					// Clear timeout if it exists
					if (timeoutTimer) {
						window.clearTimeout(timeoutTimer);
					}

					// Dereference transport for early garbage collection
					// (no matter how long the jqXHR object will be used)
					transport = undefined;

					// Cache response headers
					responseHeadersString = headers || "";

					// Set readyState
					jqXHR.readyState = status > 0 ? 4 : 0;

					// Determine if successful
					isSuccess = status >= 200 && status < 300 || status === 304;

					// Get response data
					if (responses) {
						response = ajaxHandleResponses(s, jqXHR, responses);
					}

					// Convert no matter what (that way responseXXX fields are always set)
					response = ajaxConvert(s, response, jqXHR, isSuccess);

					// If successful, handle type chaining
					if (isSuccess) {

						// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
						if (s.ifModified) {
							modified = jqXHR.getResponseHeader("Last-Modified");
							if (modified) {
								jQuery.lastModified[cacheURL] = modified;
							}
							modified = jqXHR.getResponseHeader("etag");
							if (modified) {
								jQuery.etag[cacheURL] = modified;
							}
						}

						// if no content
						if (status === 204 || s.type === "HEAD") {
							statusText = "nocontent";

							// if not modified
						} else if (status === 304) {
							statusText = "notmodified";

							// If we have data, let's convert it
						} else {
							statusText = response.state;
							success = response.data;
							error = response.error;
							isSuccess = !error;
						}
					} else {

						// Extract error from statusText and normalize for non-aborts
						error = statusText;
						if (status || !statusText) {
							statusText = "error";
							if (status < 0) {
								status = 0;
							}
						}
					}

					// Set data for the fake xhr object
					jqXHR.status = status;
					jqXHR.statusText = (nativeStatusText || statusText) + "";

					// Success/Error
					if (isSuccess) {
						deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
					} else {
						deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
					}

					// Status-dependent callbacks
					jqXHR.statusCode(_statusCode);
					_statusCode = undefined;

					if (fireGlobals) {
						globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
					}

					// Complete
					completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

					if (fireGlobals) {
						globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

						// Handle the global AJAX counter
						if (! --jQuery.active) {
							jQuery.event.trigger("ajaxStop");
						}
					}
				}

				return jqXHR;
			},

			getJSON: function getJSON(url, data, callback) {
				return jQuery.get(url, data, callback, "json");
			},

			getScript: function getScript(url, callback) {
				return jQuery.get(url, undefined, callback, "script");
			}
		});

		jQuery.each(["get", "post"], function (i, method) {
			jQuery[method] = function (url, data, callback, type) {

				// Shift arguments if data argument was omitted
				if (jQuery.isFunction(data)) {
					type = type || callback;
					callback = data;
					data = undefined;
				}

				// The url can be an options object (which then must have .url)
				return jQuery.ajax(jQuery.extend({
					url: url,
					type: method,
					dataType: type,
					data: data,
					success: callback
				}, jQuery.isPlainObject(url) && url));
			};
		});

		jQuery._evalUrl = function (url) {
			return jQuery.ajax({
				url: url,

				// Make this explicit, since user can override this through ajaxSetup (#11264)
				type: "GET",
				dataType: "script",
				cache: true,
				async: false,
				global: false,
				"throws": true
			});
		};

		jQuery.fn.extend({
			wrapAll: function wrapAll(html) {
				var wrap;

				if (this[0]) {
					if (jQuery.isFunction(html)) {
						html = html.call(this[0]);
					}

					// The elements to wrap the target around
					wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

					if (this[0].parentNode) {
						wrap.insertBefore(this[0]);
					}

					wrap.map(function () {
						var elem = this;

						while (elem.firstElementChild) {
							elem = elem.firstElementChild;
						}

						return elem;
					}).append(this);
				}

				return this;
			},

			wrapInner: function wrapInner(html) {
				if (jQuery.isFunction(html)) {
					return this.each(function (i) {
						jQuery(this).wrapInner(html.call(this, i));
					});
				}

				return this.each(function () {
					var self = jQuery(this),
					    contents = self.contents();

					if (contents.length) {
						contents.wrapAll(html);
					} else {
						self.append(html);
					}
				});
			},

			wrap: function wrap(html) {
				var isFunction = jQuery.isFunction(html);

				return this.each(function (i) {
					jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
				});
			},

			unwrap: function unwrap(selector) {
				this.parent(selector).not("body").each(function () {
					jQuery(this).replaceWith(this.childNodes);
				});
				return this;
			}
		});

		jQuery.expr.pseudos.hidden = function (elem) {
			return !jQuery.expr.pseudos.visible(elem);
		};
		jQuery.expr.pseudos.visible = function (elem) {
			return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
		};

		jQuery.ajaxSettings.xhr = function () {
			try {
				return new window.XMLHttpRequest();
			} catch (e) {}
		};

		var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		    xhrSupported = jQuery.ajaxSettings.xhr();

		support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
		support.ajax = xhrSupported = !!xhrSupported;

		jQuery.ajaxTransport(function (options) {
			var _callback, errorCallback;

			// Cross domain only allowed if supported through XMLHttpRequest
			if (support.cors || xhrSupported && !options.crossDomain) {
				return {
					send: function send(headers, complete) {
						var i,
						    xhr = options.xhr();

						xhr.open(options.type, options.url, options.async, options.username, options.password);

						// Apply custom fields if provided
						if (options.xhrFields) {
							for (i in options.xhrFields) {
								xhr[i] = options.xhrFields[i];
							}
						}

						// Override mime type if needed
						if (options.mimeType && xhr.overrideMimeType) {
							xhr.overrideMimeType(options.mimeType);
						}

						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if (!options.crossDomain && !headers["X-Requested-With"]) {
							headers["X-Requested-With"] = "XMLHttpRequest";
						}

						// Set headers
						for (i in headers) {
							xhr.setRequestHeader(i, headers[i]);
						}

						// Callback
						_callback = function callback(type) {
							return function () {
								if (_callback) {
									_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

									if (type === "abort") {
										xhr.abort();
									} else if (type === "error") {

										// Support: IE <=9 only
										// On a manual native abort, IE9 throws
										// errors on any property access that is not readyState
										if (typeof xhr.status !== "number") {
											complete(0, "error");
										} else {
											complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status, xhr.statusText);
										}
									} else {
										complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										(xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
									}
								}
							};
						};

						// Listen to events
						xhr.onload = _callback();
						errorCallback = xhr.onerror = _callback("error");

						// Support: IE 9 only
						// Use onreadystatechange to replace onabort
						// to handle uncaught aborts
						if (xhr.onabort !== undefined) {
							xhr.onabort = errorCallback;
						} else {
							xhr.onreadystatechange = function () {

								// Check readyState before timeout as it changes
								if (xhr.readyState === 4) {

									// Allow onerror to be called first,
									// but that will not handle a native abort
									// Also, save errorCallback to a variable
									// as xhr.onerror cannot be accessed
									window.setTimeout(function () {
										if (_callback) {
											errorCallback();
										}
									});
								}
							};
						}

						// Create the abort callback
						_callback = _callback("abort");

						try {

							// Do send the request (this may raise an exception)
							xhr.send(options.hasContent && options.data || null);
						} catch (e) {

							// #14683: Only rethrow if this hasn't been notified as an error yet
							if (_callback) {
								throw e;
							}
						}
					},

					abort: function abort() {
						if (_callback) {
							_callback();
						}
					}
				};
			}
		});

		// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
		jQuery.ajaxPrefilter(function (s) {
			if (s.crossDomain) {
				s.contents.script = false;
			}
		});

		// Install script dataType
		jQuery.ajaxSetup({
			accepts: {
				script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
			},
			contents: {
				script: /\b(?:java|ecma)script\b/
			},
			converters: {
				"text script": function textScript(text) {
					jQuery.globalEval(text);
					return text;
				}
			}
		});

		// Handle cache's special case and crossDomain
		jQuery.ajaxPrefilter("script", function (s) {
			if (s.cache === undefined) {
				s.cache = false;
			}
			if (s.crossDomain) {
				s.type = "GET";
			}
		});

		// Bind script tag hack transport
		jQuery.ajaxTransport("script", function (s) {

			// This transport only deals with cross domain requests
			if (s.crossDomain) {
				var script, _callback2;
				return {
					send: function send(_, complete) {
						script = jQuery("<script>").prop({
							charset: s.scriptCharset,
							src: s.url
						}).on("load error", _callback2 = function callback(evt) {
							script.remove();
							_callback2 = null;
							if (evt) {
								complete(evt.type === "error" ? 404 : 200, evt.type);
							}
						});

						// Use native DOM manipulation to avoid our domManip AJAX trickery
						document.head.appendChild(script[0]);
					},
					abort: function abort() {
						if (_callback2) {
							_callback2();
						}
					}
				};
			}
		});

		var oldCallbacks = [],
		    rjsonp = /(=)\?(?=&|$)|\?\?/;

		// Default jsonp settings
		jQuery.ajaxSetup({
			jsonp: "callback",
			jsonpCallback: function jsonpCallback() {
				var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
				this[callback] = true;
				return callback;
			}
		});

		// Detect, normalize options and install callbacks for jsonp requests
		jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

			var callbackName,
			    overwritten,
			    responseContainer,
			    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

			// Handle iff the expected data type is "jsonp" or we have a parameter to set
			if (jsonProp || s.dataTypes[0] === "jsonp") {

				// Get callback name, remembering preexisting value associated with it
				callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

				// Insert callback into url or form data
				if (jsonProp) {
					s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
				} else if (s.jsonp !== false) {
					s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
				}

				// Use data converter to retrieve json after script execution
				s.converters["script json"] = function () {
					if (!responseContainer) {
						jQuery.error(callbackName + " was not called");
					}
					return responseContainer[0];
				};

				// Force json dataType
				s.dataTypes[0] = "json";

				// Install callback
				overwritten = window[callbackName];
				window[callbackName] = function () {
					responseContainer = arguments;
				};

				// Clean-up function (fires after converters)
				jqXHR.always(function () {

					// If previous value didn't exist - remove it
					if (overwritten === undefined) {
						jQuery(window).removeProp(callbackName);

						// Otherwise restore preexisting value
					} else {
						window[callbackName] = overwritten;
					}

					// Save back as free
					if (s[callbackName]) {

						// Make sure that re-using the options doesn't screw things around
						s.jsonpCallback = originalSettings.jsonpCallback;

						// Save the callback name for future use
						oldCallbacks.push(callbackName);
					}

					// Call if it was a function and we have a response
					if (responseContainer && jQuery.isFunction(overwritten)) {
						overwritten(responseContainer[0]);
					}

					responseContainer = overwritten = undefined;
				});

				// Delegate to script
				return "script";
			}
		});

		// Support: Safari 8 only
		// In Safari 8 documents created via document.implementation.createHTMLDocument
		// collapse sibling forms: the second one becomes a child of the first one.
		// Because of that, this security measure has to be disabled in Safari 8.
		// https://bugs.webkit.org/show_bug.cgi?id=137337
		support.createHTMLDocument = function () {
			var body = document.implementation.createHTMLDocument("").body;
			body.innerHTML = "<form></form><form></form>";
			return body.childNodes.length === 2;
		}();

		// Argument "data" should be string of html
		// context (optional): If specified, the fragment will be created in this context,
		// defaults to document
		// keepScripts (optional): If true, will include scripts passed in the html string
		jQuery.parseHTML = function (data, context, keepScripts) {
			if (typeof data !== "string") {
				return [];
			}
			if (typeof context === "boolean") {
				keepScripts = context;
				context = false;
			}

			var base, parsed, scripts;

			if (!context) {

				// Stop scripts or inline event handlers from being executed immediately
				// by using document.implementation
				if (support.createHTMLDocument) {
					context = document.implementation.createHTMLDocument("");

					// Set the base href for the created document
					// so any parsed elements with URLs
					// are based on the document's URL (gh-2965)
					base = context.createElement("base");
					base.href = document.location.href;
					context.head.appendChild(base);
				} else {
					context = document;
				}
			}

			parsed = rsingleTag.exec(data);
			scripts = !keepScripts && [];

			// Single tag
			if (parsed) {
				return [context.createElement(parsed[1])];
			}

			parsed = buildFragment([data], context, scripts);

			if (scripts && scripts.length) {
				jQuery(scripts).remove();
			}

			return jQuery.merge([], parsed.childNodes);
		};

		/**
	  * Load a url into a page
	  */
		jQuery.fn.load = function (url, params, callback) {
			var selector,
			    type,
			    response,
			    self = this,
			    off = url.indexOf(" ");

			if (off > -1) {
				selector = stripAndCollapse(url.slice(off));
				url = url.slice(0, off);
			}

			// If it's a function
			if (jQuery.isFunction(params)) {

				// We assume that it's the callback
				callback = params;
				params = undefined;

				// Otherwise, build a param string
			} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
				type = "POST";
			}

			// If we have elements to modify, make the request
			if (self.length > 0) {
				jQuery.ajax({
					url: url,

					// If "type" variable is undefined, then "GET" method will be used.
					// Make value of this field explicit since
					// user can override it through ajaxSetup method
					type: type || "GET",
					dataType: "html",
					data: params
				}).done(function (responseText) {

					// Save response for use in complete callback
					response = arguments;

					self.html(selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

					// Otherwise use the full result
					responseText);

					// If the request succeeds, this function gets "data", "status", "jqXHR"
					// but they are ignored because response was set above.
					// If it fails, this function gets "jqXHR", "status", "error"
				}).always(callback && function (jqXHR, status) {
					self.each(function () {
						callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
					});
				});
			}

			return this;
		};

		// Attach a bunch of functions for handling common AJAX events
		jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
			jQuery.fn[type] = function (fn) {
				return this.on(type, fn);
			};
		});

		jQuery.expr.pseudos.animated = function (elem) {
			return jQuery.grep(jQuery.timers, function (fn) {
				return elem === fn.elem;
			}).length;
		};

		jQuery.offset = {
			setOffset: function setOffset(elem, options, i) {
				var curPosition,
				    curLeft,
				    curCSSTop,
				    curTop,
				    curOffset,
				    curCSSLeft,
				    calculatePosition,
				    position = jQuery.css(elem, "position"),
				    curElem = jQuery(elem),
				    props = {};

				// Set position first, in-case top/left are set even on static elem
				if (position === "static") {
					elem.style.position = "relative";
				}

				curOffset = curElem.offset();
				curCSSTop = jQuery.css(elem, "top");
				curCSSLeft = jQuery.css(elem, "left");
				calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

				// Need to be able to calculate position if either
				// top or left is auto and position is either absolute or fixed
				if (calculatePosition) {
					curPosition = curElem.position();
					curTop = curPosition.top;
					curLeft = curPosition.left;
				} else {
					curTop = parseFloat(curCSSTop) || 0;
					curLeft = parseFloat(curCSSLeft) || 0;
				}

				if (jQuery.isFunction(options)) {

					// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
					options = options.call(elem, i, jQuery.extend({}, curOffset));
				}

				if (options.top != null) {
					props.top = options.top - curOffset.top + curTop;
				}
				if (options.left != null) {
					props.left = options.left - curOffset.left + curLeft;
				}

				if ("using" in options) {
					options.using.call(elem, props);
				} else {
					curElem.css(props);
				}
			}
		};

		jQuery.fn.extend({
			offset: function offset(options) {

				// Preserve chaining for setter
				if (arguments.length) {
					return options === undefined ? this : this.each(function (i) {
						jQuery.offset.setOffset(this, options, i);
					});
				}

				var doc,
				    docElem,
				    rect,
				    win,
				    elem = this[0];

				if (!elem) {
					return;
				}

				// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
				// Support: IE <=11 only
				// Running getBoundingClientRect on a
				// disconnected node in IE throws an error
				if (!elem.getClientRects().length) {
					return { top: 0, left: 0 };
				}

				rect = elem.getBoundingClientRect();

				doc = elem.ownerDocument;
				docElem = doc.documentElement;
				win = doc.defaultView;

				return {
					top: rect.top + win.pageYOffset - docElem.clientTop,
					left: rect.left + win.pageXOffset - docElem.clientLeft
				};
			},

			position: function position() {
				if (!this[0]) {
					return;
				}

				var offsetParent,
				    offset,
				    elem = this[0],
				    parentOffset = { top: 0, left: 0 };

				// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
				// because it is its only offset parent
				if (jQuery.css(elem, "position") === "fixed") {

					// Assume getBoundingClientRect is there when computed position is fixed
					offset = elem.getBoundingClientRect();
				} else {

					// Get *real* offsetParent
					offsetParent = this.offsetParent();

					// Get correct offsets
					offset = this.offset();
					if (!nodeName(offsetParent[0], "html")) {
						parentOffset = offsetParent.offset();
					}

					// Add offsetParent borders
					parentOffset = {
						top: parentOffset.top + jQuery.css(offsetParent[0], "borderTopWidth", true),
						left: parentOffset.left + jQuery.css(offsetParent[0], "borderLeftWidth", true)
					};
				}

				// Subtract parent offsets and element margins
				return {
					top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
					left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
				};
			},

			// This method will return documentElement in the following cases:
			// 1) For the element inside the iframe without offsetParent, this method will return
			//    documentElement of the parent window
			// 2) For the hidden or detached element
			// 3) For body or html element, i.e. in case of the html node - it will return itself
			//
			// but those exceptions were never presented as a real life use-cases
			// and might be considered as more preferable results.
			//
			// This logic, however, is not guaranteed and can change at any point in the future
			offsetParent: function offsetParent() {
				return this.map(function () {
					var offsetParent = this.offsetParent;

					while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
						offsetParent = offsetParent.offsetParent;
					}

					return offsetParent || documentElement;
				});
			}
		});

		// Create scrollLeft and scrollTop methods
		jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
			var top = "pageYOffset" === prop;

			jQuery.fn[method] = function (val) {
				return access(this, function (elem, method, val) {

					// Coalesce documents and windows
					var win;
					if (jQuery.isWindow(elem)) {
						win = elem;
					} else if (elem.nodeType === 9) {
						win = elem.defaultView;
					}

					if (val === undefined) {
						return win ? win[prop] : elem[method];
					}

					if (win) {
						win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
					} else {
						elem[method] = val;
					}
				}, method, val, arguments.length);
			};
		});

		// Support: Safari <=7 - 9.1, Chrome <=37 - 49
		// Add the top/left cssHooks using jQuery.fn.position
		// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
		// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
		// getComputedStyle returns percent when specified for top/left/bottom/right;
		// rather than make the css module depend on the offset module, just check for it here
		jQuery.each(["top", "left"], function (i, prop) {
			jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
				if (computed) {
					computed = curCSS(elem, prop);

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
				}
			});
		});

		// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
		jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
			jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

				// Margin is only for outerHeight, outerWidth
				jQuery.fn[funcName] = function (margin, value) {
					var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
					    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

					return access(this, function (elem, type, value) {
						var doc;

						if (jQuery.isWindow(elem)) {

							// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
							return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
						}

						// Get document width or height
						if (elem.nodeType === 9) {
							doc = elem.documentElement;

							// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
							// whichever is greatest
							return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
						}

						return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css(elem, type, extra) :

						// Set width or height on the element
						jQuery.style(elem, type, value, extra);
					}, type, chainable ? margin : undefined, chainable);
				};
			});
		});

		jQuery.fn.extend({

			bind: function bind(types, data, fn) {
				return this.on(types, null, data, fn);
			},
			unbind: function unbind(types, fn) {
				return this.off(types, null, fn);
			},

			delegate: function delegate(selector, types, data, fn) {
				return this.on(types, selector, data, fn);
			},
			undelegate: function undelegate(selector, types, fn) {

				// ( namespace ) or ( selector, types [, fn] )
				return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
			}
		});

		jQuery.holdReady = function (hold) {
			if (hold) {
				jQuery.readyWait++;
			} else {
				jQuery.ready(true);
			}
		};
		jQuery.isArray = Array.isArray;
		jQuery.parseJSON = JSON.parse;
		jQuery.nodeName = nodeName;

		// Register as a named AMD module, since jQuery can be concatenated with other
		// files that may use define, but not via a proper concatenation script that
		// understands anonymous AMD modules. A named AMD is safest and most robust
		// way to register. Lowercase jquery is used because AMD module names are
		// derived from file names, and jQuery is normally delivered in a lowercase
		// file name. Do this after creating the global so that if an AMD module wants
		// to call noConflict to hide this version of jQuery, it will work.

		// Note that for maximum portability, libraries that are not jQuery should
		// declare themselves as anonymous modules, and avoid setting a global if an
		// AMD loader is present. jQuery is a special case. For more information, see
		// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

		if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return jQuery;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}

		var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,


		// Map over the $ in case of overwrite
		_$ = window.$;

		jQuery.noConflict = function (deep) {
			if (window.$ === jQuery) {
				window.$ = _$;
			}

			if (deep && window.jQuery === jQuery) {
				window.jQuery = _jQuery;
			}

			return jQuery;
		};

		// Expose jQuery and $ identifiers, even in AMD
		// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
		// and CommonJS for browser emulators (#13566)
		if (!noGlobal) {
			window.jQuery = window.$ = jQuery;
		}

		return jQuery;
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	"use strict";

	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _jquery = __webpack_require__(1);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _Converters = __webpack_require__(4);

	var _Converters2 = _interopRequireDefault(_Converters);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	"use strict";

	var EmojiEditor = function () {

	    /**
	     *
	     * @param {HTMLElement|HTMLTextAreaElement|HTMLInputElement} input
	     * @param {Boolean} prevent_new_line
	     */
	    function EmojiEditor(input) {
	        var prevent_new_line = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        _classCallCheck(this, EmojiEditor);

	        /**
	         *
	         * @type {HTMLElement|HTMLTextAreaElement|HTMLInputElement}
	         * @private
	         */
	        this._input = input;

	        /**
	         * @type {Boolean}
	         * @private
	         */
	        this._is_content_editable = input.isContentEditable;

	        /**
	         *
	         * @type {Range|undefined}
	         */
	        this.cursor_position = undefined;

	        /**
	         *
	         * @type {boolean}
	         */
	        this.prevent_new_line = prevent_new_line;

	        this._trackCursor();
	        this._onPaste();
	    }

	    /**
	     * Pastes an emoji at the caret taking into account whether the element
	     * is contenteditable or not.
	     *
	     * @param {Emoji} emoji
	     */


	    _createClass(EmojiEditor, [{
	        key: "placeEmoji",
	        value: function placeEmoji(emoji) {

	            this._input.focus();
	            if (this.cursor_position) {
	                EmojiEditor.restoreSelection(this.cursor_position);
	            }

	            if (this._is_content_editable) {
	                var node = void 0;
	                if (EmojiEditor.supportsUnified()) {
	                    node = EmojiEditor.pasteTextAtCaret(emoji.getCharacter());
	                    EmojiEditor.selectElement(node);
	                } else {
	                    node = EmojiEditor.pasteHtml(emoji.getHtml());
	                }

	                (0, _jquery2.default)(this._input).trigger('change').trigger('input');

	                return node;
	            } else {
	                var ret = this.pasteInputText(emoji.getColons());
	                (0, _jquery2.default)(this._input).trigger('change').trigger('input');
	                return ret;
	            }
	        }

	        /**
	         * Pastes text at the cursor while preserving cursor position.
	         *
	         * @param text
	         * @return {String}
	         */

	    }, {
	        key: "pasteInputText",
	        value: function pasteInputText(text) {

	            var cursor_position = this._input.selectionStart;
	            var current_length = this._input.value.length;
	            this._input.value = this._input.value.substr(0, cursor_position) + text + this._input.value.substr(cursor_position);

	            this.setInputCaretPosition(cursor_position + this._input.value.length - current_length);

	            return text;
	        }

	        /**
	         * Sets the caret position on a textarea or input[type=text] field
	         *
	         *
	         * @param position
	         * @returns {boolean}
	         */

	    }, {
	        key: "setInputCaretPosition",
	        value: function setInputCaretPosition(position) {
	            if (this._input.createTextRange) {
	                var range = this._input.createTextRange();
	                range.move('character', position);
	                range.select();
	                return true;
	            } else {
	                if (this._input.selectionStart || this._input.selectionStart === 0) {
	                    this._input.focus();
	                    this._input.setSelectionRange(position, position);
	                    return true;
	                }
	                //Otherwise this method failed (browser not supported)
	                else {
	                        this._input.focus();
	                        return false;
	                    }
	            }
	        }

	        /**
	         * Gets the text from the input
	         *
	         * @returns {*}
	         */

	    }, {
	        key: "getText",
	        value: function getText() {
	            if (this._is_content_editable) {
	                return this._mapElement(this._input).replace(/[\u200B-\u200D\uFEFF]/g, '');
	            }

	            return _Converters2.default.withUnified().replace_colons(this._input.value);
	        }

	        /**
	         * Empty the input's contents.
	         */

	    }, {
	        key: "empty",
	        value: function empty() {
	            if (this._is_content_editable) {
	                this._input.innerHTML = "";
	            } else {
	                this._input.value = "";
	            }
	        }
	        /**
	         * Intercepts paste events for contenteditable divs so that we don't get
	         * any of the special html that gets inserted automatically.
	         *
	         * @returns {EmojiEditor}
	         * @private
	         */

	    }, {
	        key: "_onPaste",
	        value: function _onPaste() {
	            if (this._is_content_editable) {
	                (0, _jquery2.default)(this._input).off('paste.editable').on('paste.editable', function (event) {
	                    event.stopPropagation();
	                    event.preventDefault();

	                    var clipboard_data = event.originalEvent.clipboardData || window.clipboardData;
	                    var pasted_data = clipboard_data.getData('text');
	                    var text = EmojiEditor.pasteTextAtCaret(pasted_data);
	                    EmojiEditor.selectElement(text);
	                });
	            }

	            return this;
	        }

	        /**
	         * Get all of the child nodes in an input
	         *
	         * @returns {Array<Node>}
	         */

	    }, {
	        key: "getNodes",
	        value: function getNodes() {
	            return Array.prototype.slice.call(this._input.childNodes);
	        }

	        /**
	         * Selects the last node in the input.
	         */

	    }, {
	        key: "selectLastNode",
	        value: function selectLastNode() {
	            var nodes = this.getNodes();
	            if (nodes.length) {
	                EmojiEditor.selectElement(nodes[nodes.length - 1]);
	                this.cursor_position = EmojiEditor.saveSelection();
	            }
	        }

	        /**
	         * Extracts just text and emojis from a contenteditable element
	         *
	         * @param {HTMLElement} el
	         * @private
	         */

	    }, {
	        key: "_mapElement",
	        value: function _mapElement(el) {
	            var _this = this;

	            var children = Array.prototype.slice.call(el.childNodes);

	            return children.map( /**Text|HTMLElement*/function (node) {

	                var is_text = node instanceof Text;
	                var is_html = node instanceof HTMLElement;

	                //Return all text from text nodes
	                if (is_text) {
	                    return node.textContent;
	                }
	                //Extract codepoints from span
	                else if (is_html && node.tagName === "SPAN") {
	                        return EmojiEditor._extractSpan(node);
	                    }

	                    //Extract codepoints from an image if it was supplied
	                    else if (is_html && node.tagName === "IMG") {
	                            return EmojiEditor._extractImage(node);
	                        }

	                        //Convert br tags to line breaks
	                        else if (is_html && node.tagName === "BR") {
	                                return "\n";
	                            }

	                            //if the element is not html we're accounting for run it back through this function
	                            else if (is_html) {
	                                    return _this._mapElement(node);
	                                } else {
	                                    //Unaccounted for situation - just return a blank string
	                                    return "";
	                                }
	            }).join("");
	        }

	        /**
	         * Tracks the cursor position and monitors the enter button in case prevent_new_line is true
	         *
	         * @returns {EmojiEditor}
	         * @private
	         */

	    }, {
	        key: "_trackCursor",
	        value: function _trackCursor() {
	            var _this2 = this;

	            if (this._is_content_editable) {
	                (0, _jquery2.default)(this._input).off('keyup.emoji mouseup.emoji').on('keyup.emoji mouseup.emoji', function () {
	                    _this2.cursor_position = EmojiEditor.saveSelection();
	                });

	                (0, _jquery2.default)(this._input).off('keydown.emoji').on('keydown.emoji', function (event) {
	                    if (event.which === 13 && _this2.prevent_new_line) {
	                        event.preventDefault();
	                    }
	                });
	            }

	            return this;
	        }
	        /**
	         * Extracts the text content from a contenteditable and extracts any spans.
	         *
	         * @param span
	         * @returns {String}
	         * @private
	         */

	    }, {
	        key: "replaceUnified",


	        /**
	         * Replaces unified unicode inside of a contenteditable element with
	         * platform appropriate content.
	         *
	         */
	        value: function replaceUnified() {

	            if (this._is_content_editable) {
	                var converter = _Converters2.default.withEnvironment();
	                var html = converter.replace_unified(this._input.innerHTML);
	                EmojiEditor.selectElementContents(this._input);
	                var node = EmojiEditor.pasteHtml(html);
	                if (node) {
	                    EmojiEditor.selectElement(node);
	                }
	            } else {
	                throw new Error("The replaceUnified method should only be called on contenteditable elements.");
	            }
	        }

	        /**
	         * Determines if the environment supports unified unicode.
	         *
	         * @returns {boolean}
	         */

	    }], [{
	        key: "_extractSpan",
	        value: function _extractSpan(span) {
	            var $span = (0, _jquery2.default)(span);
	            var $inner = $span.find('.emoji-inner');
	            //If the span was not inserted by the emoji picker
	            if (!$inner.length) {
	                return "";
	            }
	            //If the span was inserted by the emoji picker, get the codepoints and return the corresponding character
	            try {
	                var codepoint = $inner.data('codepoints');
	                return EmojiEditor.parseCodepoints(codepoint);
	            } catch (err) {
	                return "";
	            }
	        }

	        /**
	         * Extracts codepoints from an image if it exists.
	         *
	         * @param {HTMLElement} img
	         * @private
	         */

	    }, {
	        key: "_extractImage",
	        value: function _extractImage(img) {
	            if (img.hasAttribute('data-codepoints')) {
	                return EmojiEditor.parseCodepoints(img.getAttribute('data-codepoints'));
	            }

	            return "";
	        }

	        /**
	         * Parses codepoints that may come in the format
	         * `hex`-`hex` rather than just `hex`
	         *
	         * @param codepoints
	         * @returns {string}
	         */

	    }, {
	        key: "parseCodepoints",
	        value: function parseCodepoints(codepoints) {

	            if (/-/g.test(codepoints)) {
	                var arr = codepoints.split("-");
	                var one = "0x" + arr[0];
	                var two = "0x" + arr[1];
	                return String.fromCodePoint(one, two);
	            }

	            return String.fromCodePoint("0x" + codepoints);
	        }
	    }, {
	        key: "supportsUnified",
	        value: function supportsUnified() {
	            return _Converters2.default.withEnvironment().replace_mode === "unified";
	        }

	        /**
	         * Shortcut to paste html at the caret with a dummy unicode character.
	         *
	         * @param html
	         */

	    }, {
	        key: "pasteHtml",
	        value: function pasteHtml(html) {
	            return EmojiEditor.pasteHtmlAtCaret(html + "&#8203;");
	        }
	        /**
	         * saves the position of the cursor in a contenteditable div
	         *
	         * Credit goes to Tim Down here
	         *
	         * @returns {Range|null}
	         */

	    }, {
	        key: "saveSelection",
	        value: function saveSelection() {
	            if (window.getSelection) {
	                var sel = window.getSelection();
	                if (sel.getRangeAt && sel.rangeCount) {
	                    return sel.getRangeAt(0);
	                }
	            } else if (document.selection && document.selection.createRange) {
	                return document.selection.createRange();
	            }
	            return null;
	        }

	        /**
	         * Restores the selection using a Range object
	         *
	         * Credit goes to Tim Down here
	         *
	         * @param {Range} range
	         */

	    }, {
	        key: "restoreSelection",
	        value: function restoreSelection(range) {
	            if (range) {
	                if (window.getSelection) {
	                    var sel = window.getSelection();
	                    sel.removeAllRanges();
	                    sel.addRange(range);
	                } else if (document.selection && range.select) {
	                    range.select();
	                }
	            }
	        }

	        /**
	         * Pastes text at the caret position
	         *
	         * Credit goes to Tim Down here
	         *
	         * @param text
	         * @returns {Text}
	         */

	    }, {
	        key: "pasteTextAtCaret",
	        value: function pasteTextAtCaret(text) {
	            var sel = void 0,
	                range = void 0;
	            var node = document.createTextNode(text);
	            if (window.getSelection) {
	                sel = window.getSelection();
	                if (sel.getRangeAt && sel.rangeCount) {
	                    range = sel.getRangeAt(0);
	                    range.deleteContents();
	                    range.insertNode(node);
	                }
	            } else if (document.selection && document.selection.createRange) {
	                document.selection.createRange().text = node.textContent;
	            }

	            return node;
	        }

	        /**
	         * Selects an element an optionally highlights it. If it doesn't highlight,
	         * it just drops the cursor at the end of the element.
	         *
	         *
	         * Credit goes to Tim Down here
	         *
	         * @param element
	         * @param highlight
	         */

	    }, {
	        key: "selectElement",
	        value: function selectElement(element) {
	            var highlight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	            if (window.getSelection) {
	                var sel = window.getSelection();
	                sel.removeAllRanges();
	                var range = document.createRange();
	                range.selectNodeContents(element);
	                if (!highlight) {
	                    range.collapse(false);
	                }
	                sel.addRange(range);
	            } else if (document.selection) {
	                var text_range = document.body.createTextRange();
	                text_range.moveToElementText(element);
	                text_range.select();
	            }
	        }

	        /**
	         * Pastes html at the caret. Note that to do this without placing the
	         * cursor inside of the html you need to add a dummy unicode character.
	         * For our purposes we'll add the 0-width space and then strip it out when we parse the output
	         *
	         * Credit goes to Tim Down here
	         *
	         * @param html
	         * @param select_pasted_content
	         * @returns {*}
	         */

	    }, {
	        key: "pasteHtmlAtCaret",
	        value: function pasteHtmlAtCaret(html, select_pasted_content) {
	            var sel = void 0,
	                range = void 0;
	            if (window.getSelection) {
	                //IE9+ and non-IE
	                sel = window.getSelection();
	                if (sel.getRangeAt && sel.rangeCount) {
	                    range = sel.getRangeAt(0);
	                    range.deleteContents();

	                    var el = document.createElement("div");
	                    el.innerHTML = html;
	                    var frag = document.createDocumentFragment(),
	                        node = void 0,
	                        last_node = void 0;
	                    while (node = el.firstChild) {
	                        last_node = frag.appendChild(node);
	                    }

	                    var first_node = frag.firstChild;
	                    range.insertNode(frag);

	                    //Preserve the selection
	                    if (last_node) {
	                        range = range.cloneRange();
	                        range.setStartAfter(last_node);
	                        if (select_pasted_content) {
	                            range.setStartBefore(first_node);
	                        } else {
	                            range.collapse(false);
	                        }
	                        sel.removeAllRanges();
	                        sel.addRange(range);
	                    }

	                    return first_node;
	                }
	            } else if ((sel = document.selection) && sel.type != "Control") {
	                // IE < 9
	                var original_range = sel.createRange();
	                original_range.collapse(true);
	                sel.createRange().pasteHTML(html);
	                if (select_pasted_content) {
	                    range = sel.createRange();
	                    range.setEndPoint("StartToStart", original_range);
	                    range.select();
	                }
	            }
	        }

	        /**
	         * Selects the contents of an element.
	         *
	         *
	         * Credit goes to Tim Down here
	         *
	         * @param el
	         */

	    }, {
	        key: "selectElementContents",
	        value: function selectElementContents(el) {
	            var range = document.createRange();
	            range.selectNodeContents(el);
	            var sel = window.getSelection();
	            sel.removeAllRanges();
	            sel.addRange(range);
	        }
	    }]);

	    return EmojiEditor;
	}();

	exports.default = EmojiEditor;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _emoji = __webpack_require__(5);

	var _emoji2 = _interopRequireDefault(_emoji);

	var _defaults = __webpack_require__(6);

	var _defaults2 = _interopRequireDefault(_defaults);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	"use strict";

	var Converters = function () {
	    _createClass(Converters, null, [{
	        key: "factory",


	        /**
	         *
	         * @returns {Converters}
	         */
	        value: function factory() {
	            return new Converters();
	        }

	        /**
	         * Set up each type of converter
	         */

	    }]);

	    function Converters() {
	        _classCallCheck(this, Converters);

	        this.unicode = Converters.unified;
	        this.env = Converters.environment;
	        this.css = Converters.image;
	        this.is_mobile = Converters.deviceIsMobile;

	        if (_defaults2.default.use_sheets) {
	            this.setSheets(_defaults2.default.sheets);
	        }
	    }

	    /**
	     * Sets the image sheets used by class
	     *
	     * @param sheets
	     */


	    _createClass(Converters, [{
	        key: "setSheets",
	        value: function setSheets(sheets) {
	            sheets = sheets || _defaults2.default.sheets;

	            [this.withEnvironment(), this.withImage()].forEach( /**EmojiConvertor*/function (converter) {
	                converter.img_sets.apple.sheet = sheets.apple;
	                converter.img_sets.google.sheet = sheets.google;
	                converter.img_sets.twitter.sheet = sheets.twitter;
	                converter.img_sets.emojione.sheet = sheets.emojione;
	                converter.use_sheet = true;
	            });
	        }

	        /**
	         * Conduct the next operation with the unified converter
	         *
	         * @returns {emoji|*}
	         */

	    }, {
	        key: "withUnified",
	        value: function withUnified() {
	            return this.unicode;
	        }

	        /**
	         * Conduct the next operation with the environment converter
	         *
	         * @returns {emoji|*}
	         */

	    }, {
	        key: "withEnvironment",
	        value: function withEnvironment() {
	            return this.env;
	        }

	        /**
	         * Conduct the next operation with the css-based image converter
	         *
	         * @returns {emoji|*}
	         */

	    }, {
	        key: "withImage",
	        value: function withImage() {
	            return this.css;
	        }

	        /**
	         * Tells us whether or not the environment can support
	         * unicode emojis.
	         *
	         * @returns {boolean}
	         */

	    }, {
	        key: "canSupportUnified",
	        value: function canSupportUnified() {
	            return this.env.replace_mode === "unified";
	        }

	        /**
	         * Getter for unified converter
	         *
	         * @returns {emoji}
	         */

	    }], [{
	        key: "unified",
	        get: function get() {
	            var converter = new _emoji2.default();
	            converter.init_unified();
	            return converter;
	        }

	        /**
	         * Getter for environment converter
	         *
	         * @returns {emoji}
	         */

	    }, {
	        key: "environment",
	        get: function get() {
	            var converter = new _emoji2.default();
	            converter.init_env();
	            //We don't want to use images for now - may revisit this in the future.
	            if (converter.replace_mode === 'img' || converter.replace_mode === 'css') {
	                return Converters.image;
	            }
	            return converter;
	        }

	        /**
	         * Getter for css-based image converter
	         *
	         * @returns {emoji}
	         */

	    }, {
	        key: "image",
	        get: function get() {
	            var converter = new _emoji2.default();
	            converter.init_env();
	            converter.replace_mode = 'css';
	            converter.supports_css = true;
	            return converter;
	        }

	        /**
	         * Insanely comprehensive regex from http://detectmobilebrowsers.com/
	         *
	         * @returns {boolean}
	         */

	    }, {
	        key: "deviceIsMobile",
	        get: function get() {
	            var check = false;
	            (function (a) {
	                if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
	            })(navigator.userAgent || navigator.vendor || window.opera);
	            return check;
	        }
	    }]);

	    return Converters;
	}();

	//Export as a singleton


	exports.default = new Converters();

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	;(function () {

		var root = this;
		var previous_emoji = root.EmojiConvertor;

		/**
	  * @global
	  * @namespace
	  */

		var emoji = function emoji() {

			var self = this;

			/**
	   * The set of images to use for graphical emoji.
	   *
	   * @memberof emoji
	   * @type {string}
	   */
			self.img_set = 'apple';

			/**
	   * Configuration details for different image sets. This includes a path to a directory containing the
	   * individual images (`path`) and a URL to sprite sheets (`sheet`). All of these images can be found
	   * in the [emoji-data repository]{@link https://github.com/iamcal/emoji-data}. Using a CDN for these
	   * is not a bad idea.
	   *
	   * @memberof emoji
	   * @type {object}
	   */
			self.img_sets = {
				'apple': { 'path': '/emoji-data/img-apple-64/', 'sheet': '/emoji-data/sheet_apple_64.png', 'mask': 1 },
				'google': { 'path': '/emoji-data/img-google-64/', 'sheet': '/emoji-data/sheet_google_64.png', 'mask': 2 },
				'twitter': { 'path': '/emoji-data/img-twitter-64/', 'sheet': '/emoji-data/sheet_twitter_64.png', 'mask': 4 },
				'emojione': { 'path': '/emoji-data/img-emojione-64/', 'sheet': '/emoji-data/sheet_emojione_64.png', 'mask': 8 }
			};

			/**
	   * Use a CSS class instead of specifying a sprite or background image for
	   * the span representing the emoticon. This requires a CSS sheet with
	   * emoticon data-uris.
	   *
	   * @memberof emoji
	   * @type bool
	   * @todo document how to build the CSS stylesheet self requires.
	   */
			self.use_css_imgs = false;

			/**
	   * Instead of replacing emoticons with the appropriate representations,
	   * replace them with their colon string representation.
	   * @memberof emoji
	   * @type bool
	   */
			self.colons_mode = false;
			self.text_mode = false;

			/**
	   * If true, sets the "title" property on the span or image that gets
	   * inserted for the emoticon.
	   * @memberof emoji
	   * @type bool
	   */
			self.include_title = false;

			/**
	   * If true, sets the text of the span or image that gets inserted for the
	   * emoticon.
	   * @memberof emoji
	   * @type bool
	   */
			self.include_text = false;

			/**
	   * If the platform supports native emoticons, use those instead
	   * of the fallbacks.
	   * @memberof emoji
	   * @type bool
	   */
			self.allow_native = true;

			/**
	   * Set to true to use CSS sprites instead of individual images on 
	   * platforms that support it.
	   *
	   * @memberof emoji
	   * @type bool
	   */
			self.use_sheet = false;

			/**
	   *
	   * Set to true to avoid black & white native Windows emoji being used.
	   *
	   * @memberof emoji
	   * @type bool
	   */
			self.avoid_ms_emoji = true;

			/**
	   *
	   * Set to true to allow :CAPITALIZATION:
	   *
	   * @memberof emoji
	   * @type bool
	   */
			self.allow_caps = false;

			/**
	   *
	   * Suffix to allow for individual image cache busting
	   *
	   * @memberof emoji
	   * @type string
	   */
			self.img_suffix = '';

			// Keeps track of what has been initialized.
			/** @private */
			self.inits = {};
			self.map = {};

			// discover the environment settings
			self.init_env();

			return self;
		};

		emoji.prototype.noConflict = function () {
			root.EmojiConvertor = previous_emoji;
			return emoji;
		};

		/**
	  * @memberof emoji
	  * @param {string} str A string potentially containing ascii emoticons
	  * (ie. `:)`)
	  *
	  * @returns {string} A new string with all emoticons in `str`
	  * replaced by a representatation that's supported by the current
	  * environtment.
	  */
		emoji.prototype.replace_emoticons = function (str) {
			var self = this;
			var colonized = self.replace_emoticons_with_colons(str);
			return self.replace_colons(colonized);
		};

		/**
	  * @memberof emoji
	  * @param {string} str A string potentially containing ascii emoticons
	  * (ie. `:)`)
	  *
	  * @returns {string} A new string with all emoticons in `str`
	  * replaced by their colon string representations (ie. `:smile:`)
	  */
		emoji.prototype.replace_emoticons_with_colons = function (str) {
			var self = this;
			self.init_emoticons();
			var _prev_offset = 0;
			var emoticons_with_parens = [];
			var str_replaced = str.replace(self.rx_emoticons, function (m, $1, emoticon, offset) {
				var prev_offset = _prev_offset;
				_prev_offset = offset + m.length;

				var has_open_paren = emoticon.indexOf('(') !== -1;
				var has_close_paren = emoticon.indexOf(')') !== -1;

				/*
	    * Track paren-having emoticons for fixing later
	    */
				if ((has_open_paren || has_close_paren) && emoticons_with_parens.indexOf(emoticon) == -1) {
					emoticons_with_parens.push(emoticon);
				}

				/*
	    * Look for preceding open paren for emoticons that contain a close paren
	    * This prevents matching "8)" inside "(around 7 - 8)"
	    */
				if (has_close_paren && !has_open_paren) {
					var piece = str.substring(prev_offset, offset);
					if (piece.indexOf('(') !== -1 && piece.indexOf(')') === -1) return m;
				}

				/*
	    * See if we're in a numbered list
	    * This prevents matching "8)" inside "7) foo\n8) bar"
	    */
				if (m === '\n8)') {
					var before_match = str.substring(0, offset);
					if (/\n?(6\)|7\))/.test(before_match)) return m;
				}

				var val = self.data[self.map.emoticons[emoticon]][3][0];
				return val ? $1 + ':' + val + ':' : m;
			});

			/*
	   * Come back and fix emoticons we ignored because they were inside parens.
	   * It's useful to do self at the end so we don't get tripped up by other,
	   * normal emoticons
	   */
			if (emoticons_with_parens.length) {
				var escaped_emoticons = emoticons_with_parens.map(self.escape_rx);
				var parenthetical_rx = new RegExp('(\\(.+)(' + escaped_emoticons.join('|') + ')(.+\\))', 'g');

				str_replaced = str_replaced.replace(parenthetical_rx, function (m, $1, emoticon, $2) {
					var val = self.data[self.map.emoticons[emoticon]][3][0];
					return val ? $1 + ':' + val + ':' + $2 : m;
				});
			}

			return str_replaced;
		};

		/**
	  * @memberof emoji
	  * @param {string} str A string potentially containing colon string
	  * representations of emoticons (ie. `:smile:`)
	  *
	  * @returns {string} A new string with all colon string emoticons replaced
	  * with the appropriate representation.
	  */
		emoji.prototype.replace_colons = function (str) {
			var self = this;
			self.init_colons();

			return str.replace(self.rx_colons, function (m) {
				var idx = m.substr(1, m.length - 2);
				if (self.allow_caps) idx = idx.toLowerCase();

				// special case - an emoji with a skintone modified
				if (idx.indexOf('::skin-tone-') > -1) {

					var skin_tone = idx.substr(-1, 1);
					var skin_idx = 'skin-tone-' + skin_tone;
					var skin_val = self.map.colons[skin_idx];

					idx = idx.substr(0, idx.length - 13);

					var val = self.map.colons[idx];
					if (val) {
						return self.replacement(val, idx, ':', {
							'idx': skin_val,
							'actual': skin_idx,
							'wrapper': ':'
						});
					} else {
						return ':' + idx + ':' + self.replacement(skin_val, skin_idx, ':');
					}
				} else {
					var val = self.map.colons[idx];
					return val ? self.replacement(val, idx, ':') : m;
				}
			});
		};

		/**
	  * @memberof emoji
	  * @param {string} str A string potentially containing unified unicode
	  * emoticons. (ie. 😄)
	  *
	  * @returns {string} A new string with all unicode emoticons replaced with
	  * the appropriate representation for the current environment.
	  */
		emoji.prototype.replace_unified = function (str) {
			var self = this;
			self.init_unified();
			return str.replace(self.rx_unified, function (m, p1, p2) {
				var val = self.map.unified[p1];
				if (!val) return m;
				var idx = null;
				if (p2 == '\uD83C\uDFFB') idx = '1f3fb';
				if (p2 == '\uD83C\uDFFC') idx = '1f3fc';
				if (p2 == '\uD83C\uDFFD') idx = '1f3fd';
				if (p2 == '\uD83C\uDFFE') idx = '1f3fe';
				if (p2 == '\uD83C\uDFFF') idx = '1f3ff';
				if (idx) {
					return self.replacement(val, null, null, {
						idx: idx,
						actual: p2,
						wrapper: ''
					});
				}
				return self.replacement(val);
			});
		};

		emoji.prototype.addAliases = function (map) {
			var self = this;

			self.init_colons();
			for (var i in map) {
				self.map.colons[i] = map[i];
			}
		};

		emoji.prototype.removeAliases = function (list) {
			var self = this;

			for (var i = 0; i < list.length; i++) {
				var alias = list[i];

				// first, delete the alias mapping
				delete self.map.colons[alias];

				// now reset it to the default, if one exists
				finder_block: {
					for (var j in self.data) {
						for (var k = 0; k < self.data[j][3].length; k++) {
							if (alias == self.data[j][3][k]) {
								self.map.colons[alias] = j;
								break finder_block;
							}
						}
					}
				}
			}
		};

		// Does the actual replacement of a character with the appropriate
		/** @private */
		emoji.prototype.replacement = function (idx, actual, wrapper, variation) {
			var self = this;

			var full_idx = idx;

			// for emoji with variation modifiers, set `extra` to the standalone output for the
			// modifier (used if we can't combine the glyph) and set variation_idx to key of the
			// variation modifier (used below)
			var extra = '';
			var variation_idx = 0;
			if ((typeof variation === 'undefined' ? 'undefined' : _typeof(variation)) === 'object') {
				extra = self.replacement(variation.idx, variation.actual, variation.wrapper);
				variation_idx = idx + '-' + variation.idx;
			}

			var img_set = self.img_set;

			// When not using sheets (which all contain all emoji),
			// make sure we use an img_set that contains this emoji.
			// For now, assume set "apple" has all individual images.
			if ((!self.use_sheet || !self.supports_css) && !(self.data[idx][6] & self.img_sets[self.img_set].mask)) {
				img_set = 'apple';
			}

			// deal with simple modes (colons and text) first
			wrapper = wrapper || '';
			if (self.colons_mode) return ':' + self.data[idx][3][0] + ':' + extra;
			var text_name = actual ? wrapper + actual + wrapper : self.data[idx][8] || wrapper + self.data[idx][3][0] + wrapper;
			if (self.text_mode) return text_name + extra;

			// native modes next.
			// for variations selectors, we just need to output them raw, which `extra` will contain.
			self.init_env();
			if (self.replace_mode == 'unified' && self.allow_native && self.data[idx][0][0]) return self.data[idx][0][0] + extra;
			if (self.replace_mode == 'softbank' && self.allow_native && self.data[idx][1]) return self.data[idx][1] + extra;
			if (self.replace_mode == 'google' && self.allow_native && self.data[idx][2]) return self.data[idx][2] + extra;

			// finally deal with image modes.
			// variation selectors are more complex here - if the image set and particular emoji supports variations, then
			// use the variation image. otherwise, return it as a separate image (already calculated in `extra`).
			// first we set up the params we'll use if we can't use a variation.
			var img = self.data[idx][7] || self.img_sets[img_set].path + idx + '.png' + self.img_suffix;
			var title = self.include_title ? ' title="' + (actual || self.data[idx][3][0]) + '"' : '';
			var text = self.include_text ? wrapper + (actual || self.data[idx][3][0]) + wrapper : '';
			var px = self.data[idx][4];
			var py = self.data[idx][5];

			// now we'll see if we can use a varition. if we can, we can override the params above and blank
			// out `extra` so we output a sinlge glyph.
			// we need to check that:
			//  * we requested a variation
			//  * such a variation exists in `emoji.variations_data`
			//  * we're not using a custom image for self glyph
			//  * the variation has an image defined for the current image set
			if (variation_idx && self.variations_data[variation_idx] && self.variations_data[variation_idx][2] && !self.data[idx][7]) {
				if (self.variations_data[variation_idx][2] & self.img_sets[self.img_set].mask) {
					img = self.img_sets[self.img_set].path + variation_idx + '.png';
					px = self.variations_data[variation_idx][0];
					py = self.variations_data[variation_idx][1];
					extra = '';
					full_idx = variation_idx;

					// add variation text
					if (self.include_text && variation && variation.actual && variation.wrapper) {
						text += variation.wrapper + variation.actual + variation.wrapper;
					}
				}
			}

			if (self.supports_css) {
				if (self.use_sheet && px != null && py != null) {
					var mul = 100 / (self.sheet_size - 1);
					var style = 'background: url(' + self.img_sets[img_set].sheet + ');background-position:' + mul * px + '% ' + mul * py + '%;background-size:' + self.sheet_size + '00%';
					return '<span class="emoji-outer emoji-sizer"><span class="emoji-inner" style="' + style + '"' + title + ' data-codepoints="' + full_idx + '">' + text + '</span></span>' + extra;
				} else if (self.use_css_imgs) {
					return '<span class="emoji emoji-' + idx + '"' + title + ' data-codepoints="' + full_idx + '">' + text + '</span>' + extra;
				} else {
					return '<span class="emoji emoji-sizer" style="background-image:url(' + img + ')"' + title + ' data-codepoints="' + full_idx + '">' + text + '</span>' + extra;
				}
			}
			return '<img src="' + img + '" class="emoji" data-codepoints="' + full_idx + '" ' + title + '/>' + extra;
		};

		// Initializes the text emoticon data
		/** @private */
		emoji.prototype.init_emoticons = function () {
			var self = this;
			if (self.inits.emoticons) return;
			self.init_colons(); // we require this for the emoticons map
			self.inits.emoticons = 1;

			var a = [];
			self.map.emoticons = {};
			for (var i in self.emoticons_data) {
				// because we never see some characters in our text except as entities, we must do some replacing
				var emoticon = i.replace(/\&/g, '&amp;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;');

				if (!self.map.colons[self.emoticons_data[i]]) continue;

				self.map.emoticons[emoticon] = self.map.colons[self.emoticons_data[i]];
				a.push(self.escape_rx(emoticon));
			}
			self.rx_emoticons = new RegExp('(^|\\s)(' + a.join('|') + ')(?=$|[\\s|\\?\\.,!])', 'g');
		};

		// Initializes the colon string data
		/** @private */
		emoji.prototype.init_colons = function () {
			var self = this;
			if (self.inits.colons) return;
			self.inits.colons = 1;
			self.rx_colons = new RegExp('\:[a-zA-Z0-9-_+]+\:(\:skin-tone-[2-6]\:)?', 'g');
			self.map.colons = {};
			for (var i in self.data) {
				for (var j = 0; j < self.data[i][3].length; j++) {
					self.map.colons[self.data[i][3][j]] = i;
				}
			}
		};

		// initializes the unified unicode emoticon data
		/** @private */
		emoji.prototype.init_unified = function () {
			var self = this;
			if (self.inits.unified) return;
			self.inits.unified = 1;

			var a = [];
			self.map.unified = {};

			for (var i in self.data) {
				for (var j = 0; j < self.data[i][0].length; j++) {
					a.push(self.data[i][0][j].replace('*', '\\*'));
					self.map.unified[self.data[i][0][j]] = i;
				}
			}

			a = a.sort(function (a, b) {
				return b.length - a.length;
			});

			self.rx_unified = new RegExp('(' + a.join('|') + ')(\uD83C[\uDFFB-\uDFFF])?', "g");
		};

		// initializes the environment, figuring out what representation
		// of emoticons is best.
		/** @private */
		emoji.prototype.init_env = function () {
			var self = this;
			if (self.inits.env) return;
			self.inits.env = 1;
			self.replace_mode = 'img';
			self.supports_css = false;
			if (typeof navigator !== 'undefined') {
				var ua = navigator.userAgent;
				if (window.getComputedStyle) {
					try {
						var st = window.getComputedStyle(document.body);
						if (st['background-size'] || st['backgroundSize']) {
							self.supports_css = true;
						}
					} catch (e) {
						// Swallow an exception caused by hidden iFrames on Firefox
						// https://github.com/iamcal/js-emoji/issues/73
						if (ua.match(/Firefox/i)) {
							self.supports_css = true;
						}
					}
				}
				if (ua.match(/(iPhone|iPod|iPad|iPhone\s+Simulator)/i)) {
					if (ua.match(/OS\s+[12345]/i)) {
						self.replace_mode = 'softbank';
						return;
					}
					if (ua.match(/OS\s+[6789]/i)) {
						self.replace_mode = 'unified';
						return;
					}
				}
				if (ua.match(/Mac OS X 10[._ ](?:[789]|1\d)/i)) {
					self.replace_mode = 'unified';
					return;
				}
				if (!self.avoid_ms_emoji) {
					if (ua.match(/Windows NT 6.[1-9]/i) || ua.match(/Windows NT 10.[0-9]/i)) {
						if (!ua.match(/Chrome/i) && !ua.match(/MSIE 8/i)) {
							self.replace_mode = 'unified';
							return;
						}
					}
				}
			}

			// Need a better way to detect android devices that actually
			// support emoji.
			if (false) {
				self.replace_mode = 'google';
				return;
			}
			if (self.supports_css) {
				self.replace_mode = 'css';
			}
			// nothing fancy detected - use images
		};
		/** @private */
		emoji.prototype.escape_rx = function (text) {
			return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
		};
		emoji.prototype.sheet_size = 41;
		/** @private */
		emoji.prototype.data = {
			"00a9": [['\xA9\uFE0F', '\xA9'], '\uE24E', '\uDBBA\uDF29', ["copyright"], 0, 0, 11, 0],
			"00ae": [['\xAE\uFE0F', '\xAE'], '\uE24F', '\uDBBA\uDF2D', ["registered"], 0, 1, 11, 0],
			"203c": [['\u203C\uFE0F', '\u203C'], "", '\uDBBA\uDF06', ["bangbang"], 0, 2, 15, 0],
			"2049": [['\u2049\uFE0F', '\u2049'], "", '\uDBBA\uDF05', ["interrobang"], 0, 3, 15, 0],
			"2122": [['\u2122\uFE0F', '\u2122'], '\uE537', '\uDBBA\uDF2A', ["tm"], 0, 4, 11, 0],
			"2139": [['\u2139\uFE0F', '\u2139'], "", '\uDBBA\uDF47', ["information_source"], 0, 5, 15, 0],
			"2194": [['\u2194\uFE0F', '\u2194'], "", '\uDBBA\uDEF6', ["left_right_arrow"], 0, 6, 15, 0],
			"2195": [['\u2195\uFE0F', '\u2195'], "", '\uDBBA\uDEF7', ["arrow_up_down"], 0, 7, 15, 0],
			"2196": [['\u2196\uFE0F', '\u2196'], '\uE237', '\uDBBA\uDEF2', ["arrow_upper_left"], 0, 8, 15, 0],
			"2197": [['\u2197\uFE0F', '\u2197'], '\uE236', '\uDBBA\uDEF0', ["arrow_upper_right"], 0, 9, 15, 0],
			"2198": [['\u2198\uFE0F', '\u2198'], '\uE238', '\uDBBA\uDEF1', ["arrow_lower_right"], 0, 10, 15, 0],
			"2199": [['\u2199\uFE0F', '\u2199'], '\uE239', '\uDBBA\uDEF3', ["arrow_lower_left"], 0, 11, 15, 0],
			"21a9": [['\u21A9\uFE0F', '\u21A9'], "", '\uDBBA\uDF83', ["leftwards_arrow_with_hook"], 0, 12, 15, 0],
			"21aa": [['\u21AA\uFE0F', '\u21AA'], "", '\uDBBA\uDF88', ["arrow_right_hook"], 0, 13, 15, 0],
			"231a": [['\u231A\uFE0F', '\u231A'], "", '\uDBB8\uDC1D', ["watch"], 0, 14, 15, 0],
			"231b": [['\u231B\uFE0F', '\u231B'], "", '\uDBB8\uDC1C', ["hourglass"], 0, 15, 15, 0],
			"2328": [['\u2328\uFE0F', '\u2328'], "", "", ["keyboard"], 0, 16, 15, 0],
			"23cf": [['\u23CF'], "", "", ["eject"], 0, 17, 2, 0],
			"23e9": [['\u23E9'], '\uE23C', '\uDBBA\uDEFE', ["fast_forward"], 0, 18, 15, 0],
			"23ea": [['\u23EA'], '\uE23D', '\uDBBA\uDEFF', ["rewind"], 0, 19, 15, 0],
			"23eb": [['\u23EB'], "", '\uDBBA\uDF03', ["arrow_double_up"], 0, 20, 15, 0],
			"23ec": [['\u23EC'], "", '\uDBBA\uDF02', ["arrow_double_down"], 0, 21, 15, 0],
			"23ed": [['\u23ED'], "", "", ["black_right_pointing_double_triangle_with_vertical_bar"], 0, 22, 15, 0],
			"23ee": [['\u23EE'], "", "", ["black_left_pointing_double_triangle_with_vertical_bar"], 0, 23, 15, 0],
			"23ef": [['\u23EF'], "", "", ["black_right_pointing_triangle_with_double_vertical_bar"], 0, 24, 15, 0],
			"23f0": [['\u23F0'], '\uE02D', '\uDBB8\uDC2A', ["alarm_clock"], 0, 25, 15, 0],
			"23f1": [['\u23F1'], "", "", ["stopwatch"], 0, 26, 15, 0],
			"23f2": [['\u23F2'], "", "", ["timer_clock"], 0, 27, 15, 0],
			"23f3": [['\u23F3'], "", '\uDBB8\uDC1B', ["hourglass_flowing_sand"], 0, 28, 15, 0],
			"23f8": [['\u23F8'], "", "", ["double_vertical_bar"], 0, 29, 15, 0],
			"23f9": [['\u23F9'], "", "", ["black_square_for_stop"], 0, 30, 15, 0],
			"23fa": [['\u23FA'], "", "", ["black_circle_for_record"], 0, 31, 15, 0],
			"24c2": [['\u24C2\uFE0F', '\u24C2'], '\uE434', '\uDBB9\uDFE1', ["m"], 0, 32, 15, 0],
			"25aa": [['\u25AA\uFE0F', '\u25AA'], '\uE21A', '\uDBBA\uDF6E', ["black_small_square"], 0, 33, 15, 0],
			"25ab": [['\u25AB\uFE0F', '\u25AB'], '\uE21B', '\uDBBA\uDF6D', ["white_small_square"], 0, 34, 15, 0],
			"25b6": [['\u25B6\uFE0F', '\u25B6'], '\uE23A', '\uDBBA\uDEFC', ["arrow_forward"], 0, 35, 15, 0],
			"25c0": [['\u25C0\uFE0F', '\u25C0'], '\uE23B', '\uDBBA\uDEFD', ["arrow_backward"], 0, 36, 15, 0],
			"25fb": [['\u25FB\uFE0F', '\u25FB'], '\uE21B', '\uDBBA\uDF71', ["white_medium_square"], 0, 37, 15, 0],
			"25fc": [['\u25FC\uFE0F', '\u25FC'], '\uE21A', '\uDBBA\uDF72', ["black_medium_square"], 0, 38, 15, 0],
			"25fd": [['\u25FD\uFE0F', '\u25FD'], '\uE21B', '\uDBBA\uDF6F', ["white_medium_small_square"], 0, 39, 15, 0],
			"25fe": [['\u25FE\uFE0F', '\u25FE'], '\uE21A', '\uDBBA\uDF70', ["black_medium_small_square"], 0, 40, 15, 0],
			"2600": [['\u2600\uFE0F', '\u2600'], '\uE04A', '\uDBB8\uDC00', ["sunny"], 1, 0, 15, 0],
			"2601": [['\u2601\uFE0F', '\u2601'], '\uE049', '\uDBB8\uDC01', ["cloud"], 1, 1, 15, 0],
			"2602": [['\u2602\uFE0F', '\u2602'], "", "", ["umbrella"], 1, 2, 15, 0],
			"2603": [['\u2603\uFE0F', '\u2603'], "", "", ["snowman"], 1, 3, 15, 0],
			"2604": [['\u2604\uFE0F', '\u2604'], "", "", ["comet"], 1, 4, 15, 0],
			"260e": [['\u260E\uFE0F', '\u260E'], '\uE009', '\uDBB9\uDD23', ["phone", "telephone"], 1, 5, 15, 0],
			"2611": [['\u2611\uFE0F', '\u2611'], "", '\uDBBA\uDF8B', ["ballot_box_with_check"], 1, 6, 15, 0],
			"2614": [['\u2614\uFE0F', '\u2614'], '\uE04B', '\uDBB8\uDC02', ["umbrella_with_rain_drops"], 1, 7, 15, 0],
			"2615": [['\u2615\uFE0F', '\u2615'], '\uE045', '\uDBBA\uDD81', ["coffee"], 1, 8, 15, 0],
			"2618": [['\u2618'], "", "", ["shamrock"], 1, 9, 15, 0],
			"261d": [['\u261D\uFE0F', '\u261D'], '\uE00F', '\uDBBA\uDF98', ["point_up"], 1, 10, 15, 0],
			"2620": [['\u2620\uFE0F', '\u2620'], "", "", ["skull_and_crossbones"], 1, 16, 15, 0],
			"2622": [['\u2622\uFE0F', '\u2622'], "", "", ["radioactive_sign"], 1, 17, 15, 0],
			"2623": [['\u2623\uFE0F', '\u2623'], "", "", ["biohazard_sign"], 1, 18, 15, 0],
			"2626": [['\u2626\uFE0F', '\u2626'], "", "", ["orthodox_cross"], 1, 19, 15, 0],
			"262a": [['\u262A\uFE0F', '\u262A'], "", "", ["star_and_crescent"], 1, 20, 15, 0],
			"262e": [['\u262E\uFE0F', '\u262E'], "", "", ["peace_symbol"], 1, 21, 15, 0],
			"262f": [['\u262F\uFE0F', '\u262F'], "", "", ["yin_yang"], 1, 22, 15, 0],
			"2638": [['\u2638\uFE0F', '\u2638'], "", "", ["wheel_of_dharma"], 1, 23, 15, 0],
			"2639": [['\u2639\uFE0F', '\u2639'], "", "", ["white_frowning_face"], 1, 24, 15, 0],
			"263a": [['\u263A\uFE0F', '\u263A'], '\uE414', '\uDBB8\uDF36', ["relaxed"], 1, 25, 15, 0],
			"2648": [['\u2648\uFE0F', '\u2648'], '\uE23F', '\uDBB8\uDC2B', ["aries"], 1, 26, 15, 0],
			"2649": [['\u2649\uFE0F', '\u2649'], '\uE240', '\uDBB8\uDC2C', ["taurus"], 1, 27, 15, 0],
			"264a": [['\u264A\uFE0F', '\u264A'], '\uE241', '\uDBB8\uDC2D', ["gemini"], 1, 28, 15, 0],
			"264b": [['\u264B\uFE0F', '\u264B'], '\uE242', '\uDBB8\uDC2E', ["cancer"], 1, 29, 15, 0],
			"264c": [['\u264C\uFE0F', '\u264C'], '\uE243', '\uDBB8\uDC2F', ["leo"], 1, 30, 15, 0],
			"264d": [['\u264D\uFE0F', '\u264D'], '\uE244', '\uDBB8\uDC30', ["virgo"], 1, 31, 15, 0],
			"264e": [['\u264E\uFE0F', '\u264E'], '\uE245', '\uDBB8\uDC31', ["libra"], 1, 32, 15, 0],
			"264f": [['\u264F\uFE0F', '\u264F'], '\uE246', '\uDBB8\uDC32', ["scorpius"], 1, 33, 15, 0],
			"2650": [['\u2650\uFE0F', '\u2650'], '\uE247', '\uDBB8\uDC33', ["sagittarius"], 1, 34, 15, 0],
			"2651": [['\u2651\uFE0F', '\u2651'], '\uE248', '\uDBB8\uDC34', ["capricorn"], 1, 35, 15, 0],
			"2652": [['\u2652\uFE0F', '\u2652'], '\uE249', '\uDBB8\uDC35', ["aquarius"], 1, 36, 15, 0],
			"2653": [['\u2653\uFE0F', '\u2653'], '\uE24A', '\uDBB8\uDC36', ["pisces"], 1, 37, 15, 0],
			"2660": [['\u2660\uFE0F', '\u2660'], '\uE20E', '\uDBBA\uDF1B', ["spades"], 1, 38, 15, 0],
			"2663": [['\u2663\uFE0F', '\u2663'], '\uE20F', '\uDBBA\uDF1D', ["clubs"], 1, 39, 15, 0],
			"2665": [['\u2665\uFE0F', '\u2665'], '\uE20C', '\uDBBA\uDF1A', ["hearts"], 1, 40, 15, 0],
			"2666": [['\u2666\uFE0F', '\u2666'], '\uE20D', '\uDBBA\uDF1C', ["diamonds"], 2, 0, 15, 0],
			"2668": [['\u2668\uFE0F', '\u2668'], '\uE123', '\uDBB9\uDFFA', ["hotsprings"], 2, 1, 15, 0],
			"267b": [['\u267B\uFE0F', '\u267B'], "", '\uDBBA\uDF2C', ["recycle"], 2, 2, 15, 0],
			"267f": [['\u267F\uFE0F', '\u267F'], '\uE20A', '\uDBBA\uDF20', ["wheelchair"], 2, 3, 15, 0],
			"2692": [['\u2692'], "", "", ["hammer_and_pick"], 2, 4, 15, 0],
			"2693": [['\u2693\uFE0F', '\u2693'], '\uE202', '\uDBB9\uDCC1', ["anchor"], 2, 5, 15, 0],
			"2694": [['\u2694'], "", "", ["crossed_swords"], 2, 6, 15, 0],
			"2696": [['\u2696'], "", "", ["scales"], 2, 7, 15, 0],
			"2697": [['\u2697'], "", "", ["alembic"], 2, 8, 15, 0],
			"2699": [['\u2699'], "", "", ["gear"], 2, 9, 15, 0],
			"269b": [['\u269B'], "", "", ["atom_symbol"], 2, 10, 15, 0],
			"269c": [['\u269C'], "", "", ["fleur_de_lis"], 2, 11, 15, 0],
			"26a0": [['\u26A0\uFE0F', '\u26A0'], '\uE252', '\uDBBA\uDF23', ["warning"], 2, 12, 15, 0],
			"26a1": [['\u26A1\uFE0F', '\u26A1'], '\uE13D', '\uDBB8\uDC04', ["zap"], 2, 13, 15, 0],
			"26aa": [['\u26AA\uFE0F', '\u26AA'], '\uE219', '\uDBBA\uDF65', ["white_circle"], 2, 14, 15, 0],
			"26ab": [['\u26AB\uFE0F', '\u26AB'], '\uE219', '\uDBBA\uDF66', ["black_circle"], 2, 15, 15, 0],
			"26b0": [['\u26B0'], "", "", ["coffin"], 2, 16, 15, 0],
			"26b1": [['\u26B1'], "", "", ["funeral_urn"], 2, 17, 15, 0],
			"26bd": [['\u26BD\uFE0F', '\u26BD'], '\uE018', '\uDBB9\uDFD4', ["soccer"], 2, 18, 15, 0],
			"26be": [['\u26BE\uFE0F', '\u26BE'], '\uE016', '\uDBB9\uDFD1', ["baseball"], 2, 19, 15, 0],
			"26c4": [['\u26C4\uFE0F', '\u26C4'], '\uE048', '\uDBB8\uDC03', ["snowman_without_snow"], 2, 20, 15, 0],
			"26c5": [['\u26C5\uFE0F', '\u26C5'], '\uE04A\uE049', '\uDBB8\uDC0F', ["partly_sunny"], 2, 21, 15, 0],
			"26c8": [['\u26C8'], "", "", ["thunder_cloud_and_rain"], 2, 22, 15, 0],
			"26ce": [['\u26CE'], '\uE24B', '\uDBB8\uDC37', ["ophiuchus"], 2, 23, 15, 0],
			"26cf": [['\u26CF'], "", "", ["pick"], 2, 24, 15, 0],
			"26d1": [['\u26D1'], "", "", ["helmet_with_white_cross"], 2, 25, 15, 0],
			"26d3": [['\u26D3'], "", "", ["chains"], 2, 26, 15, 0],
			"26d4": [['\u26D4\uFE0F', '\u26D4'], '\uE137', '\uDBBA\uDF26', ["no_entry"], 2, 27, 15, 0],
			"26e9": [['\u26E9'], "", "", ["shinto_shrine"], 2, 28, 15, 0],
			"26ea": [['\u26EA\uFE0F', '\u26EA'], '\uE037', '\uDBB9\uDCBB', ["church"], 2, 29, 15, 0],
			"26f0": [['\u26F0'], "", "", ["mountain"], 2, 30, 15, 0],
			"26f1": [['\u26F1'], "", "", ["umbrella_on_ground"], 2, 31, 15, 0],
			"26f2": [['\u26F2\uFE0F', '\u26F2'], '\uE121', '\uDBB9\uDCBC', ["fountain"], 2, 32, 15, 0],
			"26f3": [['\u26F3\uFE0F', '\u26F3'], '\uE014', '\uDBB9\uDFD2', ["golf"], 2, 33, 15, 0],
			"26f4": [['\u26F4'], "", "", ["ferry"], 2, 34, 15, 0],
			"26f5": [['\u26F5\uFE0F', '\u26F5'], '\uE01C', '\uDBB9\uDFEA', ["boat", "sailboat"], 2, 35, 15, 0],
			"26f7": [['\u26F7'], "", "", ["skier"], 2, 36, 15, 0],
			"26f8": [['\u26F8'], "", "", ["ice_skate"], 2, 37, 15, 0],
			"26f9": [['\u26F9'], "", "", ["person_with_ball"], 2, 38, 15, 0],
			"26fa": [['\u26FA\uFE0F', '\u26FA'], '\uE122', '\uDBB9\uDFFB', ["tent"], 3, 3, 15, 0],
			"26fd": [['\u26FD\uFE0F', '\u26FD'], '\uE03A', '\uDBB9\uDFF5', ["fuelpump"], 3, 4, 15, 0],
			"2702": [['\u2702\uFE0F', '\u2702'], '\uE313', '\uDBB9\uDD3E', ["scissors"], 3, 5, 15, 0],
			"2705": [['\u2705'], "", '\uDBBA\uDF4A', ["white_check_mark"], 3, 6, 15, 0],
			"2708": [['\u2708\uFE0F', '\u2708'], '\uE01D', '\uDBB9\uDFE9', ["airplane"], 3, 7, 15, 0],
			"2709": [['\u2709\uFE0F', '\u2709'], '\uE103', '\uDBB9\uDD29', ["email", "envelope"], 3, 8, 15, 0],
			"270a": [['\u270A'], '\uE010', '\uDBBA\uDF93', ["fist"], 3, 9, 15, 0],
			"270b": [['\u270B'], '\uE012', '\uDBBA\uDF95', ["hand", "raised_hand"], 3, 15, 15, 0],
			"270c": [['\u270C\uFE0F', '\u270C'], '\uE011', '\uDBBA\uDF94', ["v"], 3, 21, 15, 0],
			"270d": [['\u270D\uFE0F', '\u270D'], "", "", ["writing_hand"], 3, 27, 15, 0],
			"270f": [['\u270F\uFE0F', '\u270F'], '\uE301', '\uDBB9\uDD39', ["pencil2"], 3, 33, 15, 0],
			"2712": [['\u2712\uFE0F', '\u2712'], "", '\uDBB9\uDD36', ["black_nib"], 3, 34, 15, 0],
			"2714": [['\u2714\uFE0F', '\u2714'], "", '\uDBBA\uDF49', ["heavy_check_mark"], 3, 35, 15, 0],
			"2716": [['\u2716\uFE0F', '\u2716'], '\uE333', '\uDBBA\uDF53', ["heavy_multiplication_x"], 3, 36, 15, 0],
			"271d": [['\u271D\uFE0F', '\u271D'], "", "", ["latin_cross"], 3, 37, 15, 0],
			"2721": [['\u2721\uFE0F', '\u2721'], "", "", ["star_of_david"], 3, 38, 15, 0],
			"2728": [['\u2728'], '\uE32E', '\uDBBA\uDF60', ["sparkles"], 3, 39, 15, 0],
			"2733": [['\u2733\uFE0F', '\u2733'], '\uE206', '\uDBBA\uDF62', ["eight_spoked_asterisk"], 3, 40, 15, 0],
			"2734": [['\u2734\uFE0F', '\u2734'], '\uE205', '\uDBBA\uDF61', ["eight_pointed_black_star"], 4, 0, 15, 0],
			"2744": [['\u2744\uFE0F', '\u2744'], "", '\uDBB8\uDC0E', ["snowflake"], 4, 1, 15, 0],
			"2747": [['\u2747\uFE0F', '\u2747'], '\uE32E', '\uDBBA\uDF77', ["sparkle"], 4, 2, 15, 0],
			"274c": [['\u274C'], '\uE333', '\uDBBA\uDF45', ["x"], 4, 3, 15, 0],
			"274e": [['\u274E'], '\uE333', '\uDBBA\uDF46', ["negative_squared_cross_mark"], 4, 4, 15, 0],
			"2753": [['\u2753'], '\uE020', '\uDBBA\uDF09', ["question"], 4, 5, 15, 0],
			"2754": [['\u2754'], '\uE336', '\uDBBA\uDF0A', ["grey_question"], 4, 6, 15, 0],
			"2755": [['\u2755'], '\uE337', '\uDBBA\uDF0B', ["grey_exclamation"], 4, 7, 15, 0],
			"2757": [['\u2757\uFE0F', '\u2757'], '\uE021', '\uDBBA\uDF04', ["exclamation", "heavy_exclamation_mark"], 4, 8, 15, 0],
			"2763": [['\u2763\uFE0F', '\u2763'], "", "", ["heavy_heart_exclamation_mark_ornament"], 4, 9, 15, 0],
			"2764": [['\u2764\uFE0F', '\u2764'], '\uE022', '\uDBBA\uDF0C', ["heart"], 4, 10, 15, 0, "<3"],
			"2795": [['\u2795'], "", '\uDBBA\uDF51', ["heavy_plus_sign"], 4, 11, 15, 0],
			"2796": [['\u2796'], "", '\uDBBA\uDF52', ["heavy_minus_sign"], 4, 12, 15, 0],
			"2797": [['\u2797'], "", '\uDBBA\uDF54', ["heavy_division_sign"], 4, 13, 15, 0],
			"27a1": [['\u27A1\uFE0F', '\u27A1'], '\uE234', '\uDBBA\uDEFA', ["arrow_right"], 4, 14, 15, 0],
			"27b0": [['\u27B0'], "", '\uDBBA\uDF08', ["curly_loop"], 4, 15, 15, 0],
			"27bf": [['\u27BF'], '\uE211', '\uDBBA\uDC2B', ["loop"], 4, 16, 15, 0],
			"2934": [['\u2934\uFE0F', '\u2934'], '\uE236', '\uDBBA\uDEF4', ["arrow_heading_up"], 4, 17, 15, 0],
			"2935": [['\u2935\uFE0F', '\u2935'], '\uE238', '\uDBBA\uDEF5', ["arrow_heading_down"], 4, 18, 15, 0],
			"2b05": [['\u2B05\uFE0F', '\u2B05'], '\uE235', '\uDBBA\uDEFB', ["arrow_left"], 4, 19, 15, 0],
			"2b06": [['\u2B06\uFE0F', '\u2B06'], '\uE232', '\uDBBA\uDEF8', ["arrow_up"], 4, 20, 15, 0],
			"2b07": [['\u2B07\uFE0F', '\u2B07'], '\uE233', '\uDBBA\uDEF9', ["arrow_down"], 4, 21, 15, 0],
			"2b1b": [['\u2B1B\uFE0F', '\u2B1B'], '\uE21A', '\uDBBA\uDF6C', ["black_large_square"], 4, 22, 15, 0],
			"2b1c": [['\u2B1C\uFE0F', '\u2B1C'], '\uE21B', '\uDBBA\uDF6B', ["white_large_square"], 4, 23, 15, 0],
			"2b50": [['\u2B50\uFE0F', '\u2B50'], '\uE32F', '\uDBBA\uDF68', ["star"], 4, 24, 15, 0],
			"2b55": [['\u2B55\uFE0F', '\u2B55'], '\uE332', '\uDBBA\uDF44', ["o"], 4, 25, 15, 0],
			"3030": [['\u3030\uFE0F', '\u3030'], "", '\uDBBA\uDF07', ["wavy_dash"], 4, 26, 15, 0],
			"303d": [['\u303D\uFE0F', '\u303D'], '\uE12C', '\uDBBA\uDC1B', ["part_alternation_mark"], 4, 27, 15, 0],
			"3297": [['\u3297\uFE0F', '\u3297'], '\uE30D', '\uDBBA\uDF43', ["congratulations"], 4, 28, 15, 0],
			"3299": [['\u3299\uFE0F', '\u3299'], '\uE315', '\uDBBA\uDF2B', ["secret"], 4, 29, 15, 0],
			"1f004": [['\uD83C\uDC04\uFE0F', '\uD83C\uDC04'], '\uE12D', '\uDBBA\uDC0B', ["mahjong"], 4, 30, 15, 0],
			"1f0cf": [['\uD83C\uDCCF'], "", '\uDBBA\uDC12', ["black_joker"], 4, 31, 15, 0],
			"1f170": [['\uD83C\uDD70\uFE0F', '\uD83C\uDD70'], '\uE532', '\uDBB9\uDD0B', ["a"], 4, 32, 15, 0],
			"1f171": [['\uD83C\uDD71\uFE0F', '\uD83C\uDD71'], '\uE533', '\uDBB9\uDD0C', ["b"], 4, 33, 15, 0],
			"1f17e": [['\uD83C\uDD7E\uFE0F', '\uD83C\uDD7E'], '\uE535', '\uDBB9\uDD0E', ["o2"], 4, 34, 15, 0],
			"1f17f": [['\uD83C\uDD7F\uFE0F', '\uD83C\uDD7F'], '\uE14F', '\uDBB9\uDFF6', ["parking"], 4, 35, 15, 0],
			"1f18e": [['\uD83C\uDD8E'], '\uE534', '\uDBB9\uDD0D', ["ab"], 4, 36, 15, 0],
			"1f191": [['\uD83C\uDD91'], "", '\uDBBA\uDF84', ["cl"], 4, 37, 15, 0],
			"1f192": [['\uD83C\uDD92'], '\uE214', '\uDBBA\uDF38', ["cool"], 4, 38, 15, 0],
			"1f193": [['\uD83C\uDD93'], "", '\uDBBA\uDF21', ["free"], 4, 39, 15, 0],
			"1f194": [['\uD83C\uDD94'], '\uE229', '\uDBBA\uDF81', ["id"], 4, 40, 15, 0],
			"1f195": [['\uD83C\uDD95'], '\uE212', '\uDBBA\uDF36', ["new"], 5, 0, 15, 0],
			"1f196": [['\uD83C\uDD96'], "", '\uDBBA\uDF28', ["ng"], 5, 1, 15, 0],
			"1f197": [['\uD83C\uDD97'], '\uE24D', '\uDBBA\uDF27', ["ok"], 5, 2, 15, 0],
			"1f198": [['\uD83C\uDD98'], "", '\uDBBA\uDF4F', ["sos"], 5, 3, 15, 0],
			"1f199": [['\uD83C\uDD99'], '\uE213', '\uDBBA\uDF37', ["up"], 5, 4, 15, 0],
			"1f19a": [['\uD83C\uDD9A'], '\uE12E', '\uDBBA\uDF32', ["vs"], 5, 5, 15, 0],
			"1f201": [['\uD83C\uDE01'], '\uE203', '\uDBBA\uDF24', ["koko"], 5, 6, 15, 0],
			"1f202": [['\uD83C\uDE02\uFE0F', '\uD83C\uDE02'], '\uE228', '\uDBBA\uDF3F', ["sa"], 5, 7, 15, 0],
			"1f21a": [['\uD83C\uDE1A\uFE0F', '\uD83C\uDE1A'], '\uE216', '\uDBBA\uDF3A', ["u7121"], 5, 8, 15, 0],
			"1f22f": [['\uD83C\uDE2F\uFE0F', '\uD83C\uDE2F'], '\uE22C', '\uDBBA\uDF40', ["u6307"], 5, 9, 15, 0],
			"1f232": [['\uD83C\uDE32'], "", '\uDBBA\uDF2E', ["u7981"], 5, 10, 15, 0],
			"1f233": [['\uD83C\uDE33'], '\uE22B', '\uDBBA\uDF2F', ["u7a7a"], 5, 11, 15, 0],
			"1f234": [['\uD83C\uDE34'], "", '\uDBBA\uDF30', ["u5408"], 5, 12, 15, 0],
			"1f235": [['\uD83C\uDE35'], '\uE22A', '\uDBBA\uDF31', ["u6e80"], 5, 13, 15, 0],
			"1f236": [['\uD83C\uDE36'], '\uE215', '\uDBBA\uDF39', ["u6709"], 5, 14, 15, 0],
			"1f237": [['\uD83C\uDE37\uFE0F', '\uD83C\uDE37'], '\uE217', '\uDBBA\uDF3B', ["u6708"], 5, 15, 15, 0],
			"1f238": [['\uD83C\uDE38'], '\uE218', '\uDBBA\uDF3C', ["u7533"], 5, 16, 15, 0],
			"1f239": [['\uD83C\uDE39'], '\uE227', '\uDBBA\uDF3E', ["u5272"], 5, 17, 15, 0],
			"1f23a": [['\uD83C\uDE3A'], '\uE22D', '\uDBBA\uDF41', ["u55b6"], 5, 18, 15, 0],
			"1f250": [['\uD83C\uDE50'], '\uE226', '\uDBBA\uDF3D', ["ideograph_advantage"], 5, 19, 15, 0],
			"1f251": [['\uD83C\uDE51'], "", '\uDBBA\uDF50', ["accept"], 5, 20, 15, 0],
			"1f300": [['\uD83C\uDF00'], '\uE443', '\uDBB8\uDC05', ["cyclone"], 5, 21, 15, 0],
			"1f301": [['\uD83C\uDF01'], "", '\uDBB8\uDC06', ["foggy"], 5, 22, 15, 0],
			"1f302": [['\uD83C\uDF02'], '\uE43C', '\uDBB8\uDC07', ["closed_umbrella"], 5, 23, 15, 0],
			"1f303": [['\uD83C\uDF03'], '\uE44B', '\uDBB8\uDC08', ["night_with_stars"], 5, 24, 15, 0],
			"1f304": [['\uD83C\uDF04'], '\uE04D', '\uDBB8\uDC09', ["sunrise_over_mountains"], 5, 25, 15, 0],
			"1f305": [['\uD83C\uDF05'], '\uE449', '\uDBB8\uDC0A', ["sunrise"], 5, 26, 15, 0],
			"1f306": [['\uD83C\uDF06'], '\uE146', '\uDBB8\uDC0B', ["city_sunset"], 5, 27, 15, 0],
			"1f307": [['\uD83C\uDF07'], '\uE44A', '\uDBB8\uDC0C', ["city_sunrise"], 5, 28, 15, 0],
			"1f308": [['\uD83C\uDF08'], '\uE44C', '\uDBB8\uDC0D', ["rainbow"], 5, 29, 15, 0],
			"1f309": [['\uD83C\uDF09'], '\uE44B', '\uDBB8\uDC10', ["bridge_at_night"], 5, 30, 15, 0],
			"1f30a": [['\uD83C\uDF0A'], '\uE43E', '\uDBB8\uDC38', ["ocean"], 5, 31, 15, 0],
			"1f30b": [['\uD83C\uDF0B'], "", '\uDBB8\uDC3A', ["volcano"], 5, 32, 15, 0],
			"1f30c": [['\uD83C\uDF0C'], '\uE44B', '\uDBB8\uDC3B', ["milky_way"], 5, 33, 15, 0],
			"1f30d": [['\uD83C\uDF0D'], "", "", ["earth_africa"], 5, 34, 15, 0],
			"1f30e": [['\uD83C\uDF0E'], "", "", ["earth_americas"], 5, 35, 15, 0],
			"1f30f": [['\uD83C\uDF0F'], "", '\uDBB8\uDC39', ["earth_asia"], 5, 36, 15, 0],
			"1f310": [['\uD83C\uDF10'], "", "", ["globe_with_meridians"], 5, 37, 15, 0],
			"1f311": [['\uD83C\uDF11'], "", '\uDBB8\uDC11', ["new_moon"], 5, 38, 15, 0],
			"1f312": [['\uD83C\uDF12'], "", "", ["waxing_crescent_moon"], 5, 39, 15, 0],
			"1f313": [['\uD83C\uDF13'], '\uE04C', '\uDBB8\uDC13', ["first_quarter_moon"], 5, 40, 15, 0],
			"1f314": [['\uD83C\uDF14'], '\uE04C', '\uDBB8\uDC12', ["moon", "waxing_gibbous_moon"], 6, 0, 15, 0],
			"1f315": [['\uD83C\uDF15'], "", '\uDBB8\uDC15', ["full_moon"], 6, 1, 15, 0],
			"1f316": [['\uD83C\uDF16'], "", "", ["waning_gibbous_moon"], 6, 2, 15, 0],
			"1f317": [['\uD83C\uDF17'], "", "", ["last_quarter_moon"], 6, 3, 15, 0],
			"1f318": [['\uD83C\uDF18'], "", "", ["waning_crescent_moon"], 6, 4, 15, 0],
			"1f319": [['\uD83C\uDF19'], '\uE04C', '\uDBB8\uDC14', ["crescent_moon"], 6, 5, 15, 0],
			"1f31a": [['\uD83C\uDF1A'], "", "", ["new_moon_with_face"], 6, 6, 15, 0],
			"1f31b": [['\uD83C\uDF1B'], '\uE04C', '\uDBB8\uDC16', ["first_quarter_moon_with_face"], 6, 7, 15, 0],
			"1f31c": [['\uD83C\uDF1C'], "", "", ["last_quarter_moon_with_face"], 6, 8, 15, 0],
			"1f31d": [['\uD83C\uDF1D'], "", "", ["full_moon_with_face"], 6, 9, 15, 0],
			"1f31e": [['\uD83C\uDF1E'], "", "", ["sun_with_face"], 6, 10, 15, 0],
			"1f31f": [['\uD83C\uDF1F'], '\uE335', '\uDBBA\uDF69', ["star2"], 6, 11, 15, 0],
			"1f320": [['\uD83C\uDF20'], "", '\uDBBA\uDF6A', ["stars"], 6, 12, 15, 0],
			"1f321": [['\uD83C\uDF21'], "", "", ["thermometer"], 6, 13, 15, 0],
			"1f324": [['\uD83C\uDF24'], "", "", ["mostly_sunny", "sun_small_cloud"], 6, 14, 15, 0],
			"1f325": [['\uD83C\uDF25'], "", "", ["barely_sunny", "sun_behind_cloud"], 6, 15, 15, 0],
			"1f326": [['\uD83C\uDF26'], "", "", ["partly_sunny_rain", "sun_behind_rain_cloud"], 6, 16, 15, 0],
			"1f327": [['\uD83C\uDF27'], "", "", ["rain_cloud"], 6, 17, 15, 0],
			"1f328": [['\uD83C\uDF28'], "", "", ["snow_cloud"], 6, 18, 15, 0],
			"1f329": [['\uD83C\uDF29'], "", "", ["lightning", "lightning_cloud"], 6, 19, 15, 0],
			"1f32a": [['\uD83C\uDF2A'], "", "", ["tornado", "tornado_cloud"], 6, 20, 15, 0],
			"1f32b": [['\uD83C\uDF2B'], "", "", ["fog"], 6, 21, 15, 0],
			"1f32c": [['\uD83C\uDF2C'], "", "", ["wind_blowing_face"], 6, 22, 15, 0],
			"1f32d": [['\uD83C\uDF2D'], "", "", ["hotdog"], 6, 23, 15, 0],
			"1f32e": [['\uD83C\uDF2E'], "", "", ["taco"], 6, 24, 15, 0],
			"1f32f": [['\uD83C\uDF2F'], "", "", ["burrito"], 6, 25, 15, 0],
			"1f330": [['\uD83C\uDF30'], "", '\uDBB8\uDC4C', ["chestnut"], 6, 26, 15, 0],
			"1f331": [['\uD83C\uDF31'], '\uE110', '\uDBB8\uDC3E', ["seedling"], 6, 27, 15, 0],
			"1f332": [['\uD83C\uDF32'], "", "", ["evergreen_tree"], 6, 28, 15, 0],
			"1f333": [['\uD83C\uDF33'], "", "", ["deciduous_tree"], 6, 29, 15, 0],
			"1f334": [['\uD83C\uDF34'], '\uE307', '\uDBB8\uDC47', ["palm_tree"], 6, 30, 15, 0],
			"1f335": [['\uD83C\uDF35'], '\uE308', '\uDBB8\uDC48', ["cactus"], 6, 31, 15, 0],
			"1f336": [['\uD83C\uDF36'], "", "", ["hot_pepper"], 6, 32, 15, 0],
			"1f337": [['\uD83C\uDF37'], '\uE304', '\uDBB8\uDC3D', ["tulip"], 6, 33, 15, 0],
			"1f338": [['\uD83C\uDF38'], '\uE030', '\uDBB8\uDC40', ["cherry_blossom"], 6, 34, 15, 0],
			"1f339": [['\uD83C\uDF39'], '\uE032', '\uDBB8\uDC41', ["rose"], 6, 35, 15, 0],
			"1f33a": [['\uD83C\uDF3A'], '\uE303', '\uDBB8\uDC45', ["hibiscus"], 6, 36, 15, 0],
			"1f33b": [['\uD83C\uDF3B'], '\uE305', '\uDBB8\uDC46', ["sunflower"], 6, 37, 15, 0],
			"1f33c": [['\uD83C\uDF3C'], '\uE305', '\uDBB8\uDC4D', ["blossom"], 6, 38, 15, 0],
			"1f33d": [['\uD83C\uDF3D'], "", '\uDBB8\uDC4A', ["corn"], 6, 39, 15, 0],
			"1f33e": [['\uD83C\uDF3E'], '\uE444', '\uDBB8\uDC49', ["ear_of_rice"], 6, 40, 15, 0],
			"1f33f": [['\uD83C\uDF3F'], '\uE110', '\uDBB8\uDC4E', ["herb"], 7, 0, 15, 0],
			"1f340": [['\uD83C\uDF40'], '\uE110', '\uDBB8\uDC3C', ["four_leaf_clover"], 7, 1, 15, 0],
			"1f341": [['\uD83C\uDF41'], '\uE118', '\uDBB8\uDC3F', ["maple_leaf"], 7, 2, 15, 0],
			"1f342": [['\uD83C\uDF42'], '\uE119', '\uDBB8\uDC42', ["fallen_leaf"], 7, 3, 15, 0],
			"1f343": [['\uD83C\uDF43'], '\uE447', '\uDBB8\uDC43', ["leaves"], 7, 4, 15, 0],
			"1f344": [['\uD83C\uDF44'], "", '\uDBB8\uDC4B', ["mushroom"], 7, 5, 15, 0],
			"1f345": [['\uD83C\uDF45'], '\uE349', '\uDBB8\uDC55', ["tomato"], 7, 6, 15, 0],
			"1f346": [['\uD83C\uDF46'], '\uE34A', '\uDBB8\uDC56', ["eggplant"], 7, 7, 15, 0],
			"1f347": [['\uD83C\uDF47'], "", '\uDBB8\uDC59', ["grapes"], 7, 8, 15, 0],
			"1f348": [['\uD83C\uDF48'], "", '\uDBB8\uDC57', ["melon"], 7, 9, 15, 0],
			"1f349": [['\uD83C\uDF49'], '\uE348', '\uDBB8\uDC54', ["watermelon"], 7, 10, 15, 0],
			"1f34a": [['\uD83C\uDF4A'], '\uE346', '\uDBB8\uDC52', ["tangerine"], 7, 11, 15, 0],
			"1f34b": [['\uD83C\uDF4B'], "", "", ["lemon"], 7, 12, 15, 0],
			"1f34c": [['\uD83C\uDF4C'], "", '\uDBB8\uDC50', ["banana"], 7, 13, 15, 0],
			"1f34d": [['\uD83C\uDF4D'], "", '\uDBB8\uDC58', ["pineapple"], 7, 14, 15, 0],
			"1f34e": [['\uD83C\uDF4E'], '\uE345', '\uDBB8\uDC51', ["apple"], 7, 15, 15, 0],
			"1f34f": [['\uD83C\uDF4F'], '\uE345', '\uDBB8\uDC5B', ["green_apple"], 7, 16, 15, 0],
			"1f350": [['\uD83C\uDF50'], "", "", ["pear"], 7, 17, 15, 0],
			"1f351": [['\uD83C\uDF51'], "", '\uDBB8\uDC5A', ["peach"], 7, 18, 15, 0],
			"1f352": [['\uD83C\uDF52'], "", '\uDBB8\uDC4F', ["cherries"], 7, 19, 15, 0],
			"1f353": [['\uD83C\uDF53'], '\uE347', '\uDBB8\uDC53', ["strawberry"], 7, 20, 15, 0],
			"1f354": [['\uD83C\uDF54'], '\uE120', '\uDBBA\uDD60', ["hamburger"], 7, 21, 15, 0],
			"1f355": [['\uD83C\uDF55'], "", '\uDBBA\uDD75', ["pizza"], 7, 22, 15, 0],
			"1f356": [['\uD83C\uDF56'], "", '\uDBBA\uDD72', ["meat_on_bone"], 7, 23, 15, 0],
			"1f357": [['\uD83C\uDF57'], "", '\uDBBA\uDD76', ["poultry_leg"], 7, 24, 15, 0],
			"1f358": [['\uD83C\uDF58'], '\uE33D', '\uDBBA\uDD69', ["rice_cracker"], 7, 25, 15, 0],
			"1f359": [['\uD83C\uDF59'], '\uE342', '\uDBBA\uDD61', ["rice_ball"], 7, 26, 15, 0],
			"1f35a": [['\uD83C\uDF5A'], '\uE33E', '\uDBBA\uDD6A', ["rice"], 7, 27, 15, 0],
			"1f35b": [['\uD83C\uDF5B'], '\uE341', '\uDBBA\uDD6C', ["curry"], 7, 28, 15, 0],
			"1f35c": [['\uD83C\uDF5C'], '\uE340', '\uDBBA\uDD63', ["ramen"], 7, 29, 15, 0],
			"1f35d": [['\uD83C\uDF5D'], '\uE33F', '\uDBBA\uDD6B', ["spaghetti"], 7, 30, 15, 0],
			"1f35e": [['\uD83C\uDF5E'], '\uE339', '\uDBBA\uDD64', ["bread"], 7, 31, 15, 0],
			"1f35f": [['\uD83C\uDF5F'], '\uE33B', '\uDBBA\uDD67', ["fries"], 7, 32, 15, 0],
			"1f360": [['\uD83C\uDF60'], "", '\uDBBA\uDD74', ["sweet_potato"], 7, 33, 15, 0],
			"1f361": [['\uD83C\uDF61'], '\uE33C', '\uDBBA\uDD68', ["dango"], 7, 34, 15, 0],
			"1f362": [['\uD83C\uDF62'], '\uE343', '\uDBBA\uDD6D', ["oden"], 7, 35, 15, 0],
			"1f363": [['\uD83C\uDF63'], '\uE344', '\uDBBA\uDD6E', ["sushi"], 7, 36, 15, 0],
			"1f364": [['\uD83C\uDF64'], "", '\uDBBA\uDD7F', ["fried_shrimp"], 7, 37, 15, 0],
			"1f365": [['\uD83C\uDF65'], "", '\uDBBA\uDD73', ["fish_cake"], 7, 38, 15, 0],
			"1f366": [['\uD83C\uDF66'], '\uE33A', '\uDBBA\uDD66', ["icecream"], 7, 39, 15, 0],
			"1f367": [['\uD83C\uDF67'], '\uE43F', '\uDBBA\uDD71', ["shaved_ice"], 7, 40, 15, 0],
			"1f368": [['\uD83C\uDF68'], "", '\uDBBA\uDD77', ["ice_cream"], 8, 0, 15, 0],
			"1f369": [['\uD83C\uDF69'], "", '\uDBBA\uDD78', ["doughnut"], 8, 1, 15, 0],
			"1f36a": [['\uD83C\uDF6A'], "", '\uDBBA\uDD79', ["cookie"], 8, 2, 15, 0],
			"1f36b": [['\uD83C\uDF6B'], "", '\uDBBA\uDD7A', ["chocolate_bar"], 8, 3, 15, 0],
			"1f36c": [['\uD83C\uDF6C'], "", '\uDBBA\uDD7B', ["candy"], 8, 4, 15, 0],
			"1f36d": [['\uD83C\uDF6D'], "", '\uDBBA\uDD7C', ["lollipop"], 8, 5, 15, 0],
			"1f36e": [['\uD83C\uDF6E'], "", '\uDBBA\uDD7D', ["custard"], 8, 6, 15, 0],
			"1f36f": [['\uD83C\uDF6F'], "", '\uDBBA\uDD7E', ["honey_pot"], 8, 7, 15, 0],
			"1f370": [['\uD83C\uDF70'], '\uE046', '\uDBBA\uDD62', ["cake"], 8, 8, 15, 0],
			"1f371": [['\uD83C\uDF71'], '\uE34C', '\uDBBA\uDD6F', ["bento"], 8, 9, 15, 0],
			"1f372": [['\uD83C\uDF72'], '\uE34D', '\uDBBA\uDD70', ["stew"], 8, 10, 15, 0],
			"1f373": [['\uD83C\uDF73'], '\uE147', '\uDBBA\uDD65', ["egg"], 8, 11, 15, 0],
			"1f374": [['\uD83C\uDF74'], '\uE043', '\uDBBA\uDD80', ["fork_and_knife"], 8, 12, 15, 0],
			"1f375": [['\uD83C\uDF75'], '\uE338', '\uDBBA\uDD84', ["tea"], 8, 13, 15, 0],
			"1f376": [['\uD83C\uDF76'], '\uE30B', '\uDBBA\uDD85', ["sake"], 8, 14, 15, 0],
			"1f377": [['\uD83C\uDF77'], '\uE044', '\uDBBA\uDD86', ["wine_glass"], 8, 15, 15, 0],
			"1f378": [['\uD83C\uDF78'], '\uE044', '\uDBBA\uDD82', ["cocktail"], 8, 16, 15, 0],
			"1f379": [['\uD83C\uDF79'], '\uE044', '\uDBBA\uDD88', ["tropical_drink"], 8, 17, 15, 0],
			"1f37a": [['\uD83C\uDF7A'], '\uE047', '\uDBBA\uDD83', ["beer"], 8, 18, 15, 0],
			"1f37b": [['\uD83C\uDF7B'], '\uE30C', '\uDBBA\uDD87', ["beers"], 8, 19, 15, 0],
			"1f37c": [['\uD83C\uDF7C'], "", "", ["baby_bottle"], 8, 20, 15, 0],
			"1f37d": [['\uD83C\uDF7D'], "", "", ["knife_fork_plate"], 8, 21, 15, 0],
			"1f37e": [['\uD83C\uDF7E'], "", "", ["champagne"], 8, 22, 15, 0],
			"1f37f": [['\uD83C\uDF7F'], "", "", ["popcorn"], 8, 23, 15, 0],
			"1f380": [['\uD83C\uDF80'], '\uE314', '\uDBB9\uDD0F', ["ribbon"], 8, 24, 15, 0],
			"1f381": [['\uD83C\uDF81'], '\uE112', '\uDBB9\uDD10', ["gift"], 8, 25, 15, 0],
			"1f382": [['\uD83C\uDF82'], '\uE34B', '\uDBB9\uDD11', ["birthday"], 8, 26, 15, 0],
			"1f383": [['\uD83C\uDF83'], '\uE445', '\uDBB9\uDD1F', ["jack_o_lantern"], 8, 27, 15, 0],
			"1f384": [['\uD83C\uDF84'], '\uE033', '\uDBB9\uDD12', ["christmas_tree"], 8, 28, 15, 0],
			"1f385": [['\uD83C\uDF85'], '\uE448', '\uDBB9\uDD13', ["santa"], 8, 29, 15, 0],
			"1f386": [['\uD83C\uDF86'], '\uE117', '\uDBB9\uDD15', ["fireworks"], 8, 35, 15, 0],
			"1f387": [['\uD83C\uDF87'], '\uE440', '\uDBB9\uDD1D', ["sparkler"], 8, 36, 15, 0],
			"1f388": [['\uD83C\uDF88'], '\uE310', '\uDBB9\uDD16', ["balloon"], 8, 37, 15, 0],
			"1f389": [['\uD83C\uDF89'], '\uE312', '\uDBB9\uDD17', ["tada"], 8, 38, 15, 0],
			"1f38a": [['\uD83C\uDF8A'], "", '\uDBB9\uDD20', ["confetti_ball"], 8, 39, 15, 0],
			"1f38b": [['\uD83C\uDF8B'], "", '\uDBB9\uDD21', ["tanabata_tree"], 8, 40, 15, 0],
			"1f38c": [['\uD83C\uDF8C'], '\uE143', '\uDBB9\uDD14', ["crossed_flags"], 9, 0, 15, 0],
			"1f38d": [['\uD83C\uDF8D'], '\uE436', '\uDBB9\uDD18', ["bamboo"], 9, 1, 15, 0],
			"1f38e": [['\uD83C\uDF8E'], '\uE438', '\uDBB9\uDD19', ["dolls"], 9, 2, 15, 0],
			"1f38f": [['\uD83C\uDF8F'], '\uE43B', '\uDBB9\uDD1C', ["flags"], 9, 3, 15, 0],
			"1f390": [['\uD83C\uDF90'], '\uE442', '\uDBB9\uDD1E', ["wind_chime"], 9, 4, 15, 0],
			"1f391": [['\uD83C\uDF91'], '\uE446', '\uDBB8\uDC17', ["rice_scene"], 9, 5, 15, 0],
			"1f392": [['\uD83C\uDF92'], '\uE43A', '\uDBB9\uDD1B', ["school_satchel"], 9, 6, 15, 0],
			"1f393": [['\uD83C\uDF93'], '\uE439', '\uDBB9\uDD1A', ["mortar_board"], 9, 7, 15, 0],
			"1f396": [['\uD83C\uDF96'], "", "", ["medal"], 9, 8, 15, 0],
			"1f397": [['\uD83C\uDF97'], "", "", ["reminder_ribbon"], 9, 9, 15, 0],
			"1f399": [['\uD83C\uDF99'], "", "", ["studio_microphone"], 9, 10, 15, 0],
			"1f39a": [['\uD83C\uDF9A'], "", "", ["level_slider"], 9, 11, 15, 0],
			"1f39b": [['\uD83C\uDF9B'], "", "", ["control_knobs"], 9, 12, 15, 0],
			"1f39e": [['\uD83C\uDF9E'], "", "", ["film_frames"], 9, 13, 15, 0],
			"1f39f": [['\uD83C\uDF9F'], "", "", ["admission_tickets"], 9, 14, 15, 0],
			"1f3a0": [['\uD83C\uDFA0'], "", '\uDBB9\uDFFC', ["carousel_horse"], 9, 15, 15, 0],
			"1f3a1": [['\uD83C\uDFA1'], '\uE124', '\uDBB9\uDFFD', ["ferris_wheel"], 9, 16, 15, 0],
			"1f3a2": [['\uD83C\uDFA2'], '\uE433', '\uDBB9\uDFFE', ["roller_coaster"], 9, 17, 15, 0],
			"1f3a3": [['\uD83C\uDFA3'], '\uE019', '\uDBB9\uDFFF', ["fishing_pole_and_fish"], 9, 18, 15, 0],
			"1f3a4": [['\uD83C\uDFA4'], '\uE03C', '\uDBBA\uDC00', ["microphone"], 9, 19, 15, 0],
			"1f3a5": [['\uD83C\uDFA5'], '\uE03D', '\uDBBA\uDC01', ["movie_camera"], 9, 20, 15, 0],
			"1f3a6": [['\uD83C\uDFA6'], '\uE507', '\uDBBA\uDC02', ["cinema"], 9, 21, 15, 0],
			"1f3a7": [['\uD83C\uDFA7'], '\uE30A', '\uDBBA\uDC03', ["headphones"], 9, 22, 15, 0],
			"1f3a8": [['\uD83C\uDFA8'], '\uE502', '\uDBBA\uDC04', ["art"], 9, 23, 15, 0],
			"1f3a9": [['\uD83C\uDFA9'], '\uE503', '\uDBBA\uDC05', ["tophat"], 9, 24, 15, 0],
			"1f3aa": [['\uD83C\uDFAA'], "", '\uDBBA\uDC06', ["circus_tent"], 9, 25, 15, 0],
			"1f3ab": [['\uD83C\uDFAB'], '\uE125', '\uDBBA\uDC07', ["ticket"], 9, 26, 15, 0],
			"1f3ac": [['\uD83C\uDFAC'], '\uE324', '\uDBBA\uDC08', ["clapper"], 9, 27, 15, 0],
			"1f3ad": [['\uD83C\uDFAD'], '\uE503', '\uDBBA\uDC09', ["performing_arts"], 9, 28, 15, 0],
			"1f3ae": [['\uD83C\uDFAE'], "", '\uDBBA\uDC0A', ["video_game"], 9, 29, 15, 0],
			"1f3af": [['\uD83C\uDFAF'], '\uE130', '\uDBBA\uDC0C', ["dart"], 9, 30, 15, 0],
			"1f3b0": [['\uD83C\uDFB0'], '\uE133', '\uDBBA\uDC0D', ["slot_machine"], 9, 31, 15, 0],
			"1f3b1": [['\uD83C\uDFB1'], '\uE42C', '\uDBBA\uDC0E', ["8ball"], 9, 32, 15, 0],
			"1f3b2": [['\uD83C\uDFB2'], "", '\uDBBA\uDC0F', ["game_die"], 9, 33, 15, 0],
			"1f3b3": [['\uD83C\uDFB3'], "", '\uDBBA\uDC10', ["bowling"], 9, 34, 15, 0],
			"1f3b4": [['\uD83C\uDFB4'], "", '\uDBBA\uDC11', ["flower_playing_cards"], 9, 35, 15, 0],
			"1f3b5": [['\uD83C\uDFB5'], '\uE03E', '\uDBBA\uDC13', ["musical_note"], 9, 36, 15, 0],
			"1f3b6": [['\uD83C\uDFB6'], '\uE326', '\uDBBA\uDC14', ["notes"], 9, 37, 15, 0],
			"1f3b7": [['\uD83C\uDFB7'], '\uE040', '\uDBBA\uDC15', ["saxophone"], 9, 38, 15, 0],
			"1f3b8": [['\uD83C\uDFB8'], '\uE041', '\uDBBA\uDC16', ["guitar"], 9, 39, 15, 0],
			"1f3b9": [['\uD83C\uDFB9'], "", '\uDBBA\uDC17', ["musical_keyboard"], 9, 40, 15, 0],
			"1f3ba": [['\uD83C\uDFBA'], '\uE042', '\uDBBA\uDC18', ["trumpet"], 10, 0, 15, 0],
			"1f3bb": [['\uD83C\uDFBB'], "", '\uDBBA\uDC19', ["violin"], 10, 1, 15, 0],
			"1f3bc": [['\uD83C\uDFBC'], '\uE326', '\uDBBA\uDC1A', ["musical_score"], 10, 2, 15, 0],
			"1f3bd": [['\uD83C\uDFBD'], "", '\uDBB9\uDFD0', ["running_shirt_with_sash"], 10, 3, 15, 0],
			"1f3be": [['\uD83C\uDFBE'], '\uE015', '\uDBB9\uDFD3', ["tennis"], 10, 4, 15, 0],
			"1f3bf": [['\uD83C\uDFBF'], '\uE013', '\uDBB9\uDFD5', ["ski"], 10, 5, 15, 0],
			"1f3c0": [['\uD83C\uDFC0'], '\uE42A', '\uDBB9\uDFD6', ["basketball"], 10, 6, 15, 0],
			"1f3c1": [['\uD83C\uDFC1'], '\uE132', '\uDBB9\uDFD7', ["checkered_flag"], 10, 7, 15, 0],
			"1f3c2": [['\uD83C\uDFC2'], "", '\uDBB9\uDFD8', ["snowboarder"], 10, 8, 15, 0],
			"1f3c3": [['\uD83C\uDFC3'], '\uE115', '\uDBB9\uDFD9', ["runner", "running"], 10, 9, 15, 0],
			"1f3c4": [['\uD83C\uDFC4'], '\uE017', '\uDBB9\uDFDA', ["surfer"], 10, 15, 15, 0],
			"1f3c5": [['\uD83C\uDFC5'], "", "", ["sports_medal"], 10, 21, 15, 0],
			"1f3c6": [['\uD83C\uDFC6'], '\uE131', '\uDBB9\uDFDB', ["trophy"], 10, 22, 15, 0],
			"1f3c7": [['\uD83C\uDFC7'], "", "", ["horse_racing"], 10, 23, 15, 0],
			"1f3c8": [['\uD83C\uDFC8'], '\uE42B', '\uDBB9\uDFDD', ["football"], 10, 24, 15, 0],
			"1f3c9": [['\uD83C\uDFC9'], "", "", ["rugby_football"], 10, 25, 15, 0],
			"1f3ca": [['\uD83C\uDFCA'], '\uE42D', '\uDBB9\uDFDE', ["swimmer"], 10, 26, 15, 0],
			"1f3cb": [['\uD83C\uDFCB'], "", "", ["weight_lifter"], 10, 32, 15, 0],
			"1f3cc": [['\uD83C\uDFCC'], "", "", ["golfer"], 10, 38, 15, 0],
			"1f3cd": [['\uD83C\uDFCD'], "", "", ["racing_motorcycle"], 10, 39, 15, 0],
			"1f3ce": [['\uD83C\uDFCE'], "", "", ["racing_car"], 10, 40, 15, 0],
			"1f3cf": [['\uD83C\uDFCF'], "", "", ["cricket_bat_and_ball"], 11, 0, 15, 0],
			"1f3d0": [['\uD83C\uDFD0'], "", "", ["volleyball"], 11, 1, 15, 0],
			"1f3d1": [['\uD83C\uDFD1'], "", "", ["field_hockey_stick_and_ball"], 11, 2, 15, 0],
			"1f3d2": [['\uD83C\uDFD2'], "", "", ["ice_hockey_stick_and_puck"], 11, 3, 15, 0],
			"1f3d3": [['\uD83C\uDFD3'], "", "", ["table_tennis_paddle_and_ball"], 11, 4, 15, 0],
			"1f3d4": [['\uD83C\uDFD4'], "", "", ["snow_capped_mountain"], 11, 5, 15, 0],
			"1f3d5": [['\uD83C\uDFD5'], "", "", ["camping"], 11, 6, 15, 0],
			"1f3d6": [['\uD83C\uDFD6'], "", "", ["beach_with_umbrella"], 11, 7, 15, 0],
			"1f3d7": [['\uD83C\uDFD7'], "", "", ["building_construction"], 11, 8, 15, 0],
			"1f3d8": [['\uD83C\uDFD8'], "", "", ["house_buildings"], 11, 9, 15, 0],
			"1f3d9": [['\uD83C\uDFD9'], "", "", ["cityscape"], 11, 10, 15, 0],
			"1f3da": [['\uD83C\uDFDA'], "", "", ["derelict_house_building"], 11, 11, 15, 0],
			"1f3db": [['\uD83C\uDFDB'], "", "", ["classical_building"], 11, 12, 15, 0],
			"1f3dc": [['\uD83C\uDFDC'], "", "", ["desert"], 11, 13, 15, 0],
			"1f3dd": [['\uD83C\uDFDD'], "", "", ["desert_island"], 11, 14, 15, 0],
			"1f3de": [['\uD83C\uDFDE'], "", "", ["national_park"], 11, 15, 15, 0],
			"1f3df": [['\uD83C\uDFDF'], "", "", ["stadium"], 11, 16, 15, 0],
			"1f3e0": [['\uD83C\uDFE0'], '\uE036', '\uDBB9\uDCB0', ["house"], 11, 17, 15, 0],
			"1f3e1": [['\uD83C\uDFE1'], '\uE036', '\uDBB9\uDCB1', ["house_with_garden"], 11, 18, 15, 0],
			"1f3e2": [['\uD83C\uDFE2'], '\uE038', '\uDBB9\uDCB2', ["office"], 11, 19, 15, 0],
			"1f3e3": [['\uD83C\uDFE3'], '\uE153', '\uDBB9\uDCB3', ["post_office"], 11, 20, 15, 0],
			"1f3e4": [['\uD83C\uDFE4'], "", "", ["european_post_office"], 11, 21, 15, 0],
			"1f3e5": [['\uD83C\uDFE5'], '\uE155', '\uDBB9\uDCB4', ["hospital"], 11, 22, 15, 0],
			"1f3e6": [['\uD83C\uDFE6'], '\uE14D', '\uDBB9\uDCB5', ["bank"], 11, 23, 15, 0],
			"1f3e7": [['\uD83C\uDFE7'], '\uE154', '\uDBB9\uDCB6', ["atm"], 11, 24, 15, 0],
			"1f3e8": [['\uD83C\uDFE8'], '\uE158', '\uDBB9\uDCB7', ["hotel"], 11, 25, 15, 0],
			"1f3e9": [['\uD83C\uDFE9'], '\uE501', '\uDBB9\uDCB8', ["love_hotel"], 11, 26, 15, 0],
			"1f3ea": [['\uD83C\uDFEA'], '\uE156', '\uDBB9\uDCB9', ["convenience_store"], 11, 27, 15, 0],
			"1f3eb": [['\uD83C\uDFEB'], '\uE157', '\uDBB9\uDCBA', ["school"], 11, 28, 15, 0],
			"1f3ec": [['\uD83C\uDFEC'], '\uE504', '\uDBB9\uDCBD', ["department_store"], 11, 29, 15, 0],
			"1f3ed": [['\uD83C\uDFED'], '\uE508', '\uDBB9\uDCC0', ["factory"], 11, 30, 15, 0],
			"1f3ee": [['\uD83C\uDFEE'], '\uE30B', '\uDBB9\uDCC2', ["izakaya_lantern", "lantern"], 11, 31, 15, 0],
			"1f3ef": [['\uD83C\uDFEF'], '\uE505', '\uDBB9\uDCBE', ["japanese_castle"], 11, 32, 15, 0],
			"1f3f0": [['\uD83C\uDFF0'], '\uE506', '\uDBB9\uDCBF', ["european_castle"], 11, 33, 15, 0],
			"1f3f3": [['\uD83C\uDFF3'], "", "", ["waving_white_flag"], 11, 34, 15, 0],
			"1f3f4": [['\uD83C\uDFF4'], "", "", ["waving_black_flag"], 11, 35, 15, 0],
			"1f3f5": [['\uD83C\uDFF5'], "", "", ["rosette"], 11, 36, 15, 0],
			"1f3f7": [['\uD83C\uDFF7'], "", "", ["label"], 11, 37, 15, 0],
			"1f3f8": [['\uD83C\uDFF8'], "", "", ["badminton_racquet_and_shuttlecock"], 11, 38, 15, 0],
			"1f3f9": [['\uD83C\uDFF9'], "", "", ["bow_and_arrow"], 11, 39, 15, 0],
			"1f3fa": [['\uD83C\uDFFA'], "", "", ["amphora"], 11, 40, 15, 0],
			"1f3fb": [['\uD83C\uDFFB'], "", "", ["skin-tone-2"], 12, 0, 15, 0],
			"1f3fc": [['\uD83C\uDFFC'], "", "", ["skin-tone-3"], 12, 1, 15, 0],
			"1f3fd": [['\uD83C\uDFFD'], "", "", ["skin-tone-4"], 12, 2, 15, 0],
			"1f3fe": [['\uD83C\uDFFE'], "", "", ["skin-tone-5"], 12, 3, 15, 0],
			"1f3ff": [['\uD83C\uDFFF'], "", "", ["skin-tone-6"], 12, 4, 15, 0],
			"1f400": [['\uD83D\uDC00'], "", "", ["rat"], 12, 5, 15, 0],
			"1f401": [['\uD83D\uDC01'], "", "", ["mouse2"], 12, 6, 15, 0],
			"1f402": [['\uD83D\uDC02'], "", "", ["ox"], 12, 7, 15, 0],
			"1f403": [['\uD83D\uDC03'], "", "", ["water_buffalo"], 12, 8, 15, 0],
			"1f404": [['\uD83D\uDC04'], "", "", ["cow2"], 12, 9, 15, 0],
			"1f405": [['\uD83D\uDC05'], "", "", ["tiger2"], 12, 10, 15, 0],
			"1f406": [['\uD83D\uDC06'], "", "", ["leopard"], 12, 11, 15, 0],
			"1f407": [['\uD83D\uDC07'], "", "", ["rabbit2"], 12, 12, 15, 0],
			"1f408": [['\uD83D\uDC08'], "", "", ["cat2"], 12, 13, 15, 0],
			"1f409": [['\uD83D\uDC09'], "", "", ["dragon"], 12, 14, 15, 0],
			"1f40a": [['\uD83D\uDC0A'], "", "", ["crocodile"], 12, 15, 15, 0],
			"1f40b": [['\uD83D\uDC0B'], "", "", ["whale2"], 12, 16, 15, 0],
			"1f40c": [['\uD83D\uDC0C'], "", '\uDBB8\uDDB9', ["snail"], 12, 17, 15, 0],
			"1f40d": [['\uD83D\uDC0D'], '\uE52D', '\uDBB8\uDDD3', ["snake"], 12, 18, 15, 0],
			"1f40e": [['\uD83D\uDC0E'], '\uE134', '\uDBB9\uDFDC', ["racehorse"], 12, 19, 15, 0],
			"1f40f": [['\uD83D\uDC0F'], "", "", ["ram"], 12, 20, 15, 0],
			"1f410": [['\uD83D\uDC10'], "", "", ["goat"], 12, 21, 15, 0],
			"1f411": [['\uD83D\uDC11'], '\uE529', '\uDBB8\uDDCF', ["sheep"], 12, 22, 15, 0],
			"1f412": [['\uD83D\uDC12'], '\uE528', '\uDBB8\uDDCE', ["monkey"], 12, 23, 15, 0],
			"1f413": [['\uD83D\uDC13'], "", "", ["rooster"], 12, 24, 15, 0],
			"1f414": [['\uD83D\uDC14'], '\uE52E', '\uDBB8\uDDD4', ["chicken"], 12, 25, 15, 0],
			"1f415": [['\uD83D\uDC15'], "", "", ["dog2"], 12, 26, 15, 0],
			"1f416": [['\uD83D\uDC16'], "", "", ["pig2"], 12, 27, 15, 0],
			"1f417": [['\uD83D\uDC17'], '\uE52F', '\uDBB8\uDDD5', ["boar"], 12, 28, 15, 0],
			"1f418": [['\uD83D\uDC18'], '\uE526', '\uDBB8\uDDCC', ["elephant"], 12, 29, 15, 0],
			"1f419": [['\uD83D\uDC19'], '\uE10A', '\uDBB8\uDDC5', ["octopus"], 12, 30, 15, 0],
			"1f41a": [['\uD83D\uDC1A'], '\uE441', '\uDBB8\uDDC6', ["shell"], 12, 31, 15, 0],
			"1f41b": [['\uD83D\uDC1B'], '\uE525', '\uDBB8\uDDCB', ["bug"], 12, 32, 15, 0],
			"1f41c": [['\uD83D\uDC1C'], "", '\uDBB8\uDDDA', ["ant"], 12, 33, 15, 0],
			"1f41d": [['\uD83D\uDC1D'], "", '\uDBB8\uDDE1', ["bee", "honeybee"], 12, 34, 15, 0],
			"1f41e": [['\uD83D\uDC1E'], "", '\uDBB8\uDDE2', ["beetle"], 12, 35, 15, 0],
			"1f41f": [['\uD83D\uDC1F'], '\uE019', '\uDBB8\uDDBD', ["fish"], 12, 36, 15, 0],
			"1f420": [['\uD83D\uDC20'], '\uE522', '\uDBB8\uDDC9', ["tropical_fish"], 12, 37, 15, 0],
			"1f421": [['\uD83D\uDC21'], '\uE019', '\uDBB8\uDDD9', ["blowfish"], 12, 38, 15, 0],
			"1f422": [['\uD83D\uDC22'], "", '\uDBB8\uDDDC', ["turtle"], 12, 39, 15, 0],
			"1f423": [['\uD83D\uDC23'], '\uE523', '\uDBB8\uDDDD', ["hatching_chick"], 12, 40, 15, 0],
			"1f424": [['\uD83D\uDC24'], '\uE523', '\uDBB8\uDDBA', ["baby_chick"], 13, 0, 15, 0],
			"1f425": [['\uD83D\uDC25'], '\uE523', '\uDBB8\uDDBB', ["hatched_chick"], 13, 1, 15, 0],
			"1f426": [['\uD83D\uDC26'], '\uE521', '\uDBB8\uDDC8', ["bird"], 13, 2, 15, 0],
			"1f427": [['\uD83D\uDC27'], '\uE055', '\uDBB8\uDDBC', ["penguin"], 13, 3, 15, 0],
			"1f428": [['\uD83D\uDC28'], '\uE527', '\uDBB8\uDDCD', ["koala"], 13, 4, 15, 0],
			"1f429": [['\uD83D\uDC29'], '\uE052', '\uDBB8\uDDD8', ["poodle"], 13, 5, 15, 0],
			"1f42a": [['\uD83D\uDC2A'], "", "", ["dromedary_camel"], 13, 6, 15, 0],
			"1f42b": [['\uD83D\uDC2B'], '\uE530', '\uDBB8\uDDD6', ["camel"], 13, 7, 15, 0],
			"1f42c": [['\uD83D\uDC2C'], '\uE520', '\uDBB8\uDDC7', ["dolphin", "flipper"], 13, 8, 15, 0],
			"1f42d": [['\uD83D\uDC2D'], '\uE053', '\uDBB8\uDDC2', ["mouse"], 13, 9, 15, 0],
			"1f42e": [['\uD83D\uDC2E'], '\uE52B', '\uDBB8\uDDD1', ["cow"], 13, 10, 15, 0],
			"1f42f": [['\uD83D\uDC2F'], '\uE050', '\uDBB8\uDDC0', ["tiger"], 13, 11, 15, 0],
			"1f430": [['\uD83D\uDC30'], '\uE52C', '\uDBB8\uDDD2', ["rabbit"], 13, 12, 15, 0],
			"1f431": [['\uD83D\uDC31'], '\uE04F', '\uDBB8\uDDB8', ["cat"], 13, 13, 15, 0],
			"1f432": [['\uD83D\uDC32'], "", '\uDBB8\uDDDE', ["dragon_face"], 13, 14, 15, 0],
			"1f433": [['\uD83D\uDC33'], '\uE054', '\uDBB8\uDDC3', ["whale"], 13, 15, 15, 0],
			"1f434": [['\uD83D\uDC34'], '\uE01A', '\uDBB8\uDDBE', ["horse"], 13, 16, 15, 0],
			"1f435": [['\uD83D\uDC35'], '\uE109', '\uDBB8\uDDC4', ["monkey_face"], 13, 17, 15, 0],
			"1f436": [['\uD83D\uDC36'], '\uE052', '\uDBB8\uDDB7', ["dog"], 13, 18, 15, 0],
			"1f437": [['\uD83D\uDC37'], '\uE10B', '\uDBB8\uDDBF', ["pig"], 13, 19, 15, 0],
			"1f438": [['\uD83D\uDC38'], '\uE531', '\uDBB8\uDDD7', ["frog"], 13, 20, 15, 0],
			"1f439": [['\uD83D\uDC39'], '\uE524', '\uDBB8\uDDCA', ["hamster"], 13, 21, 15, 0],
			"1f43a": [['\uD83D\uDC3A'], '\uE52A', '\uDBB8\uDDD0', ["wolf"], 13, 22, 15, 0],
			"1f43b": [['\uD83D\uDC3B'], '\uE051', '\uDBB8\uDDC1', ["bear"], 13, 23, 15, 0],
			"1f43c": [['\uD83D\uDC3C'], "", '\uDBB8\uDDDF', ["panda_face"], 13, 24, 15, 0],
			"1f43d": [['\uD83D\uDC3D'], '\uE10B', '\uDBB8\uDDE0', ["pig_nose"], 13, 25, 15, 0],
			"1f43e": [['\uD83D\uDC3E'], '\uE536', '\uDBB8\uDDDB', ["feet", "paw_prints"], 13, 26, 15, 0],
			"1f43f": [['\uD83D\uDC3F'], "", "", ["chipmunk"], 13, 27, 15, 0],
			"1f440": [['\uD83D\uDC40'], '\uE419', '\uDBB8\uDD90', ["eyes"], 13, 28, 15, 0],
			"1f441": [['\uD83D\uDC41'], "", "", ["eye"], 13, 29, 15, 0],
			"1f442": [['\uD83D\uDC42'], '\uE41B', '\uDBB8\uDD91', ["ear"], 13, 30, 15, 0],
			"1f443": [['\uD83D\uDC43'], '\uE41A', '\uDBB8\uDD92', ["nose"], 13, 36, 15, 0],
			"1f444": [['\uD83D\uDC44'], '\uE41C', '\uDBB8\uDD93', ["lips"], 14, 1, 15, 0],
			"1f445": [['\uD83D\uDC45'], '\uE409', '\uDBB8\uDD94', ["tongue"], 14, 2, 15, 0],
			"1f446": [['\uD83D\uDC46'], '\uE22E', '\uDBBA\uDF99', ["point_up_2"], 14, 3, 15, 0],
			"1f447": [['\uD83D\uDC47'], '\uE22F', '\uDBBA\uDF9A', ["point_down"], 14, 9, 15, 0],
			"1f448": [['\uD83D\uDC48'], '\uE230', '\uDBBA\uDF9B', ["point_left"], 14, 15, 15, 0],
			"1f449": [['\uD83D\uDC49'], '\uE231', '\uDBBA\uDF9C', ["point_right"], 14, 21, 15, 0],
			"1f44a": [['\uD83D\uDC4A'], '\uE00D', '\uDBBA\uDF96', ["facepunch", "punch"], 14, 27, 15, 0],
			"1f44b": [['\uD83D\uDC4B'], '\uE41E', '\uDBBA\uDF9D', ["wave"], 14, 33, 15, 0],
			"1f44c": [['\uD83D\uDC4C'], '\uE420', '\uDBBA\uDF9F', ["ok_hand"], 14, 39, 15, 0],
			"1f44d": [['\uD83D\uDC4D'], '\uE00E', '\uDBBA\uDF97', ["+1", "thumbsup"], 15, 4, 15, 0],
			"1f44e": [['\uD83D\uDC4E'], '\uE421', '\uDBBA\uDFA0', ["-1", "thumbsdown"], 15, 10, 15, 0],
			"1f44f": [['\uD83D\uDC4F'], '\uE41F', '\uDBBA\uDF9E', ["clap"], 15, 16, 15, 0],
			"1f450": [['\uD83D\uDC50'], '\uE422', '\uDBBA\uDFA1', ["open_hands"], 15, 22, 15, 0],
			"1f451": [['\uD83D\uDC51'], '\uE10E', '\uDBB9\uDCD1', ["crown"], 15, 28, 15, 0],
			"1f452": [['\uD83D\uDC52'], '\uE318', '\uDBB9\uDCD4', ["womans_hat"], 15, 29, 15, 0],
			"1f453": [['\uD83D\uDC53'], "", '\uDBB9\uDCCE', ["eyeglasses"], 15, 30, 15, 0],
			"1f454": [['\uD83D\uDC54'], '\uE302', '\uDBB9\uDCD3', ["necktie"], 15, 31, 15, 0],
			"1f455": [['\uD83D\uDC55'], '\uE006', '\uDBB9\uDCCF', ["shirt", "tshirt"], 15, 32, 15, 0],
			"1f456": [['\uD83D\uDC56'], "", '\uDBB9\uDCD0', ["jeans"], 15, 33, 15, 0],
			"1f457": [['\uD83D\uDC57'], '\uE319', '\uDBB9\uDCD5', ["dress"], 15, 34, 15, 0],
			"1f458": [['\uD83D\uDC58'], '\uE321', '\uDBB9\uDCD9', ["kimono"], 15, 35, 15, 0],
			"1f459": [['\uD83D\uDC59'], '\uE322', '\uDBB9\uDCDA', ["bikini"], 15, 36, 15, 0],
			"1f45a": [['\uD83D\uDC5A'], '\uE006', '\uDBB9\uDCDB', ["womans_clothes"], 15, 37, 15, 0],
			"1f45b": [['\uD83D\uDC5B'], "", '\uDBB9\uDCDC', ["purse"], 15, 38, 15, 0],
			"1f45c": [['\uD83D\uDC5C'], '\uE323', '\uDBB9\uDCF0', ["handbag"], 15, 39, 15, 0],
			"1f45d": [['\uD83D\uDC5D'], "", '\uDBB9\uDCF1', ["pouch"], 15, 40, 15, 0],
			"1f45e": [['\uD83D\uDC5E'], '\uE007', '\uDBB9\uDCCC', ["mans_shoe", "shoe"], 16, 0, 15, 0],
			"1f45f": [['\uD83D\uDC5F'], '\uE007', '\uDBB9\uDCCD', ["athletic_shoe"], 16, 1, 15, 0],
			"1f460": [['\uD83D\uDC60'], '\uE13E', '\uDBB9\uDCD6', ["high_heel"], 16, 2, 15, 0],
			"1f461": [['\uD83D\uDC61'], '\uE31A', '\uDBB9\uDCD7', ["sandal"], 16, 3, 15, 0],
			"1f462": [['\uD83D\uDC62'], '\uE31B', '\uDBB9\uDCD8', ["boot"], 16, 4, 15, 0],
			"1f463": [['\uD83D\uDC63'], '\uE536', '\uDBB9\uDD53', ["footprints"], 16, 5, 15, 0],
			"1f464": [['\uD83D\uDC64'], "", '\uDBB8\uDD9A', ["bust_in_silhouette"], 16, 6, 15, 0],
			"1f465": [['\uD83D\uDC65'], "", "", ["busts_in_silhouette"], 16, 7, 15, 0],
			"1f466": [['\uD83D\uDC66'], '\uE001', '\uDBB8\uDD9B', ["boy"], 16, 8, 15, 0],
			"1f467": [['\uD83D\uDC67'], '\uE002', '\uDBB8\uDD9C', ["girl"], 16, 14, 15, 0],
			"1f468": [['\uD83D\uDC68'], '\uE004', '\uDBB8\uDD9D', ["man"], 16, 20, 15, 0],
			"1f469": [['\uD83D\uDC69'], '\uE005', '\uDBB8\uDD9E', ["woman"], 16, 26, 15, 0],
			"1f46a": [['\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66', '\uD83D\uDC6A'], "", '\uDBB8\uDD9F', ["family", "man-woman-boy"], 16, 32, 15, 0],
			"1f46b": [['\uD83D\uDC6B'], '\uE428', '\uDBB8\uDDA0', ["couple", "man_and_woman_holding_hands"], 16, 33, 15, 0],
			"1f46c": [['\uD83D\uDC6C'], "", "", ["two_men_holding_hands"], 16, 34, 15, 0],
			"1f46d": [['\uD83D\uDC6D'], "", "", ["two_women_holding_hands"], 16, 35, 15, 0],
			"1f46e": [['\uD83D\uDC6E'], '\uE152', '\uDBB8\uDDA1', ["cop"], 16, 36, 15, 0],
			"1f46f": [['\uD83D\uDC6F'], '\uE429', '\uDBB8\uDDA2', ["dancers"], 17, 1, 15, 0],
			"1f470": [['\uD83D\uDC70'], "", '\uDBB8\uDDA3', ["bride_with_veil"], 17, 2, 15, 0],
			"1f471": [['\uD83D\uDC71'], '\uE515', '\uDBB8\uDDA4', ["person_with_blond_hair"], 17, 8, 15, 0],
			"1f472": [['\uD83D\uDC72'], '\uE516', '\uDBB8\uDDA5', ["man_with_gua_pi_mao"], 17, 14, 15, 0],
			"1f473": [['\uD83D\uDC73'], '\uE517', '\uDBB8\uDDA6', ["man_with_turban"], 17, 20, 15, 0],
			"1f474": [['\uD83D\uDC74'], '\uE518', '\uDBB8\uDDA7', ["older_man"], 17, 26, 15, 0],
			"1f475": [['\uD83D\uDC75'], '\uE519', '\uDBB8\uDDA8', ["older_woman"], 17, 32, 15, 0],
			"1f476": [['\uD83D\uDC76'], '\uE51A', '\uDBB8\uDDA9', ["baby"], 17, 38, 15, 0],
			"1f477": [['\uD83D\uDC77'], '\uE51B', '\uDBB8\uDDAA', ["construction_worker"], 18, 3, 15, 0],
			"1f478": [['\uD83D\uDC78'], '\uE51C', '\uDBB8\uDDAB', ["princess"], 18, 9, 15, 0],
			"1f479": [['\uD83D\uDC79'], "", '\uDBB8\uDDAC', ["japanese_ogre"], 18, 15, 15, 0],
			"1f47a": [['\uD83D\uDC7A'], "", '\uDBB8\uDDAD', ["japanese_goblin"], 18, 16, 15, 0],
			"1f47b": [['\uD83D\uDC7B'], '\uE11B', '\uDBB8\uDDAE', ["ghost"], 18, 17, 15, 0],
			"1f47c": [['\uD83D\uDC7C'], '\uE04E', '\uDBB8\uDDAF', ["angel"], 18, 18, 15, 0],
			"1f47d": [['\uD83D\uDC7D'], '\uE10C', '\uDBB8\uDDB0', ["alien"], 18, 24, 15, 0],
			"1f47e": [['\uD83D\uDC7E'], '\uE12B', '\uDBB8\uDDB1', ["space_invader"], 18, 25, 15, 0],
			"1f47f": [['\uD83D\uDC7F'], '\uE11A', '\uDBB8\uDDB2', ["imp"], 18, 26, 15, 0],
			"1f480": [['\uD83D\uDC80'], '\uE11C', '\uDBB8\uDDB3', ["skull"], 18, 27, 15, 0],
			"1f481": [['\uD83D\uDC81'], '\uE253', '\uDBB8\uDDB4', ["information_desk_person"], 18, 28, 15, 0],
			"1f482": [['\uD83D\uDC82'], '\uE51E', '\uDBB8\uDDB5', ["guardsman"], 18, 34, 15, 0],
			"1f483": [['\uD83D\uDC83'], '\uE51F', '\uDBB8\uDDB6', ["dancer"], 18, 40, 15, 0],
			"1f484": [['\uD83D\uDC84'], '\uE31C', '\uDBB8\uDD95', ["lipstick"], 19, 5, 15, 0],
			"1f485": [['\uD83D\uDC85'], '\uE31D', '\uDBB8\uDD96', ["nail_care"], 19, 6, 15, 0],
			"1f486": [['\uD83D\uDC86'], '\uE31E', '\uDBB8\uDD97', ["massage"], 19, 12, 15, 0],
			"1f487": [['\uD83D\uDC87'], '\uE31F', '\uDBB8\uDD98', ["haircut"], 19, 18, 15, 0],
			"1f488": [['\uD83D\uDC88'], '\uE320', '\uDBB8\uDD99', ["barber"], 19, 24, 15, 0],
			"1f489": [['\uD83D\uDC89'], '\uE13B', '\uDBB9\uDD09', ["syringe"], 19, 25, 15, 0],
			"1f48a": [['\uD83D\uDC8A'], '\uE30F', '\uDBB9\uDD0A', ["pill"], 19, 26, 15, 0],
			"1f48b": [['\uD83D\uDC8B'], '\uE003', '\uDBBA\uDC23', ["kiss"], 19, 27, 15, 0],
			"1f48c": [['\uD83D\uDC8C'], '\uE103\uE328', '\uDBBA\uDC24', ["love_letter"], 19, 28, 15, 0],
			"1f48d": [['\uD83D\uDC8D'], '\uE034', '\uDBBA\uDC25', ["ring"], 19, 29, 15, 0],
			"1f48e": [['\uD83D\uDC8E'], '\uE035', '\uDBBA\uDC26', ["gem"], 19, 30, 15, 0],
			"1f48f": [['\uD83D\uDC8F'], '\uE111', '\uDBBA\uDC27', ["couplekiss"], 19, 31, 15, 0],
			"1f490": [['\uD83D\uDC90'], '\uE306', '\uDBBA\uDC28', ["bouquet"], 19, 32, 15, 0],
			"1f491": [['\uD83D\uDC91'], '\uE425', '\uDBBA\uDC29', ["couple_with_heart"], 19, 33, 15, 0],
			"1f492": [['\uD83D\uDC92'], '\uE43D', '\uDBBA\uDC2A', ["wedding"], 19, 34, 15, 0],
			"1f493": [['\uD83D\uDC93'], '\uE327', '\uDBBA\uDF0D', ["heartbeat"], 19, 35, 15, 0],
			"1f494": [['\uD83D\uDC94'], '\uE023', '\uDBBA\uDF0E', ["broken_heart"], 19, 36, 15, 0, "<\/3"],
			"1f495": [['\uD83D\uDC95'], '\uE327', '\uDBBA\uDF0F', ["two_hearts"], 19, 37, 15, 0],
			"1f496": [['\uD83D\uDC96'], '\uE327', '\uDBBA\uDF10', ["sparkling_heart"], 19, 38, 15, 0],
			"1f497": [['\uD83D\uDC97'], '\uE328', '\uDBBA\uDF11', ["heartpulse"], 19, 39, 15, 0],
			"1f498": [['\uD83D\uDC98'], '\uE329', '\uDBBA\uDF12', ["cupid"], 19, 40, 15, 0],
			"1f499": [['\uD83D\uDC99'], '\uE32A', '\uDBBA\uDF13', ["blue_heart"], 20, 0, 15, 0, "<3"],
			"1f49a": [['\uD83D\uDC9A'], '\uE32B', '\uDBBA\uDF14', ["green_heart"], 20, 1, 15, 0, "<3"],
			"1f49b": [['\uD83D\uDC9B'], '\uE32C', '\uDBBA\uDF15', ["yellow_heart"], 20, 2, 15, 0, "<3"],
			"1f49c": [['\uD83D\uDC9C'], '\uE32D', '\uDBBA\uDF16', ["purple_heart"], 20, 3, 15, 0, "<3"],
			"1f49d": [['\uD83D\uDC9D'], '\uE437', '\uDBBA\uDF17', ["gift_heart"], 20, 4, 15, 0],
			"1f49e": [['\uD83D\uDC9E'], '\uE327', '\uDBBA\uDF18', ["revolving_hearts"], 20, 5, 15, 0],
			"1f49f": [['\uD83D\uDC9F'], '\uE204', '\uDBBA\uDF19', ["heart_decoration"], 20, 6, 15, 0],
			"1f4a0": [['\uD83D\uDCA0'], "", '\uDBBA\uDF55', ["diamond_shape_with_a_dot_inside"], 20, 7, 15, 0],
			"1f4a1": [['\uD83D\uDCA1'], '\uE10F', '\uDBBA\uDF56', ["bulb"], 20, 8, 15, 0],
			"1f4a2": [['\uD83D\uDCA2'], '\uE334', '\uDBBA\uDF57', ["anger"], 20, 9, 15, 0],
			"1f4a3": [['\uD83D\uDCA3'], '\uE311', '\uDBBA\uDF58', ["bomb"], 20, 10, 15, 0],
			"1f4a4": [['\uD83D\uDCA4'], '\uE13C', '\uDBBA\uDF59', ["zzz"], 20, 11, 15, 0],
			"1f4a5": [['\uD83D\uDCA5'], "", '\uDBBA\uDF5A', ["boom", "collision"], 20, 12, 15, 0],
			"1f4a6": [['\uD83D\uDCA6'], '\uE331', '\uDBBA\uDF5B', ["sweat_drops"], 20, 13, 15, 0],
			"1f4a7": [['\uD83D\uDCA7'], '\uE331', '\uDBBA\uDF5C', ["droplet"], 20, 14, 15, 0],
			"1f4a8": [['\uD83D\uDCA8'], '\uE330', '\uDBBA\uDF5D', ["dash"], 20, 15, 15, 0],
			"1f4a9": [['\uD83D\uDCA9'], '\uE05A', '\uDBB9\uDCF4', ["hankey", "poop", "shit"], 20, 16, 15, 0],
			"1f4aa": [['\uD83D\uDCAA'], '\uE14C', '\uDBBA\uDF5E', ["muscle"], 20, 17, 15, 0],
			"1f4ab": [['\uD83D\uDCAB'], '\uE407', '\uDBBA\uDF5F', ["dizzy"], 20, 23, 15, 0],
			"1f4ac": [['\uD83D\uDCAC'], "", '\uDBB9\uDD32', ["speech_balloon"], 20, 24, 15, 0],
			"1f4ad": [['\uD83D\uDCAD'], "", "", ["thought_balloon"], 20, 25, 15, 0],
			"1f4ae": [['\uD83D\uDCAE'], "", '\uDBBA\uDF7A', ["white_flower"], 20, 26, 15, 0],
			"1f4af": [['\uD83D\uDCAF'], "", '\uDBBA\uDF7B', ["100"], 20, 27, 15, 0],
			"1f4b0": [['\uD83D\uDCB0'], '\uE12F', '\uDBB9\uDCDD', ["moneybag"], 20, 28, 15, 0],
			"1f4b1": [['\uD83D\uDCB1'], '\uE149', '\uDBB9\uDCDE', ["currency_exchange"], 20, 29, 15, 0],
			"1f4b2": [['\uD83D\uDCB2'], '\uE12F', '\uDBB9\uDCE0', ["heavy_dollar_sign"], 20, 30, 15, 0],
			"1f4b3": [['\uD83D\uDCB3'], "", '\uDBB9\uDCE1', ["credit_card"], 20, 31, 15, 0],
			"1f4b4": [['\uD83D\uDCB4'], "", '\uDBB9\uDCE2', ["yen"], 20, 32, 15, 0],
			"1f4b5": [['\uD83D\uDCB5'], '\uE12F', '\uDBB9\uDCE3', ["dollar"], 20, 33, 15, 0],
			"1f4b6": [['\uD83D\uDCB6'], "", "", ["euro"], 20, 34, 15, 0],
			"1f4b7": [['\uD83D\uDCB7'], "", "", ["pound"], 20, 35, 15, 0],
			"1f4b8": [['\uD83D\uDCB8'], "", '\uDBB9\uDCE4', ["money_with_wings"], 20, 36, 15, 0],
			"1f4b9": [['\uD83D\uDCB9'], '\uE14A', '\uDBB9\uDCDF', ["chart"], 20, 37, 15, 0],
			"1f4ba": [['\uD83D\uDCBA'], '\uE11F', '\uDBB9\uDD37', ["seat"], 20, 38, 15, 0],
			"1f4bb": [['\uD83D\uDCBB'], '\uE00C', '\uDBB9\uDD38', ["computer"], 20, 39, 15, 0],
			"1f4bc": [['\uD83D\uDCBC'], '\uE11E', '\uDBB9\uDD3B', ["briefcase"], 20, 40, 15, 0],
			"1f4bd": [['\uD83D\uDCBD'], '\uE316', '\uDBB9\uDD3C', ["minidisc"], 21, 0, 15, 0],
			"1f4be": [['\uD83D\uDCBE'], '\uE316', '\uDBB9\uDD3D', ["floppy_disk"], 21, 1, 15, 0],
			"1f4bf": [['\uD83D\uDCBF'], '\uE126', '\uDBBA\uDC1D', ["cd"], 21, 2, 15, 0],
			"1f4c0": [['\uD83D\uDCC0'], '\uE127', '\uDBBA\uDC1E', ["dvd"], 21, 3, 15, 0],
			"1f4c1": [['\uD83D\uDCC1'], "", '\uDBB9\uDD43', ["file_folder"], 21, 4, 15, 0],
			"1f4c2": [['\uD83D\uDCC2'], "", '\uDBB9\uDD44', ["open_file_folder"], 21, 5, 15, 0],
			"1f4c3": [['\uD83D\uDCC3'], '\uE301', '\uDBB9\uDD40', ["page_with_curl"], 21, 6, 15, 0],
			"1f4c4": [['\uD83D\uDCC4'], '\uE301', '\uDBB9\uDD41', ["page_facing_up"], 21, 7, 15, 0],
			"1f4c5": [['\uD83D\uDCC5'], "", '\uDBB9\uDD42', ["date"], 21, 8, 15, 0],
			"1f4c6": [['\uD83D\uDCC6'], "", '\uDBB9\uDD49', ["calendar"], 21, 9, 15, 0],
			"1f4c7": [['\uD83D\uDCC7'], '\uE148', '\uDBB9\uDD4D', ["card_index"], 21, 10, 15, 0],
			"1f4c8": [['\uD83D\uDCC8'], '\uE14A', '\uDBB9\uDD4B', ["chart_with_upwards_trend"], 21, 11, 15, 0],
			"1f4c9": [['\uD83D\uDCC9'], "", '\uDBB9\uDD4C', ["chart_with_downwards_trend"], 21, 12, 15, 0],
			"1f4ca": [['\uD83D\uDCCA'], '\uE14A', '\uDBB9\uDD4A', ["bar_chart"], 21, 13, 15, 0],
			"1f4cb": [['\uD83D\uDCCB'], '\uE301', '\uDBB9\uDD48', ["clipboard"], 21, 14, 15, 0],
			"1f4cc": [['\uD83D\uDCCC'], "", '\uDBB9\uDD4E', ["pushpin"], 21, 15, 15, 0],
			"1f4cd": [['\uD83D\uDCCD'], "", '\uDBB9\uDD3F', ["round_pushpin"], 21, 16, 15, 0],
			"1f4ce": [['\uD83D\uDCCE'], "", '\uDBB9\uDD3A', ["paperclip"], 21, 17, 15, 0],
			"1f4cf": [['\uD83D\uDCCF'], "", '\uDBB9\uDD50', ["straight_ruler"], 21, 18, 15, 0],
			"1f4d0": [['\uD83D\uDCD0'], "", '\uDBB9\uDD51', ["triangular_ruler"], 21, 19, 15, 0],
			"1f4d1": [['\uD83D\uDCD1'], '\uE301', '\uDBB9\uDD52', ["bookmark_tabs"], 21, 20, 15, 0],
			"1f4d2": [['\uD83D\uDCD2'], '\uE148', '\uDBB9\uDD4F', ["ledger"], 21, 21, 15, 0],
			"1f4d3": [['\uD83D\uDCD3'], '\uE148', '\uDBB9\uDD45', ["notebook"], 21, 22, 15, 0],
			"1f4d4": [['\uD83D\uDCD4'], '\uE148', '\uDBB9\uDD47', ["notebook_with_decorative_cover"], 21, 23, 15, 0],
			"1f4d5": [['\uD83D\uDCD5'], '\uE148', '\uDBB9\uDD02', ["closed_book"], 21, 24, 15, 0],
			"1f4d6": [['\uD83D\uDCD6'], '\uE148', '\uDBB9\uDD46', ["book", "open_book"], 21, 25, 15, 0],
			"1f4d7": [['\uD83D\uDCD7'], '\uE148', '\uDBB9\uDCFF', ["green_book"], 21, 26, 15, 0],
			"1f4d8": [['\uD83D\uDCD8'], '\uE148', '\uDBB9\uDD00', ["blue_book"], 21, 27, 15, 0],
			"1f4d9": [['\uD83D\uDCD9'], '\uE148', '\uDBB9\uDD01', ["orange_book"], 21, 28, 15, 0],
			"1f4da": [['\uD83D\uDCDA'], '\uE148', '\uDBB9\uDD03', ["books"], 21, 29, 15, 0],
			"1f4db": [['\uD83D\uDCDB'], "", '\uDBB9\uDD04', ["name_badge"], 21, 30, 15, 0],
			"1f4dc": [['\uD83D\uDCDC'], "", '\uDBB9\uDCFD', ["scroll"], 21, 31, 15, 0],
			"1f4dd": [['\uD83D\uDCDD'], '\uE301', '\uDBB9\uDD27', ["memo", "pencil"], 21, 32, 15, 0],
			"1f4de": [['\uD83D\uDCDE'], '\uE009', '\uDBB9\uDD24', ["telephone_receiver"], 21, 33, 15, 0],
			"1f4df": [['\uD83D\uDCDF'], "", '\uDBB9\uDD22', ["pager"], 21, 34, 15, 0],
			"1f4e0": [['\uD83D\uDCE0'], '\uE00B', '\uDBB9\uDD28', ["fax"], 21, 35, 15, 0],
			"1f4e1": [['\uD83D\uDCE1'], '\uE14B', '\uDBB9\uDD31', ["satellite_antenna"], 21, 36, 15, 0],
			"1f4e2": [['\uD83D\uDCE2'], '\uE142', '\uDBB9\uDD2F', ["loudspeaker"], 21, 37, 15, 0],
			"1f4e3": [['\uD83D\uDCE3'], '\uE317', '\uDBB9\uDD30', ["mega"], 21, 38, 15, 0],
			"1f4e4": [['\uD83D\uDCE4'], "", '\uDBB9\uDD33', ["outbox_tray"], 21, 39, 15, 0],
			"1f4e5": [['\uD83D\uDCE5'], "", '\uDBB9\uDD34', ["inbox_tray"], 21, 40, 15, 0],
			"1f4e6": [['\uD83D\uDCE6'], '\uE112', '\uDBB9\uDD35', ["package"], 22, 0, 15, 0],
			"1f4e7": [['\uD83D\uDCE7'], '\uE103', '\uDBBA\uDF92', ["e-mail"], 22, 1, 15, 0],
			"1f4e8": [['\uD83D\uDCE8'], '\uE103', '\uDBB9\uDD2A', ["incoming_envelope"], 22, 2, 15, 0],
			"1f4e9": [['\uD83D\uDCE9'], '\uE103', '\uDBB9\uDD2B', ["envelope_with_arrow"], 22, 3, 15, 0],
			"1f4ea": [['\uD83D\uDCEA'], '\uE101', '\uDBB9\uDD2C', ["mailbox_closed"], 22, 4, 15, 0],
			"1f4eb": [['\uD83D\uDCEB'], '\uE101', '\uDBB9\uDD2D', ["mailbox"], 22, 5, 15, 0],
			"1f4ec": [['\uD83D\uDCEC'], "", "", ["mailbox_with_mail"], 22, 6, 15, 0],
			"1f4ed": [['\uD83D\uDCED'], "", "", ["mailbox_with_no_mail"], 22, 7, 15, 0],
			"1f4ee": [['\uD83D\uDCEE'], '\uE102', '\uDBB9\uDD2E', ["postbox"], 22, 8, 15, 0],
			"1f4ef": [['\uD83D\uDCEF'], "", "", ["postal_horn"], 22, 9, 15, 0],
			"1f4f0": [['\uD83D\uDCF0'], "", '\uDBBA\uDC22', ["newspaper"], 22, 10, 15, 0],
			"1f4f1": [['\uD83D\uDCF1'], '\uE00A', '\uDBB9\uDD25', ["iphone"], 22, 11, 15, 0],
			"1f4f2": [['\uD83D\uDCF2'], '\uE104', '\uDBB9\uDD26', ["calling"], 22, 12, 15, 0],
			"1f4f3": [['\uD83D\uDCF3'], '\uE250', '\uDBBA\uDC39', ["vibration_mode"], 22, 13, 15, 0],
			"1f4f4": [['\uD83D\uDCF4'], '\uE251', '\uDBBA\uDC3A', ["mobile_phone_off"], 22, 14, 15, 0],
			"1f4f5": [['\uD83D\uDCF5'], "", "", ["no_mobile_phones"], 22, 15, 15, 0],
			"1f4f6": [['\uD83D\uDCF6'], '\uE20B', '\uDBBA\uDC38', ["signal_strength"], 22, 16, 15, 0],
			"1f4f7": [['\uD83D\uDCF7'], '\uE008', '\uDBB9\uDCEF', ["camera"], 22, 17, 15, 0],
			"1f4f8": [['\uD83D\uDCF8'], "", "", ["camera_with_flash"], 22, 18, 15, 0],
			"1f4f9": [['\uD83D\uDCF9'], '\uE03D', '\uDBB9\uDCF9', ["video_camera"], 22, 19, 15, 0],
			"1f4fa": [['\uD83D\uDCFA'], '\uE12A', '\uDBBA\uDC1C', ["tv"], 22, 20, 15, 0],
			"1f4fb": [['\uD83D\uDCFB'], '\uE128', '\uDBBA\uDC1F', ["radio"], 22, 21, 15, 0],
			"1f4fc": [['\uD83D\uDCFC'], '\uE129', '\uDBBA\uDC20', ["vhs"], 22, 22, 15, 0],
			"1f4fd": [['\uD83D\uDCFD'], "", "", ["film_projector"], 22, 23, 15, 0],
			"1f4ff": [['\uD83D\uDCFF'], "", "", ["prayer_beads"], 22, 24, 15, 0],
			"1f500": [['\uD83D\uDD00'], "", "", ["twisted_rightwards_arrows"], 22, 25, 15, 0],
			"1f501": [['\uD83D\uDD01'], "", "", ["repeat"], 22, 26, 15, 0],
			"1f502": [['\uD83D\uDD02'], "", "", ["repeat_one"], 22, 27, 15, 0],
			"1f503": [['\uD83D\uDD03'], "", '\uDBBA\uDF91', ["arrows_clockwise"], 22, 28, 15, 0],
			"1f504": [['\uD83D\uDD04'], "", "", ["arrows_counterclockwise"], 22, 29, 15, 0],
			"1f505": [['\uD83D\uDD05'], "", "", ["low_brightness"], 22, 30, 15, 0],
			"1f506": [['\uD83D\uDD06'], "", "", ["high_brightness"], 22, 31, 15, 0],
			"1f507": [['\uD83D\uDD07'], "", "", ["mute"], 22, 32, 15, 0],
			"1f508": [['\uD83D\uDD08'], "", "", ["speaker"], 22, 33, 15, 0],
			"1f509": [['\uD83D\uDD09'], "", "", ["sound"], 22, 34, 15, 0],
			"1f50a": [['\uD83D\uDD0A'], '\uE141', '\uDBBA\uDC21', ["loud_sound"], 22, 35, 15, 0],
			"1f50b": [['\uD83D\uDD0B'], "", '\uDBB9\uDCFC', ["battery"], 22, 36, 15, 0],
			"1f50c": [['\uD83D\uDD0C'], "", '\uDBB9\uDCFE', ["electric_plug"], 22, 37, 15, 0],
			"1f50d": [['\uD83D\uDD0D'], '\uE114', '\uDBBA\uDF85', ["mag"], 22, 38, 15, 0],
			"1f50e": [['\uD83D\uDD0E'], '\uE114', '\uDBBA\uDF8D', ["mag_right"], 22, 39, 15, 0],
			"1f50f": [['\uD83D\uDD0F'], '\uE144', '\uDBBA\uDF90', ["lock_with_ink_pen"], 22, 40, 15, 0],
			"1f510": [['\uD83D\uDD10'], '\uE144', '\uDBBA\uDF8A', ["closed_lock_with_key"], 23, 0, 15, 0],
			"1f511": [['\uD83D\uDD11'], '\uE03F', '\uDBBA\uDF82', ["key"], 23, 1, 15, 0],
			"1f512": [['\uD83D\uDD12'], '\uE144', '\uDBBA\uDF86', ["lock"], 23, 2, 15, 0],
			"1f513": [['\uD83D\uDD13'], '\uE145', '\uDBBA\uDF87', ["unlock"], 23, 3, 15, 0],
			"1f514": [['\uD83D\uDD14'], '\uE325', '\uDBB9\uDCF2', ["bell"], 23, 4, 15, 0],
			"1f515": [['\uD83D\uDD15'], "", "", ["no_bell"], 23, 5, 15, 0],
			"1f516": [['\uD83D\uDD16'], "", '\uDBBA\uDF8F', ["bookmark"], 23, 6, 15, 0],
			"1f517": [['\uD83D\uDD17'], "", '\uDBBA\uDF4B', ["link"], 23, 7, 15, 0],
			"1f518": [['\uD83D\uDD18'], "", '\uDBBA\uDF8C', ["radio_button"], 23, 8, 15, 0],
			"1f519": [['\uD83D\uDD19'], '\uE235', '\uDBBA\uDF8E', ["back"], 23, 9, 15, 0],
			"1f51a": [['\uD83D\uDD1A'], "", '\uDBB8\uDC1A', ["end"], 23, 10, 15, 0],
			"1f51b": [['\uD83D\uDD1B'], "", '\uDBB8\uDC19', ["on"], 23, 11, 15, 0],
			"1f51c": [['\uD83D\uDD1C'], "", '\uDBB8\uDC18', ["soon"], 23, 12, 15, 0],
			"1f51d": [['\uD83D\uDD1D'], '\uE24C', '\uDBBA\uDF42', ["top"], 23, 13, 15, 0],
			"1f51e": [['\uD83D\uDD1E'], '\uE207', '\uDBBA\uDF25', ["underage"], 23, 14, 15, 0],
			"1f51f": [['\uD83D\uDD1F'], "", '\uDBBA\uDC3B', ["keycap_ten"], 23, 15, 15, 0],
			"1f520": [['\uD83D\uDD20'], "", '\uDBBA\uDF7C', ["capital_abcd"], 23, 16, 15, 0],
			"1f521": [['\uD83D\uDD21'], "", '\uDBBA\uDF7D', ["abcd"], 23, 17, 15, 0],
			"1f522": [['\uD83D\uDD22'], "", '\uDBBA\uDF7E', ["1234"], 23, 18, 15, 0],
			"1f523": [['\uD83D\uDD23'], "", '\uDBBA\uDF7F', ["symbols"], 23, 19, 15, 0],
			"1f524": [['\uD83D\uDD24'], "", '\uDBBA\uDF80', ["abc"], 23, 20, 15, 0],
			"1f525": [['\uD83D\uDD25'], '\uE11D', '\uDBB9\uDCF6', ["fire"], 23, 21, 15, 0],
			"1f526": [['\uD83D\uDD26'], "", '\uDBB9\uDCFB', ["flashlight"], 23, 22, 15, 0],
			"1f527": [['\uD83D\uDD27'], "", '\uDBB9\uDCC9', ["wrench"], 23, 23, 15, 0],
			"1f528": [['\uD83D\uDD28'], '\uE116', '\uDBB9\uDCCA', ["hammer"], 23, 24, 15, 0],
			"1f529": [['\uD83D\uDD29'], "", '\uDBB9\uDCCB', ["nut_and_bolt"], 23, 25, 15, 0],
			"1f52a": [['\uD83D\uDD2A'], "", '\uDBB9\uDCFA', ["hocho", "knife"], 23, 26, 15, 0],
			"1f52b": [['\uD83D\uDD2B'], '\uE113', '\uDBB9\uDCF5', ["gun"], 23, 27, 15, 0],
			"1f52c": [['\uD83D\uDD2C'], "", "", ["microscope"], 23, 28, 15, 0],
			"1f52d": [['\uD83D\uDD2D'], "", "", ["telescope"], 23, 29, 15, 0],
			"1f52e": [['\uD83D\uDD2E'], '\uE23E', '\uDBB9\uDCF7', ["crystal_ball"], 23, 30, 15, 0],
			"1f52f": [['\uD83D\uDD2F'], '\uE23E', '\uDBB9\uDCF8', ["six_pointed_star"], 23, 31, 15, 0],
			"1f530": [['\uD83D\uDD30'], '\uE209', '\uDBB8\uDC44', ["beginner"], 23, 32, 15, 0],
			"1f531": [['\uD83D\uDD31'], '\uE031', '\uDBB9\uDCD2', ["trident"], 23, 33, 15, 0],
			"1f532": [['\uD83D\uDD32'], '\uE21A', '\uDBBA\uDF64', ["black_square_button"], 23, 34, 15, 0],
			"1f533": [['\uD83D\uDD33'], '\uE21B', '\uDBBA\uDF67', ["white_square_button"], 23, 35, 15, 0],
			"1f534": [['\uD83D\uDD34'], '\uE219', '\uDBBA\uDF63', ["red_circle"], 23, 36, 15, 0],
			"1f535": [['\uD83D\uDD35'], '\uE21A', '\uDBBA\uDF64', ["large_blue_circle"], 23, 37, 15, 0],
			"1f536": [['\uD83D\uDD36'], '\uE21B', '\uDBBA\uDF73', ["large_orange_diamond"], 23, 38, 15, 0],
			"1f537": [['\uD83D\uDD37'], '\uE21B', '\uDBBA\uDF74', ["large_blue_diamond"], 23, 39, 15, 0],
			"1f538": [['\uD83D\uDD38'], '\uE21B', '\uDBBA\uDF75', ["small_orange_diamond"], 23, 40, 15, 0],
			"1f539": [['\uD83D\uDD39'], '\uE21B', '\uDBBA\uDF76', ["small_blue_diamond"], 24, 0, 15, 0],
			"1f53a": [['\uD83D\uDD3A'], "", '\uDBBA\uDF78', ["small_red_triangle"], 24, 1, 15, 0],
			"1f53b": [['\uD83D\uDD3B'], "", '\uDBBA\uDF79', ["small_red_triangle_down"], 24, 2, 15, 0],
			"1f53c": [['\uD83D\uDD3C'], "", '\uDBBA\uDF01', ["arrow_up_small"], 24, 3, 15, 0],
			"1f53d": [['\uD83D\uDD3D'], "", '\uDBBA\uDF00', ["arrow_down_small"], 24, 4, 15, 0],
			"1f549": [['\uD83D\uDD49'], "", "", ["om_symbol"], 24, 5, 15, 0],
			"1f54a": [['\uD83D\uDD4A'], "", "", ["dove_of_peace"], 24, 6, 15, 0],
			"1f54b": [['\uD83D\uDD4B'], "", "", ["kaaba"], 24, 7, 15, 0],
			"1f54c": [['\uD83D\uDD4C'], "", "", ["mosque"], 24, 8, 15, 0],
			"1f54d": [['\uD83D\uDD4D'], "", "", ["synagogue"], 24, 9, 15, 0],
			"1f54e": [['\uD83D\uDD4E'], "", "", ["menorah_with_nine_branches"], 24, 10, 15, 0],
			"1f550": [['\uD83D\uDD50'], '\uE024', '\uDBB8\uDC1E', ["clock1"], 24, 11, 15, 0],
			"1f551": [['\uD83D\uDD51'], '\uE025', '\uDBB8\uDC1F', ["clock2"], 24, 12, 15, 0],
			"1f552": [['\uD83D\uDD52'], '\uE026', '\uDBB8\uDC20', ["clock3"], 24, 13, 15, 0],
			"1f553": [['\uD83D\uDD53'], '\uE027', '\uDBB8\uDC21', ["clock4"], 24, 14, 15, 0],
			"1f554": [['\uD83D\uDD54'], '\uE028', '\uDBB8\uDC22', ["clock5"], 24, 15, 15, 0],
			"1f555": [['\uD83D\uDD55'], '\uE029', '\uDBB8\uDC23', ["clock6"], 24, 16, 15, 0],
			"1f556": [['\uD83D\uDD56'], '\uE02A', '\uDBB8\uDC24', ["clock7"], 24, 17, 15, 0],
			"1f557": [['\uD83D\uDD57'], '\uE02B', '\uDBB8\uDC25', ["clock8"], 24, 18, 15, 0],
			"1f558": [['\uD83D\uDD58'], '\uE02C', '\uDBB8\uDC26', ["clock9"], 24, 19, 15, 0],
			"1f559": [['\uD83D\uDD59'], '\uE02D', '\uDBB8\uDC27', ["clock10"], 24, 20, 15, 0],
			"1f55a": [['\uD83D\uDD5A'], '\uE02E', '\uDBB8\uDC28', ["clock11"], 24, 21, 15, 0],
			"1f55b": [['\uD83D\uDD5B'], '\uE02F', '\uDBB8\uDC29', ["clock12"], 24, 22, 15, 0],
			"1f55c": [['\uD83D\uDD5C'], "", "", ["clock130"], 24, 23, 15, 0],
			"1f55d": [['\uD83D\uDD5D'], "", "", ["clock230"], 24, 24, 15, 0],
			"1f55e": [['\uD83D\uDD5E'], "", "", ["clock330"], 24, 25, 15, 0],
			"1f55f": [['\uD83D\uDD5F'], "", "", ["clock430"], 24, 26, 15, 0],
			"1f560": [['\uD83D\uDD60'], "", "", ["clock530"], 24, 27, 15, 0],
			"1f561": [['\uD83D\uDD61'], "", "", ["clock630"], 24, 28, 15, 0],
			"1f562": [['\uD83D\uDD62'], "", "", ["clock730"], 24, 29, 15, 0],
			"1f563": [['\uD83D\uDD63'], "", "", ["clock830"], 24, 30, 15, 0],
			"1f564": [['\uD83D\uDD64'], "", "", ["clock930"], 24, 31, 15, 0],
			"1f565": [['\uD83D\uDD65'], "", "", ["clock1030"], 24, 32, 15, 0],
			"1f566": [['\uD83D\uDD66'], "", "", ["clock1130"], 24, 33, 15, 0],
			"1f567": [['\uD83D\uDD67'], "", "", ["clock1230"], 24, 34, 15, 0],
			"1f56f": [['\uD83D\uDD6F'], "", "", ["candle"], 24, 35, 15, 0],
			"1f570": [['\uD83D\uDD70'], "", "", ["mantelpiece_clock"], 24, 36, 15, 0],
			"1f573": [['\uD83D\uDD73'], "", "", ["hole"], 24, 37, 15, 0],
			"1f574": [['\uD83D\uDD74'], "", "", ["man_in_business_suit_levitating"], 24, 38, 15, 0],
			"1f575": [['\uD83D\uDD75'], "", "", ["sleuth_or_spy"], 24, 39, 15, 0],
			"1f576": [['\uD83D\uDD76'], "", "", ["dark_sunglasses"], 25, 4, 15, 0],
			"1f577": [['\uD83D\uDD77'], "", "", ["spider"], 25, 5, 15, 0],
			"1f578": [['\uD83D\uDD78'], "", "", ["spider_web"], 25, 6, 15, 0],
			"1f579": [['\uD83D\uDD79'], "", "", ["joystick"], 25, 7, 15, 0],
			"1f587": [['\uD83D\uDD87'], "", "", ["linked_paperclips"], 25, 8, 15, 0],
			"1f58a": [['\uD83D\uDD8A'], "", "", ["lower_left_ballpoint_pen"], 25, 9, 15, 0],
			"1f58b": [['\uD83D\uDD8B'], "", "", ["lower_left_fountain_pen"], 25, 10, 15, 0],
			"1f58c": [['\uD83D\uDD8C'], "", "", ["lower_left_paintbrush"], 25, 11, 15, 0],
			"1f58d": [['\uD83D\uDD8D'], "", "", ["lower_left_crayon"], 25, 12, 15, 0],
			"1f590": [['\uD83D\uDD90'], "", "", ["raised_hand_with_fingers_splayed"], 25, 13, 15, 0],
			"1f595": [['\uD83D\uDD95'], "", "", ["middle_finger", "reversed_hand_with_middle_finger_extended"], 25, 19, 15, 0],
			"1f596": [['\uD83D\uDD96'], "", "", ["spock-hand"], 25, 25, 15, 0],
			"1f5a5": [['\uD83D\uDDA5'], "", "", ["desktop_computer"], 25, 31, 15, 0],
			"1f5a8": [['\uD83D\uDDA8'], "", "", ["printer"], 25, 32, 15, 0],
			"1f5b1": [['\uD83D\uDDB1'], "", "", ["three_button_mouse"], 25, 33, 15, 0],
			"1f5b2": [['\uD83D\uDDB2'], "", "", ["trackball"], 25, 34, 15, 0],
			"1f5bc": [['\uD83D\uDDBC'], "", "", ["frame_with_picture"], 25, 35, 15, 0],
			"1f5c2": [['\uD83D\uDDC2'], "", "", ["card_index_dividers"], 25, 36, 15, 0],
			"1f5c3": [['\uD83D\uDDC3'], "", "", ["card_file_box"], 25, 37, 15, 0],
			"1f5c4": [['\uD83D\uDDC4'], "", "", ["file_cabinet"], 25, 38, 15, 0],
			"1f5d1": [['\uD83D\uDDD1'], "", "", ["wastebasket"], 25, 39, 15, 0],
			"1f5d2": [['\uD83D\uDDD2'], "", "", ["spiral_note_pad"], 25, 40, 15, 0],
			"1f5d3": [['\uD83D\uDDD3'], "", "", ["spiral_calendar_pad"], 26, 0, 15, 0],
			"1f5dc": [['\uD83D\uDDDC'], "", "", ["compression"], 26, 1, 15, 0],
			"1f5dd": [['\uD83D\uDDDD'], "", "", ["old_key"], 26, 2, 15, 0],
			"1f5de": [['\uD83D\uDDDE'], "", "", ["rolled_up_newspaper"], 26, 3, 15, 0],
			"1f5e1": [['\uD83D\uDDE1'], "", "", ["dagger_knife"], 26, 4, 15, 0],
			"1f5e3": [['\uD83D\uDDE3'], "", "", ["speaking_head_in_silhouette"], 26, 5, 15, 0],
			"1f5e8": [['\uD83D\uDDE8'], "", "", ["left_speech_bubble"], 26, 6, 7, 0],
			"1f5ef": [['\uD83D\uDDEF'], "", "", ["right_anger_bubble"], 26, 7, 15, 0],
			"1f5f3": [['\uD83D\uDDF3'], "", "", ["ballot_box_with_ballot"], 26, 8, 15, 0],
			"1f5fa": [['\uD83D\uDDFA'], "", "", ["world_map"], 26, 9, 15, 0],
			"1f5fb": [['\uD83D\uDDFB'], '\uE03B', '\uDBB9\uDCC3', ["mount_fuji"], 26, 10, 15, 0],
			"1f5fc": [['\uD83D\uDDFC'], '\uE509', '\uDBB9\uDCC4', ["tokyo_tower"], 26, 11, 15, 0],
			"1f5fd": [['\uD83D\uDDFD'], '\uE51D', '\uDBB9\uDCC6', ["statue_of_liberty"], 26, 12, 15, 0],
			"1f5fe": [['\uD83D\uDDFE'], "", '\uDBB9\uDCC7', ["japan"], 26, 13, 15, 0],
			"1f5ff": [['\uD83D\uDDFF'], "", '\uDBB9\uDCC8', ["moyai"], 26, 14, 15, 0],
			"1f600": [['\uD83D\uDE00'], "", "", ["grinning"], 26, 15, 15, 0, ":D"],
			"1f601": [['\uD83D\uDE01'], '\uE404', '\uDBB8\uDF33', ["grin"], 26, 16, 15, 0],
			"1f602": [['\uD83D\uDE02'], '\uE412', '\uDBB8\uDF34', ["joy"], 26, 17, 15, 0],
			"1f603": [['\uD83D\uDE03'], '\uE057', '\uDBB8\uDF30', ["smiley"], 26, 18, 15, 0, ":)"],
			"1f604": [['\uD83D\uDE04'], '\uE415', '\uDBB8\uDF38', ["smile"], 26, 19, 15, 0, ":)"],
			"1f605": [['\uD83D\uDE05'], '\uE415\uE331', '\uDBB8\uDF31', ["sweat_smile"], 26, 20, 15, 0],
			"1f606": [['\uD83D\uDE06'], '\uE40A', '\uDBB8\uDF32', ["laughing", "satisfied"], 26, 21, 15, 0],
			"1f607": [['\uD83D\uDE07'], "", "", ["innocent"], 26, 22, 15, 0],
			"1f608": [['\uD83D\uDE08'], "", "", ["smiling_imp"], 26, 23, 15, 0],
			"1f609": [['\uD83D\uDE09'], '\uE405', '\uDBB8\uDF47', ["wink"], 26, 24, 15, 0, ";)"],
			"1f60a": [['\uD83D\uDE0A'], '\uE056', '\uDBB8\uDF35', ["blush"], 26, 25, 15, 0, ":)"],
			"1f60b": [['\uD83D\uDE0B'], '\uE056', '\uDBB8\uDF2B', ["yum"], 26, 26, 15, 0],
			"1f60c": [['\uD83D\uDE0C'], '\uE40A', '\uDBB8\uDF3E', ["relieved"], 26, 27, 15, 0],
			"1f60d": [['\uD83D\uDE0D'], '\uE106', '\uDBB8\uDF27', ["heart_eyes"], 26, 28, 15, 0],
			"1f60e": [['\uD83D\uDE0E'], "", "", ["sunglasses"], 26, 29, 15, 0],
			"1f60f": [['\uD83D\uDE0F'], '\uE402', '\uDBB8\uDF43', ["smirk"], 26, 30, 15, 0],
			"1f610": [['\uD83D\uDE10'], "", "", ["neutral_face"], 26, 31, 15, 0],
			"1f611": [['\uD83D\uDE11'], "", "", ["expressionless"], 26, 32, 15, 0],
			"1f612": [['\uD83D\uDE12'], '\uE40E', '\uDBB8\uDF26', ["unamused"], 26, 33, 15, 0, ":("],
			"1f613": [['\uD83D\uDE13'], '\uE108', '\uDBB8\uDF44', ["sweat"], 26, 34, 15, 0],
			"1f614": [['\uD83D\uDE14'], '\uE403', '\uDBB8\uDF40', ["pensive"], 26, 35, 15, 0],
			"1f615": [['\uD83D\uDE15'], "", "", ["confused"], 26, 36, 15, 0],
			"1f616": [['\uD83D\uDE16'], '\uE407', '\uDBB8\uDF3F', ["confounded"], 26, 37, 15, 0],
			"1f617": [['\uD83D\uDE17'], "", "", ["kissing"], 26, 38, 15, 0],
			"1f618": [['\uD83D\uDE18'], '\uE418', '\uDBB8\uDF2C', ["kissing_heart"], 26, 39, 15, 0],
			"1f619": [['\uD83D\uDE19'], "", "", ["kissing_smiling_eyes"], 26, 40, 15, 0],
			"1f61a": [['\uD83D\uDE1A'], '\uE417', '\uDBB8\uDF2D', ["kissing_closed_eyes"], 27, 0, 15, 0],
			"1f61b": [['\uD83D\uDE1B'], "", "", ["stuck_out_tongue"], 27, 1, 15, 0, ":p"],
			"1f61c": [['\uD83D\uDE1C'], '\uE105', '\uDBB8\uDF29', ["stuck_out_tongue_winking_eye"], 27, 2, 15, 0, ";p"],
			"1f61d": [['\uD83D\uDE1D'], '\uE409', '\uDBB8\uDF2A', ["stuck_out_tongue_closed_eyes"], 27, 3, 15, 0],
			"1f61e": [['\uD83D\uDE1E'], '\uE058', '\uDBB8\uDF23', ["disappointed"], 27, 4, 15, 0, ":("],
			"1f61f": [['\uD83D\uDE1F'], "", "", ["worried"], 27, 5, 15, 0],
			"1f620": [['\uD83D\uDE20'], '\uE059', '\uDBB8\uDF20', ["angry"], 27, 6, 15, 0],
			"1f621": [['\uD83D\uDE21'], '\uE416', '\uDBB8\uDF3D', ["rage"], 27, 7, 15, 0],
			"1f622": [['\uD83D\uDE22'], '\uE413', '\uDBB8\uDF39', ["cry"], 27, 8, 15, 0, ":'("],
			"1f623": [['\uD83D\uDE23'], '\uE406', '\uDBB8\uDF3C', ["persevere"], 27, 9, 15, 0],
			"1f624": [['\uD83D\uDE24'], '\uE404', '\uDBB8\uDF28', ["triumph"], 27, 10, 15, 0],
			"1f625": [['\uD83D\uDE25'], '\uE401', '\uDBB8\uDF45', ["disappointed_relieved"], 27, 11, 15, 0],
			"1f626": [['\uD83D\uDE26'], "", "", ["frowning"], 27, 12, 15, 0],
			"1f627": [['\uD83D\uDE27'], "", "", ["anguished"], 27, 13, 15, 0],
			"1f628": [['\uD83D\uDE28'], '\uE40B', '\uDBB8\uDF3B', ["fearful"], 27, 14, 15, 0],
			"1f629": [['\uD83D\uDE29'], '\uE403', '\uDBB8\uDF21', ["weary"], 27, 15, 15, 0],
			"1f62a": [['\uD83D\uDE2A'], '\uE408', '\uDBB8\uDF42', ["sleepy"], 27, 16, 15, 0],
			"1f62b": [['\uD83D\uDE2B'], '\uE406', '\uDBB8\uDF46', ["tired_face"], 27, 17, 15, 0],
			"1f62c": [['\uD83D\uDE2C'], "", "", ["grimacing"], 27, 18, 15, 0],
			"1f62d": [['\uD83D\uDE2D'], '\uE411', '\uDBB8\uDF3A', ["sob"], 27, 19, 15, 0, ":'("],
			"1f62e": [['\uD83D\uDE2E'], "", "", ["open_mouth"], 27, 20, 15, 0],
			"1f62f": [['\uD83D\uDE2F'], "", "", ["hushed"], 27, 21, 15, 0],
			"1f630": [['\uD83D\uDE30'], '\uE40F', '\uDBB8\uDF25', ["cold_sweat"], 27, 22, 15, 0],
			"1f631": [['\uD83D\uDE31'], '\uE107', '\uDBB8\uDF41', ["scream"], 27, 23, 15, 0],
			"1f632": [['\uD83D\uDE32'], '\uE410', '\uDBB8\uDF22', ["astonished"], 27, 24, 15, 0],
			"1f633": [['\uD83D\uDE33'], '\uE40D', '\uDBB8\uDF2F', ["flushed"], 27, 25, 15, 0],
			"1f634": [['\uD83D\uDE34'], "", "", ["sleeping"], 27, 26, 15, 0],
			"1f635": [['\uD83D\uDE35'], '\uE406', '\uDBB8\uDF24', ["dizzy_face"], 27, 27, 15, 0],
			"1f636": [['\uD83D\uDE36'], "", "", ["no_mouth"], 27, 28, 15, 0],
			"1f637": [['\uD83D\uDE37'], '\uE40C', '\uDBB8\uDF2E', ["mask"], 27, 29, 15, 0],
			"1f638": [['\uD83D\uDE38'], '\uE404', '\uDBB8\uDF49', ["smile_cat"], 27, 30, 15, 0],
			"1f639": [['\uD83D\uDE39'], '\uE412', '\uDBB8\uDF4A', ["joy_cat"], 27, 31, 15, 0],
			"1f63a": [['\uD83D\uDE3A'], '\uE057', '\uDBB8\uDF48', ["smiley_cat"], 27, 32, 15, 0],
			"1f63b": [['\uD83D\uDE3B'], '\uE106', '\uDBB8\uDF4C', ["heart_eyes_cat"], 27, 33, 15, 0],
			"1f63c": [['\uD83D\uDE3C'], '\uE404', '\uDBB8\uDF4F', ["smirk_cat"], 27, 34, 15, 0],
			"1f63d": [['\uD83D\uDE3D'], '\uE418', '\uDBB8\uDF4B', ["kissing_cat"], 27, 35, 15, 0],
			"1f63e": [['\uD83D\uDE3E'], '\uE416', '\uDBB8\uDF4E', ["pouting_cat"], 27, 36, 15, 0],
			"1f63f": [['\uD83D\uDE3F'], '\uE413', '\uDBB8\uDF4D', ["crying_cat_face"], 27, 37, 15, 0],
			"1f640": [['\uD83D\uDE40'], '\uE403', '\uDBB8\uDF50', ["scream_cat"], 27, 38, 15, 0],
			"1f641": [['\uD83D\uDE41'], "", "", ["slightly_frowning_face"], 27, 39, 15, 0],
			"1f642": [['\uD83D\uDE42'], "", "", ["slightly_smiling_face"], 27, 40, 15, 0],
			"1f643": [['\uD83D\uDE43'], "", "", ["upside_down_face"], 28, 0, 15, 0],
			"1f644": [['\uD83D\uDE44'], "", "", ["face_with_rolling_eyes"], 28, 1, 15, 0],
			"1f645": [['\uD83D\uDE45'], '\uE423', '\uDBB8\uDF51', ["no_good"], 28, 2, 15, 0],
			"1f646": [['\uD83D\uDE46'], '\uE424', '\uDBB8\uDF52', ["ok_woman"], 28, 8, 15, 0],
			"1f647": [['\uD83D\uDE47'], '\uE426', '\uDBB8\uDF53', ["bow"], 28, 14, 15, 0],
			"1f648": [['\uD83D\uDE48'], "", '\uDBB8\uDF54', ["see_no_evil"], 28, 20, 15, 0],
			"1f649": [['\uD83D\uDE49'], "", '\uDBB8\uDF56', ["hear_no_evil"], 28, 21, 15, 0],
			"1f64a": [['\uD83D\uDE4A'], "", '\uDBB8\uDF55', ["speak_no_evil"], 28, 22, 15, 0],
			"1f64b": [['\uD83D\uDE4B'], '\uE012', '\uDBB8\uDF57', ["raising_hand"], 28, 23, 15, 0],
			"1f64c": [['\uD83D\uDE4C'], '\uE427', '\uDBB8\uDF58', ["raised_hands"], 28, 29, 15, 0],
			"1f64d": [['\uD83D\uDE4D'], '\uE403', '\uDBB8\uDF59', ["person_frowning"], 28, 35, 15, 0],
			"1f64e": [['\uD83D\uDE4E'], '\uE416', '\uDBB8\uDF5A', ["person_with_pouting_face"], 29, 0, 15, 0],
			"1f64f": [['\uD83D\uDE4F'], '\uE41D', '\uDBB8\uDF5B', ["pray"], 29, 6, 15, 0],
			"1f680": [['\uD83D\uDE80'], '\uE10D', '\uDBB9\uDFED', ["rocket"], 29, 12, 15, 0],
			"1f681": [['\uD83D\uDE81'], "", "", ["helicopter"], 29, 13, 15, 0],
			"1f682": [['\uD83D\uDE82'], "", "", ["steam_locomotive"], 29, 14, 15, 0],
			"1f683": [['\uD83D\uDE83'], '\uE01E', '\uDBB9\uDFDF', ["railway_car"], 29, 15, 15, 0],
			"1f684": [['\uD83D\uDE84'], '\uE435', '\uDBB9\uDFE2', ["bullettrain_side"], 29, 16, 15, 0],
			"1f685": [['\uD83D\uDE85'], '\uE01F', '\uDBB9\uDFE3', ["bullettrain_front"], 29, 17, 15, 0],
			"1f686": [['\uD83D\uDE86'], "", "", ["train2"], 29, 18, 15, 0],
			"1f687": [['\uD83D\uDE87'], '\uE434', '\uDBB9\uDFE0', ["metro"], 29, 19, 15, 0],
			"1f688": [['\uD83D\uDE88'], "", "", ["light_rail"], 29, 20, 15, 0],
			"1f689": [['\uD83D\uDE89'], '\uE039', '\uDBB9\uDFEC', ["station"], 29, 21, 15, 0],
			"1f68a": [['\uD83D\uDE8A'], "", "", ["tram"], 29, 22, 15, 0],
			"1f68b": [['\uD83D\uDE8B'], "", "", ["train"], 29, 23, 15, 0],
			"1f68c": [['\uD83D\uDE8C'], '\uE159', '\uDBB9\uDFE6', ["bus"], 29, 24, 15, 0],
			"1f68d": [['\uD83D\uDE8D'], "", "", ["oncoming_bus"], 29, 25, 15, 0],
			"1f68e": [['\uD83D\uDE8E'], "", "", ["trolleybus"], 29, 26, 15, 0],
			"1f68f": [['\uD83D\uDE8F'], '\uE150', '\uDBB9\uDFE7', ["busstop"], 29, 27, 15, 0],
			"1f690": [['\uD83D\uDE90'], "", "", ["minibus"], 29, 28, 15, 0],
			"1f691": [['\uD83D\uDE91'], '\uE431', '\uDBB9\uDFF3', ["ambulance"], 29, 29, 15, 0],
			"1f692": [['\uD83D\uDE92'], '\uE430', '\uDBB9\uDFF2', ["fire_engine"], 29, 30, 15, 0],
			"1f693": [['\uD83D\uDE93'], '\uE432', '\uDBB9\uDFF4', ["police_car"], 29, 31, 15, 0],
			"1f694": [['\uD83D\uDE94'], "", "", ["oncoming_police_car"], 29, 32, 15, 0],
			"1f695": [['\uD83D\uDE95'], '\uE15A', '\uDBB9\uDFEF', ["taxi"], 29, 33, 15, 0],
			"1f696": [['\uD83D\uDE96'], "", "", ["oncoming_taxi"], 29, 34, 15, 0],
			"1f697": [['\uD83D\uDE97'], '\uE01B', '\uDBB9\uDFE4', ["car", "red_car"], 29, 35, 15, 0],
			"1f698": [['\uD83D\uDE98'], "", "", ["oncoming_automobile"], 29, 36, 15, 0],
			"1f699": [['\uD83D\uDE99'], '\uE42E', '\uDBB9\uDFE5', ["blue_car"], 29, 37, 15, 0],
			"1f69a": [['\uD83D\uDE9A'], '\uE42F', '\uDBB9\uDFF1', ["truck"], 29, 38, 15, 0],
			"1f69b": [['\uD83D\uDE9B'], "", "", ["articulated_lorry"], 29, 39, 15, 0],
			"1f69c": [['\uD83D\uDE9C'], "", "", ["tractor"], 29, 40, 15, 0],
			"1f69d": [['\uD83D\uDE9D'], "", "", ["monorail"], 30, 0, 15, 0],
			"1f69e": [['\uD83D\uDE9E'], "", "", ["mountain_railway"], 30, 1, 15, 0],
			"1f69f": [['\uD83D\uDE9F'], "", "", ["suspension_railway"], 30, 2, 15, 0],
			"1f6a0": [['\uD83D\uDEA0'], "", "", ["mountain_cableway"], 30, 3, 15, 0],
			"1f6a1": [['\uD83D\uDEA1'], "", "", ["aerial_tramway"], 30, 4, 15, 0],
			"1f6a2": [['\uD83D\uDEA2'], '\uE202', '\uDBB9\uDFE8', ["ship"], 30, 5, 15, 0],
			"1f6a3": [['\uD83D\uDEA3'], "", "", ["rowboat"], 30, 6, 15, 0],
			"1f6a4": [['\uD83D\uDEA4'], '\uE135', '\uDBB9\uDFEE', ["speedboat"], 30, 12, 15, 0],
			"1f6a5": [['\uD83D\uDEA5'], '\uE14E', '\uDBB9\uDFF7', ["traffic_light"], 30, 13, 15, 0],
			"1f6a6": [['\uD83D\uDEA6'], "", "", ["vertical_traffic_light"], 30, 14, 15, 0],
			"1f6a7": [['\uD83D\uDEA7'], '\uE137', '\uDBB9\uDFF8', ["construction"], 30, 15, 15, 0],
			"1f6a8": [['\uD83D\uDEA8'], '\uE432', '\uDBB9\uDFF9', ["rotating_light"], 30, 16, 15, 0],
			"1f6a9": [['\uD83D\uDEA9'], "", '\uDBBA\uDF22', ["triangular_flag_on_post"], 30, 17, 15, 0],
			"1f6aa": [['\uD83D\uDEAA'], "", '\uDBB9\uDCF3', ["door"], 30, 18, 15, 0],
			"1f6ab": [['\uD83D\uDEAB'], "", '\uDBBA\uDF48', ["no_entry_sign"], 30, 19, 15, 0],
			"1f6ac": [['\uD83D\uDEAC'], '\uE30E', '\uDBBA\uDF1E', ["smoking"], 30, 20, 15, 0],
			"1f6ad": [['\uD83D\uDEAD'], '\uE208', '\uDBBA\uDF1F', ["no_smoking"], 30, 21, 15, 0],
			"1f6ae": [['\uD83D\uDEAE'], "", "", ["put_litter_in_its_place"], 30, 22, 15, 0],
			"1f6af": [['\uD83D\uDEAF'], "", "", ["do_not_litter"], 30, 23, 15, 0],
			"1f6b0": [['\uD83D\uDEB0'], "", "", ["potable_water"], 30, 24, 15, 0],
			"1f6b1": [['\uD83D\uDEB1'], "", "", ["non-potable_water"], 30, 25, 15, 0],
			"1f6b2": [['\uD83D\uDEB2'], '\uE136', '\uDBB9\uDFEB', ["bike"], 30, 26, 15, 0],
			"1f6b3": [['\uD83D\uDEB3'], "", "", ["no_bicycles"], 30, 27, 15, 0],
			"1f6b4": [['\uD83D\uDEB4'], "", "", ["bicyclist"], 30, 28, 15, 0],
			"1f6b5": [['\uD83D\uDEB5'], "", "", ["mountain_bicyclist"], 30, 34, 15, 0],
			"1f6b6": [['\uD83D\uDEB6'], '\uE201', '\uDBB9\uDFF0', ["walking"], 30, 40, 15, 0],
			"1f6b7": [['\uD83D\uDEB7'], "", "", ["no_pedestrians"], 31, 5, 15, 0],
			"1f6b8": [['\uD83D\uDEB8'], "", "", ["children_crossing"], 31, 6, 15, 0],
			"1f6b9": [['\uD83D\uDEB9'], '\uE138', '\uDBBA\uDF33', ["mens"], 31, 7, 15, 0],
			"1f6ba": [['\uD83D\uDEBA'], '\uE139', '\uDBBA\uDF34', ["womens"], 31, 8, 15, 0],
			"1f6bb": [['\uD83D\uDEBB'], '\uE151', '\uDBB9\uDD06', ["restroom"], 31, 9, 15, 0],
			"1f6bc": [['\uD83D\uDEBC'], '\uE13A', '\uDBBA\uDF35', ["baby_symbol"], 31, 10, 15, 0],
			"1f6bd": [['\uD83D\uDEBD'], '\uE140', '\uDBB9\uDD07', ["toilet"], 31, 11, 15, 0],
			"1f6be": [['\uD83D\uDEBE'], '\uE309', '\uDBB9\uDD08', ["wc"], 31, 12, 15, 0],
			"1f6bf": [['\uD83D\uDEBF'], "", "", ["shower"], 31, 13, 15, 0],
			"1f6c0": [['\uD83D\uDEC0'], '\uE13F', '\uDBB9\uDD05', ["bath"], 31, 14, 15, 0],
			"1f6c1": [['\uD83D\uDEC1'], "", "", ["bathtub"], 31, 20, 15, 0],
			"1f6c2": [['\uD83D\uDEC2'], "", "", ["passport_control"], 31, 21, 15, 0],
			"1f6c3": [['\uD83D\uDEC3'], "", "", ["customs"], 31, 22, 15, 0],
			"1f6c4": [['\uD83D\uDEC4'], "", "", ["baggage_claim"], 31, 23, 15, 0],
			"1f6c5": [['\uD83D\uDEC5'], "", "", ["left_luggage"], 31, 24, 15, 0],
			"1f6cb": [['\uD83D\uDECB'], "", "", ["couch_and_lamp"], 31, 25, 15, 0],
			"1f6cc": [['\uD83D\uDECC'], "", "", ["sleeping_accommodation"], 31, 26, 15, 0],
			"1f6cd": [['\uD83D\uDECD'], "", "", ["shopping_bags"], 31, 27, 15, 0],
			"1f6ce": [['\uD83D\uDECE'], "", "", ["bellhop_bell"], 31, 28, 15, 0],
			"1f6cf": [['\uD83D\uDECF'], "", "", ["bed"], 31, 29, 15, 0],
			"1f6d0": [['\uD83D\uDED0'], "", "", ["place_of_worship"], 31, 30, 15, 0],
			"1f6e0": [['\uD83D\uDEE0'], "", "", ["hammer_and_wrench"], 31, 31, 15, 0],
			"1f6e1": [['\uD83D\uDEE1'], "", "", ["shield"], 31, 32, 15, 0],
			"1f6e2": [['\uD83D\uDEE2'], "", "", ["oil_drum"], 31, 33, 15, 0],
			"1f6e3": [['\uD83D\uDEE3'], "", "", ["motorway"], 31, 34, 15, 0],
			"1f6e4": [['\uD83D\uDEE4'], "", "", ["railway_track"], 31, 35, 15, 0],
			"1f6e5": [['\uD83D\uDEE5'], "", "", ["motor_boat"], 31, 36, 15, 0],
			"1f6e9": [['\uD83D\uDEE9'], "", "", ["small_airplane"], 31, 37, 15, 0],
			"1f6eb": [['\uD83D\uDEEB'], "", "", ["airplane_departure"], 31, 38, 15, 0],
			"1f6ec": [['\uD83D\uDEEC'], "", "", ["airplane_arriving"], 31, 39, 15, 0],
			"1f6f0": [['\uD83D\uDEF0'], "", "", ["satellite"], 31, 40, 15, 0],
			"1f6f3": [['\uD83D\uDEF3'], "", "", ["passenger_ship"], 32, 0, 15, 0],
			"1f910": [['\uD83E\uDD10'], "", "", ["zipper_mouth_face"], 32, 1, 15, 0],
			"1f911": [['\uD83E\uDD11'], "", "", ["money_mouth_face"], 32, 2, 15, 0],
			"1f912": [['\uD83E\uDD12'], "", "", ["face_with_thermometer"], 32, 3, 15, 0],
			"1f913": [['\uD83E\uDD13'], "", "", ["nerd_face"], 32, 4, 15, 0],
			"1f914": [['\uD83E\uDD14'], "", "", ["thinking_face"], 32, 5, 15, 0],
			"1f915": [['\uD83E\uDD15'], "", "", ["face_with_head_bandage"], 32, 6, 15, 0],
			"1f916": [['\uD83E\uDD16'], "", "", ["robot_face"], 32, 7, 15, 0],
			"1f917": [['\uD83E\uDD17'], "", "", ["hugging_face"], 32, 8, 15, 0],
			"1f918": [['\uD83E\uDD18'], "", "", ["the_horns", "sign_of_the_horns"], 32, 9, 15, 0],
			"1f980": [['\uD83E\uDD80'], "", "", ["crab"], 32, 15, 15, 0],
			"1f981": [['\uD83E\uDD81'], "", "", ["lion_face"], 32, 16, 15, 0],
			"1f982": [['\uD83E\uDD82'], "", "", ["scorpion"], 32, 17, 15, 0],
			"1f983": [['\uD83E\uDD83'], "", "", ["turkey"], 32, 18, 15, 0],
			"1f984": [['\uD83E\uDD84'], "", "", ["unicorn_face"], 32, 19, 15, 0],
			"1f9c0": [['\uD83E\uDDC0'], "", "", ["cheese_wedge"], 32, 20, 15, 0],
			"0023-20e3": [['#\uFE0F\u20E3', '#\u20E3'], '\uE210', '\uDBBA\uDC2C', ["hash"], 32, 21, 15, 0],
			"002a-20e3": [['*\u20E3'], "", "", ["keycap_star"], 32, 22, 15, 0],
			"0030-20e3": [['0\uFE0F\u20E3', '0\u20E3'], '\uE225', '\uDBBA\uDC37', ["zero"], 32, 23, 15, 0],
			"0031-20e3": [['1\uFE0F\u20E3', '1\u20E3'], '\uE21C', '\uDBBA\uDC2E', ["one"], 32, 24, 15, 0],
			"0032-20e3": [['2\uFE0F\u20E3', '2\u20E3'], '\uE21D', '\uDBBA\uDC2F', ["two"], 32, 25, 15, 0],
			"0033-20e3": [['3\uFE0F\u20E3', '3\u20E3'], '\uE21E', '\uDBBA\uDC30', ["three"], 32, 26, 15, 0],
			"0034-20e3": [['4\uFE0F\u20E3', '4\u20E3'], '\uE21F', '\uDBBA\uDC31', ["four"], 32, 27, 15, 0],
			"0035-20e3": [['5\uFE0F\u20E3', '5\u20E3'], '\uE220', '\uDBBA\uDC32', ["five"], 32, 28, 15, 0],
			"0036-20e3": [['6\uFE0F\u20E3', '6\u20E3'], '\uE221', '\uDBBA\uDC33', ["six"], 32, 29, 15, 0],
			"0037-20e3": [['7\uFE0F\u20E3', '7\u20E3'], '\uE222', '\uDBBA\uDC34', ["seven"], 32, 30, 15, 0],
			"0038-20e3": [['8\uFE0F\u20E3', '8\u20E3'], '\uE223', '\uDBBA\uDC35', ["eight"], 32, 31, 15, 0],
			"0039-20e3": [['9\uFE0F\u20E3', '9\u20E3'], '\uE224', '\uDBBA\uDC36', ["nine"], 32, 32, 15, 0],
			"1f1e6-1f1e8": [['\uD83C\uDDE6\uD83C\uDDE8'], "", "", ["flag-ac"], 32, 33, 15, 0],
			"1f1e6-1f1e9": [['\uD83C\uDDE6\uD83C\uDDE9'], "", "", ["flag-ad"], 32, 34, 15, 0],
			"1f1e6-1f1ea": [['\uD83C\uDDE6\uD83C\uDDEA'], "", "", ["flag-ae"], 32, 35, 15, 0],
			"1f1e6-1f1eb": [['\uD83C\uDDE6\uD83C\uDDEB'], "", "", ["flag-af"], 32, 36, 15, 0],
			"1f1e6-1f1ec": [['\uD83C\uDDE6\uD83C\uDDEC'], "", "", ["flag-ag"], 32, 37, 15, 0],
			"1f1e6-1f1ee": [['\uD83C\uDDE6\uD83C\uDDEE'], "", "", ["flag-ai"], 32, 38, 15, 0],
			"1f1e6-1f1f1": [['\uD83C\uDDE6\uD83C\uDDF1'], "", "", ["flag-al"], 32, 39, 15, 0],
			"1f1e6-1f1f2": [['\uD83C\uDDE6\uD83C\uDDF2'], "", "", ["flag-am"], 32, 40, 15, 0],
			"1f1e6-1f1f4": [['\uD83C\uDDE6\uD83C\uDDF4'], "", "", ["flag-ao"], 33, 0, 15, 0],
			"1f1e6-1f1f6": [['\uD83C\uDDE6\uD83C\uDDF6'], "", "", ["flag-aq"], 33, 1, 15, 0],
			"1f1e6-1f1f7": [['\uD83C\uDDE6\uD83C\uDDF7'], "", "", ["flag-ar"], 33, 2, 15, 0],
			"1f1e6-1f1f8": [['\uD83C\uDDE6\uD83C\uDDF8'], "", "", ["flag-as"], 33, 3, 15, 0],
			"1f1e6-1f1f9": [['\uD83C\uDDE6\uD83C\uDDF9'], "", "", ["flag-at"], 33, 4, 15, 0],
			"1f1e6-1f1fa": [['\uD83C\uDDE6\uD83C\uDDFA'], "", "", ["flag-au"], 33, 5, 15, 0],
			"1f1e6-1f1fc": [['\uD83C\uDDE6\uD83C\uDDFC'], "", "", ["flag-aw"], 33, 6, 15, 0],
			"1f1e6-1f1fd": [['\uD83C\uDDE6\uD83C\uDDFD'], "", "", ["flag-ax"], 33, 7, 15, 0],
			"1f1e6-1f1ff": [['\uD83C\uDDE6\uD83C\uDDFF'], "", "", ["flag-az"], 33, 8, 15, 0],
			"1f1e7-1f1e6": [['\uD83C\uDDE7\uD83C\uDDE6'], "", "", ["flag-ba"], 33, 9, 15, 0],
			"1f1e7-1f1e7": [['\uD83C\uDDE7\uD83C\uDDE7'], "", "", ["flag-bb"], 33, 10, 15, 0],
			"1f1e7-1f1e9": [['\uD83C\uDDE7\uD83C\uDDE9'], "", "", ["flag-bd"], 33, 11, 15, 0],
			"1f1e7-1f1ea": [['\uD83C\uDDE7\uD83C\uDDEA'], "", "", ["flag-be"], 33, 12, 15, 0],
			"1f1e7-1f1eb": [['\uD83C\uDDE7\uD83C\uDDEB'], "", "", ["flag-bf"], 33, 13, 15, 0],
			"1f1e7-1f1ec": [['\uD83C\uDDE7\uD83C\uDDEC'], "", "", ["flag-bg"], 33, 14, 15, 0],
			"1f1e7-1f1ed": [['\uD83C\uDDE7\uD83C\uDDED'], "", "", ["flag-bh"], 33, 15, 15, 0],
			"1f1e7-1f1ee": [['\uD83C\uDDE7\uD83C\uDDEE'], "", "", ["flag-bi"], 33, 16, 15, 0],
			"1f1e7-1f1ef": [['\uD83C\uDDE7\uD83C\uDDEF'], "", "", ["flag-bj"], 33, 17, 15, 0],
			"1f1e7-1f1f1": [['\uD83C\uDDE7\uD83C\uDDF1'], "", "", ["flag-bl"], 33, 18, 13, 0],
			"1f1e7-1f1f2": [['\uD83C\uDDE7\uD83C\uDDF2'], "", "", ["flag-bm"], 33, 19, 15, 0],
			"1f1e7-1f1f3": [['\uD83C\uDDE7\uD83C\uDDF3'], "", "", ["flag-bn"], 33, 20, 15, 0],
			"1f1e7-1f1f4": [['\uD83C\uDDE7\uD83C\uDDF4'], "", "", ["flag-bo"], 33, 21, 15, 0],
			"1f1e7-1f1f6": [['\uD83C\uDDE7\uD83C\uDDF6'], "", "", ["flag-bq"], 33, 22, 13, 0],
			"1f1e7-1f1f7": [['\uD83C\uDDE7\uD83C\uDDF7'], "", "", ["flag-br"], 33, 23, 15, 0],
			"1f1e7-1f1f8": [['\uD83C\uDDE7\uD83C\uDDF8'], "", "", ["flag-bs"], 33, 24, 15, 0],
			"1f1e7-1f1f9": [['\uD83C\uDDE7\uD83C\uDDF9'], "", "", ["flag-bt"], 33, 25, 15, 0],
			"1f1e7-1f1fb": [['\uD83C\uDDE7\uD83C\uDDFB'], "", "", ["flag-bv"], 33, 26, 13, 0],
			"1f1e7-1f1fc": [['\uD83C\uDDE7\uD83C\uDDFC'], "", "", ["flag-bw"], 33, 27, 15, 0],
			"1f1e7-1f1fe": [['\uD83C\uDDE7\uD83C\uDDFE'], "", "", ["flag-by"], 33, 28, 15, 0],
			"1f1e7-1f1ff": [['\uD83C\uDDE7\uD83C\uDDFF'], "", "", ["flag-bz"], 33, 29, 15, 0],
			"1f1e8-1f1e6": [['\uD83C\uDDE8\uD83C\uDDE6'], "", "", ["flag-ca"], 33, 30, 15, 0],
			"1f1e8-1f1e8": [['\uD83C\uDDE8\uD83C\uDDE8'], "", "", ["flag-cc"], 33, 31, 15, 0],
			"1f1e8-1f1e9": [['\uD83C\uDDE8\uD83C\uDDE9'], "", "", ["flag-cd"], 33, 32, 15, 0],
			"1f1e8-1f1eb": [['\uD83C\uDDE8\uD83C\uDDEB'], "", "", ["flag-cf"], 33, 33, 15, 0],
			"1f1e8-1f1ec": [['\uD83C\uDDE8\uD83C\uDDEC'], "", "", ["flag-cg"], 33, 34, 15, 0],
			"1f1e8-1f1ed": [['\uD83C\uDDE8\uD83C\uDDED'], "", "", ["flag-ch"], 33, 35, 15, 0],
			"1f1e8-1f1ee": [['\uD83C\uDDE8\uD83C\uDDEE'], "", "", ["flag-ci"], 33, 36, 15, 0],
			"1f1e8-1f1f0": [['\uD83C\uDDE8\uD83C\uDDF0'], "", "", ["flag-ck"], 33, 37, 15, 0],
			"1f1e8-1f1f1": [['\uD83C\uDDE8\uD83C\uDDF1'], "", "", ["flag-cl"], 33, 38, 15, 0],
			"1f1e8-1f1f2": [['\uD83C\uDDE8\uD83C\uDDF2'], "", "", ["flag-cm"], 33, 39, 15, 0],
			"1f1e8-1f1f3": [['\uD83C\uDDE8\uD83C\uDDF3'], '\uE513', '\uDBB9\uDCED', ["flag-cn", "cn"], 33, 40, 15, 0],
			"1f1e8-1f1f4": [['\uD83C\uDDE8\uD83C\uDDF4'], "", "", ["flag-co"], 34, 0, 15, 0],
			"1f1e8-1f1f5": [['\uD83C\uDDE8\uD83C\uDDF5'], "", "", ["flag-cp"], 34, 1, 13, 0],
			"1f1e8-1f1f7": [['\uD83C\uDDE8\uD83C\uDDF7'], "", "", ["flag-cr"], 34, 2, 15, 0],
			"1f1e8-1f1fa": [['\uD83C\uDDE8\uD83C\uDDFA'], "", "", ["flag-cu"], 34, 3, 15, 0],
			"1f1e8-1f1fb": [['\uD83C\uDDE8\uD83C\uDDFB'], "", "", ["flag-cv"], 34, 4, 15, 0],
			"1f1e8-1f1fc": [['\uD83C\uDDE8\uD83C\uDDFC'], "", "", ["flag-cw"], 34, 5, 15, 0],
			"1f1e8-1f1fd": [['\uD83C\uDDE8\uD83C\uDDFD'], "", "", ["flag-cx"], 34, 6, 15, 0],
			"1f1e8-1f1fe": [['\uD83C\uDDE8\uD83C\uDDFE'], "", "", ["flag-cy"], 34, 7, 15, 0],
			"1f1e8-1f1ff": [['\uD83C\uDDE8\uD83C\uDDFF'], "", "", ["flag-cz"], 34, 8, 15, 0],
			"1f1e9-1f1ea": [['\uD83C\uDDE9\uD83C\uDDEA'], '\uE50E', '\uDBB9\uDCE8', ["flag-de", "de"], 34, 9, 15, 0],
			"1f1e9-1f1ec": [['\uD83C\uDDE9\uD83C\uDDEC'], "", "", ["flag-dg"], 34, 10, 13, 0],
			"1f1e9-1f1ef": [['\uD83C\uDDE9\uD83C\uDDEF'], "", "", ["flag-dj"], 34, 11, 15, 0],
			"1f1e9-1f1f0": [['\uD83C\uDDE9\uD83C\uDDF0'], "", "", ["flag-dk"], 34, 12, 15, 0],
			"1f1e9-1f1f2": [['\uD83C\uDDE9\uD83C\uDDF2'], "", "", ["flag-dm"], 34, 13, 15, 0],
			"1f1e9-1f1f4": [['\uD83C\uDDE9\uD83C\uDDF4'], "", "", ["flag-do"], 34, 14, 15, 0],
			"1f1e9-1f1ff": [['\uD83C\uDDE9\uD83C\uDDFF'], "", "", ["flag-dz"], 34, 15, 15, 0],
			"1f1ea-1f1e6": [['\uD83C\uDDEA\uD83C\uDDE6'], "", "", ["flag-ea"], 34, 16, 13, 0],
			"1f1ea-1f1e8": [['\uD83C\uDDEA\uD83C\uDDE8'], "", "", ["flag-ec"], 34, 17, 15, 0],
			"1f1ea-1f1ea": [['\uD83C\uDDEA\uD83C\uDDEA'], "", "", ["flag-ee"], 34, 18, 15, 0],
			"1f1ea-1f1ec": [['\uD83C\uDDEA\uD83C\uDDEC'], "", "", ["flag-eg"], 34, 19, 15, 0],
			"1f1ea-1f1ed": [['\uD83C\uDDEA\uD83C\uDDED'], "", "", ["flag-eh"], 34, 20, 13, 0],
			"1f1ea-1f1f7": [['\uD83C\uDDEA\uD83C\uDDF7'], "", "", ["flag-er"], 34, 21, 15, 0],
			"1f1ea-1f1f8": [['\uD83C\uDDEA\uD83C\uDDF8'], '\uE511', '\uDBB9\uDCEB', ["flag-es", "es"], 34, 22, 15, 0],
			"1f1ea-1f1f9": [['\uD83C\uDDEA\uD83C\uDDF9'], "", "", ["flag-et"], 34, 23, 15, 0],
			"1f1ea-1f1fa": [['\uD83C\uDDEA\uD83C\uDDFA'], "", "", ["flag-eu"], 34, 24, 15, 0],
			"1f1eb-1f1ee": [['\uD83C\uDDEB\uD83C\uDDEE'], "", "", ["flag-fi"], 34, 25, 15, 0],
			"1f1eb-1f1ef": [['\uD83C\uDDEB\uD83C\uDDEF'], "", "", ["flag-fj"], 34, 26, 15, 0],
			"1f1eb-1f1f0": [['\uD83C\uDDEB\uD83C\uDDF0'], "", "", ["flag-fk"], 34, 27, 13, 0],
			"1f1eb-1f1f2": [['\uD83C\uDDEB\uD83C\uDDF2'], "", "", ["flag-fm"], 34, 28, 15, 0],
			"1f1eb-1f1f4": [['\uD83C\uDDEB\uD83C\uDDF4'], "", "", ["flag-fo"], 34, 29, 15, 0],
			"1f1eb-1f1f7": [['\uD83C\uDDEB\uD83C\uDDF7'], '\uE50D', '\uDBB9\uDCE7', ["flag-fr", "fr"], 34, 30, 15, 0],
			"1f1ec-1f1e6": [['\uD83C\uDDEC\uD83C\uDDE6'], "", "", ["flag-ga"], 34, 31, 15, 0],
			"1f1ec-1f1e7": [['\uD83C\uDDEC\uD83C\uDDE7'], '\uE510', '\uDBB9\uDCEA', ["flag-gb", "gb", "uk"], 34, 32, 15, 0],
			"1f1ec-1f1e9": [['\uD83C\uDDEC\uD83C\uDDE9'], "", "", ["flag-gd"], 34, 33, 15, 0],
			"1f1ec-1f1ea": [['\uD83C\uDDEC\uD83C\uDDEA'], "", "", ["flag-ge"], 34, 34, 15, 0],
			"1f1ec-1f1eb": [['\uD83C\uDDEC\uD83C\uDDEB'], "", "", ["flag-gf"], 34, 35, 13, 0],
			"1f1ec-1f1ec": [['\uD83C\uDDEC\uD83C\uDDEC'], "", "", ["flag-gg"], 34, 36, 15, 0],
			"1f1ec-1f1ed": [['\uD83C\uDDEC\uD83C\uDDED'], "", "", ["flag-gh"], 34, 37, 15, 0],
			"1f1ec-1f1ee": [['\uD83C\uDDEC\uD83C\uDDEE'], "", "", ["flag-gi"], 34, 38, 15, 0],
			"1f1ec-1f1f1": [['\uD83C\uDDEC\uD83C\uDDF1'], "", "", ["flag-gl"], 34, 39, 15, 0],
			"1f1ec-1f1f2": [['\uD83C\uDDEC\uD83C\uDDF2'], "", "", ["flag-gm"], 34, 40, 15, 0],
			"1f1ec-1f1f3": [['\uD83C\uDDEC\uD83C\uDDF3'], "", "", ["flag-gn"], 35, 0, 15, 0],
			"1f1ec-1f1f5": [['\uD83C\uDDEC\uD83C\uDDF5'], "", "", ["flag-gp"], 35, 1, 13, 0],
			"1f1ec-1f1f6": [['\uD83C\uDDEC\uD83C\uDDF6'], "", "", ["flag-gq"], 35, 2, 15, 0],
			"1f1ec-1f1f7": [['\uD83C\uDDEC\uD83C\uDDF7'], "", "", ["flag-gr"], 35, 3, 15, 0],
			"1f1ec-1f1f8": [['\uD83C\uDDEC\uD83C\uDDF8'], "", "", ["flag-gs"], 35, 4, 13, 0],
			"1f1ec-1f1f9": [['\uD83C\uDDEC\uD83C\uDDF9'], "", "", ["flag-gt"], 35, 5, 15, 0],
			"1f1ec-1f1fa": [['\uD83C\uDDEC\uD83C\uDDFA'], "", "", ["flag-gu"], 35, 6, 15, 0],
			"1f1ec-1f1fc": [['\uD83C\uDDEC\uD83C\uDDFC'], "", "", ["flag-gw"], 35, 7, 15, 0],
			"1f1ec-1f1fe": [['\uD83C\uDDEC\uD83C\uDDFE'], "", "", ["flag-gy"], 35, 8, 15, 0],
			"1f1ed-1f1f0": [['\uD83C\uDDED\uD83C\uDDF0'], "", "", ["flag-hk"], 35, 9, 15, 0],
			"1f1ed-1f1f2": [['\uD83C\uDDED\uD83C\uDDF2'], "", "", ["flag-hm"], 35, 10, 13, 0],
			"1f1ed-1f1f3": [['\uD83C\uDDED\uD83C\uDDF3'], "", "", ["flag-hn"], 35, 11, 15, 0],
			"1f1ed-1f1f7": [['\uD83C\uDDED\uD83C\uDDF7'], "", "", ["flag-hr"], 35, 12, 15, 0],
			"1f1ed-1f1f9": [['\uD83C\uDDED\uD83C\uDDF9'], "", "", ["flag-ht"], 35, 13, 15, 0],
			"1f1ed-1f1fa": [['\uD83C\uDDED\uD83C\uDDFA'], "", "", ["flag-hu"], 35, 14, 15, 0],
			"1f1ee-1f1e8": [['\uD83C\uDDEE\uD83C\uDDE8'], "", "", ["flag-ic"], 35, 15, 15, 0],
			"1f1ee-1f1e9": [['\uD83C\uDDEE\uD83C\uDDE9'], "", "", ["flag-id"], 35, 16, 15, 0],
			"1f1ee-1f1ea": [['\uD83C\uDDEE\uD83C\uDDEA'], "", "", ["flag-ie"], 35, 17, 15, 0],
			"1f1ee-1f1f1": [['\uD83C\uDDEE\uD83C\uDDF1'], "", "", ["flag-il"], 35, 18, 15, 0],
			"1f1ee-1f1f2": [['\uD83C\uDDEE\uD83C\uDDF2'], "", "", ["flag-im"], 35, 19, 15, 0],
			"1f1ee-1f1f3": [['\uD83C\uDDEE\uD83C\uDDF3'], "", "", ["flag-in"], 35, 20, 15, 0],
			"1f1ee-1f1f4": [['\uD83C\uDDEE\uD83C\uDDF4'], "", "", ["flag-io"], 35, 21, 15, 0],
			"1f1ee-1f1f6": [['\uD83C\uDDEE\uD83C\uDDF6'], "", "", ["flag-iq"], 35, 22, 15, 0],
			"1f1ee-1f1f7": [['\uD83C\uDDEE\uD83C\uDDF7'], "", "", ["flag-ir"], 35, 23, 15, 0],
			"1f1ee-1f1f8": [['\uD83C\uDDEE\uD83C\uDDF8'], "", "", ["flag-is"], 35, 24, 15, 0],
			"1f1ee-1f1f9": [['\uD83C\uDDEE\uD83C\uDDF9'], '\uE50F', '\uDBB9\uDCE9', ["flag-it", "it"], 35, 25, 15, 0],
			"1f1ef-1f1ea": [['\uD83C\uDDEF\uD83C\uDDEA'], "", "", ["flag-je"], 35, 26, 15, 0],
			"1f1ef-1f1f2": [['\uD83C\uDDEF\uD83C\uDDF2'], "", "", ["flag-jm"], 35, 27, 15, 0],
			"1f1ef-1f1f4": [['\uD83C\uDDEF\uD83C\uDDF4'], "", "", ["flag-jo"], 35, 28, 15, 0],
			"1f1ef-1f1f5": [['\uD83C\uDDEF\uD83C\uDDF5'], '\uE50B', '\uDBB9\uDCE5', ["flag-jp", "jp"], 35, 29, 15, 0],
			"1f1f0-1f1ea": [['\uD83C\uDDF0\uD83C\uDDEA'], "", "", ["flag-ke"], 35, 30, 15, 0],
			"1f1f0-1f1ec": [['\uD83C\uDDF0\uD83C\uDDEC'], "", "", ["flag-kg"], 35, 31, 15, 0],
			"1f1f0-1f1ed": [['\uD83C\uDDF0\uD83C\uDDED'], "", "", ["flag-kh"], 35, 32, 15, 0],
			"1f1f0-1f1ee": [['\uD83C\uDDF0\uD83C\uDDEE'], "", "", ["flag-ki"], 35, 33, 15, 0],
			"1f1f0-1f1f2": [['\uD83C\uDDF0\uD83C\uDDF2'], "", "", ["flag-km"], 35, 34, 15, 0],
			"1f1f0-1f1f3": [['\uD83C\uDDF0\uD83C\uDDF3'], "", "", ["flag-kn"], 35, 35, 15, 0],
			"1f1f0-1f1f5": [['\uD83C\uDDF0\uD83C\uDDF5'], "", "", ["flag-kp"], 35, 36, 15, 0],
			"1f1f0-1f1f7": [['\uD83C\uDDF0\uD83C\uDDF7'], '\uE514', '\uDBB9\uDCEE', ["flag-kr", "kr"], 35, 37, 15, 0],
			"1f1f0-1f1fc": [['\uD83C\uDDF0\uD83C\uDDFC'], "", "", ["flag-kw"], 35, 38, 15, 0],
			"1f1f0-1f1fe": [['\uD83C\uDDF0\uD83C\uDDFE'], "", "", ["flag-ky"], 35, 39, 15, 0],
			"1f1f0-1f1ff": [['\uD83C\uDDF0\uD83C\uDDFF'], "", "", ["flag-kz"], 35, 40, 15, 0],
			"1f1f1-1f1e6": [['\uD83C\uDDF1\uD83C\uDDE6'], "", "", ["flag-la"], 36, 0, 15, 0],
			"1f1f1-1f1e7": [['\uD83C\uDDF1\uD83C\uDDE7'], "", "", ["flag-lb"], 36, 1, 15, 0],
			"1f1f1-1f1e8": [['\uD83C\uDDF1\uD83C\uDDE8'], "", "", ["flag-lc"], 36, 2, 15, 0],
			"1f1f1-1f1ee": [['\uD83C\uDDF1\uD83C\uDDEE'], "", "", ["flag-li"], 36, 3, 15, 0],
			"1f1f1-1f1f0": [['\uD83C\uDDF1\uD83C\uDDF0'], "", "", ["flag-lk"], 36, 4, 15, 0],
			"1f1f1-1f1f7": [['\uD83C\uDDF1\uD83C\uDDF7'], "", "", ["flag-lr"], 36, 5, 15, 0],
			"1f1f1-1f1f8": [['\uD83C\uDDF1\uD83C\uDDF8'], "", "", ["flag-ls"], 36, 6, 15, 0],
			"1f1f1-1f1f9": [['\uD83C\uDDF1\uD83C\uDDF9'], "", "", ["flag-lt"], 36, 7, 15, 0],
			"1f1f1-1f1fa": [['\uD83C\uDDF1\uD83C\uDDFA'], "", "", ["flag-lu"], 36, 8, 15, 0],
			"1f1f1-1f1fb": [['\uD83C\uDDF1\uD83C\uDDFB'], "", "", ["flag-lv"], 36, 9, 15, 0],
			"1f1f1-1f1fe": [['\uD83C\uDDF1\uD83C\uDDFE'], "", "", ["flag-ly"], 36, 10, 15, 0],
			"1f1f2-1f1e6": [['\uD83C\uDDF2\uD83C\uDDE6'], "", "", ["flag-ma"], 36, 11, 15, 0],
			"1f1f2-1f1e8": [['\uD83C\uDDF2\uD83C\uDDE8'], "", "", ["flag-mc"], 36, 12, 15, 0],
			"1f1f2-1f1e9": [['\uD83C\uDDF2\uD83C\uDDE9'], "", "", ["flag-md"], 36, 13, 15, 0],
			"1f1f2-1f1ea": [['\uD83C\uDDF2\uD83C\uDDEA'], "", "", ["flag-me"], 36, 14, 15, 0],
			"1f1f2-1f1eb": [['\uD83C\uDDF2\uD83C\uDDEB'], "", "", ["flag-mf"], 36, 15, 13, 0],
			"1f1f2-1f1ec": [['\uD83C\uDDF2\uD83C\uDDEC'], "", "", ["flag-mg"], 36, 16, 15, 0],
			"1f1f2-1f1ed": [['\uD83C\uDDF2\uD83C\uDDED'], "", "", ["flag-mh"], 36, 17, 15, 0],
			"1f1f2-1f1f0": [['\uD83C\uDDF2\uD83C\uDDF0'], "", "", ["flag-mk"], 36, 18, 15, 0],
			"1f1f2-1f1f1": [['\uD83C\uDDF2\uD83C\uDDF1'], "", "", ["flag-ml"], 36, 19, 15, 0],
			"1f1f2-1f1f2": [['\uD83C\uDDF2\uD83C\uDDF2'], "", "", ["flag-mm"], 36, 20, 15, 0],
			"1f1f2-1f1f3": [['\uD83C\uDDF2\uD83C\uDDF3'], "", "", ["flag-mn"], 36, 21, 15, 0],
			"1f1f2-1f1f4": [['\uD83C\uDDF2\uD83C\uDDF4'], "", "", ["flag-mo"], 36, 22, 15, 0],
			"1f1f2-1f1f5": [['\uD83C\uDDF2\uD83C\uDDF5'], "", "", ["flag-mp"], 36, 23, 15, 0],
			"1f1f2-1f1f6": [['\uD83C\uDDF2\uD83C\uDDF6'], "", "", ["flag-mq"], 36, 24, 13, 0],
			"1f1f2-1f1f7": [['\uD83C\uDDF2\uD83C\uDDF7'], "", "", ["flag-mr"], 36, 25, 15, 0],
			"1f1f2-1f1f8": [['\uD83C\uDDF2\uD83C\uDDF8'], "", "", ["flag-ms"], 36, 26, 15, 0],
			"1f1f2-1f1f9": [['\uD83C\uDDF2\uD83C\uDDF9'], "", "", ["flag-mt"], 36, 27, 15, 0],
			"1f1f2-1f1fa": [['\uD83C\uDDF2\uD83C\uDDFA'], "", "", ["flag-mu"], 36, 28, 15, 0],
			"1f1f2-1f1fb": [['\uD83C\uDDF2\uD83C\uDDFB'], "", "", ["flag-mv"], 36, 29, 15, 0],
			"1f1f2-1f1fc": [['\uD83C\uDDF2\uD83C\uDDFC'], "", "", ["flag-mw"], 36, 30, 15, 0],
			"1f1f2-1f1fd": [['\uD83C\uDDF2\uD83C\uDDFD'], "", "", ["flag-mx"], 36, 31, 15, 0],
			"1f1f2-1f1fe": [['\uD83C\uDDF2\uD83C\uDDFE'], "", "", ["flag-my"], 36, 32, 15, 0],
			"1f1f2-1f1ff": [['\uD83C\uDDF2\uD83C\uDDFF'], "", "", ["flag-mz"], 36, 33, 15, 0],
			"1f1f3-1f1e6": [['\uD83C\uDDF3\uD83C\uDDE6'], "", "", ["flag-na"], 36, 34, 15, 0],
			"1f1f3-1f1e8": [['\uD83C\uDDF3\uD83C\uDDE8'], "", "", ["flag-nc"], 36, 35, 13, 0],
			"1f1f3-1f1ea": [['\uD83C\uDDF3\uD83C\uDDEA'], "", "", ["flag-ne"], 36, 36, 15, 0],
			"1f1f3-1f1eb": [['\uD83C\uDDF3\uD83C\uDDEB'], "", "", ["flag-nf"], 36, 37, 15, 0],
			"1f1f3-1f1ec": [['\uD83C\uDDF3\uD83C\uDDEC'], "", "", ["flag-ng"], 36, 38, 15, 0],
			"1f1f3-1f1ee": [['\uD83C\uDDF3\uD83C\uDDEE'], "", "", ["flag-ni"], 36, 39, 15, 0],
			"1f1f3-1f1f1": [['\uD83C\uDDF3\uD83C\uDDF1'], "", "", ["flag-nl"], 36, 40, 15, 0],
			"1f1f3-1f1f4": [['\uD83C\uDDF3\uD83C\uDDF4'], "", "", ["flag-no"], 37, 0, 15, 0],
			"1f1f3-1f1f5": [['\uD83C\uDDF3\uD83C\uDDF5'], "", "", ["flag-np"], 37, 1, 15, 0],
			"1f1f3-1f1f7": [['\uD83C\uDDF3\uD83C\uDDF7'], "", "", ["flag-nr"], 37, 2, 15, 0],
			"1f1f3-1f1fa": [['\uD83C\uDDF3\uD83C\uDDFA'], "", "", ["flag-nu"], 37, 3, 15, 0],
			"1f1f3-1f1ff": [['\uD83C\uDDF3\uD83C\uDDFF'], "", "", ["flag-nz"], 37, 4, 15, 0],
			"1f1f4-1f1f2": [['\uD83C\uDDF4\uD83C\uDDF2'], "", "", ["flag-om"], 37, 5, 15, 0],
			"1f1f5-1f1e6": [['\uD83C\uDDF5\uD83C\uDDE6'], "", "", ["flag-pa"], 37, 6, 15, 0],
			"1f1f5-1f1ea": [['\uD83C\uDDF5\uD83C\uDDEA'], "", "", ["flag-pe"], 37, 7, 15, 0],
			"1f1f5-1f1eb": [['\uD83C\uDDF5\uD83C\uDDEB'], "", "", ["flag-pf"], 37, 8, 15, 0],
			"1f1f5-1f1ec": [['\uD83C\uDDF5\uD83C\uDDEC'], "", "", ["flag-pg"], 37, 9, 15, 0],
			"1f1f5-1f1ed": [['\uD83C\uDDF5\uD83C\uDDED'], "", "", ["flag-ph"], 37, 10, 15, 0],
			"1f1f5-1f1f0": [['\uD83C\uDDF5\uD83C\uDDF0'], "", "", ["flag-pk"], 37, 11, 15, 0],
			"1f1f5-1f1f1": [['\uD83C\uDDF5\uD83C\uDDF1'], "", "", ["flag-pl"], 37, 12, 15, 0],
			"1f1f5-1f1f2": [['\uD83C\uDDF5\uD83C\uDDF2'], "", "", ["flag-pm"], 37, 13, 13, 0],
			"1f1f5-1f1f3": [['\uD83C\uDDF5\uD83C\uDDF3'], "", "", ["flag-pn"], 37, 14, 15, 0],
			"1f1f5-1f1f7": [['\uD83C\uDDF5\uD83C\uDDF7'], "", "", ["flag-pr"], 37, 15, 15, 0],
			"1f1f5-1f1f8": [['\uD83C\uDDF5\uD83C\uDDF8'], "", "", ["flag-ps"], 37, 16, 15, 0],
			"1f1f5-1f1f9": [['\uD83C\uDDF5\uD83C\uDDF9'], "", "", ["flag-pt"], 37, 17, 15, 0],
			"1f1f5-1f1fc": [['\uD83C\uDDF5\uD83C\uDDFC'], "", "", ["flag-pw"], 37, 18, 15, 0],
			"1f1f5-1f1fe": [['\uD83C\uDDF5\uD83C\uDDFE'], "", "", ["flag-py"], 37, 19, 15, 0],
			"1f1f6-1f1e6": [['\uD83C\uDDF6\uD83C\uDDE6'], "", "", ["flag-qa"], 37, 20, 15, 0],
			"1f1f7-1f1ea": [['\uD83C\uDDF7\uD83C\uDDEA'], "", "", ["flag-re"], 37, 21, 13, 0],
			"1f1f7-1f1f4": [['\uD83C\uDDF7\uD83C\uDDF4'], "", "", ["flag-ro"], 37, 22, 15, 0],
			"1f1f7-1f1f8": [['\uD83C\uDDF7\uD83C\uDDF8'], "", "", ["flag-rs"], 37, 23, 15, 0],
			"1f1f7-1f1fa": [['\uD83C\uDDF7\uD83C\uDDFA'], '\uE512', '\uDBB9\uDCEC', ["flag-ru", "ru"], 37, 24, 15, 0],
			"1f1f7-1f1fc": [['\uD83C\uDDF7\uD83C\uDDFC'], "", "", ["flag-rw"], 37, 25, 15, 0],
			"1f1f8-1f1e6": [['\uD83C\uDDF8\uD83C\uDDE6'], "", "", ["flag-sa"], 37, 26, 15, 0],
			"1f1f8-1f1e7": [['\uD83C\uDDF8\uD83C\uDDE7'], "", "", ["flag-sb"], 37, 27, 15, 0],
			"1f1f8-1f1e8": [['\uD83C\uDDF8\uD83C\uDDE8'], "", "", ["flag-sc"], 37, 28, 15, 0],
			"1f1f8-1f1e9": [['\uD83C\uDDF8\uD83C\uDDE9'], "", "", ["flag-sd"], 37, 29, 15, 0],
			"1f1f8-1f1ea": [['\uD83C\uDDF8\uD83C\uDDEA'], "", "", ["flag-se"], 37, 30, 15, 0],
			"1f1f8-1f1ec": [['\uD83C\uDDF8\uD83C\uDDEC'], "", "", ["flag-sg"], 37, 31, 15, 0],
			"1f1f8-1f1ed": [['\uD83C\uDDF8\uD83C\uDDED'], "", "", ["flag-sh"], 37, 32, 15, 0],
			"1f1f8-1f1ee": [['\uD83C\uDDF8\uD83C\uDDEE'], "", "", ["flag-si"], 37, 33, 15, 0],
			"1f1f8-1f1ef": [['\uD83C\uDDF8\uD83C\uDDEF'], "", "", ["flag-sj"], 37, 34, 13, 0],
			"1f1f8-1f1f0": [['\uD83C\uDDF8\uD83C\uDDF0'], "", "", ["flag-sk"], 37, 35, 15, 0],
			"1f1f8-1f1f1": [['\uD83C\uDDF8\uD83C\uDDF1'], "", "", ["flag-sl"], 37, 36, 15, 0],
			"1f1f8-1f1f2": [['\uD83C\uDDF8\uD83C\uDDF2'], "", "", ["flag-sm"], 37, 37, 15, 0],
			"1f1f8-1f1f3": [['\uD83C\uDDF8\uD83C\uDDF3'], "", "", ["flag-sn"], 37, 38, 15, 0],
			"1f1f8-1f1f4": [['\uD83C\uDDF8\uD83C\uDDF4'], "", "", ["flag-so"], 37, 39, 15, 0],
			"1f1f8-1f1f7": [['\uD83C\uDDF8\uD83C\uDDF7'], "", "", ["flag-sr"], 37, 40, 15, 0],
			"1f1f8-1f1f8": [['\uD83C\uDDF8\uD83C\uDDF8'], "", "", ["flag-ss"], 38, 0, 15, 0],
			"1f1f8-1f1f9": [['\uD83C\uDDF8\uD83C\uDDF9'], "", "", ["flag-st"], 38, 1, 15, 0],
			"1f1f8-1f1fb": [['\uD83C\uDDF8\uD83C\uDDFB'], "", "", ["flag-sv"], 38, 2, 15, 0],
			"1f1f8-1f1fd": [['\uD83C\uDDF8\uD83C\uDDFD'], "", "", ["flag-sx"], 38, 3, 15, 0],
			"1f1f8-1f1fe": [['\uD83C\uDDF8\uD83C\uDDFE'], "", "", ["flag-sy"], 38, 4, 15, 0],
			"1f1f8-1f1ff": [['\uD83C\uDDF8\uD83C\uDDFF'], "", "", ["flag-sz"], 38, 5, 15, 0],
			"1f1f9-1f1e6": [['\uD83C\uDDF9\uD83C\uDDE6'], "", "", ["flag-ta"], 38, 6, 15, 0],
			"1f1f9-1f1e8": [['\uD83C\uDDF9\uD83C\uDDE8'], "", "", ["flag-tc"], 38, 7, 15, 0],
			"1f1f9-1f1e9": [['\uD83C\uDDF9\uD83C\uDDE9'], "", "", ["flag-td"], 38, 8, 15, 0],
			"1f1f9-1f1eb": [['\uD83C\uDDF9\uD83C\uDDEB'], "", "", ["flag-tf"], 38, 9, 13, 0],
			"1f1f9-1f1ec": [['\uD83C\uDDF9\uD83C\uDDEC'], "", "", ["flag-tg"], 38, 10, 15, 0],
			"1f1f9-1f1ed": [['\uD83C\uDDF9\uD83C\uDDED'], "", "", ["flag-th"], 38, 11, 15, 0],
			"1f1f9-1f1ef": [['\uD83C\uDDF9\uD83C\uDDEF'], "", "", ["flag-tj"], 38, 12, 15, 0],
			"1f1f9-1f1f0": [['\uD83C\uDDF9\uD83C\uDDF0'], "", "", ["flag-tk"], 38, 13, 15, 0],
			"1f1f9-1f1f1": [['\uD83C\uDDF9\uD83C\uDDF1'], "", "", ["flag-tl"], 38, 14, 15, 0],
			"1f1f9-1f1f2": [['\uD83C\uDDF9\uD83C\uDDF2'], "", "", ["flag-tm"], 38, 15, 15, 0],
			"1f1f9-1f1f3": [['\uD83C\uDDF9\uD83C\uDDF3'], "", "", ["flag-tn"], 38, 16, 15, 0],
			"1f1f9-1f1f4": [['\uD83C\uDDF9\uD83C\uDDF4'], "", "", ["flag-to"], 38, 17, 15, 0],
			"1f1f9-1f1f7": [['\uD83C\uDDF9\uD83C\uDDF7'], "", "", ["flag-tr"], 38, 18, 15, 0],
			"1f1f9-1f1f9": [['\uD83C\uDDF9\uD83C\uDDF9'], "", "", ["flag-tt"], 38, 19, 15, 0],
			"1f1f9-1f1fb": [['\uD83C\uDDF9\uD83C\uDDFB'], "", "", ["flag-tv"], 38, 20, 15, 0],
			"1f1f9-1f1fc": [['\uD83C\uDDF9\uD83C\uDDFC'], "", "", ["flag-tw"], 38, 21, 15, 0],
			"1f1f9-1f1ff": [['\uD83C\uDDF9\uD83C\uDDFF'], "", "", ["flag-tz"], 38, 22, 15, 0],
			"1f1fa-1f1e6": [['\uD83C\uDDFA\uD83C\uDDE6'], "", "", ["flag-ua"], 38, 23, 15, 0],
			"1f1fa-1f1ec": [['\uD83C\uDDFA\uD83C\uDDEC'], "", "", ["flag-ug"], 38, 24, 15, 0],
			"1f1fa-1f1f2": [['\uD83C\uDDFA\uD83C\uDDF2'], "", "", ["flag-um"], 38, 25, 13, 0],
			"1f1fa-1f1f8": [['\uD83C\uDDFA\uD83C\uDDF8'], '\uE50C', '\uDBB9\uDCE6', ["flag-us", "us"], 38, 26, 15, 0],
			"1f1fa-1f1fe": [['\uD83C\uDDFA\uD83C\uDDFE'], "", "", ["flag-uy"], 38, 27, 15, 0],
			"1f1fa-1f1ff": [['\uD83C\uDDFA\uD83C\uDDFF'], "", "", ["flag-uz"], 38, 28, 15, 0],
			"1f1fb-1f1e6": [['\uD83C\uDDFB\uD83C\uDDE6'], "", "", ["flag-va"], 38, 29, 15, 0],
			"1f1fb-1f1e8": [['\uD83C\uDDFB\uD83C\uDDE8'], "", "", ["flag-vc"], 38, 30, 15, 0],
			"1f1fb-1f1ea": [['\uD83C\uDDFB\uD83C\uDDEA'], "", "", ["flag-ve"], 38, 31, 15, 0],
			"1f1fb-1f1ec": [['\uD83C\uDDFB\uD83C\uDDEC'], "", "", ["flag-vg"], 38, 32, 15, 0],
			"1f1fb-1f1ee": [['\uD83C\uDDFB\uD83C\uDDEE'], "", "", ["flag-vi"], 38, 33, 15, 0],
			"1f1fb-1f1f3": [['\uD83C\uDDFB\uD83C\uDDF3'], "", "", ["flag-vn"], 38, 34, 15, 0],
			"1f1fb-1f1fa": [['\uD83C\uDDFB\uD83C\uDDFA'], "", "", ["flag-vu"], 38, 35, 15, 0],
			"1f1fc-1f1eb": [['\uD83C\uDDFC\uD83C\uDDEB'], "", "", ["flag-wf"], 38, 36, 13, 0],
			"1f1fc-1f1f8": [['\uD83C\uDDFC\uD83C\uDDF8'], "", "", ["flag-ws"], 38, 37, 15, 0],
			"1f1fd-1f1f0": [['\uD83C\uDDFD\uD83C\uDDF0'], "", "", ["flag-xk"], 38, 38, 13, 0],
			"1f1fe-1f1ea": [['\uD83C\uDDFE\uD83C\uDDEA'], "", "", ["flag-ye"], 38, 39, 15, 0],
			"1f1fe-1f1f9": [['\uD83C\uDDFE\uD83C\uDDF9'], "", "", ["flag-yt"], 38, 40, 13, 0],
			"1f1ff-1f1e6": [['\uD83C\uDDFF\uD83C\uDDE6'], "", "", ["flag-za"], 39, 0, 15, 0],
			"1f1ff-1f1f2": [['\uD83C\uDDFF\uD83C\uDDF2'], "", "", ["flag-zm"], 39, 1, 15, 0],
			"1f1ff-1f1fc": [['\uD83C\uDDFF\uD83C\uDDFC'], "", "", ["flag-zw"], 39, 2, 15, 0],
			"1f468-200d-1f468-200d-1f466": [['\uD83D\uDC68\u200D\uD83D\uDC68\u200D\uD83D\uDC66'], "", "", ["man-man-boy"], 39, 3, 15, 0],
			"1f468-200d-1f468-200d-1f466-200d-1f466": [['\uD83D\uDC68\u200D\uD83D\uDC68\u200D\uD83D\uDC66\u200D\uD83D\uDC66'], "", "", ["man-man-boy-boy"], 39, 4, 15, 0],
			"1f468-200d-1f468-200d-1f467": [['\uD83D\uDC68\u200D\uD83D\uDC68\u200D\uD83D\uDC67'], "", "", ["man-man-girl"], 39, 5, 15, 0],
			"1f468-200d-1f468-200d-1f467-200d-1f466": [['\uD83D\uDC68\u200D\uD83D\uDC68\u200D\uD83D\uDC67\u200D\uD83D\uDC66'], "", "", ["man-man-girl-boy"], 39, 6, 15, 0],
			"1f468-200d-1f468-200d-1f467-200d-1f467": [['\uD83D\uDC68\u200D\uD83D\uDC68\u200D\uD83D\uDC67\u200D\uD83D\uDC67'], "", "", ["man-man-girl-girl"], 39, 7, 15, 0],
			"1f468-200d-1f469-200d-1f466-200d-1f466": [['\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66'], "", "", ["man-woman-boy-boy"], 39, 8, 15, 0],
			"1f468-200d-1f469-200d-1f467": [['\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC67'], "", "", ["man-woman-girl"], 39, 9, 15, 0],
			"1f468-200d-1f469-200d-1f467-200d-1f466": [['\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC66'], "", "", ["man-woman-girl-boy"], 39, 10, 15, 0],
			"1f468-200d-1f469-200d-1f467-200d-1f467": [['\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC67'], "", "", ["man-woman-girl-girl"], 39, 11, 15, 0],
			"1f468-200d-2764-fe0f-200d-1f468": [['\uD83D\uDC68\u200D\u2764\uFE0F\u200D\uD83D\uDC68'], "", "", ["man-heart-man"], 39, 12, 7, 0],
			"1f468-200d-2764-fe0f-200d-1f48b-200d-1f468": [['\uD83D\uDC68\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68'], "", "", ["man-kiss-man"], 39, 13, 7, 0],
			"1f469-200d-1f469-200d-1f466": [['\uD83D\uDC69\u200D\uD83D\uDC69\u200D\uD83D\uDC66'], "", "", ["woman-woman-boy"], 39, 14, 15, 0],
			"1f469-200d-1f469-200d-1f466-200d-1f466": [['\uD83D\uDC69\u200D\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66'], "", "", ["woman-woman-boy-boy"], 39, 15, 15, 0],
			"1f469-200d-1f469-200d-1f467": [['\uD83D\uDC69\u200D\uD83D\uDC69\u200D\uD83D\uDC67'], "", "", ["woman-woman-girl"], 39, 16, 15, 0],
			"1f469-200d-1f469-200d-1f467-200d-1f466": [['\uD83D\uDC69\u200D\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC66'], "", "", ["woman-woman-girl-boy"], 39, 17, 15, 0],
			"1f469-200d-1f469-200d-1f467-200d-1f467": [['\uD83D\uDC69\u200D\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC67'], "", "", ["woman-woman-girl-girl"], 39, 18, 15, 0],
			"1f469-200d-2764-fe0f-200d-1f469": [['\uD83D\uDC69\u200D\u2764\uFE0F\u200D\uD83D\uDC69'], "", "", ["woman-heart-woman"], 39, 19, 7, 0],
			"1f469-200d-2764-fe0f-200d-1f48b-200d-1f469": [['\uD83D\uDC69\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC69'], "", "", ["woman-kiss-woman"], 39, 20, 7, 0]
		};
		/** @private */
		emoji.prototype.emoticons_data = {
			"<3": "heart",
			":o)": "monkey_face",
			":*": "kiss",
			":-*": "kiss",
			"<\/3": "broken_heart",
			"=)": "smiley",
			"=-)": "smiley",
			"C:": "smile",
			"c:": "smile",
			":D": "smile",
			":-D": "smile",
			":>": "laughing",
			":->": "laughing",
			";)": "wink",
			";-)": "wink",
			"8)": "sunglasses",
			":|": "neutral_face",
			":-|": "neutral_face",
			":\\": "confused",
			":-\\": "confused",
			":\/": "confused",
			":-\/": "confused",
			":p": "stuck_out_tongue",
			":-p": "stuck_out_tongue",
			":P": "stuck_out_tongue",
			":-P": "stuck_out_tongue",
			":b": "stuck_out_tongue",
			":-b": "stuck_out_tongue",
			";p": "stuck_out_tongue_winking_eye",
			";-p": "stuck_out_tongue_winking_eye",
			";b": "stuck_out_tongue_winking_eye",
			";-b": "stuck_out_tongue_winking_eye",
			";P": "stuck_out_tongue_winking_eye",
			";-P": "stuck_out_tongue_winking_eye",
			"):": "disappointed",
			":(": "disappointed",
			":-(": "disappointed",
			">:(": "angry",
			">:-(": "angry",
			":'(": "cry",
			"D:": "anguished",
			":o": "open_mouth",
			":-o": "open_mouth",
			":O": "open_mouth",
			":-O": "open_mouth",
			":)": "slightly_smiling_face",
			"(:": "slightly_smiling_face",
			":-)": "slightly_smiling_face"
		};
		/** @private */
		emoji.prototype.variations_data = {
			"261d-1f3fb": [1, 11, 15],
			"261d-1f3fc": [1, 12, 15],
			"261d-1f3fd": [1, 13, 15],
			"261d-1f3fe": [1, 14, 15],
			"261d-1f3ff": [1, 15, 15],
			"26f9-1f3fb": [2, 39, 15],
			"26f9-1f3fc": [2, 40, 15],
			"26f9-1f3fd": [3, 0, 15],
			"26f9-1f3fe": [3, 1, 15],
			"26f9-1f3ff": [3, 2, 15],
			"270a-1f3fb": [3, 10, 15],
			"270a-1f3fc": [3, 11, 15],
			"270a-1f3fd": [3, 12, 15],
			"270a-1f3fe": [3, 13, 15],
			"270a-1f3ff": [3, 14, 15],
			"270b-1f3fb": [3, 16, 15],
			"270b-1f3fc": [3, 17, 15],
			"270b-1f3fd": [3, 18, 15],
			"270b-1f3fe": [3, 19, 15],
			"270b-1f3ff": [3, 20, 15],
			"270c-1f3fb": [3, 22, 15],
			"270c-1f3fc": [3, 23, 15],
			"270c-1f3fd": [3, 24, 15],
			"270c-1f3fe": [3, 25, 15],
			"270c-1f3ff": [3, 26, 15],
			"270d-1f3fb": [3, 28, 15],
			"270d-1f3fc": [3, 29, 15],
			"270d-1f3fd": [3, 30, 15],
			"270d-1f3fe": [3, 31, 15],
			"270d-1f3ff": [3, 32, 15],
			"1f385-1f3fb": [8, 30, 15],
			"1f385-1f3fc": [8, 31, 15],
			"1f385-1f3fd": [8, 32, 15],
			"1f385-1f3fe": [8, 33, 15],
			"1f385-1f3ff": [8, 34, 15],
			"1f3c3-1f3fb": [10, 10, 15],
			"1f3c3-1f3fc": [10, 11, 15],
			"1f3c3-1f3fd": [10, 12, 15],
			"1f3c3-1f3fe": [10, 13, 15],
			"1f3c3-1f3ff": [10, 14, 15],
			"1f3c4-1f3fb": [10, 16, 15],
			"1f3c4-1f3fc": [10, 17, 15],
			"1f3c4-1f3fd": [10, 18, 15],
			"1f3c4-1f3fe": [10, 19, 15],
			"1f3c4-1f3ff": [10, 20, 15],
			"1f3ca-1f3fb": [10, 27, 15],
			"1f3ca-1f3fc": [10, 28, 15],
			"1f3ca-1f3fd": [10, 29, 15],
			"1f3ca-1f3fe": [10, 30, 15],
			"1f3ca-1f3ff": [10, 31, 15],
			"1f3cb-1f3fb": [10, 33, 15],
			"1f3cb-1f3fc": [10, 34, 15],
			"1f3cb-1f3fd": [10, 35, 15],
			"1f3cb-1f3fe": [10, 36, 15],
			"1f3cb-1f3ff": [10, 37, 15],
			"1f442-1f3fb": [13, 31, 15],
			"1f442-1f3fc": [13, 32, 15],
			"1f442-1f3fd": [13, 33, 15],
			"1f442-1f3fe": [13, 34, 15],
			"1f442-1f3ff": [13, 35, 15],
			"1f443-1f3fb": [13, 37, 15],
			"1f443-1f3fc": [13, 38, 15],
			"1f443-1f3fd": [13, 39, 15],
			"1f443-1f3fe": [13, 40, 15],
			"1f443-1f3ff": [14, 0, 15],
			"1f446-1f3fb": [14, 4, 15],
			"1f446-1f3fc": [14, 5, 15],
			"1f446-1f3fd": [14, 6, 15],
			"1f446-1f3fe": [14, 7, 15],
			"1f446-1f3ff": [14, 8, 15],
			"1f447-1f3fb": [14, 10, 15],
			"1f447-1f3fc": [14, 11, 15],
			"1f447-1f3fd": [14, 12, 15],
			"1f447-1f3fe": [14, 13, 15],
			"1f447-1f3ff": [14, 14, 15],
			"1f448-1f3fb": [14, 16, 15],
			"1f448-1f3fc": [14, 17, 15],
			"1f448-1f3fd": [14, 18, 15],
			"1f448-1f3fe": [14, 19, 15],
			"1f448-1f3ff": [14, 20, 15],
			"1f449-1f3fb": [14, 22, 15],
			"1f449-1f3fc": [14, 23, 15],
			"1f449-1f3fd": [14, 24, 15],
			"1f449-1f3fe": [14, 25, 15],
			"1f449-1f3ff": [14, 26, 15],
			"1f44a-1f3fb": [14, 28, 15],
			"1f44a-1f3fc": [14, 29, 15],
			"1f44a-1f3fd": [14, 30, 15],
			"1f44a-1f3fe": [14, 31, 15],
			"1f44a-1f3ff": [14, 32, 15],
			"1f44b-1f3fb": [14, 34, 15],
			"1f44b-1f3fc": [14, 35, 15],
			"1f44b-1f3fd": [14, 36, 15],
			"1f44b-1f3fe": [14, 37, 15],
			"1f44b-1f3ff": [14, 38, 15],
			"1f44c-1f3fb": [14, 40, 15],
			"1f44c-1f3fc": [15, 0, 15],
			"1f44c-1f3fd": [15, 1, 15],
			"1f44c-1f3fe": [15, 2, 15],
			"1f44c-1f3ff": [15, 3, 15],
			"1f44d-1f3fb": [15, 5, 15],
			"1f44d-1f3fc": [15, 6, 15],
			"1f44d-1f3fd": [15, 7, 15],
			"1f44d-1f3fe": [15, 8, 15],
			"1f44d-1f3ff": [15, 9, 15],
			"1f44e-1f3fb": [15, 11, 15],
			"1f44e-1f3fc": [15, 12, 15],
			"1f44e-1f3fd": [15, 13, 15],
			"1f44e-1f3fe": [15, 14, 15],
			"1f44e-1f3ff": [15, 15, 15],
			"1f44f-1f3fb": [15, 17, 15],
			"1f44f-1f3fc": [15, 18, 15],
			"1f44f-1f3fd": [15, 19, 15],
			"1f44f-1f3fe": [15, 20, 15],
			"1f44f-1f3ff": [15, 21, 15],
			"1f450-1f3fb": [15, 23, 15],
			"1f450-1f3fc": [15, 24, 15],
			"1f450-1f3fd": [15, 25, 15],
			"1f450-1f3fe": [15, 26, 15],
			"1f450-1f3ff": [15, 27, 15],
			"1f466-1f3fb": [16, 9, 15],
			"1f466-1f3fc": [16, 10, 15],
			"1f466-1f3fd": [16, 11, 15],
			"1f466-1f3fe": [16, 12, 15],
			"1f466-1f3ff": [16, 13, 15],
			"1f467-1f3fb": [16, 15, 15],
			"1f467-1f3fc": [16, 16, 15],
			"1f467-1f3fd": [16, 17, 15],
			"1f467-1f3fe": [16, 18, 15],
			"1f467-1f3ff": [16, 19, 15],
			"1f468-1f3fb": [16, 21, 15],
			"1f468-1f3fc": [16, 22, 15],
			"1f468-1f3fd": [16, 23, 15],
			"1f468-1f3fe": [16, 24, 15],
			"1f468-1f3ff": [16, 25, 15],
			"1f469-1f3fb": [16, 27, 15],
			"1f469-1f3fc": [16, 28, 15],
			"1f469-1f3fd": [16, 29, 15],
			"1f469-1f3fe": [16, 30, 15],
			"1f469-1f3ff": [16, 31, 15],
			"1f46e-1f3fb": [16, 37, 15],
			"1f46e-1f3fc": [16, 38, 15],
			"1f46e-1f3fd": [16, 39, 15],
			"1f46e-1f3fe": [16, 40, 15],
			"1f46e-1f3ff": [17, 0, 15],
			"1f470-1f3fb": [17, 3, 15],
			"1f470-1f3fc": [17, 4, 15],
			"1f470-1f3fd": [17, 5, 15],
			"1f470-1f3fe": [17, 6, 15],
			"1f470-1f3ff": [17, 7, 15],
			"1f471-1f3fb": [17, 9, 15],
			"1f471-1f3fc": [17, 10, 15],
			"1f471-1f3fd": [17, 11, 15],
			"1f471-1f3fe": [17, 12, 15],
			"1f471-1f3ff": [17, 13, 15],
			"1f472-1f3fb": [17, 15, 15],
			"1f472-1f3fc": [17, 16, 15],
			"1f472-1f3fd": [17, 17, 15],
			"1f472-1f3fe": [17, 18, 15],
			"1f472-1f3ff": [17, 19, 15],
			"1f473-1f3fb": [17, 21, 15],
			"1f473-1f3fc": [17, 22, 15],
			"1f473-1f3fd": [17, 23, 15],
			"1f473-1f3fe": [17, 24, 15],
			"1f473-1f3ff": [17, 25, 15],
			"1f474-1f3fb": [17, 27, 15],
			"1f474-1f3fc": [17, 28, 15],
			"1f474-1f3fd": [17, 29, 15],
			"1f474-1f3fe": [17, 30, 15],
			"1f474-1f3ff": [17, 31, 15],
			"1f475-1f3fb": [17, 33, 15],
			"1f475-1f3fc": [17, 34, 15],
			"1f475-1f3fd": [17, 35, 15],
			"1f475-1f3fe": [17, 36, 15],
			"1f475-1f3ff": [17, 37, 15],
			"1f476-1f3fb": [17, 39, 15],
			"1f476-1f3fc": [17, 40, 15],
			"1f476-1f3fd": [18, 0, 15],
			"1f476-1f3fe": [18, 1, 15],
			"1f476-1f3ff": [18, 2, 15],
			"1f477-1f3fb": [18, 4, 15],
			"1f477-1f3fc": [18, 5, 15],
			"1f477-1f3fd": [18, 6, 15],
			"1f477-1f3fe": [18, 7, 15],
			"1f477-1f3ff": [18, 8, 15],
			"1f478-1f3fb": [18, 10, 15],
			"1f478-1f3fc": [18, 11, 15],
			"1f478-1f3fd": [18, 12, 15],
			"1f478-1f3fe": [18, 13, 15],
			"1f478-1f3ff": [18, 14, 15],
			"1f47c-1f3fb": [18, 19, 15],
			"1f47c-1f3fc": [18, 20, 15],
			"1f47c-1f3fd": [18, 21, 15],
			"1f47c-1f3fe": [18, 22, 15],
			"1f47c-1f3ff": [18, 23, 15],
			"1f481-1f3fb": [18, 29, 15],
			"1f481-1f3fc": [18, 30, 15],
			"1f481-1f3fd": [18, 31, 15],
			"1f481-1f3fe": [18, 32, 15],
			"1f481-1f3ff": [18, 33, 15],
			"1f482-1f3fb": [18, 35, 15],
			"1f482-1f3fc": [18, 36, 15],
			"1f482-1f3fd": [18, 37, 15],
			"1f482-1f3fe": [18, 38, 15],
			"1f482-1f3ff": [18, 39, 15],
			"1f483-1f3fb": [19, 0, 15],
			"1f483-1f3fc": [19, 1, 15],
			"1f483-1f3fd": [19, 2, 15],
			"1f483-1f3fe": [19, 3, 15],
			"1f483-1f3ff": [19, 4, 15],
			"1f485-1f3fb": [19, 7, 15],
			"1f485-1f3fc": [19, 8, 15],
			"1f485-1f3fd": [19, 9, 15],
			"1f485-1f3fe": [19, 10, 15],
			"1f485-1f3ff": [19, 11, 15],
			"1f486-1f3fb": [19, 13, 15],
			"1f486-1f3fc": [19, 14, 15],
			"1f486-1f3fd": [19, 15, 15],
			"1f486-1f3fe": [19, 16, 15],
			"1f486-1f3ff": [19, 17, 15],
			"1f487-1f3fb": [19, 19, 15],
			"1f487-1f3fc": [19, 20, 15],
			"1f487-1f3fd": [19, 21, 15],
			"1f487-1f3fe": [19, 22, 15],
			"1f487-1f3ff": [19, 23, 15],
			"1f4aa-1f3fb": [20, 18, 15],
			"1f4aa-1f3fc": [20, 19, 15],
			"1f4aa-1f3fd": [20, 20, 15],
			"1f4aa-1f3fe": [20, 21, 15],
			"1f4aa-1f3ff": [20, 22, 15],
			"1f575-1f3fb": [24, 40, 11],
			"1f575-1f3fc": [25, 0, 11],
			"1f575-1f3fd": [25, 1, 11],
			"1f575-1f3fe": [25, 2, 11],
			"1f575-1f3ff": [25, 3, 11],
			"1f590-1f3fb": [25, 14, 15],
			"1f590-1f3fc": [25, 15, 15],
			"1f590-1f3fd": [25, 16, 15],
			"1f590-1f3fe": [25, 17, 15],
			"1f590-1f3ff": [25, 18, 15],
			"1f595-1f3fb": [25, 20, 15],
			"1f595-1f3fc": [25, 21, 15],
			"1f595-1f3fd": [25, 22, 15],
			"1f595-1f3fe": [25, 23, 15],
			"1f595-1f3ff": [25, 24, 15],
			"1f596-1f3fb": [25, 26, 15],
			"1f596-1f3fc": [25, 27, 15],
			"1f596-1f3fd": [25, 28, 15],
			"1f596-1f3fe": [25, 29, 15],
			"1f596-1f3ff": [25, 30, 15],
			"1f645-1f3fb": [28, 3, 15],
			"1f645-1f3fc": [28, 4, 15],
			"1f645-1f3fd": [28, 5, 15],
			"1f645-1f3fe": [28, 6, 15],
			"1f645-1f3ff": [28, 7, 15],
			"1f646-1f3fb": [28, 9, 15],
			"1f646-1f3fc": [28, 10, 15],
			"1f646-1f3fd": [28, 11, 15],
			"1f646-1f3fe": [28, 12, 15],
			"1f646-1f3ff": [28, 13, 15],
			"1f647-1f3fb": [28, 15, 15],
			"1f647-1f3fc": [28, 16, 15],
			"1f647-1f3fd": [28, 17, 15],
			"1f647-1f3fe": [28, 18, 15],
			"1f647-1f3ff": [28, 19, 15],
			"1f64b-1f3fb": [28, 24, 15],
			"1f64b-1f3fc": [28, 25, 15],
			"1f64b-1f3fd": [28, 26, 15],
			"1f64b-1f3fe": [28, 27, 15],
			"1f64b-1f3ff": [28, 28, 15],
			"1f64c-1f3fb": [28, 30, 15],
			"1f64c-1f3fc": [28, 31, 15],
			"1f64c-1f3fd": [28, 32, 15],
			"1f64c-1f3fe": [28, 33, 15],
			"1f64c-1f3ff": [28, 34, 15],
			"1f64d-1f3fb": [28, 36, 15],
			"1f64d-1f3fc": [28, 37, 15],
			"1f64d-1f3fd": [28, 38, 15],
			"1f64d-1f3fe": [28, 39, 15],
			"1f64d-1f3ff": [28, 40, 15],
			"1f64e-1f3fb": [29, 1, 15],
			"1f64e-1f3fc": [29, 2, 15],
			"1f64e-1f3fd": [29, 3, 15],
			"1f64e-1f3fe": [29, 4, 15],
			"1f64e-1f3ff": [29, 5, 15],
			"1f64f-1f3fb": [29, 7, 15],
			"1f64f-1f3fc": [29, 8, 15],
			"1f64f-1f3fd": [29, 9, 15],
			"1f64f-1f3fe": [29, 10, 15],
			"1f64f-1f3ff": [29, 11, 15],
			"1f6a3-1f3fb": [30, 7, 15],
			"1f6a3-1f3fc": [30, 8, 15],
			"1f6a3-1f3fd": [30, 9, 15],
			"1f6a3-1f3fe": [30, 10, 15],
			"1f6a3-1f3ff": [30, 11, 15],
			"1f6b4-1f3fb": [30, 29, 15],
			"1f6b4-1f3fc": [30, 30, 15],
			"1f6b4-1f3fd": [30, 31, 15],
			"1f6b4-1f3fe": [30, 32, 15],
			"1f6b4-1f3ff": [30, 33, 15],
			"1f6b5-1f3fb": [30, 35, 15],
			"1f6b5-1f3fc": [30, 36, 15],
			"1f6b5-1f3fd": [30, 37, 15],
			"1f6b5-1f3fe": [30, 38, 15],
			"1f6b5-1f3ff": [30, 39, 15],
			"1f6b6-1f3fb": [31, 0, 15],
			"1f6b6-1f3fc": [31, 1, 15],
			"1f6b6-1f3fd": [31, 2, 15],
			"1f6b6-1f3fe": [31, 3, 15],
			"1f6b6-1f3ff": [31, 4, 15],
			"1f6c0-1f3fb": [31, 15, 15],
			"1f6c0-1f3fc": [31, 16, 15],
			"1f6c0-1f3fd": [31, 17, 15],
			"1f6c0-1f3fe": [31, 18, 15],
			"1f6c0-1f3ff": [31, 19, 15],
			"1f918-1f3fb": [32, 10, 15],
			"1f918-1f3fc": [32, 11, 15],
			"1f918-1f3fd": [32, 12, 15],
			"1f918-1f3fe": [32, 13, 15],
			"1f918-1f3ff": [32, 14, 15]
		};

		// export
		if (true) {
			if (typeof module !== 'undefined' && module.exports) {
				exports = module.exports = emoji;
			}
			exports.EmojiConvertor = emoji;
		} else if (typeof define === 'function' && define.amd) {
			define(function () {
				return emoji;
			});
		} else {
			root.EmojiConvertor = emoji;
		}
	}).call(function () {
		return this || (typeof window !== 'undefined' ? window : global);
	}());
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    //Sets of categories and icons. The category names are not arbitrary, they map
	    //to the names of categories in data.js
	    categories: [{
	        title: "People",
	        icon: '<i class="fa fa-smile-o" aria-hidden="true"></i>'
	    }, {
	        title: "Nature",
	        icon: '<i class="fa fa-leaf" aria-hidden="true"></i>'
	    }, {
	        title: "Foods",
	        icon: '<i class="fa fa-cutlery" aria-hidden="true"></i>'
	    }, {
	        title: "Activity",
	        icon: '<i class="fa fa-futbol-o" aria-hidden="true"></i>'
	    }, {
	        title: "Places",
	        icon: '<i class="fa fa-globe" aria-hidden="true"></i>'
	    }, {
	        title: "Symbols",
	        icon: '<i class="fa fa-lightbulb-o" aria-hidden="true"></i>'
	    }, {
	        title: "Flags",
	        icon: '<i class="fa fa-flag-checkered" aria-hidden="true"></i>'
	    }],

	    //By default we show an magnifying glass icon in the search container,
	    //but if you're not using fontawesome you may want to include your own icon.
	    search_icon: '<i class="fa fa-search" aria-hidden="true"></i>',

	    //Show the colon syntax in the preview or don't. It may not make sense if you're
	    //using a contenteditable element to confuse users with unfamiliar colon syntax
	    show_colon_preview: true,

	    //If you want your contenteditable to be a single-line input, set this to true
	    prevent_new_line: false,

	    //The text that will be displayed when no emoji is being hovered over.
	    default_footer_message: "Please select an emoji from the list above",

	    //Can be "autoplace", "vertical", "horizontal", or a function that takes a tooltip as an argument.
	    //The tooltip is an instance of the class in this repo here: https://github.com/RobertMenke/Tooltip-js
	    positioning: "autoplace",

	    //Callback that occurs when an emoji gets selected. You get back Emoji, EmojiCategory, Node
	    callback: undefined,

	    //When the user hovers over the top row of icons, do you want them to be shown
	    //a tooltip indicating which category the icon represents?
	    show_icon_tooltips: true,

	    //Use sprite sheets to display image emojis rather than links to png files (faster).
	    //If you want links to the png files see this repo here for examples (library I'm using):
	    //https://github.com/iamcal/emoji-data
	    use_sheets: true,

	    //Events that bubble up from Emoji to EmojiPicker - DO NOT MUTATE
	    //Normally I'd use pubsub here, but didn't feel like writing my own implementation
	    //or bringing in another dependency for this simple use case.
	    events: {
	        SELECTED: "SELECTED",
	        EMOJI_MOUSEENTER: "MOUSEENTER",
	        EMOJI_MOUSELEAVE: "MOUSELEAVE"
	    },

	    //Paths to the sprite sheets (see the sheets folder in this repo. You'll likely
	    //need to override this setting.
	    sheets: {
	        apple: './sheets/sheet_apple_64_indexed_128.png',
	        google: './sheets/sheet_google_64_indexed_128.png',
	        twitter: './sheets/sheet_twitter_64_indexed_128.png',
	        emojione: './sheets/sheet_emojione_64_indexed_128.png'
	    }
	};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Emoji = __webpack_require__(8);

	var _Emoji2 = _interopRequireDefault(_Emoji);

	var _category = __webpack_require__(10);

	var _category2 = _interopRequireDefault(_category);

	var _jquery = __webpack_require__(1);

	var _jquery2 = _interopRequireDefault(_jquery);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var EmojiCategory = function () {
	    _createClass(EmojiCategory, null, [{
	        key: "factory",


	        /**
	         * Factory function that initializes the class with a callback
	         *
	         * @param {Object} cat
	         * @param {Object} data
	         * @param {Function} callback
	         * @returns {EmojiCategory}
	         */
	        value: function factory(cat, data, callback) {
	            var category = new EmojiCategory(cat, data);
	            category.setCallback(callback);
	            return category;
	        }
	    }]);

	    function EmojiCategory(category, data) {
	        var _this = this;

	        _classCallCheck(this, EmojiCategory);

	        /**
	         * @type {string}
	         */
	        this.title = category.title;

	        /**
	         *
	         * @type {string}
	         */
	        this.icon = category.icon;

	        /**
	         * @type {Array<Emoji>}
	         */
	        this.emojis = data.map(function (emote) {
	            return _Emoji2.default.factory(emote, _this.title, _this._onEvent.bind(_this));
	        }).sort(function (a, b) {
	            return a.sort_order - b.sort_order;
	        });

	        /**
	         * Markup for the
	         */
	        this.$category = this.getMarkup();

	        /**
	         * @type {jQuery}
	         */
	        this.$title = this.$category.find('.category-title');

	        /**
	         * Callback that executes when an emoji gets selected
	         *
	         * @type {Function|undefined}
	         * @private
	         */
	        this._callback = undefined;

	        var _search_term = "";
	        Object.defineProperty(this, 'search_term', {
	            get: function get() {
	                return _search_term;
	            },
	            set: function set(value) {
	                if (_search_term !== value) {
	                    _search_term = value;
	                    _this._search();
	                }
	            }
	        });
	    }

	    _createClass(EmojiCategory, [{
	        key: "exportContents",


	        /**
	         * Exports the main contents for the category
	         *
	         * @returns {{title: string, icon: string}}
	         */
	        value: function exportContents() {
	            return {
	                title: this.title,
	                icon: this.icon
	            };
	        }
	    }, {
	        key: "getMarkup",
	        value: function getMarkup() {
	            if (this.$category) {
	                return this.$category;
	            }

	            var $category = (0, _jquery2.default)((0, _category2.default)({
	                title: this.title
	            }));

	            var $content = $category.find('.category-content');

	            this.emojis.forEach(function (emoji) {
	                $content.append(emoji.getMarkup());
	            });

	            return $category;
	        }

	        /**
	         * Carries an event from the Emoji to the EmojiPicker instance.
	         *
	         * @param action
	         * @param emoji
	         * @private
	         */

	    }, {
	        key: "_onEvent",
	        value: function _onEvent(action, emoji) {
	            if (this._callback) {
	                this._callback(action, emoji, this);
	            }
	        }

	        /**
	         *
	         * @param {Function} callback
	         * @returns {EmojiCategory}
	         */

	    }, {
	        key: "setCallback",
	        value: function setCallback(callback) {
	            this._callback = callback;
	            return this;
	        }

	        /**
	         * Show/hide emojis based on a search term
	         * @private
	         */

	    }, {
	        key: "_search",
	        value: function _search() {
	            if (this.search_term.trim().length === 0) {
	                this._clearSearch();
	            } else {
	                this.$title.addClass('inactive');

	                var regexp = new RegExp(this.search_term.toLowerCase());

	                this.emojis.forEach(function (emoji) {
	                    if (emoji.matchesSearchTerm(regexp)) {
	                        emoji.$emoji.show();
	                    } else {
	                        emoji.$emoji.hide();
	                    }
	                });
	            }
	        }

	        /**
	         * Clear the effects of the search
	         *
	         * @returns {EmojiCategory}
	         * @private
	         */

	    }, {
	        key: "_clearSearch",
	        value: function _clearSearch() {
	            this.$title.removeClass('inactive');
	            this.emojis.forEach(function (emoji) {
	                return emoji.$emoji.show();
	            });

	            return this;
	        }
	    }, {
	        key: "offset_top",
	        get: function get() {
	            return this.$category.get(0).offsetTop;
	        }
	    }]);

	    return EmojiCategory;
	}();

	exports.default = EmojiCategory;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Converters = __webpack_require__(4);

	var _Converters2 = _interopRequireDefault(_Converters);

	var _jquery = __webpack_require__(1);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _defaults = __webpack_require__(6);

	var _defaults2 = _interopRequireDefault(_defaults);

	__webpack_require__(9);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Emoji = function () {
	  _createClass(Emoji, null, [{
	    key: "factory",
	    value: function factory(data, category, callback) {
	      var emoji = new Emoji(data, category);
	      emoji.setCallback(callback);
	      return emoji;
	    }
	  }, {
	    key: "randomIntFromInterval",


	    /**
	     * @link http://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript
	     * @param min
	     * @param max
	     * @returns {number}
	     */
	    value: function randomIntFromInterval(min, max) {
	      return Math.floor(Math.random() * (max - min + 1) + min);
	    }
	  }, {
	    key: "random_color",
	    get: function get() {
	      var colors = ["blue", "yellow", "green", "orange", "indigo", "pink"];
	      return colors[Emoji.randomIntFromInterval(0, colors.length - 1)];
	    }
	  }]);

	  function Emoji(data, category) {
	    _classCallCheck(this, Emoji);

	    /**
	     * @type {Boolean}
	     */
	    this.has_apple_img = data['has_img_apple'];

	    /**
	     * @type {Boolean}
	     */
	    this.has_google_img = data['has_img_google'];

	    /**
	     * @type {Boolean}
	     */
	    this.has_twitter_img = data['has_img_twitter'];

	    /**
	     * @type {Boolean}
	     */
	    this.has_emojione_img = data['has_img_emojione'];

	    /**
	     * @type {String} - the name of the category
	     */
	    this.category = category;

	    /**
	     * @type {String}
	     */
	    this.full_name = data['name'];

	    /**
	     * @type {String}
	     */
	    this.short_name = data['short_name'];

	    /**
	     * @type {String[]}
	     */
	    this.short_names = data['short_names'];

	    /**
	     * @type {Number}
	     */
	    this.sort_order = data['sort_order'];

	    /**
	     * @type {String}
	     */
	    this.hover_color = Emoji.random_color;

	    /**
	     * Gets the emoji for the
	     * @type {string}
	     */
	    this.$emoji = this.getEmojiForPlatform();

	    /**
	     * Callback executed when the emoji was clicked
	     *
	     * @type {Function|undefined}
	     * @private
	     */
	    this._bubble = undefined;
	    //Set a click listener on the emoji
	    this._onClick()._onHover();
	  }

	  /**
	   * Getter for the emoji's colon syntax
	   *
	   * @returns {string}
	   */


	  _createClass(Emoji, [{
	    key: "getColons",
	    value: function getColons() {
	      return ":" + this.short_name + ":";
	    }

	    /**
	     * Getter for the unicode emoji
	     *
	     * @returns {string}
	     */

	  }, {
	    key: "getUnified",
	    value: function getUnified() {
	      return _Converters2.default.withUnified().replace_colons(this.getColons());
	    }

	    /**
	     * Gets the image representation of an emoji
	     *
	     * @returns {string}
	     */

	  }, {
	    key: "getImage",
	    value: function getImage() {
	      return _Converters2.default.withImage().replace_colons(this.getColons());
	    }

	    /**
	     * @return {String} Codepoints for the emoji
	     */

	  }, {
	    key: "getCodepoints",
	    value: function getCodepoints() {
	      var $image = (0, _jquery2.default)(this.getImage());
	      if ($image.hasClass('emoji-inner')) {
	        return $image.data('codepoints');
	      }

	      return $image.find('.emoji-inner').data('codepoints');
	    }

	    /**
	     * Getter for the emoji character regardless of the platform.
	     *
	     * @returns {string}
	     */

	  }, {
	    key: "getCharacter",
	    value: function getCharacter() {
	      var codepoints = this.getCodepoints();
	      if (/-/g.test(codepoints)) {
	        var arr = codepoints.split("-");
	        var one = "0x" + arr[0];
	        var two = "0x" + arr[1];
	        return String.fromCodePoint(one, two);
	      }
	      return String.fromCodePoint("0x" + codepoints);
	    }

	    /**
	     * Determines if the environment supports unified unicode.
	     *
	     * @returns {boolean}
	     */

	  }, {
	    key: "getEmojiForPlatform",


	    /**
	     * Gets the platform-appropriate representation of the emoji.
	     *
	     * @return {string|jQuery}
	     */
	    value: function getEmojiForPlatform() {

	      var emote = _Converters2.default.withEnvironment().replace_colons(this.getColons());

	      return this._getWrapper().append(emote);
	    }

	    /**
	     *
	     * @returns {*}
	     */

	  }, {
	    key: "getPreview",
	    value: function getPreview() {
	      var emote = _Converters2.default.withEnvironment().replace_colons(this.getColons());

	      return this._getPreviewWrapper().append(emote);
	    }

	    /**
	     * Getter for the class' markup
	     *
	     * @returns {string}
	     */

	  }, {
	    key: "getMarkup",
	    value: function getMarkup() {
	      return this.$emoji;
	    }

	    /**
	     * Gets the html of an emoji for things like pasting
	     * raw html into the contenteditable.
	     *
	     * @return {String}
	     */

	  }, {
	    key: "getHtml",
	    value: function getHtml() {
	      return this.$emoji.get(0).innerHTML;
	    }

	    /**
	     * Sets the callback that gets executed when the emoji gets clicked
	     *
	     * @param {Function} callback
	     * @returns {Emoji}
	     */

	  }, {
	    key: "setCallback",
	    value: function setCallback(callback) {
	      this._bubble = callback;
	      return this;
	    }

	    /**
	     *
	     * @param regexp
	     * @returns {undefined|String}
	     */

	  }, {
	    key: "matchesSearchTerm",
	    value: function matchesSearchTerm(regexp) {
	      return this.short_names.find(function (name) {
	        return regexp.test(name);
	      });
	    }

	    /**
	     * Gets the wrapper for the emoji
	     *
	     * @returns {jQuery|HTMLElement}
	     * @private
	     */

	  }, {
	    key: "_getWrapper",
	    value: function _getWrapper() {
	      return (0, _jquery2.default)("<span class = \"emoji-char-wrapper " + this.hover_color + "\" data-name=\"" + this.full_name + "\" data-category=\"" + this.category + "\"></span>");
	    }

	    /**
	     * Gets the wrapper for the preview
	     *
	     * @returns {jQuery|HTMLElement}
	     * @private
	     */

	  }, {
	    key: "_getPreviewWrapper",
	    value: function _getPreviewWrapper() {
	      return (0, _jquery2.default)("<span class = \"emoji-preview-wrapper " + this.hover_color + "\" data-name=\"" + this.full_name + "\" data-category=\"" + this.category + "\"></span>");
	    }

	    /**
	     *
	     * @returns {Emoji}
	     * @private
	     */

	  }, {
	    key: "_onClick",
	    value: function _onClick() {
	      var _this = this;

	      (0, _jquery2.default)(this.$emoji).off('click.emoji').on('click.emoji', function (event) {
	        if (_this._bubble) {
	          _this._bubble(_defaults2.default.events.SELECTED, _this);
	        }
	      });

	      return this;
	    }

	    /**
	     *
	     * @returns {Emoji}
	     * @private
	     */

	  }, {
	    key: "_onHover",
	    value: function _onHover() {
	      var _this2 = this;

	      (0, _jquery2.default)(this.$emoji).off('mouseenter.emoji').on('mouseenter.emoji', function () {
	        _this2._bubble(_defaults2.default.events.EMOJI_MOUSEENTER, _this2);
	      }).off('mouseleave.emoji').on('mouseleave.emoji', function () {
	        _this2._bubble(_defaults2.default.events.EMOJI_MOUSELEAVE, _this2);
	      });

	      return this;
	    }
	  }], [{
	    key: "supportsUnified",
	    value: function supportsUnified() {
	      return _Converters2.default.withEnvironment().replace_mode === "unified";
	    }
	  }]);

	  return Emoji;
	}();

	exports.default = Emoji;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	'use strict';

	if (typeof Object.assign != 'function') {
	  Object.assign = function (target, varArgs) {
	    // .length of function is 2
	    'use strict';

	    if (target == null) {
	      // TypeError if undefined or null
	      throw new TypeError('Cannot convert undefined or null to object');
	    }

	    var to = Object(target);

	    for (var index = 1; index < arguments.length; index++) {
	      var nextSource = arguments[index];

	      if (nextSource != null) {
	        // Skip over if undefined or null
	        for (var nextKey in nextSource) {
	          // Avoid bugs when hasOwnProperty is shadowed
	          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
	            to[nextKey] = nextSource[nextKey];
	          }
	        }
	      }
	    }
	    return to;
	  };
	}

	// https://tc39.github.io/ecma262/#sec-array.prototype.find
	if (!Array.prototype.find) {
	  Object.defineProperty(Array.prototype, 'find', {
	    value: function value(predicate) {
	      // 1. Let O be ? ToObject(this value).
	      if (this == null) {
	        throw new TypeError('"this" is null or not defined');
	      }

	      var o = Object(this);

	      // 2. Let len be ? ToLength(? Get(O, "length")).
	      var len = o.length >>> 0;

	      // 3. If IsCallable(predicate) is false, throw a TypeError exception.
	      if (typeof predicate !== 'function') {
	        throw new TypeError('predicate must be a function');
	      }

	      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
	      var thisArg = arguments[1];

	      // 5. Let k be 0.
	      var k = 0;

	      // 6. Repeat, while k < len
	      while (k < len) {
	        // a. Let Pk be ! ToString(k).
	        // b. Let kValue be ? Get(O, Pk).
	        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
	        // d. If testResult is true, return kValue.
	        var kValue = o[k];
	        if (predicate.call(thisArg, kValue, k, o)) {
	          return kValue;
	        }
	        // e. Increase k by 1.
	        k++;
	      }

	      // 7. Return undefined.
	      return undefined;
	    }
	  });
	}

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(11);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"category-wrapper\"><div class=\"category-title\"><span>");t.b(t.v(t.f("title",c,p,0)));t.b("</span></div><div class=\"category-content\"></div></div>");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"category-wrapper\"><div class=\"category-title\"><span>{{title}}</span></div><div class=\"category-content\"></div></div>", H);return T.render.apply(T, arguments); };

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/*
	 *  Copyright 2011 Twitter, Inc.
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *  http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 */

	// This file is for use with Node.js. See dist/ for browser files.

	var Hogan = __webpack_require__(12);
	Hogan.Template = __webpack_require__(13).Template;
	Hogan.template = Hogan.Template;
	module.exports = Hogan;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/*
	 *  Copyright 2011 Twitter, Inc.
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *  http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 */

	(function (Hogan) {
	  // Setup regex  assignments
	  // remove whitespace according to Mustache spec
	  var rIsWhitespace = /\S/,
	      rQuot = /\"/g,
	      rNewline = /\n/g,
	      rCr = /\r/g,
	      rSlash = /\\/g,
	      rLineSep = /\u2028/,
	      rParagraphSep = /\u2029/;

	  Hogan.tags = {
	    '#': 1, '^': 2, '<': 3, '$': 4,
	    '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,
	    '{': 10, '&': 11, '_t': 12
	  };

	  Hogan.scan = function scan(text, delimiters) {
	    var len = text.length,
	        IN_TEXT = 0,
	        IN_TAG_TYPE = 1,
	        IN_TAG = 2,
	        state = IN_TEXT,
	        tagType = null,
	        tag = null,
	        buf = '',
	        tokens = [],
	        seenTag = false,
	        i = 0,
	        lineStart = 0,
	        otag = '{{',
	        ctag = '}}';

	    function addBuf() {
	      if (buf.length > 0) {
	        tokens.push({ tag: '_t', text: new String(buf) });
	        buf = '';
	      }
	    }

	    function lineIsWhitespace() {
	      var isAllWhitespace = true;
	      for (var j = lineStart; j < tokens.length; j++) {
	        isAllWhitespace = Hogan.tags[tokens[j].tag] < Hogan.tags['_v'] || tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null;
	        if (!isAllWhitespace) {
	          return false;
	        }
	      }

	      return isAllWhitespace;
	    }

	    function filterLine(haveSeenTag, noNewLine) {
	      addBuf();

	      if (haveSeenTag && lineIsWhitespace()) {
	        for (var j = lineStart, next; j < tokens.length; j++) {
	          if (tokens[j].text) {
	            if ((next = tokens[j + 1]) && next.tag == '>') {
	              // set indent to token value
	              next.indent = tokens[j].text.toString();
	            }
	            tokens.splice(j, 1);
	          }
	        }
	      } else if (!noNewLine) {
	        tokens.push({ tag: '\n' });
	      }

	      seenTag = false;
	      lineStart = tokens.length;
	    }

	    function changeDelimiters(text, index) {
	      var close = '=' + ctag,
	          closeIndex = text.indexOf(close, index),
	          delimiters = trim(text.substring(text.indexOf('=', index) + 1, closeIndex)).split(' ');

	      otag = delimiters[0];
	      ctag = delimiters[delimiters.length - 1];

	      return closeIndex + close.length - 1;
	    }

	    if (delimiters) {
	      delimiters = delimiters.split(' ');
	      otag = delimiters[0];
	      ctag = delimiters[1];
	    }

	    for (i = 0; i < len; i++) {
	      if (state == IN_TEXT) {
	        if (tagChange(otag, text, i)) {
	          --i;
	          addBuf();
	          state = IN_TAG_TYPE;
	        } else {
	          if (text.charAt(i) == '\n') {
	            filterLine(seenTag);
	          } else {
	            buf += text.charAt(i);
	          }
	        }
	      } else if (state == IN_TAG_TYPE) {
	        i += otag.length - 1;
	        tag = Hogan.tags[text.charAt(i + 1)];
	        tagType = tag ? text.charAt(i + 1) : '_v';
	        if (tagType == '=') {
	          i = changeDelimiters(text, i);
	          state = IN_TEXT;
	        } else {
	          if (tag) {
	            i++;
	          }
	          state = IN_TAG;
	        }
	        seenTag = i;
	      } else {
	        if (tagChange(ctag, text, i)) {
	          tokens.push({ tag: tagType, n: trim(buf), otag: otag, ctag: ctag,
	            i: tagType == '/' ? seenTag - otag.length : i + ctag.length });
	          buf = '';
	          i += ctag.length - 1;
	          state = IN_TEXT;
	          if (tagType == '{') {
	            if (ctag == '}}') {
	              i++;
	            } else {
	              cleanTripleStache(tokens[tokens.length - 1]);
	            }
	          }
	        } else {
	          buf += text.charAt(i);
	        }
	      }
	    }

	    filterLine(seenTag, true);

	    return tokens;
	  };

	  function cleanTripleStache(token) {
	    if (token.n.substr(token.n.length - 1) === '}') {
	      token.n = token.n.substring(0, token.n.length - 1);
	    }
	  }

	  function trim(s) {
	    if (s.trim) {
	      return s.trim();
	    }

	    return s.replace(/^\s*|\s*$/g, '');
	  }

	  function tagChange(tag, text, index) {
	    if (text.charAt(index) != tag.charAt(0)) {
	      return false;
	    }

	    for (var i = 1, l = tag.length; i < l; i++) {
	      if (text.charAt(index + i) != tag.charAt(i)) {
	        return false;
	      }
	    }

	    return true;
	  }

	  // the tags allowed inside super templates
	  var allowedInSuper = { '_t': true, '\n': true, '$': true, '/': true };

	  function buildTree(tokens, kind, stack, customTags) {
	    var instructions = [],
	        opener = null,
	        tail = null,
	        token = null;

	    tail = stack[stack.length - 1];

	    while (tokens.length > 0) {
	      token = tokens.shift();

	      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {
	        throw new Error('Illegal content in < super tag.');
	      }

	      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {
	        stack.push(token);
	        token.nodes = buildTree(tokens, token.tag, stack, customTags);
	      } else if (token.tag == '/') {
	        if (stack.length === 0) {
	          throw new Error('Closing tag without opener: /' + token.n);
	        }
	        opener = stack.pop();
	        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {
	          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);
	        }
	        opener.end = token.i;
	        return instructions;
	      } else if (token.tag == '\n') {
	        token.last = tokens.length == 0 || tokens[0].tag == '\n';
	      }

	      instructions.push(token);
	    }

	    if (stack.length > 0) {
	      throw new Error('missing closing tag: ' + stack.pop().n);
	    }

	    return instructions;
	  }

	  function isOpener(token, tags) {
	    for (var i = 0, l = tags.length; i < l; i++) {
	      if (tags[i].o == token.n) {
	        token.tag = '#';
	        return true;
	      }
	    }
	  }

	  function isCloser(close, open, tags) {
	    for (var i = 0, l = tags.length; i < l; i++) {
	      if (tags[i].c == close && tags[i].o == open) {
	        return true;
	      }
	    }
	  }

	  function stringifySubstitutions(obj) {
	    var items = [];
	    for (var key in obj) {
	      items.push('"' + esc(key) + '": function(c,p,t,i) {' + obj[key] + '}');
	    }
	    return "{ " + items.join(",") + " }";
	  }

	  function stringifyPartials(codeObj) {
	    var partials = [];
	    for (var key in codeObj.partials) {
	      partials.push('"' + esc(key) + '":{name:"' + esc(codeObj.partials[key].name) + '", ' + stringifyPartials(codeObj.partials[key]) + "}");
	    }
	    return "partials: {" + partials.join(",") + "}, subs: " + stringifySubstitutions(codeObj.subs);
	  }

	  Hogan.stringify = function (codeObj, text, options) {
	    return "{code: function (c,p,i) { " + Hogan.wrapMain(codeObj.code) + " }," + stringifyPartials(codeObj) + "}";
	  };

	  var serialNo = 0;
	  Hogan.generate = function (tree, text, options) {
	    serialNo = 0;
	    var context = { code: '', subs: {}, partials: {} };
	    Hogan.walk(tree, context);

	    if (options.asString) {
	      return this.stringify(context, text, options);
	    }

	    return this.makeTemplate(context, text, options);
	  };

	  Hogan.wrapMain = function (code) {
	    return 'var t=this;t.b(i=i||"");' + code + 'return t.fl();';
	  };

	  Hogan.template = Hogan.Template;

	  Hogan.makeTemplate = function (codeObj, text, options) {
	    var template = this.makePartials(codeObj);
	    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));
	    return new this.template(template, text, this, options);
	  };

	  Hogan.makePartials = function (codeObj) {
	    var key,
	        template = { subs: {}, partials: codeObj.partials, name: codeObj.name };
	    for (key in template.partials) {
	      template.partials[key] = this.makePartials(template.partials[key]);
	    }
	    for (key in codeObj.subs) {
	      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);
	    }
	    return template;
	  };

	  function esc(s) {
	    return s.replace(rSlash, '\\\\').replace(rQuot, '\\\"').replace(rNewline, '\\n').replace(rCr, '\\r').replace(rLineSep, '\\u2028').replace(rParagraphSep, '\\u2029');
	  }

	  function chooseMethod(s) {
	    return ~s.indexOf('.') ? 'd' : 'f';
	  }

	  function createPartial(node, context) {
	    var prefix = "<" + (context.prefix || "");
	    var sym = prefix + node.n + serialNo++;
	    context.partials[sym] = { name: node.n, partials: {} };
	    context.code += 't.b(t.rp("' + esc(sym) + '",c,p,"' + (node.indent || '') + '"));';
	    return sym;
	  }

	  Hogan.codegen = {
	    '#': function _(node, context) {
	      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,1),' + 'c,p,0,' + node.i + ',' + node.end + ',"' + node.otag + " " + node.ctag + '")){' + 't.rs(c,p,' + 'function(c,p,t){';
	      Hogan.walk(node.nodes, context);
	      context.code += '});c.pop();}';
	    },

	    '^': function _(node, context) {
	      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,1),c,p,1,0,0,"")){';
	      Hogan.walk(node.nodes, context);
	      context.code += '};';
	    },

	    '>': createPartial,
	    '<': function _(node, context) {
	      var ctx = { partials: {}, code: '', subs: {}, inPartial: true };
	      Hogan.walk(node.nodes, ctx);
	      var template = context.partials[createPartial(node, context)];
	      template.subs = ctx.subs;
	      template.partials = ctx.partials;
	    },

	    '$': function $(node, context) {
	      var ctx = { subs: {}, code: '', partials: context.partials, prefix: node.n };
	      Hogan.walk(node.nodes, ctx);
	      context.subs[node.n] = ctx.code;
	      if (!context.inPartial) {
	        context.code += 't.sub("' + esc(node.n) + '",c,p,i);';
	      }
	    },

	    '\n': function _(node, context) {
	      context.code += write('"\\n"' + (node.last ? '' : ' + i'));
	    },

	    '_v': function _v(node, context) {
	      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,0)));';
	    },

	    '_t': function _t(node, context) {
	      context.code += write('"' + esc(node.text) + '"');
	    },

	    '{': tripleStache,

	    '&': tripleStache
	  };

	  function tripleStache(node, context) {
	    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,0)));';
	  }

	  function write(s) {
	    return 't.b(' + s + ');';
	  }

	  Hogan.walk = function (nodelist, context) {
	    var func;
	    for (var i = 0, l = nodelist.length; i < l; i++) {
	      func = Hogan.codegen[nodelist[i].tag];
	      func && func(nodelist[i], context);
	    }
	    return context;
	  };

	  Hogan.parse = function (tokens, text, options) {
	    options = options || {};
	    return buildTree(tokens, '', [], options.sectionTags || []);
	  };

	  Hogan.cache = {};

	  Hogan.cacheKey = function (text, options) {
	    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');
	  };

	  Hogan.compile = function (text, options) {
	    options = options || {};
	    var key = Hogan.cacheKey(text, options);
	    var template = this.cache[key];

	    if (template) {
	      var partials = template.partials;
	      for (var name in partials) {
	        delete partials[name].instance;
	      }
	      return template;
	    }

	    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);
	    return this.cache[key] = template;
	  };
	})( true ? exports : Hogan);

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*
	 *  Copyright 2011 Twitter, Inc.
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *  http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 */

	var Hogan = {};

	(function (Hogan) {
	  Hogan.Template = function (codeObj, text, compiler, options) {
	    codeObj = codeObj || {};
	    this.r = codeObj.code || this.r;
	    this.c = compiler;
	    this.options = options || {};
	    this.text = text || '';
	    this.partials = codeObj.partials || {};
	    this.subs = codeObj.subs || {};
	    this.buf = '';
	  };

	  Hogan.Template.prototype = {
	    // render: replaced by generated code.
	    r: function r(context, partials, indent) {
	      return '';
	    },

	    // variable escaping
	    v: hoganEscape,

	    // triple stache
	    t: coerceToString,

	    render: function render(context, partials, indent) {
	      return this.ri([context], partials || {}, indent);
	    },

	    // render internal -- a hook for overrides that catches partials too
	    ri: function ri(context, partials, indent) {
	      return this.r(context, partials, indent);
	    },

	    // ensurePartial
	    ep: function ep(symbol, partials) {
	      var partial = this.partials[symbol];

	      // check to see that if we've instantiated this partial before
	      var template = partials[partial.name];
	      if (partial.instance && partial.base == template) {
	        return partial.instance;
	      }

	      if (typeof template == 'string') {
	        if (!this.c) {
	          throw new Error("No compiler available.");
	        }
	        template = this.c.compile(template, this.options);
	      }

	      if (!template) {
	        return null;
	      }

	      // We use this to check whether the partials dictionary has changed
	      this.partials[symbol].base = template;

	      if (partial.subs) {
	        // Make sure we consider parent template now
	        if (!partials.stackText) partials.stackText = {};
	        for (key in partial.subs) {
	          if (!partials.stackText[key]) {
	            partials.stackText[key] = this.activeSub !== undefined && partials.stackText[this.activeSub] ? partials.stackText[this.activeSub] : this.text;
	          }
	        }
	        template = createSpecializedPartial(template, partial.subs, partial.partials, this.stackSubs, this.stackPartials, partials.stackText);
	      }
	      this.partials[symbol].instance = template;

	      return template;
	    },

	    // tries to find a partial in the current scope and render it
	    rp: function rp(symbol, context, partials, indent) {
	      var partial = this.ep(symbol, partials);
	      if (!partial) {
	        return '';
	      }

	      return partial.ri(context, partials, indent);
	    },

	    // render a section
	    rs: function rs(context, partials, section) {
	      var tail = context[context.length - 1];

	      if (!isArray(tail)) {
	        section(context, partials, this);
	        return;
	      }

	      for (var i = 0; i < tail.length; i++) {
	        context.push(tail[i]);
	        section(context, partials, this);
	        context.pop();
	      }
	    },

	    // maybe start a section
	    s: function s(val, ctx, partials, inverted, start, end, tags) {
	      var pass;

	      if (isArray(val) && val.length === 0) {
	        return false;
	      }

	      if (typeof val == 'function') {
	        val = this.ms(val, ctx, partials, inverted, start, end, tags);
	      }

	      pass = !!val;

	      if (!inverted && pass && ctx) {
	        ctx.push((typeof val === 'undefined' ? 'undefined' : _typeof(val)) == 'object' ? val : ctx[ctx.length - 1]);
	      }

	      return pass;
	    },

	    // find values with dotted names
	    d: function d(key, ctx, partials, returnFound) {
	      var found,
	          names = key.split('.'),
	          val = this.f(names[0], ctx, partials, returnFound),
	          doModelGet = this.options.modelGet,
	          cx = null;

	      if (key === '.' && isArray(ctx[ctx.length - 2])) {
	        val = ctx[ctx.length - 1];
	      } else {
	        for (var i = 1; i < names.length; i++) {
	          found = findInScope(names[i], val, doModelGet);
	          if (found !== undefined) {
	            cx = val;
	            val = found;
	          } else {
	            val = '';
	          }
	        }
	      }

	      if (returnFound && !val) {
	        return false;
	      }

	      if (!returnFound && typeof val == 'function') {
	        ctx.push(cx);
	        val = this.mv(val, ctx, partials);
	        ctx.pop();
	      }

	      return val;
	    },

	    // find values with normal names
	    f: function f(key, ctx, partials, returnFound) {
	      var val = false,
	          v = null,
	          found = false,
	          doModelGet = this.options.modelGet;

	      for (var i = ctx.length - 1; i >= 0; i--) {
	        v = ctx[i];
	        val = findInScope(key, v, doModelGet);
	        if (val !== undefined) {
	          found = true;
	          break;
	        }
	      }

	      if (!found) {
	        return returnFound ? false : "";
	      }

	      if (!returnFound && typeof val == 'function') {
	        val = this.mv(val, ctx, partials);
	      }

	      return val;
	    },

	    // higher order templates
	    ls: function ls(func, cx, partials, text, tags) {
	      var oldTags = this.options.delimiters;

	      this.options.delimiters = tags;
	      this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));
	      this.options.delimiters = oldTags;

	      return false;
	    },

	    // compile text
	    ct: function ct(text, cx, partials) {
	      if (this.options.disableLambda) {
	        throw new Error('Lambda features disabled.');
	      }
	      return this.c.compile(text, this.options).render(cx, partials);
	    },

	    // template result buffering
	    b: function b(s) {
	      this.buf += s;
	    },

	    fl: function fl() {
	      var r = this.buf;this.buf = '';return r;
	    },

	    // method replace section
	    ms: function ms(func, ctx, partials, inverted, start, end, tags) {
	      var textSource,
	          cx = ctx[ctx.length - 1],
	          result = func.call(cx);

	      if (typeof result == 'function') {
	        if (inverted) {
	          return true;
	        } else {
	          textSource = this.activeSub && this.subsText && this.subsText[this.activeSub] ? this.subsText[this.activeSub] : this.text;
	          return this.ls(result, cx, partials, textSource.substring(start, end), tags);
	        }
	      }

	      return result;
	    },

	    // method replace variable
	    mv: function mv(func, ctx, partials) {
	      var cx = ctx[ctx.length - 1];
	      var result = func.call(cx);

	      if (typeof result == 'function') {
	        return this.ct(coerceToString(result.call(cx)), cx, partials);
	      }

	      return result;
	    },

	    sub: function sub(name, context, partials, indent) {
	      var f = this.subs[name];
	      if (f) {
	        this.activeSub = name;
	        f(context, partials, this, indent);
	        this.activeSub = false;
	      }
	    }

	  };

	  //Find a key in an object
	  function findInScope(key, scope, doModelGet) {
	    var val;

	    if (scope && (typeof scope === 'undefined' ? 'undefined' : _typeof(scope)) == 'object') {

	      if (scope[key] !== undefined) {
	        val = scope[key];

	        // try lookup with get for backbone or similar model data
	      } else if (doModelGet && scope.get && typeof scope.get == 'function') {
	        val = scope.get(key);
	      }
	    }

	    return val;
	  }

	  function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {
	    function PartialTemplate() {};
	    PartialTemplate.prototype = instance;
	    function Substitutions() {};
	    Substitutions.prototype = instance.subs;
	    var key;
	    var partial = new PartialTemplate();
	    partial.subs = new Substitutions();
	    partial.subsText = {}; //hehe. substext.
	    partial.buf = '';

	    stackSubs = stackSubs || {};
	    partial.stackSubs = stackSubs;
	    partial.subsText = stackText;
	    for (key in subs) {
	      if (!stackSubs[key]) stackSubs[key] = subs[key];
	    }
	    for (key in stackSubs) {
	      partial.subs[key] = stackSubs[key];
	    }

	    stackPartials = stackPartials || {};
	    partial.stackPartials = stackPartials;
	    for (key in partials) {
	      if (!stackPartials[key]) stackPartials[key] = partials[key];
	    }
	    for (key in stackPartials) {
	      partial.partials[key] = stackPartials[key];
	    }

	    return partial;
	  }

	  var rAmp = /&/g,
	      rLt = /</g,
	      rGt = />/g,
	      rApos = /\'/g,
	      rQuot = /\"/g,
	      hChars = /[&<>\"\']/;

	  function coerceToString(val) {
	    return String(val === null || val === undefined ? '' : val);
	  }

	  function hoganEscape(str) {
	    str = coerceToString(str);
	    return hChars.test(str) ? str.replace(rAmp, '&amp;').replace(rLt, '&lt;').replace(rGt, '&gt;').replace(rApos, '&#39;').replace(rQuot, '&quot;') : str;
	  }

	  var isArray = Array.isArray || function (a) {
	    return Object.prototype.toString.call(a) === '[object Array]';
	  };
	})( true ? exports : Hogan);

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	!function (t, i) {
	  if ("object" == ( false ? "undefined" : _typeof(exports)) && "object" == ( false ? "undefined" : _typeof(module))) module.exports = i(__webpack_require__(1));else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (i), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {
	    var o = i("object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? require("jquery") : t.jquery);for (var e in o) {
	      ("object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports : t)[e] = o[e];
	    }
	  }
	}(undefined, function (t) {
	  return function (t) {
	    function i(e) {
	      if (o[e]) return o[e].exports;var s = o[e] = { exports: {}, id: e, loaded: !1 };return t[e].call(s.exports, s, s.exports, i), s.loaded = !0, s.exports;
	    }var o = {};return i.m = t, i.c = o, i.p = "", i(0);
	  }([function (t, i, o) {
	    "use strict";
	    function e(t) {
	      return t && t.__esModule ? t : { default: t };
	    }function s(t, i, o) {
	      this.element = t, this.container = i, this.$tooltip = o, this.elRect = this.element.getBoundingClientRect(), this.contRect = this.container.getBoundingClientRect(), this.dimension = this.calculateViewportPosition(), this.jqDimension = {}, this.elHeight = (0, h.default)(this.element).outerHeight(), this.elWidth = (0, h.default)(this.element).outerWidth(), this.jqHeight = 0, this.jqWidth = 0, this._unique = "", this._scroll_handle = "", this._scroll_container = "", this.placeTooltip();
	    }Object.defineProperty(i, "__esModule", { value: !0 });var n = o(1),
	        h = e(n);s.prototype.placeTooltip = function () {
	      (0, h.default)(this.container).append(this.$tooltip), this.jqHeight = this.$tooltip.outerHeight(), this.jqWidth = this.$tooltip.outerWidth(), this.$tooltip.css("top", this.dimension.top - this.$tooltip.outerHeight() / 2 + this.elRect.height / 2).css("left", this.dimension.left - this.$tooltip.outerWidth() / 2 + this.elRect.width / 2);
	    }, s.prototype.autoPlace = function (t, i) {
	      var o = this.determineOffsetFromElement();t = t || 0, i = i || 0;var e = "TooltipRight" === o.horizontal ? "-=" : "+=",
	          s = "TooltipAbove" === o.vertical ? "-=" : "+=";return this.$tooltip.css("left", e + (this.elWidth / 2 + this.jqWidth / 2 - t) + "px"), this.$tooltip.css("top", s + (this.elHeight / 2 + this.jqHeight / 2 + i) + "px"), this.$tooltip.addClass(o.horizontal + " " + o.vertical + " autoplace"), this;
	    }, s.prototype.autoPlaceHorizontally = function (t) {
	      var i = this.determineOffsetFromElement();t = t || 0;var o = "TooltipRight" === i.horizontal ? "-=" : "+=";return this.$tooltip.css("left", o + (this.elWidth / 2 + this.jqWidth / 2 + t) + "px"), this.$tooltip.addClass(i.horizontal), this;
	    }, s.prototype.autoPlaceVertically = function (t) {
	      var i = this.determineOffsetFromElement();t = t || 0;var o = "TooltipAbove" === i.vertical ? "-=" : "+=";return this.$tooltip.css("top", o + (this.elHeight / 2 + this.jqHeight / 2 + t) + "px"), this.$tooltip.addClass(i.vertical), this;
	    }, s.prototype.above = function (t) {
	      return t = t || 0, this.$tooltip.css("top", "-=" + (this.elHeight / 2 + this.jqHeight / 2 + t) + "px"), this.$tooltip.addClass("TooltipAbove"), this;
	    }, s.prototype.below = function (t) {
	      return t = t || 0, this.$tooltip.css("top", "+=" + (this.elHeight / 2 + this.jqHeight / 2 + t) + "px"), this.$tooltip.addClass("TooltipBelow"), this;
	    }, s.prototype.left = function (t) {
	      return t = t || 0, this.$tooltip.css("left", "-=" + (this.elWidth / 2 + this.jqWidth / 2 + t) + "px"), this.$tooltip.addClass("TooltipLeft"), this;
	    }, s.prototype.right = function (t) {
	      return t = t || 0, this.$tooltip.css("left", "+=" + (this.elWidth / 2 + this.jqWidth / 2 + t) + "px"), this.$tooltip.addClass("TooltipRight"), this;
	    }, s.prototype.alignLeft = function (t) {
	      t = t || 0, this.jqDimension = this.jqViewportDimension();var i = this.jqDimension.left > this.dimension.left ? "-=" : "+=";return this.$tooltip.css("left", i + (Math.abs(this.jqDimension.left - this.dimension.left) + t) + "px"), this.$tooltip.addClass("TooltipAlignLeft"), this;
	    }, s.prototype.alignRight = function (t) {
	      t = t || 0, this.jqDimension = this.jqViewportDimension();var i = this.jqDimension.right > this.dimension.right ? "-=" : "+=";return this.$tooltip.css("left", i + (Math.abs(this.jqDimension.right - this.dimension.right) + t) + "px"), this.$tooltip.addClass("TooltipAlignRight"), this;
	    }, s.prototype.inside = function () {
	      var t = this;if (arguments.length) {
	        var i = Array.prototype.slice.call(arguments);i.forEach(function (i) {
	          switch (i) {case "top":
	              t._insideTop();break;case "bottom":
	              t._insideBottom();break;case "left":
	              t.alignLeft();break;case "right":
	              t.alignRight();}
	        });
	      }return this;
	    }, s.prototype._insideTop = function () {
	      return this.$tooltip.css("top", "-=" + this.elHeight / 4), this;
	    }, s.prototype._insideBottom = function () {
	      return this.$tooltip.css("top", "+=" + this.elHeight / 2), this;
	    }, s.prototype.center = function () {
	      return this._removeClasses(), this.elRect = this.element.getBoundingClientRect(), this.contRect = this.container.getBoundingClientRect(), this.dimension = this.calculateViewportPosition(), this.jqHeight = this.$tooltip.outerHeight(), this.jqWidth = this.$tooltip.outerWidth(), this.$tooltip.css("top", this.dimension.top - this.$tooltip.outerHeight() / 2 + this.elRect.height / 2).css("left", this.dimension.left - this.$tooltip.outerWidth() / 2 + this.elRect.width / 2), this;
	    }, s.prototype._removeClasses = function () {
	      return this.$tooltip.removeClass("TooltipAlignRight TooltipAlignLeft TooltipRight TooltipLeft TooltipAbove TooltipBelow"), this;
	    }, s.prototype.destroy = function () {
	      return this._removeListeners(), this.$tooltip.remove(), this;
	    }, s.prototype.hide = function () {
	      return this.$tooltip.hide(), this;
	    }, s.prototype.show = function () {
	      return this.$tooltip.show(), this;
	    }, s.prototype.removeListener = function () {
	      var t = this;return setTimeout(function () {
	        (0, h.default)("html").on("click.tooltip", function () {
	          t.$tooltip.remove(), (0, h.default)("html").off("click.tooltip");
	        });
	      }, 50), this;
	    }, s.prototype.setClickCallback = function (t, i) {
	      var o = this;t.stopPropagation(), this._unique = "click." + new Date().getTime(), (0, h.default)("html").on(this._unique, function (t) {
	        i.call(o, t.target, o.$tooltip);
	      });
	    }, s.prototype.offCallback = function () {
	      return this._unique && (0, h.default)("html").off(this._unique), this;
	    }, s.prototype.scrollWith = function (t) {
	      var i = this;this._scroll_container = t;var o = t.get(0).scrollTop;return this._scroll_handle = "scroll." + new Date().getTime(), this._scroll_container.on(this._scroll_handle, function () {
	        var e = o - t.get(0).scrollTop;i.$tooltip.css("top", "+=" + e + "px"), o = t.get(0).scrollTop;
	      }), this;
	    }, s.prototype._removeListeners = function () {
	      return this._scroll_container && this._scroll_handle && this._scroll_container.off(this._scroll_handle), this.offCallback(), this;
	    }, s.prototype.jqViewportDimension = function () {
	      var t = this.$tooltip[0].getBoundingClientRect(),
	          i = this.contRect,
	          o = t.left - i.left + this.container.scrollLeft,
	          e = t.top - i.top + this.container.scrollTop,
	          s = t.right - i.right,
	          n = t.bottom - i.bottom;return { left: o, top: e, right: s, bottom: n, width: t.width, height: t.height };
	    }, s.prototype.calculateViewportPosition = function () {
	      var t = this.elRect,
	          i = this.contRect,
	          o = t.left - i.left + this.container.scrollLeft,
	          e = t.top - i.top + this.container.scrollTop,
	          s = t.right - i.right,
	          n = t.bottom - i.bottom;return { left: o, top: e, right: s, bottom: n, width: t.width, height: t.height };
	    }, s.prototype.determineOffsetFromElement = function () {
	      var t = window.innerHeight / 2,
	          i = window.innerWidth / 2,
	          o = this.elRect.left > i ? "TooltipRight" : "TooltipLeft",
	          e = this.elRect.top > t ? "TooltipAbove" : "TooltipBelow";return { horizontal: o, vertical: e };
	    }, i.default = s;
	  }, function (i, o) {
	    i.exports = t;
	  }]);
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  "Symbols": [{
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": false,
	    "has_img_emojione": true,
	    "name": "COPYRIGHT SIGN",
	    "short_name": "copyright",
	    "short_names": ["copyright"],
	    "sort_order": 197
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": false,
	    "has_img_emojione": true,
	    "name": "REGISTERED SIGN",
	    "short_name": "registered",
	    "short_names": ["registered"],
	    "sort_order": 198
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DOUBLE EXCLAMATION MARK",
	    "short_name": "bangbang",
	    "short_names": ["bangbang"],
	    "sort_order": 86
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EXCLAMATION QUESTION MARK",
	    "short_name": "interrobang",
	    "short_names": ["interrobang"],
	    "sort_order": 87
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": false,
	    "has_img_emojione": true,
	    "name": "TRADE MARK SIGN",
	    "short_name": "tm",
	    "short_names": ["tm"],
	    "sort_order": 199
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "INFORMATION SOURCE",
	    "short_name": "information_source",
	    "short_names": ["information_source"],
	    "sort_order": 180
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LEFT RIGHT ARROW",
	    "short_name": "left_right_arrow",
	    "short_names": ["left_right_arrow"],
	    "sort_order": 172
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "UP DOWN ARROW",
	    "short_name": "arrow_up_down",
	    "short_names": ["arrow_up_down"],
	    "sort_order": 171
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NORTH WEST ARROW",
	    "short_name": "arrow_upper_left",
	    "short_names": ["arrow_upper_left"],
	    "sort_order": 170
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NORTH EAST ARROW",
	    "short_name": "arrow_upper_right",
	    "short_names": ["arrow_upper_right"],
	    "sort_order": 167
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SOUTH EAST ARROW",
	    "short_name": "arrow_lower_right",
	    "short_names": ["arrow_lower_right"],
	    "sort_order": 168
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SOUTH WEST ARROW",
	    "short_name": "arrow_lower_left",
	    "short_names": ["arrow_lower_left"],
	    "sort_order": 169
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LEFTWARDS ARROW WITH HOOK",
	    "short_name": "leftwards_arrow_with_hook",
	    "short_names": ["leftwards_arrow_with_hook"],
	    "sort_order": 175
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RIGHTWARDS ARROW WITH HOOK",
	    "short_name": "arrow_right_hook",
	    "short_names": ["arrow_right_hook"],
	    "sort_order": 174
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK RIGHT-POINTING DOUBLE TRIANGLE",
	    "short_name": "fast_forward",
	    "short_names": ["fast_forward"],
	    "sort_order": 153
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK LEFT-POINTING DOUBLE TRIANGLE",
	    "short_name": "rewind",
	    "short_names": ["rewind"],
	    "sort_order": 154
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK UP-POINTING DOUBLE TRIANGLE",
	    "short_name": "arrow_double_up",
	    "short_names": ["arrow_double_up"],
	    "sort_order": 161
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK DOWN-POINTING DOUBLE TRIANGLE",
	    "short_name": "arrow_double_down",
	    "short_names": ["arrow_double_down"],
	    "sort_order": 162
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "BLACK RIGHT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR",
	    "short_name": "black_right_pointing_double_triangle_with_vertical_bar",
	    "short_names": ["black_right_pointing_double_triangle_with_vertical_bar"],
	    "sort_order": 151
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "BLACK LEFT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR",
	    "short_name": "black_left_pointing_double_triangle_with_vertical_bar",
	    "short_names": ["black_left_pointing_double_triangle_with_vertical_bar"],
	    "sort_order": 152
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "BLACK RIGHT-POINTING TRIANGLE WITH DOUBLE VERTICAL BAR",
	    "short_name": "black_right_pointing_triangle_with_double_vertical_bar",
	    "short_names": ["black_right_pointing_triangle_with_double_vertical_bar"],
	    "sort_order": 148
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "DOUBLE VERTICAL BAR",
	    "short_name": "double_vertical_bar",
	    "short_names": ["double_vertical_bar"],
	    "sort_order": 147
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "BLACK SQUARE FOR STOP",
	    "short_name": "black_square_for_stop",
	    "short_names": ["black_square_for_stop"],
	    "sort_order": 149
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "BLACK CIRCLE FOR RECORD",
	    "short_name": "black_circle_for_record",
	    "short_names": ["black_circle_for_record"],
	    "sort_order": 150
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CIRCLED LATIN CAPITAL LETTER M",
	    "short_name": "m",
	    "short_names": ["m"],
	    "sort_order": 108
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK SMALL SQUARE",
	    "short_name": "black_small_square",
	    "short_names": ["black_small_square"],
	    "sort_order": 216
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE SMALL SQUARE",
	    "short_name": "white_small_square",
	    "short_names": ["white_small_square"],
	    "sort_order": 217
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK RIGHT-POINTING TRIANGLE",
	    "short_name": "arrow_forward",
	    "short_names": ["arrow_forward"],
	    "sort_order": 146
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK LEFT-POINTING TRIANGLE",
	    "short_name": "arrow_backward",
	    "short_names": ["arrow_backward"],
	    "sort_order": 158
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE MEDIUM SQUARE",
	    "short_name": "white_medium_square",
	    "short_names": ["white_medium_square"],
	    "sort_order": 222
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK MEDIUM SQUARE",
	    "short_name": "black_medium_square",
	    "short_names": ["black_medium_square"],
	    "sort_order": 221
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE MEDIUM SMALL SQUARE",
	    "short_name": "white_medium_small_square",
	    "short_names": ["white_medium_small_square"],
	    "sort_order": 224
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK MEDIUM SMALL SQUARE",
	    "short_name": "black_medium_small_square",
	    "short_names": ["black_medium_small_square"],
	    "sort_order": 223
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BALLOT BOX WITH CHECK",
	    "short_name": "ballot_box_with_check",
	    "short_names": ["ballot_box_with_check"],
	    "sort_order": 205
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "RADIOACTIVE SIGN",
	    "short_name": "radioactive_sign",
	    "short_names": ["radioactive_sign"],
	    "sort_order": 44
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "BIOHAZARD SIGN",
	    "short_name": "biohazard_sign",
	    "short_names": ["biohazard_sign"],
	    "sort_order": 45
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "ORTHODOX CROSS",
	    "short_name": "orthodox_cross",
	    "short_names": ["orthodox_cross"],
	    "sort_order": 25
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "STAR AND CRESCENT",
	    "short_name": "star_and_crescent",
	    "short_names": ["star_and_crescent"],
	    "sort_order": 18
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "PEACE SYMBOL",
	    "short_name": "peace_symbol",
	    "short_names": ["peace_symbol"],
	    "sort_order": 16
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "YIN YANG",
	    "short_name": "yin_yang",
	    "short_names": ["yin_yang"],
	    "sort_order": 24
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "WHEEL OF DHARMA",
	    "short_name": "wheel_of_dharma",
	    "short_names": ["wheel_of_dharma"],
	    "sort_order": 20
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ARIES",
	    "short_name": "aries",
	    "short_names": ["aries"],
	    "sort_order": 28
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TAURUS",
	    "short_name": "taurus",
	    "short_names": ["taurus"],
	    "sort_order": 29
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GEMINI",
	    "short_name": "gemini",
	    "short_names": ["gemini"],
	    "sort_order": 30
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CANCER",
	    "short_name": "cancer",
	    "short_names": ["cancer"],
	    "sort_order": 31
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LEO",
	    "short_name": "leo",
	    "short_names": ["leo"],
	    "sort_order": 32
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "VIRGO",
	    "short_name": "virgo",
	    "short_names": ["virgo"],
	    "sort_order": 33
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LIBRA",
	    "short_name": "libra",
	    "short_names": ["libra"],
	    "sort_order": 34
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SCORPIUS",
	    "short_name": "scorpius",
	    "short_names": ["scorpius"],
	    "sort_order": 35
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SAGITTARIUS",
	    "short_name": "sagittarius",
	    "short_names": ["sagittarius"],
	    "sort_order": 36
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CAPRICORN",
	    "short_name": "capricorn",
	    "short_names": ["capricorn"],
	    "sort_order": 37
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "AQUARIUS",
	    "short_name": "aquarius",
	    "short_names": ["aquarius"],
	    "sort_order": 38
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PISCES",
	    "short_name": "pisces",
	    "short_names": ["pisces"],
	    "sort_order": 39
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK SPADE SUIT",
	    "short_name": "spades",
	    "short_names": ["spades"],
	    "sort_order": 237
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK CLUB SUIT",
	    "short_name": "clubs",
	    "short_names": ["clubs"],
	    "sort_order": 238
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK HEART SUIT",
	    "short_name": "hearts",
	    "short_names": ["hearts"],
	    "sort_order": 239
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK DIAMOND SUIT",
	    "short_name": "diamonds",
	    "short_names": ["diamonds"],
	    "sort_order": 240
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOT SPRINGS",
	    "short_name": "hotsprings",
	    "short_names": ["hotsprings"],
	    "sort_order": 75
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK UNIVERSAL RECYCLING SYMBOL",
	    "short_name": "recycle",
	    "short_names": ["recycle"],
	    "sort_order": 97
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHEELCHAIR SYMBOL",
	    "short_name": "wheelchair",
	    "short_names": ["wheelchair"],
	    "sort_order": 115
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "ATOM SYMBOL",
	    "short_name": "atom_symbol",
	    "short_names": ["atom_symbol"],
	    "sort_order": 41
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "FLEUR-DE-LIS",
	    "short_name": "fleur_de_lis",
	    "short_names": ["fleur_de_lis"],
	    "sort_order": 92
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WARNING SIGN",
	    "short_name": "warning",
	    "short_names": ["warning"],
	    "sort_order": 94
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MEDIUM WHITE CIRCLE",
	    "short_name": "white_circle",
	    "short_names": ["white_circle"],
	    "sort_order": 207
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MEDIUM BLACK CIRCLE",
	    "short_name": "black_circle",
	    "short_names": ["black_circle"],
	    "sort_order": 208
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OPHIUCHUS",
	    "short_name": "ophiuchus",
	    "short_names": ["ophiuchus"],
	    "sort_order": 27
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NO ENTRY",
	    "short_name": "no_entry",
	    "short_names": ["no_entry"],
	    "sort_order": 69
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE HEAVY CHECK MARK",
	    "short_name": "white_check_mark",
	    "short_names": ["white_check_mark"],
	    "sort_order": 103
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEAVY CHECK MARK",
	    "short_name": "heavy_check_mark",
	    "short_names": ["heavy_check_mark"],
	    "sort_order": 189
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEAVY MULTIPLICATION X",
	    "short_name": "heavy_multiplication_x",
	    "short_names": ["heavy_multiplication_x"],
	    "sort_order": 194
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "LATIN CROSS",
	    "short_name": "latin_cross",
	    "short_names": ["latin_cross"],
	    "sort_order": 17
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "STAR OF DAVID",
	    "short_name": "star_of_david",
	    "short_names": ["star_of_david"],
	    "sort_order": 21
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EIGHT SPOKED ASTERISK",
	    "short_name": "eight_spoked_asterisk",
	    "short_names": ["eight_spoked_asterisk"],
	    "sort_order": 101
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EIGHT POINTED BLACK STAR",
	    "short_name": "eight_pointed_black_star",
	    "short_names": ["eight_pointed_black_star"],
	    "sort_order": 53
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPARKLE",
	    "short_name": "sparkle",
	    "short_names": ["sparkle"],
	    "sort_order": 100
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CROSS MARK",
	    "short_name": "x",
	    "short_names": ["x"],
	    "sort_order": 72
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NEGATIVE SQUARED CROSS MARK",
	    "short_name": "negative_squared_cross_mark",
	    "short_names": ["negative_squared_cross_mark"],
	    "sort_order": 102
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK QUESTION MARK ORNAMENT",
	    "short_name": "question",
	    "short_names": ["question"],
	    "sort_order": 84
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE QUESTION MARK ORNAMENT",
	    "short_name": "grey_question",
	    "short_names": ["grey_question"],
	    "sort_order": 85
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE EXCLAMATION MARK ORNAMENT",
	    "short_name": "grey_exclamation",
	    "short_names": ["grey_exclamation"],
	    "sort_order": 83
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEAVY EXCLAMATION MARK SYMBOL",
	    "short_name": "exclamation",
	    "short_names": ["exclamation", "heavy_exclamation_mark"],
	    "sort_order": 82
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "HEAVY HEART EXCLAMATION MARK ORNAMENT",
	    "short_name": "heavy_heart_exclamation_mark_ornament",
	    "short_names": ["heavy_heart_exclamation_mark_ornament"],
	    "sort_order": 7
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEAVY BLACK HEART",
	    "short_name": "heart",
	    "short_names": ["heart"],
	    "sort_order": 1
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEAVY PLUS SIGN",
	    "short_name": "heavy_plus_sign",
	    "short_names": ["heavy_plus_sign"],
	    "sort_order": 191
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEAVY MINUS SIGN",
	    "short_name": "heavy_minus_sign",
	    "short_names": ["heavy_minus_sign"],
	    "sort_order": 192
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEAVY DIVISION SIGN",
	    "short_name": "heavy_division_sign",
	    "short_names": ["heavy_division_sign"],
	    "sort_order": 193
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK RIGHTWARDS ARROW",
	    "short_name": "arrow_right",
	    "short_names": ["arrow_right"],
	    "sort_order": 163
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CURLY LOOP",
	    "short_name": "curly_loop",
	    "short_names": ["curly_loop"],
	    "sort_order": 188
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DOUBLE CURLY LOOP",
	    "short_name": "loop",
	    "short_names": ["loop"],
	    "sort_order": 106
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS",
	    "short_name": "arrow_heading_up",
	    "short_names": ["arrow_heading_up"],
	    "sort_order": 176
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS",
	    "short_name": "arrow_heading_down",
	    "short_names": ["arrow_heading_down"],
	    "sort_order": 177
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LEFTWARDS BLACK ARROW",
	    "short_name": "arrow_left",
	    "short_names": ["arrow_left"],
	    "sort_order": 164
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "UPWARDS BLACK ARROW",
	    "short_name": "arrow_up",
	    "short_names": ["arrow_up"],
	    "sort_order": 165
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DOWNWARDS BLACK ARROW",
	    "short_name": "arrow_down",
	    "short_names": ["arrow_down"],
	    "sort_order": 166
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK LARGE SQUARE",
	    "short_name": "black_large_square",
	    "short_names": ["black_large_square"],
	    "sort_order": 218
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE LARGE SQUARE",
	    "short_name": "white_large_square",
	    "short_names": ["white_large_square"],
	    "sort_order": 219
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEAVY LARGE CIRCLE",
	    "short_name": "o",
	    "short_names": ["o"],
	    "sort_order": 73
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WAVY DASH",
	    "short_name": "wavy_dash",
	    "short_names": ["wavy_dash"],
	    "sort_order": 187
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PART ALTERNATION MARK",
	    "short_name": "part_alternation_mark",
	    "short_names": ["part_alternation_mark"],
	    "sort_order": 93
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CIRCLED IDEOGRAPH CONGRATULATION",
	    "short_name": "congratulations",
	    "short_names": ["congratulations"],
	    "sort_order": 59
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CIRCLED IDEOGRAPH SECRET",
	    "short_name": "secret",
	    "short_names": ["secret"],
	    "sort_order": 58
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MAHJONG TILE RED DRAGON",
	    "short_name": "mahjong",
	    "short_names": ["mahjong"],
	    "sort_order": 236
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PLAYING CARD BLACK JOKER",
	    "short_name": "black_joker",
	    "short_names": ["black_joker"],
	    "sort_order": 235
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NEGATIVE SQUARED LATIN CAPITAL LETTER A",
	    "short_name": "a",
	    "short_names": ["a"],
	    "sort_order": 63
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NEGATIVE SQUARED LATIN CAPITAL LETTER B",
	    "short_name": "b",
	    "short_names": ["b"],
	    "sort_order": 64
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NEGATIVE SQUARED LATIN CAPITAL LETTER O",
	    "short_name": "o2",
	    "short_names": ["o2"],
	    "sort_order": 67
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NEGATIVE SQUARED LATIN CAPITAL LETTER P",
	    "short_name": "parking",
	    "short_names": ["parking"],
	    "sort_order": 118
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NEGATIVE SQUARED AB",
	    "short_name": "ab",
	    "short_names": ["ab"],
	    "sort_order": 65
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CL",
	    "short_name": "cl",
	    "short_names": ["cl"],
	    "sort_order": 66
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED COOL",
	    "short_name": "cool",
	    "short_names": ["cool"],
	    "sort_order": 131
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED FREE",
	    "short_name": "free",
	    "short_names": ["free"],
	    "sort_order": 133
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED ID",
	    "short_name": "id",
	    "short_names": ["id"],
	    "sort_order": 40
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED NEW",
	    "short_name": "new",
	    "short_names": ["new"],
	    "sort_order": 132
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED NG",
	    "short_name": "ng",
	    "short_names": ["ng"],
	    "sort_order": 128
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED OK",
	    "short_name": "ok",
	    "short_names": ["ok"],
	    "sort_order": 129
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED SOS",
	    "short_name": "sos",
	    "short_names": ["sos"],
	    "sort_order": 68
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED UP WITH EXCLAMATION MARK",
	    "short_name": "up",
	    "short_names": ["up"],
	    "sort_order": 130
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED VS",
	    "short_name": "vs",
	    "short_names": ["vs"],
	    "sort_order": 54
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED KATAKANA KOKO",
	    "short_name": "koko",
	    "short_names": ["koko"],
	    "sort_order": 127
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED KATAKANA SA",
	    "short_name": "sa",
	    "short_names": ["sa"],
	    "sort_order": 110
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CJK UNIFIED IDEOGRAPH-7121",
	    "short_name": "u7121",
	    "short_names": ["u7121"],
	    "sort_order": 49
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CJK UNIFIED IDEOGRAPH-6307",
	    "short_name": "u6307",
	    "short_names": ["u6307"],
	    "sort_order": 98
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CJK UNIFIED IDEOGRAPH-7981",
	    "short_name": "u7981",
	    "short_names": ["u7981"],
	    "sort_order": 62
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CJK UNIFIED IDEOGRAPH-7A7A",
	    "short_name": "u7a7a",
	    "short_names": ["u7a7a"],
	    "sort_order": 42
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CJK UNIFIED IDEOGRAPH-5408",
	    "short_name": "u5408",
	    "short_names": ["u5408"],
	    "sort_order": 60
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CJK UNIFIED IDEOGRAPH-6E80",
	    "short_name": "u6e80",
	    "short_names": ["u6e80"],
	    "sort_order": 61
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CJK UNIFIED IDEOGRAPH-6709",
	    "short_name": "u6709",
	    "short_names": ["u6709"],
	    "sort_order": 48
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CJK UNIFIED IDEOGRAPH-6708",
	    "short_name": "u6708",
	    "short_names": ["u6708"],
	    "sort_order": 52
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CJK UNIFIED IDEOGRAPH-7533",
	    "short_name": "u7533",
	    "short_names": ["u7533"],
	    "sort_order": 50
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CJK UNIFIED IDEOGRAPH-5272",
	    "short_name": "u5272",
	    "short_names": ["u5272"],
	    "sort_order": 43
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SQUARED CJK UNIFIED IDEOGRAPH-55B6",
	    "short_name": "u55b6",
	    "short_names": ["u55b6"],
	    "sort_order": 51
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CIRCLED IDEOGRAPH ADVANTAGE",
	    "short_name": "ideograph_advantage",
	    "short_names": ["ideograph_advantage"],
	    "sort_order": 57
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CIRCLED IDEOGRAPH ACCEPT",
	    "short_name": "accept",
	    "short_names": ["accept"],
	    "sort_order": 55
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CYCLONE",
	    "short_name": "cyclone",
	    "short_names": ["cyclone"],
	    "sort_order": 105
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GLOBE WITH MERIDIANS",
	    "short_name": "globe_with_meridians",
	    "short_names": ["globe_with_meridians"],
	    "sort_order": 107
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CINEMA",
	    "short_name": "cinema",
	    "short_names": ["cinema"],
	    "sort_order": 125
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FLOWER PLAYING CARDS",
	    "short_name": "flower_playing_cards",
	    "short_names": ["flower_playing_cards"],
	    "sort_order": 241
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MUSICAL NOTE",
	    "short_name": "musical_note",
	    "short_names": ["musical_note"],
	    "sort_order": 185
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MULTIPLE MUSICAL NOTES",
	    "short_name": "notes",
	    "short_names": ["notes"],
	    "sort_order": 186
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "AUTOMATED TELLER MACHINE",
	    "short_name": "atm",
	    "short_names": ["atm"],
	    "sort_order": 109
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BEATING HEART",
	    "short_name": "heartbeat",
	    "short_names": ["heartbeat"],
	    "sort_order": 10
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BROKEN HEART",
	    "short_name": "broken_heart",
	    "short_names": ["broken_heart"],
	    "sort_order": 6
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TWO HEARTS",
	    "short_name": "two_hearts",
	    "short_names": ["two_hearts"],
	    "sort_order": 8
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPARKLING HEART",
	    "short_name": "sparkling_heart",
	    "short_names": ["sparkling_heart"],
	    "sort_order": 12
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GROWING HEART",
	    "short_name": "heartpulse",
	    "short_names": ["heartpulse"],
	    "sort_order": 11
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEART WITH ARROW",
	    "short_name": "cupid",
	    "short_names": ["cupid"],
	    "sort_order": 13
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLUE HEART",
	    "short_name": "blue_heart",
	    "short_names": ["blue_heart"],
	    "sort_order": 4
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GREEN HEART",
	    "short_name": "green_heart",
	    "short_names": ["green_heart"],
	    "sort_order": 3
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "YELLOW HEART",
	    "short_name": "yellow_heart",
	    "short_names": ["yellow_heart"],
	    "sort_order": 2
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PURPLE HEART",
	    "short_name": "purple_heart",
	    "short_names": ["purple_heart"],
	    "sort_order": 5
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEART WITH RIBBON",
	    "short_name": "gift_heart",
	    "short_names": ["gift_heart"],
	    "sort_order": 14
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REVOLVING HEARTS",
	    "short_name": "revolving_hearts",
	    "short_names": ["revolving_hearts"],
	    "sort_order": 9
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEART DECORATION",
	    "short_name": "heart_decoration",
	    "short_names": ["heart_decoration"],
	    "sort_order": 15
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DIAMOND SHAPE WITH A DOT INSIDE",
	    "short_name": "diamond_shape_with_a_dot_inside",
	    "short_names": ["diamond_shape_with_a_dot_inside"],
	    "sort_order": 104
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ANGER SYMBOL",
	    "short_name": "anger",
	    "short_names": ["anger"],
	    "sort_order": 74
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPEECH BALLOON",
	    "short_name": "speech_balloon",
	    "short_names": ["speech_balloon"],
	    "sort_order": 245
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "THOUGHT BALLOON",
	    "short_name": "thought_balloon",
	    "short_names": ["thought_balloon"],
	    "sort_order": 243
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE FLOWER",
	    "short_name": "white_flower",
	    "short_names": ["white_flower"],
	    "sort_order": 56
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HUNDRED POINTS SYMBOL",
	    "short_name": "100",
	    "short_names": ["100"],
	    "sort_order": 88
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CURRENCY EXCHANGE",
	    "short_name": "currency_exchange",
	    "short_names": ["currency_exchange"],
	    "sort_order": 196
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEAVY DOLLAR SIGN",
	    "short_name": "heavy_dollar_sign",
	    "short_names": ["heavy_dollar_sign"],
	    "sort_order": 195
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHART WITH UPWARDS TREND AND YEN SIGN",
	    "short_name": "chart",
	    "short_names": ["chart"],
	    "sort_order": 99
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NAME BADGE",
	    "short_name": "name_badge",
	    "short_names": ["name_badge"],
	    "sort_order": 70
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PUBLIC ADDRESS LOUDSPEAKER",
	    "short_name": "loudspeaker",
	    "short_names": ["loudspeaker"],
	    "sort_order": 232
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHEERING MEGAPHONE",
	    "short_name": "mega",
	    "short_names": ["mega"],
	    "sort_order": 231
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "VIBRATION MODE",
	    "short_name": "vibration_mode",
	    "short_names": ["vibration_mode"],
	    "sort_order": 47
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOBILE PHONE OFF",
	    "short_name": "mobile_phone_off",
	    "short_names": ["mobile_phone_off"],
	    "sort_order": 46
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NO MOBILE PHONES",
	    "short_name": "no_mobile_phones",
	    "short_names": ["no_mobile_phones"],
	    "sort_order": 81
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ANTENNA WITH BARS",
	    "short_name": "signal_strength",
	    "short_names": ["signal_strength"],
	    "sort_order": 126
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TWISTED RIGHTWARDS ARROWS",
	    "short_name": "twisted_rightwards_arrows",
	    "short_names": ["twisted_rightwards_arrows"],
	    "sort_order": 155
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS",
	    "short_name": "repeat",
	    "short_names": ["repeat"],
	    "sort_order": 156
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY",
	    "short_name": "repeat_one",
	    "short_names": ["repeat_one"],
	    "sort_order": 157
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS",
	    "short_name": "arrows_clockwise",
	    "short_names": ["arrows_clockwise"],
	    "sort_order": 190
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS",
	    "short_name": "arrows_counterclockwise",
	    "short_names": ["arrows_counterclockwise"],
	    "sort_order": 173
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LOW BRIGHTNESS SYMBOL",
	    "short_name": "low_brightness",
	    "short_names": ["low_brightness"],
	    "sort_order": 89
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HIGH BRIGHTNESS SYMBOL",
	    "short_name": "high_brightness",
	    "short_names": ["high_brightness"],
	    "sort_order": 90
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPEAKER WITH CANCELLATION STROKE",
	    "short_name": "mute",
	    "short_names": ["mute"],
	    "sort_order": 230
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPEAKER",
	    "short_name": "speaker",
	    "short_names": ["speaker"],
	    "sort_order": 227
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPEAKER WITH ONE SOUND WAVE",
	    "short_name": "sound",
	    "short_names": ["sound"],
	    "sort_order": 228
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPEAKER WITH THREE SOUND WAVES",
	    "short_name": "loud_sound",
	    "short_names": ["loud_sound"],
	    "sort_order": 229
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BELL",
	    "short_name": "bell",
	    "short_names": ["bell"],
	    "sort_order": 233
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BELL WITH CANCELLATION STROKE",
	    "short_name": "no_bell",
	    "short_names": ["no_bell"],
	    "sort_order": 234
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RADIO BUTTON",
	    "short_name": "radio_button",
	    "short_names": ["radio_button"],
	    "sort_order": 206
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BACK WITH LEFTWARDS ARROW ABOVE",
	    "short_name": "back",
	    "short_names": ["back"],
	    "sort_order": 201
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "END WITH LEFTWARDS ARROW ABOVE",
	    "short_name": "end",
	    "short_names": ["end"],
	    "sort_order": 200
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE",
	    "short_name": "on",
	    "short_names": ["on"],
	    "sort_order": 202
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SOON WITH RIGHTWARDS ARROW ABOVE",
	    "short_name": "soon",
	    "short_names": ["soon"],
	    "sort_order": 204
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TOP WITH UPWARDS ARROW ABOVE",
	    "short_name": "top",
	    "short_names": ["top"],
	    "sort_order": 203
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NO ONE UNDER EIGHTEEN SYMBOL",
	    "short_name": "underage",
	    "short_names": ["underage"],
	    "sort_order": 80
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "KEYCAP TEN",
	    "short_name": "keycap_ten",
	    "short_names": ["keycap_ten"],
	    "sort_order": 144
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "INPUT SYMBOL FOR LATIN CAPITAL LETTERS",
	    "short_name": "capital_abcd",
	    "short_names": ["capital_abcd"],
	    "sort_order": 183
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "INPUT SYMBOL FOR LATIN SMALL LETTERS",
	    "short_name": "abcd",
	    "short_names": ["abcd"],
	    "sort_order": 182
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "INPUT SYMBOL FOR NUMBERS",
	    "short_name": "1234",
	    "short_names": ["1234"],
	    "sort_order": 145
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "INPUT SYMBOL FOR SYMBOLS",
	    "short_name": "symbols",
	    "short_names": ["symbols"],
	    "sort_order": 184
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "INPUT SYMBOL FOR LATIN LETTERS",
	    "short_name": "abc",
	    "short_names": ["abc"],
	    "sort_order": 181
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SIX POINTED STAR WITH MIDDLE DOT",
	    "short_name": "six_pointed_star",
	    "short_names": ["six_pointed_star"],
	    "sort_order": 22
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "JAPANESE SYMBOL FOR BEGINNER",
	    "short_name": "beginner",
	    "short_names": ["beginner"],
	    "sort_order": 96
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TRIDENT EMBLEM",
	    "short_name": "trident",
	    "short_names": ["trident"],
	    "sort_order": 91
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK SQUARE BUTTON",
	    "short_name": "black_square_button",
	    "short_names": ["black_square_button"],
	    "sort_order": 225
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE SQUARE BUTTON",
	    "short_name": "white_square_button",
	    "short_names": ["white_square_button"],
	    "sort_order": 226
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LARGE RED CIRCLE",
	    "short_name": "red_circle",
	    "short_names": ["red_circle"],
	    "sort_order": 209
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LARGE BLUE CIRCLE",
	    "short_name": "large_blue_circle",
	    "short_names": ["large_blue_circle"],
	    "sort_order": 210
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LARGE ORANGE DIAMOND",
	    "short_name": "large_orange_diamond",
	    "short_names": ["large_orange_diamond"],
	    "sort_order": 213
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LARGE BLUE DIAMOND",
	    "short_name": "large_blue_diamond",
	    "short_names": ["large_blue_diamond"],
	    "sort_order": 214
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMALL ORANGE DIAMOND",
	    "short_name": "small_orange_diamond",
	    "short_names": ["small_orange_diamond"],
	    "sort_order": 211
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMALL BLUE DIAMOND",
	    "short_name": "small_blue_diamond",
	    "short_names": ["small_blue_diamond"],
	    "sort_order": 212
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "UP-POINTING RED TRIANGLE",
	    "short_name": "small_red_triangle",
	    "short_names": ["small_red_triangle"],
	    "sort_order": 215
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DOWN-POINTING RED TRIANGLE",
	    "short_name": "small_red_triangle_down",
	    "short_names": ["small_red_triangle_down"],
	    "sort_order": 220
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "UP-POINTING SMALL RED TRIANGLE",
	    "short_name": "arrow_up_small",
	    "short_names": ["arrow_up_small"],
	    "sort_order": 159
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DOWN-POINTING SMALL RED TRIANGLE",
	    "short_name": "arrow_down_small",
	    "short_names": ["arrow_down_small"],
	    "sort_order": 160
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OM SYMBOL",
	    "short_name": "om_symbol",
	    "short_names": ["om_symbol"],
	    "sort_order": 19
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "MENORAH WITH NINE BRANCHES",
	    "short_name": "menorah_with_nine_branches",
	    "short_names": ["menorah_with_nine_branches"],
	    "sort_order": 23
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE ONE OCLOCK",
	    "short_name": "clock1",
	    "short_names": ["clock1"],
	    "sort_order": 246
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE TWO OCLOCK",
	    "short_name": "clock2",
	    "short_names": ["clock2"],
	    "sort_order": 247
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE THREE OCLOCK",
	    "short_name": "clock3",
	    "short_names": ["clock3"],
	    "sort_order": 248
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE FOUR OCLOCK",
	    "short_name": "clock4",
	    "short_names": ["clock4"],
	    "sort_order": 249
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE FIVE OCLOCK",
	    "short_name": "clock5",
	    "short_names": ["clock5"],
	    "sort_order": 250
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE SIX OCLOCK",
	    "short_name": "clock6",
	    "short_names": ["clock6"],
	    "sort_order": 251
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE SEVEN OCLOCK",
	    "short_name": "clock7",
	    "short_names": ["clock7"],
	    "sort_order": 252
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE EIGHT OCLOCK",
	    "short_name": "clock8",
	    "short_names": ["clock8"],
	    "sort_order": 253
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE NINE OCLOCK",
	    "short_name": "clock9",
	    "short_names": ["clock9"],
	    "sort_order": 254
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE TEN OCLOCK",
	    "short_name": "clock10",
	    "short_names": ["clock10"],
	    "sort_order": 255
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE ELEVEN OCLOCK",
	    "short_name": "clock11",
	    "short_names": ["clock11"],
	    "sort_order": 256
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE TWELVE OCLOCK",
	    "short_name": "clock12",
	    "short_names": ["clock12"],
	    "sort_order": 257
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE ONE-THIRTY",
	    "short_name": "clock130",
	    "short_names": ["clock130"],
	    "sort_order": 258
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE TWO-THIRTY",
	    "short_name": "clock230",
	    "short_names": ["clock230"],
	    "sort_order": 259
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE THREE-THIRTY",
	    "short_name": "clock330",
	    "short_names": ["clock330"],
	    "sort_order": 260
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE FOUR-THIRTY",
	    "short_name": "clock430",
	    "short_names": ["clock430"],
	    "sort_order": 261
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE FIVE-THIRTY",
	    "short_name": "clock530",
	    "short_names": ["clock530"],
	    "sort_order": 262
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE SIX-THIRTY",
	    "short_name": "clock630",
	    "short_names": ["clock630"],
	    "sort_order": 263
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE SEVEN-THIRTY",
	    "short_name": "clock730",
	    "short_names": ["clock730"],
	    "sort_order": 264
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE EIGHT-THIRTY",
	    "short_name": "clock830",
	    "short_names": ["clock830"],
	    "sort_order": 265
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE NINE-THIRTY",
	    "short_name": "clock930",
	    "short_names": ["clock930"],
	    "sort_order": 266
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE TEN-THIRTY",
	    "short_name": "clock1030",
	    "short_names": ["clock1030"],
	    "sort_order": 267
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE ELEVEN-THIRTY",
	    "short_name": "clock1130",
	    "short_names": ["clock1130"],
	    "sort_order": 268
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOCK FACE TWELVE-THIRTY",
	    "short_name": "clock1230",
	    "short_names": ["clock1230"],
	    "sort_order": 269
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RIGHT ANGER BUBBLE",
	    "short_name": "right_anger_bubble",
	    "short_names": ["right_anger_bubble"],
	    "sort_order": 244
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NO ENTRY SIGN",
	    "short_name": "no_entry_sign",
	    "short_names": ["no_entry_sign"],
	    "sort_order": 71
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NO SMOKING SYMBOL",
	    "short_name": "no_smoking",
	    "short_names": ["no_smoking"],
	    "sort_order": 116
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PUT LITTER IN ITS PLACE SYMBOL",
	    "short_name": "put_litter_in_its_place",
	    "short_names": ["put_litter_in_its_place"],
	    "sort_order": 124
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DO NOT LITTER SYMBOL",
	    "short_name": "do_not_litter",
	    "short_names": ["do_not_litter"],
	    "sort_order": 77
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POTABLE WATER SYMBOL",
	    "short_name": "potable_water",
	    "short_names": ["potable_water"],
	    "sort_order": 119
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NON-POTABLE WATER SYMBOL",
	    "short_name": "non-potable_water",
	    "short_names": ["non-potable_water"],
	    "sort_order": 79
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NO BICYCLES",
	    "short_name": "no_bicycles",
	    "short_names": ["no_bicycles"],
	    "sort_order": 78
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NO PEDESTRIANS",
	    "short_name": "no_pedestrians",
	    "short_names": ["no_pedestrians"],
	    "sort_order": 76
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHILDREN CROSSING",
	    "short_name": "children_crossing",
	    "short_names": ["children_crossing"],
	    "sort_order": 95
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MENS SYMBOL",
	    "short_name": "mens",
	    "short_names": ["mens"],
	    "sort_order": 120
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WOMENS SYMBOL",
	    "short_name": "womens",
	    "short_names": ["womens"],
	    "sort_order": 121
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RESTROOM",
	    "short_name": "restroom",
	    "short_names": ["restroom"],
	    "sort_order": 123
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BABY SYMBOL",
	    "short_name": "baby_symbol",
	    "short_names": ["baby_symbol"],
	    "sort_order": 122
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WATER CLOSET",
	    "short_name": "wc",
	    "short_names": ["wc"],
	    "sort_order": 117
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PASSPORT CONTROL",
	    "short_name": "passport_control",
	    "short_names": ["passport_control"],
	    "sort_order": 111
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CUSTOMS",
	    "short_name": "customs",
	    "short_names": ["customs"],
	    "sort_order": 112
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BAGGAGE CLAIM",
	    "short_name": "baggage_claim",
	    "short_names": ["baggage_claim"],
	    "sort_order": 113
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LEFT LUGGAGE",
	    "short_name": "left_luggage",
	    "short_names": ["left_luggage"],
	    "sort_order": 114
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "PLACE OF WORSHIP",
	    "short_name": "place_of_worship",
	    "short_names": ["place_of_worship"],
	    "sort_order": 26
	  }],
	  "Objects": [{
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WATCH",
	    "short_name": "watch",
	    "short_names": ["watch"],
	    "sort_order": 1
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOURGLASS",
	    "short_name": "hourglass",
	    "short_names": ["hourglass"],
	    "sort_order": 37
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "KEYBOARD",
	    "short_name": "keyboard",
	    "short_names": ["keyboard"],
	    "sort_order": 5
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ALARM CLOCK",
	    "short_name": "alarm_clock",
	    "short_names": ["alarm_clock"],
	    "sort_order": 34
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "STOPWATCH",
	    "short_name": "stopwatch",
	    "short_names": ["stopwatch"],
	    "sort_order": 32
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "TIMER CLOCK",
	    "short_name": "timer_clock",
	    "short_names": ["timer_clock"],
	    "sort_order": 33
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOURGLASS WITH FLOWING SAND",
	    "short_name": "hourglass_flowing_sand",
	    "short_names": ["hourglass_flowing_sand"],
	    "sort_order": 36
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK TELEPHONE",
	    "short_name": "phone",
	    "short_names": ["phone", "telephone"],
	    "sort_order": 24
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "SKULL AND CROSSBONES",
	    "short_name": "skull_and_crossbones",
	    "short_names": ["skull_and_crossbones"],
	    "sort_order": 70
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "HAMMER AND PICK",
	    "short_name": "hammer_and_pick",
	    "short_names": ["hammer_and_pick"],
	    "sort_order": 57
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "CROSSED SWORDS",
	    "short_name": "crossed_swords",
	    "short_names": ["crossed_swords"],
	    "sort_order": 67
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "SCALES",
	    "short_name": "scales",
	    "short_names": ["scales"],
	    "sort_order": 54
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "ALEMBIC",
	    "short_name": "alembic",
	    "short_names": ["alembic"],
	    "sort_order": 77
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "GEAR",
	    "short_name": "gear",
	    "short_names": ["gear"],
	    "sort_order": 61
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "COFFIN",
	    "short_name": "coffin",
	    "short_names": ["coffin"],
	    "sort_order": 71
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "FUNERAL URN",
	    "short_name": "funeral_urn",
	    "short_names": ["funeral_urn"],
	    "sort_order": 72
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "PICK",
	    "short_name": "pick",
	    "short_names": ["pick"],
	    "sort_order": 59
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "CHAINS",
	    "short_name": "chains",
	    "short_names": ["chains"],
	    "sort_order": 62
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "UMBRELLA ON GROUND",
	    "short_name": "umbrella_on_ground",
	    "short_names": ["umbrella_on_ground"],
	    "sort_order": 98
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK SCISSORS",
	    "short_name": "scissors",
	    "short_names": ["scissors"],
	    "sort_order": 158
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ENVELOPE",
	    "short_name": "email",
	    "short_names": ["email", "envelope"],
	    "sort_order": 111
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PENCIL",
	    "short_name": "pencil2",
	    "short_names": ["pencil2"],
	    "sort_order": 174
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK NIB",
	    "short_name": "black_nib",
	    "short_names": ["black_nib"],
	    "sort_order": 172
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "THERMOMETER",
	    "short_name": "thermometer",
	    "short_names": ["thermometer"],
	    "sort_order": 83
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RIBBON",
	    "short_name": "ribbon",
	    "short_names": ["ribbon"],
	    "sort_order": 103
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WRAPPED PRESENT",
	    "short_name": "gift",
	    "short_names": ["gift"],
	    "sort_order": 104
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BALLOON",
	    "short_name": "balloon",
	    "short_names": ["balloon"],
	    "sort_order": 101
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PARTY POPPER",
	    "short_name": "tada",
	    "short_names": ["tada"],
	    "sort_order": 106
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CONFETTI BALL",
	    "short_name": "confetti_ball",
	    "short_names": ["confetti_ball"],
	    "sort_order": 105
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CROSSED FLAGS",
	    "short_name": "crossed_flags",
	    "short_names": ["crossed_flags"],
	    "sort_order": 109
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "JAPANESE DOLLS",
	    "short_name": "dolls",
	    "short_names": ["dolls"],
	    "sort_order": 107
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CARP STREAMER",
	    "short_name": "flags",
	    "short_names": ["flags"],
	    "sort_order": 102
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WIND CHIME",
	    "short_name": "wind_chime",
	    "short_names": ["wind_chime"],
	    "sort_order": 108
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "STUDIO MICROPHONE",
	    "short_name": "studio_microphone",
	    "short_names": ["studio_microphone"],
	    "sort_order": 29
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LEVEL SLIDER",
	    "short_name": "level_slider",
	    "short_names": ["level_slider"],
	    "sort_order": 30
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CONTROL KNOBS",
	    "short_name": "control_knobs",
	    "short_names": ["control_knobs"],
	    "sort_order": 31
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FILM FRAMES",
	    "short_name": "film_frames",
	    "short_names": ["film_frames"],
	    "sort_order": 22
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOVIE CAMERA",
	    "short_name": "movie_camera",
	    "short_names": ["movie_camera"],
	    "sort_order": 20
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "IZAKAYA LANTERN",
	    "short_name": "izakaya_lantern",
	    "short_names": ["izakaya_lantern", "lantern"],
	    "sort_order": 110
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WAVING WHITE FLAG",
	    "short_name": "waving_white_flag",
	    "short_names": ["waving_white_flag"],
	    "sort_order": 164
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WAVING BLACK FLAG",
	    "short_name": "waving_black_flag",
	    "short_names": ["waving_black_flag"],
	    "sort_order": 165
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LABEL",
	    "short_name": "label",
	    "short_names": ["label"],
	    "sort_order": 84
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "AMPHORA",
	    "short_name": "amphora",
	    "short_names": ["amphora"],
	    "sort_order": 73
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BARBER POLE",
	    "short_name": "barber",
	    "short_names": ["barber"],
	    "sort_order": 76
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SYRINGE",
	    "short_name": "syringe",
	    "short_names": ["syringe"],
	    "sort_order": 82
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PILL",
	    "short_name": "pill",
	    "short_names": ["pill"],
	    "sort_order": 81
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LOVE LETTER",
	    "short_name": "love_letter",
	    "short_names": ["love_letter"],
	    "sort_order": 115
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GEM STONE",
	    "short_name": "gem",
	    "short_names": ["gem"],
	    "sort_order": 53
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ELECTRIC LIGHT BULB",
	    "short_name": "bulb",
	    "short_names": ["bulb"],
	    "sort_order": 41
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BOMB",
	    "short_name": "bomb",
	    "short_names": ["bomb"],
	    "sort_order": 64
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MONEY BAG",
	    "short_name": "moneybag",
	    "short_names": ["moneybag"],
	    "sort_order": 51
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CREDIT CARD",
	    "short_name": "credit_card",
	    "short_names": ["credit_card"],
	    "sort_order": 52
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BANKNOTE WITH YEN SIGN",
	    "short_name": "yen",
	    "short_names": ["yen"],
	    "sort_order": 48
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BANKNOTE WITH DOLLAR SIGN",
	    "short_name": "dollar",
	    "short_names": ["dollar"],
	    "sort_order": 47
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BANKNOTE WITH EURO SIGN",
	    "short_name": "euro",
	    "short_names": ["euro"],
	    "sort_order": 49
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BANKNOTE WITH POUND SIGN",
	    "short_name": "pound",
	    "short_names": ["pound"],
	    "sort_order": 50
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MONEY WITH WINGS",
	    "short_name": "money_with_wings",
	    "short_names": ["money_with_wings"],
	    "sort_order": 46
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PERSONAL COMPUTER",
	    "short_name": "computer",
	    "short_names": ["computer"],
	    "sort_order": 4
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MINIDISC",
	    "short_name": "minidisc",
	    "short_names": ["minidisc"],
	    "sort_order": 12
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FLOPPY DISK",
	    "short_name": "floppy_disk",
	    "short_names": ["floppy_disk"],
	    "sort_order": 13
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OPTICAL DISC",
	    "short_name": "cd",
	    "short_names": ["cd"],
	    "sort_order": 14
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DVD",
	    "short_name": "dvd",
	    "short_names": ["dvd"],
	    "sort_order": 15
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FILE FOLDER",
	    "short_name": "file_folder",
	    "short_names": ["file_folder"],
	    "sort_order": 141
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OPEN FILE FOLDER",
	    "short_name": "open_file_folder",
	    "short_names": ["open_file_folder"],
	    "sort_order": 142
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PAGE WITH CURL",
	    "short_name": "page_with_curl",
	    "short_names": ["page_with_curl"],
	    "sort_order": 126
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PAGE FACING UP",
	    "short_name": "page_facing_up",
	    "short_names": ["page_facing_up"],
	    "sort_order": 131
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CALENDAR",
	    "short_name": "date",
	    "short_names": ["date"],
	    "sort_order": 132
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TEAR-OFF CALENDAR",
	    "short_name": "calendar",
	    "short_names": ["calendar"],
	    "sort_order": 133
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CARD INDEX",
	    "short_name": "card_index",
	    "short_names": ["card_index"],
	    "sort_order": 135
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHART WITH UPWARDS TREND",
	    "short_name": "chart_with_upwards_trend",
	    "short_names": ["chart_with_upwards_trend"],
	    "sort_order": 129
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHART WITH DOWNWARDS TREND",
	    "short_name": "chart_with_downwards_trend",
	    "short_names": ["chart_with_downwards_trend"],
	    "sort_order": 130
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BAR CHART",
	    "short_name": "bar_chart",
	    "short_names": ["bar_chart"],
	    "sort_order": 128
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLIPBOARD",
	    "short_name": "clipboard",
	    "short_names": ["clipboard"],
	    "sort_order": 139
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PUSHPIN",
	    "short_name": "pushpin",
	    "short_names": ["pushpin"],
	    "sort_order": 161
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ROUND PUSHPIN",
	    "short_name": "round_pushpin",
	    "short_names": ["round_pushpin"],
	    "sort_order": 162
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PAPERCLIP",
	    "short_name": "paperclip",
	    "short_names": ["paperclip"],
	    "sort_order": 156
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "STRAIGHT RULER",
	    "short_name": "straight_ruler",
	    "short_names": ["straight_ruler"],
	    "sort_order": 160
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TRIANGULAR RULER",
	    "short_name": "triangular_ruler",
	    "short_names": ["triangular_ruler"],
	    "sort_order": 159
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BOOKMARK TABS",
	    "short_name": "bookmark_tabs",
	    "short_names": ["bookmark_tabs"],
	    "sort_order": 127
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LEDGER",
	    "short_name": "ledger",
	    "short_names": ["ledger"],
	    "sort_order": 152
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NOTEBOOK",
	    "short_name": "notebook",
	    "short_names": ["notebook"],
	    "sort_order": 146
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NOTEBOOK WITH DECORATIVE COVER",
	    "short_name": "notebook_with_decorative_cover",
	    "short_names": ["notebook_with_decorative_cover"],
	    "sort_order": 151
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOSED BOOK",
	    "short_name": "closed_book",
	    "short_names": ["closed_book"],
	    "sort_order": 147
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OPEN BOOK",
	    "short_name": "book",
	    "short_names": ["book", "open_book"],
	    "sort_order": 154
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GREEN BOOK",
	    "short_name": "green_book",
	    "short_names": ["green_book"],
	    "sort_order": 148
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLUE BOOK",
	    "short_name": "blue_book",
	    "short_names": ["blue_book"],
	    "sort_order": 149
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ORANGE BOOK",
	    "short_name": "orange_book",
	    "short_names": ["orange_book"],
	    "sort_order": 150
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BOOKS",
	    "short_name": "books",
	    "short_names": ["books"],
	    "sort_order": 153
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SCROLL",
	    "short_name": "scroll",
	    "short_names": ["scroll"],
	    "sort_order": 125
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MEMO",
	    "short_name": "memo",
	    "short_names": ["memo", "pencil"],
	    "sort_order": 173
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TELEPHONE RECEIVER",
	    "short_name": "telephone_receiver",
	    "short_names": ["telephone_receiver"],
	    "sort_order": 23
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PAGER",
	    "short_name": "pager",
	    "short_names": ["pager"],
	    "sort_order": 25
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FAX MACHINE",
	    "short_name": "fax",
	    "short_names": ["fax"],
	    "sort_order": 26
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SATELLITE ANTENNA",
	    "short_name": "satellite",
	    "short_names": ["satellite"],
	    "sort_order": 38
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OUTBOX TRAY",
	    "short_name": "outbox_tray",
	    "short_names": ["outbox_tray"],
	    "sort_order": 124
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "INBOX TRAY",
	    "short_name": "inbox_tray",
	    "short_names": ["inbox_tray"],
	    "sort_order": 123
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PACKAGE",
	    "short_name": "package",
	    "short_names": ["package"],
	    "sort_order": 121
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "E-MAIL SYMBOL",
	    "short_name": "e-mail",
	    "short_names": ["e-mail"],
	    "sort_order": 114
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "INCOMING ENVELOPE",
	    "short_name": "incoming_envelope",
	    "short_names": ["incoming_envelope"],
	    "sort_order": 113
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ENVELOPE WITH DOWNWARDS ARROW ABOVE",
	    "short_name": "envelope_with_arrow",
	    "short_names": ["envelope_with_arrow"],
	    "sort_order": 112
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOSED MAILBOX WITH LOWERED FLAG",
	    "short_name": "mailbox_closed",
	    "short_names": ["mailbox_closed"],
	    "sort_order": 117
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOSED MAILBOX WITH RAISED FLAG",
	    "short_name": "mailbox",
	    "short_names": ["mailbox"],
	    "sort_order": 118
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OPEN MAILBOX WITH RAISED FLAG",
	    "short_name": "mailbox_with_mail",
	    "short_names": ["mailbox_with_mail"],
	    "sort_order": 119
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OPEN MAILBOX WITH LOWERED FLAG",
	    "short_name": "mailbox_with_no_mail",
	    "short_names": ["mailbox_with_no_mail"],
	    "sort_order": 120
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POSTBOX",
	    "short_name": "postbox",
	    "short_names": ["postbox"],
	    "sort_order": 116
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POSTAL HORN",
	    "short_name": "postal_horn",
	    "short_names": ["postal_horn"],
	    "sort_order": 122
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NEWSPAPER",
	    "short_name": "newspaper",
	    "short_names": ["newspaper"],
	    "sort_order": 145
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOBILE PHONE",
	    "short_name": "iphone",
	    "short_names": ["iphone"],
	    "sort_order": 2
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT",
	    "short_name": "calling",
	    "short_names": ["calling"],
	    "sort_order": 3
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CAMERA",
	    "short_name": "camera",
	    "short_names": ["camera"],
	    "sort_order": 17
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CAMERA WITH FLASH",
	    "short_name": "camera_with_flash",
	    "short_names": ["camera_with_flash"],
	    "sort_order": 18
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "VIDEO CAMERA",
	    "short_name": "video_camera",
	    "short_names": ["video_camera"],
	    "sort_order": 19
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TELEVISION",
	    "short_name": "tv",
	    "short_names": ["tv"],
	    "sort_order": 27
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RADIO",
	    "short_name": "radio",
	    "short_names": ["radio"],
	    "sort_order": 28
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "VIDEOCASSETTE",
	    "short_name": "vhs",
	    "short_names": ["vhs"],
	    "sort_order": 16
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FILM PROJECTOR",
	    "short_name": "film_projector",
	    "short_names": ["film_projector"],
	    "sort_order": 21
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "PRAYER BEADS",
	    "short_name": "prayer_beads",
	    "short_names": ["prayer_beads"],
	    "sort_order": 75
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BATTERY",
	    "short_name": "battery",
	    "short_names": ["battery"],
	    "sort_order": 39
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ELECTRIC PLUG",
	    "short_name": "electric_plug",
	    "short_names": ["electric_plug"],
	    "sort_order": 40
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LEFT-POINTING MAGNIFYING GLASS",
	    "short_name": "mag",
	    "short_names": ["mag"],
	    "sort_order": 177
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RIGHT-POINTING MAGNIFYING GLASS",
	    "short_name": "mag_right",
	    "short_names": ["mag_right"],
	    "sort_order": 178
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LOCK WITH INK PEN",
	    "short_name": "lock_with_ink_pen",
	    "short_names": ["lock_with_ink_pen"],
	    "sort_order": 169
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOSED LOCK WITH KEY",
	    "short_name": "closed_lock_with_key",
	    "short_names": ["closed_lock_with_key"],
	    "sort_order": 166
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "KEY",
	    "short_name": "key",
	    "short_names": ["key"],
	    "sort_order": 89
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LOCK",
	    "short_name": "lock",
	    "short_names": ["lock"],
	    "sort_order": 167
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OPEN LOCK",
	    "short_name": "unlock",
	    "short_names": ["unlock"],
	    "sort_order": 168
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BOOKMARK",
	    "short_name": "bookmark",
	    "short_names": ["bookmark"],
	    "sort_order": 85
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LINK SYMBOL",
	    "short_name": "link",
	    "short_names": ["link"],
	    "sort_order": 155
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ELECTRIC TORCH",
	    "short_name": "flashlight",
	    "short_names": ["flashlight"],
	    "sort_order": 42
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WRENCH",
	    "short_name": "wrench",
	    "short_names": ["wrench"],
	    "sort_order": 55
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HAMMER",
	    "short_name": "hammer",
	    "short_names": ["hammer"],
	    "sort_order": 56
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NUT AND BOLT",
	    "short_name": "nut_and_bolt",
	    "short_names": ["nut_and_bolt"],
	    "sort_order": 60
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOCHO",
	    "short_name": "hocho",
	    "short_names": ["hocho", "knife"],
	    "sort_order": 65
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PISTOL",
	    "short_name": "gun",
	    "short_names": ["gun"],
	    "sort_order": 63
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MICROSCOPE",
	    "short_name": "microscope",
	    "short_names": ["microscope"],
	    "sort_order": 79
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TELESCOPE",
	    "short_name": "telescope",
	    "short_names": ["telescope"],
	    "sort_order": 78
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CRYSTAL BALL",
	    "short_name": "crystal_ball",
	    "short_names": ["crystal_ball"],
	    "sort_order": 74
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CANDLE",
	    "short_name": "candle",
	    "short_names": ["candle"],
	    "sort_order": 43
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MANTELPIECE CLOCK",
	    "short_name": "mantelpiece_clock",
	    "short_names": ["mantelpiece_clock"],
	    "sort_order": 35
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOLE",
	    "short_name": "hole",
	    "short_names": ["hole"],
	    "sort_order": 80
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "JOYSTICK",
	    "short_name": "joystick",
	    "short_names": ["joystick"],
	    "sort_order": 10
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LINKED PAPERCLIPS",
	    "short_name": "linked_paperclips",
	    "short_names": ["linked_paperclips"],
	    "sort_order": 157
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LOWER LEFT BALLPOINT PEN",
	    "short_name": "lower_left_ballpoint_pen",
	    "short_names": ["lower_left_ballpoint_pen"],
	    "sort_order": 170
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LOWER LEFT FOUNTAIN PEN",
	    "short_name": "lower_left_fountain_pen",
	    "short_names": ["lower_left_fountain_pen"],
	    "sort_order": 171
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LOWER LEFT PAINTBRUSH",
	    "short_name": "lower_left_paintbrush",
	    "short_names": ["lower_left_paintbrush"],
	    "sort_order": 176
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LOWER LEFT CRAYON",
	    "short_name": "lower_left_crayon",
	    "short_names": ["lower_left_crayon"],
	    "sort_order": 175
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DESKTOP COMPUTER",
	    "short_name": "desktop_computer",
	    "short_names": ["desktop_computer"],
	    "sort_order": 6
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PRINTER",
	    "short_name": "printer",
	    "short_names": ["printer"],
	    "sort_order": 7
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "THREE BUTTON MOUSE",
	    "short_name": "three_button_mouse",
	    "short_names": ["three_button_mouse"],
	    "sort_order": 8
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TRACKBALL",
	    "short_name": "trackball",
	    "short_names": ["trackball"],
	    "sort_order": 9
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FRAME WITH PICTURE",
	    "short_name": "frame_with_picture",
	    "short_names": ["frame_with_picture"],
	    "sort_order": 96
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CARD INDEX DIVIDERS",
	    "short_name": "card_index_dividers",
	    "short_names": ["card_index_dividers"],
	    "sort_order": 143
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CARD FILE BOX",
	    "short_name": "card_file_box",
	    "short_names": ["card_file_box"],
	    "sort_order": 136
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FILE CABINET",
	    "short_name": "file_cabinet",
	    "short_names": ["file_cabinet"],
	    "sort_order": 138
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WASTEBASKET",
	    "short_name": "wastebasket",
	    "short_names": ["wastebasket"],
	    "sort_order": 44
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPIRAL NOTE PAD",
	    "short_name": "spiral_note_pad",
	    "short_names": ["spiral_note_pad"],
	    "sort_order": 140
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPIRAL CALENDAR PAD",
	    "short_name": "spiral_calendar_pad",
	    "short_names": ["spiral_calendar_pad"],
	    "sort_order": 134
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "COMPRESSION",
	    "short_name": "compression",
	    "short_names": ["compression"],
	    "sort_order": 11
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OLD KEY",
	    "short_name": "old_key",
	    "short_names": ["old_key"],
	    "sort_order": 90
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ROLLED-UP NEWSPAPER",
	    "short_name": "rolled_up_newspaper",
	    "short_names": ["rolled_up_newspaper"],
	    "sort_order": 144
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DAGGER KNIFE",
	    "short_name": "dagger_knife",
	    "short_names": ["dagger_knife"],
	    "sort_order": 66
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BALLOT BOX WITH BALLOT",
	    "short_name": "ballot_box_with_ballot",
	    "short_names": ["ballot_box_with_ballot"],
	    "sort_order": 137
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WORLD MAP",
	    "short_name": "world_map",
	    "short_names": ["world_map"],
	    "sort_order": 97
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOYAI",
	    "short_name": "moyai",
	    "short_names": ["moyai"],
	    "sort_order": 99
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TRIANGULAR FLAG ON POST",
	    "short_name": "triangular_flag_on_post",
	    "short_names": ["triangular_flag_on_post"],
	    "sort_order": 163
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DOOR",
	    "short_name": "door",
	    "short_names": ["door"],
	    "sort_order": 94
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMOKING SYMBOL",
	    "short_name": "smoking",
	    "short_names": ["smoking"],
	    "sort_order": 69
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TOILET",
	    "short_name": "toilet",
	    "short_names": ["toilet"],
	    "sort_order": 86
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SHOWER",
	    "short_name": "shower",
	    "short_names": ["shower"],
	    "sort_order": 87
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BATHTUB",
	    "short_name": "bathtub",
	    "short_names": ["bathtub"],
	    "sort_order": 88
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "COUCH AND LAMP",
	    "short_name": "couch_and_lamp",
	    "short_names": ["couch_and_lamp"],
	    "sort_order": 91
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SLEEPING ACCOMMODATION",
	    "short_name": "sleeping_accommodation",
	    "short_names": ["sleeping_accommodation"],
	    "sort_order": 92
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SHOPPING BAGS",
	    "short_name": "shopping_bags",
	    "short_names": ["shopping_bags"],
	    "sort_order": 100
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BELLHOP BELL",
	    "short_name": "bellhop_bell",
	    "short_names": ["bellhop_bell"],
	    "sort_order": 95
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BED",
	    "short_name": "bed",
	    "short_names": ["bed"],
	    "sort_order": 93
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HAMMER AND WRENCH",
	    "short_name": "hammer_and_wrench",
	    "short_names": ["hammer_and_wrench"],
	    "sort_order": 58
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SHIELD",
	    "short_name": "shield",
	    "short_names": ["shield"],
	    "sort_order": 68
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OIL DRUM",
	    "short_name": "oil_drum",
	    "short_names": ["oil_drum"],
	    "sort_order": 45
	  }],
	  "Nature": [{
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLACK SUN WITH RAYS",
	    "short_name": "sunny",
	    "short_names": ["sunny"],
	    "sort_order": 123
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOUD",
	    "short_name": "cloud",
	    "short_names": ["cloud"],
	    "sort_order": 128
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "UMBRELLA",
	    "short_name": "umbrella",
	    "short_names": ["umbrella"],
	    "sort_order": 143
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "SNOWMAN",
	    "short_name": "snowman",
	    "short_names": ["snowman"],
	    "sort_order": 137
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "COMET",
	    "short_name": "comet",
	    "short_names": ["comet"],
	    "sort_order": 122
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "UMBRELLA WITH RAIN DROPS",
	    "short_name": "umbrella",
	    "short_names": ["umbrella"],
	    "sort_order": 144
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "SHAMROCK",
	    "short_name": "shamrock",
	    "short_names": ["shamrock"],
	    "sort_order": 81
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HIGH VOLTAGE SIGN",
	    "short_name": "zap",
	    "short_names": ["zap"],
	    "sort_order": 132
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SNOWMAN WITHOUT SNOW",
	    "short_name": "snowman",
	    "short_names": ["snowman"],
	    "sort_order": 138
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SUN BEHIND CLOUD",
	    "short_name": "partly_sunny",
	    "short_names": ["partly_sunny"],
	    "sort_order": 125
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "THUNDER CLOUD AND RAIN",
	    "short_name": "thunder_cloud_and_rain",
	    "short_names": ["thunder_cloud_and_rain"],
	    "sort_order": 130
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPARKLES",
	    "short_name": "sparkles",
	    "short_names": ["sparkles"],
	    "sort_order": 121
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SNOWFLAKE",
	    "short_name": "snowflake",
	    "short_names": ["snowflake"],
	    "sort_order": 135
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE MEDIUM STAR",
	    "short_name": "star",
	    "short_names": ["star"],
	    "sort_order": 118
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WATER WAVE",
	    "short_name": "ocean",
	    "short_names": ["ocean"],
	    "sort_order": 147
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EARTH GLOBE EUROPE-AFRICA",
	    "short_name": "earth_africa",
	    "short_names": ["earth_africa"],
	    "sort_order": 102
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EARTH GLOBE AMERICAS",
	    "short_name": "earth_americas",
	    "short_names": ["earth_americas"],
	    "sort_order": 101
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EARTH GLOBE ASIA-AUSTRALIA",
	    "short_name": "earth_asia",
	    "short_names": ["earth_asia"],
	    "sort_order": 103
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NEW MOON SYMBOL",
	    "short_name": "new_moon",
	    "short_names": ["new_moon"],
	    "sort_order": 108
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WAXING CRESCENT MOON SYMBOL",
	    "short_name": "waxing_crescent_moon",
	    "short_names": ["waxing_crescent_moon"],
	    "sort_order": 109
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FIRST QUARTER MOON SYMBOL",
	    "short_name": "first_quarter_moon",
	    "short_names": ["first_quarter_moon"],
	    "sort_order": 110
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WAXING GIBBOUS MOON SYMBOL",
	    "short_name": "moon",
	    "short_names": ["moon", "waxing_gibbous_moon"],
	    "sort_order": 111
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FULL MOON SYMBOL",
	    "short_name": "full_moon",
	    "short_names": ["full_moon"],
	    "sort_order": 104
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WANING GIBBOUS MOON SYMBOL",
	    "short_name": "waning_gibbous_moon",
	    "short_names": ["waning_gibbous_moon"],
	    "sort_order": 105
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LAST QUARTER MOON SYMBOL",
	    "short_name": "last_quarter_moon",
	    "short_names": ["last_quarter_moon"],
	    "sort_order": 106
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WANING CRESCENT MOON SYMBOL",
	    "short_name": "waning_crescent_moon",
	    "short_names": ["waning_crescent_moon"],
	    "sort_order": 107
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CRESCENT MOON",
	    "short_name": "crescent_moon",
	    "short_names": ["crescent_moon"],
	    "sort_order": 117
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NEW MOON WITH FACE",
	    "short_name": "new_moon_with_face",
	    "short_names": ["new_moon_with_face"],
	    "sort_order": 112
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FIRST QUARTER MOON WITH FACE",
	    "short_name": "first_quarter_moon_with_face",
	    "short_names": ["first_quarter_moon_with_face"],
	    "sort_order": 114
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LAST QUARTER MOON WITH FACE",
	    "short_name": "last_quarter_moon_with_face",
	    "short_names": ["last_quarter_moon_with_face"],
	    "sort_order": 115
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FULL MOON WITH FACE",
	    "short_name": "full_moon_with_face",
	    "short_names": ["full_moon_with_face"],
	    "sort_order": 113
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SUN WITH FACE",
	    "short_name": "sun_with_face",
	    "short_names": ["sun_with_face"],
	    "sort_order": 116
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GLOWING STAR",
	    "short_name": "star2",
	    "short_names": ["star2"],
	    "sort_order": 119
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "WHITE SUN WITH SMALL CLOUD",
	    "short_name": "mostly_sunny",
	    "short_names": ["mostly_sunny", "sun_small_cloud"],
	    "sort_order": 124
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "WHITE SUN BEHIND CLOUD",
	    "short_name": "barely_sunny",
	    "short_names": ["barely_sunny", "sun_behind_cloud"],
	    "sort_order": 126
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "WHITE SUN BEHIND CLOUD WITH RAIN",
	    "short_name": "partly_sunny_rain",
	    "short_names": ["partly_sunny_rain", "sun_behind_rain_cloud"],
	    "sort_order": 127
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOUD WITH RAIN",
	    "short_name": "rain_cloud",
	    "short_names": ["rain_cloud"],
	    "sort_order": 129
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOUD WITH SNOW",
	    "short_name": "snow_cloud",
	    "short_names": ["snow_cloud"],
	    "sort_order": 136
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOUD WITH LIGHTNING",
	    "short_name": "lightning",
	    "short_names": ["lightning", "lightning_cloud"],
	    "sort_order": 131
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOUD WITH TORNADO",
	    "short_name": "tornado",
	    "short_names": ["tornado", "tornado_cloud"],
	    "sort_order": 141
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FOG",
	    "short_name": "fog",
	    "short_names": ["fog"],
	    "sort_order": 142
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WIND BLOWING FACE",
	    "short_name": "wind_blowing_face",
	    "short_names": ["wind_blowing_face"],
	    "sort_order": 139
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHESTNUT",
	    "short_name": "chestnut",
	    "short_names": ["chestnut"],
	    "sort_order": 97
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SEEDLING",
	    "short_name": "seedling",
	    "short_names": ["seedling"],
	    "sort_order": 79
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EVERGREEN TREE",
	    "short_name": "evergreen_tree",
	    "short_names": ["evergreen_tree"],
	    "sort_order": 76
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DECIDUOUS TREE",
	    "short_name": "deciduous_tree",
	    "short_names": ["deciduous_tree"],
	    "sort_order": 77
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PALM TREE",
	    "short_name": "palm_tree",
	    "short_names": ["palm_tree"],
	    "sort_order": 78
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CACTUS",
	    "short_name": "cactus",
	    "short_names": ["cactus"],
	    "sort_order": 74
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TULIP",
	    "short_name": "tulip",
	    "short_names": ["tulip"],
	    "sort_order": 92
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHERRY BLOSSOM",
	    "short_name": "cherry_blossom",
	    "short_names": ["cherry_blossom"],
	    "sort_order": 94
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ROSE",
	    "short_name": "rose",
	    "short_names": ["rose"],
	    "sort_order": 91
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HIBISCUS",
	    "short_name": "hibiscus",
	    "short_names": ["hibiscus"],
	    "sort_order": 89
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SUNFLOWER",
	    "short_name": "sunflower",
	    "short_names": ["sunflower"],
	    "sort_order": 90
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLOSSOM",
	    "short_name": "blossom",
	    "short_names": ["blossom"],
	    "sort_order": 93
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EAR OF RICE",
	    "short_name": "ear_of_rice",
	    "short_names": ["ear_of_rice"],
	    "sort_order": 88
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HERB",
	    "short_name": "herb",
	    "short_names": ["herb"],
	    "sort_order": 80
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FOUR LEAF CLOVER",
	    "short_name": "four_leaf_clover",
	    "short_names": ["four_leaf_clover"],
	    "sort_order": 82
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MAPLE LEAF",
	    "short_name": "maple_leaf",
	    "short_names": ["maple_leaf"],
	    "sort_order": 87
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FALLEN LEAF",
	    "short_name": "fallen_leaf",
	    "short_names": ["fallen_leaf"],
	    "sort_order": 86
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LEAF FLUTTERING IN WIND",
	    "short_name": "leaves",
	    "short_names": ["leaves"],
	    "sort_order": 85
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MUSHROOM",
	    "short_name": "mushroom",
	    "short_names": ["mushroom"],
	    "sort_order": 96
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "JACK-O-LANTERN",
	    "short_name": "jack_o_lantern",
	    "short_names": ["jack_o_lantern"],
	    "sort_order": 98
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHRISTMAS TREE",
	    "short_name": "christmas_tree",
	    "short_names": ["christmas_tree"],
	    "sort_order": 75
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TANABATA TREE",
	    "short_name": "tanabata_tree",
	    "short_names": ["tanabata_tree"],
	    "sort_order": 84
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PINE DECORATION",
	    "short_name": "bamboo",
	    "short_names": ["bamboo"],
	    "sort_order": 83
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RAT",
	    "short_name": "rat",
	    "short_names": ["rat"],
	    "sort_order": 61
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOUSE",
	    "short_name": "mouse2",
	    "short_names": ["mouse2"],
	    "sort_order": 62
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OX",
	    "short_name": "ox",
	    "short_names": ["ox"],
	    "sort_order": 51
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WATER BUFFALO",
	    "short_name": "water_buffalo",
	    "short_names": ["water_buffalo"],
	    "sort_order": 50
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "COW",
	    "short_name": "cow2",
	    "short_names": ["cow2"],
	    "sort_order": 52
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TIGER",
	    "short_name": "tiger2",
	    "short_names": ["tiger2"],
	    "sort_order": 49
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LEOPARD",
	    "short_name": "leopard",
	    "short_names": ["leopard"],
	    "sort_order": 48
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RABBIT",
	    "short_name": "rabbit2",
	    "short_names": ["rabbit2"],
	    "sort_order": 69
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CAT",
	    "short_name": "cat2",
	    "short_names": ["cat2"],
	    "sort_order": 68
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DRAGON",
	    "short_name": "dragon",
	    "short_names": ["dragon"],
	    "sort_order": 72
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CROCODILE",
	    "short_name": "crocodile",
	    "short_names": ["crocodile"],
	    "sort_order": 47
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHALE",
	    "short_name": "whale2",
	    "short_names": ["whale2"],
	    "sort_order": 46
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SNAIL",
	    "short_name": "snail",
	    "short_names": ["snail"],
	    "sort_order": 33
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SNAKE",
	    "short_name": "snake",
	    "short_names": ["snake"],
	    "sort_order": 39
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HORSE",
	    "short_name": "racehorse",
	    "short_names": ["racehorse"],
	    "sort_order": 59
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RAM",
	    "short_name": "ram",
	    "short_names": ["ram"],
	    "sort_order": 57
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GOAT",
	    "short_name": "goat",
	    "short_names": ["goat"],
	    "sort_order": 56
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SHEEP",
	    "short_name": "sheep",
	    "short_names": ["sheep"],
	    "sort_order": 58
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MONKEY",
	    "short_name": "monkey",
	    "short_names": ["monkey"],
	    "sort_order": 20
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ROOSTER",
	    "short_name": "rooster",
	    "short_names": ["rooster"],
	    "sort_order": 63
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHICKEN",
	    "short_name": "chicken",
	    "short_names": ["chicken"],
	    "sort_order": 21
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DOG",
	    "short_name": "dog2",
	    "short_names": ["dog2"],
	    "sort_order": 66
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PIG",
	    "short_name": "pig2",
	    "short_names": ["pig2"],
	    "sort_order": 60
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BOAR",
	    "short_name": "boar",
	    "short_names": ["boar"],
	    "sort_order": 28
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ELEPHANT",
	    "short_name": "elephant",
	    "short_names": ["elephant"],
	    "sort_order": 55
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OCTOPUS",
	    "short_name": "octopus",
	    "short_names": ["octopus"],
	    "sort_order": 15
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPIRAL SHELL",
	    "short_name": "shell",
	    "short_names": ["shell"],
	    "sort_order": 99
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BUG",
	    "short_name": "bug",
	    "short_names": ["bug"],
	    "sort_order": 32
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ANT",
	    "short_name": "ant",
	    "short_names": ["ant"],
	    "sort_order": 35
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HONEYBEE",
	    "short_name": "bee",
	    "short_names": ["bee", "honeybee"],
	    "sort_order": 31
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LADY BEETLE",
	    "short_name": "beetle",
	    "short_names": ["beetle"],
	    "sort_order": 34
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FISH",
	    "short_name": "fish",
	    "short_names": ["fish"],
	    "sort_order": 42
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TROPICAL FISH",
	    "short_name": "tropical_fish",
	    "short_names": ["tropical_fish"],
	    "sort_order": 41
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BLOWFISH",
	    "short_name": "blowfish",
	    "short_names": ["blowfish"],
	    "sort_order": 43
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TURTLE",
	    "short_name": "turtle",
	    "short_names": ["turtle"],
	    "sort_order": 40
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HATCHING CHICK",
	    "short_name": "hatching_chick",
	    "short_names": ["hatching_chick"],
	    "sort_order": 25
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BABY CHICK",
	    "short_name": "baby_chick",
	    "short_names": ["baby_chick"],
	    "sort_order": 24
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FRONT-FACING BABY CHICK",
	    "short_name": "hatched_chick",
	    "short_names": ["hatched_chick"],
	    "sort_order": 26
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BIRD",
	    "short_name": "bird",
	    "short_names": ["bird"],
	    "sort_order": 23
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PENGUIN",
	    "short_name": "penguin",
	    "short_names": ["penguin"],
	    "sort_order": 22
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "KOALA",
	    "short_name": "koala",
	    "short_names": ["koala"],
	    "sort_order": 8
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POODLE",
	    "short_name": "poodle",
	    "short_names": ["poodle"],
	    "sort_order": 67
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DROMEDARY CAMEL",
	    "short_name": "dromedary_camel",
	    "short_names": ["dromedary_camel"],
	    "sort_order": 53
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BACTRIAN CAMEL",
	    "short_name": "camel",
	    "short_names": ["camel"],
	    "sort_order": 54
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DOLPHIN",
	    "short_name": "dolphin",
	    "short_names": ["dolphin", "flipper"],
	    "sort_order": 44
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOUSE FACE",
	    "short_name": "mouse",
	    "short_names": ["mouse"],
	    "sort_order": 3
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "COW FACE",
	    "short_name": "cow",
	    "short_names": ["cow"],
	    "sort_order": 11
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TIGER FACE",
	    "short_name": "tiger",
	    "short_names": ["tiger"],
	    "sort_order": 9
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RABBIT FACE",
	    "short_name": "rabbit",
	    "short_names": ["rabbit"],
	    "sort_order": 5
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CAT FACE",
	    "short_name": "cat",
	    "short_names": ["cat"],
	    "sort_order": 2
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DRAGON FACE",
	    "short_name": "dragon_face",
	    "short_names": ["dragon_face"],
	    "sort_order": 73
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPOUTING WHALE",
	    "short_name": "whale",
	    "short_names": ["whale"],
	    "sort_order": 45
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HORSE FACE",
	    "short_name": "horse",
	    "short_names": ["horse"],
	    "sort_order": 29
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MONKEY FACE",
	    "short_name": "monkey_face",
	    "short_names": ["monkey_face"],
	    "sort_order": 16
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DOG FACE",
	    "short_name": "dog",
	    "short_names": ["dog"],
	    "sort_order": 1
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PIG FACE",
	    "short_name": "pig",
	    "short_names": ["pig"],
	    "sort_order": 12
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FROG FACE",
	    "short_name": "frog",
	    "short_names": ["frog"],
	    "sort_order": 14
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HAMSTER FACE",
	    "short_name": "hamster",
	    "short_names": ["hamster"],
	    "sort_order": 4
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WOLF FACE",
	    "short_name": "wolf",
	    "short_names": ["wolf"],
	    "sort_order": 27
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BEAR FACE",
	    "short_name": "bear",
	    "short_names": ["bear"],
	    "sort_order": 6
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PANDA FACE",
	    "short_name": "panda_face",
	    "short_names": ["panda_face"],
	    "sort_order": 7
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PIG NOSE",
	    "short_name": "pig_nose",
	    "short_names": ["pig_nose"],
	    "sort_order": 13
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PAW PRINTS",
	    "short_name": "feet",
	    "short_names": ["feet", "paw_prints"],
	    "sort_order": 71
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHIPMUNK",
	    "short_name": "chipmunk",
	    "short_names": ["chipmunk"],
	    "sort_order": 70
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BOUQUET",
	    "short_name": "bouquet",
	    "short_names": ["bouquet"],
	    "sort_order": 95
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "COLLISION SYMBOL",
	    "short_name": "boom",
	    "short_names": ["boom", "collision"],
	    "sort_order": 134
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPLASHING SWEAT SYMBOL",
	    "short_name": "sweat_drops",
	    "short_names": ["sweat_drops"],
	    "sort_order": 146
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DROPLET",
	    "short_name": "droplet",
	    "short_names": ["droplet"],
	    "sort_order": 145
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DASH SYMBOL",
	    "short_name": "dash",
	    "short_names": ["dash"],
	    "sort_order": 140
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DIZZY SYMBOL",
	    "short_name": "dizzy",
	    "short_names": ["dizzy"],
	    "sort_order": 120
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FIRE",
	    "short_name": "fire",
	    "short_names": ["fire"],
	    "sort_order": 133
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DOVE OF PEACE",
	    "short_name": "dove_of_peace",
	    "short_names": ["dove_of_peace"],
	    "sort_order": 65
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPIDER",
	    "short_name": "spider",
	    "short_names": ["spider"],
	    "sort_order": 36
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPIDER WEB",
	    "short_name": "spider_web",
	    "short_names": ["spider_web"],
	    "sort_order": 100
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SEE-NO-EVIL MONKEY",
	    "short_name": "see_no_evil",
	    "short_names": ["see_no_evil"],
	    "sort_order": 17
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEAR-NO-EVIL MONKEY",
	    "short_name": "hear_no_evil",
	    "short_names": ["hear_no_evil"],
	    "sort_order": 18
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPEAK-NO-EVIL MONKEY",
	    "short_name": "speak_no_evil",
	    "short_names": ["speak_no_evil"],
	    "sort_order": 19
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "CRAB",
	    "short_name": "crab",
	    "short_names": ["crab"],
	    "sort_order": 38
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "LION FACE",
	    "short_name": "lion_face",
	    "short_names": ["lion_face"],
	    "sort_order": 10
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "SCORPION",
	    "short_name": "scorpion",
	    "short_names": ["scorpion"],
	    "sort_order": 37
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "TURKEY",
	    "short_name": "turkey",
	    "short_names": ["turkey"],
	    "sort_order": 64
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "UNICORN FACE",
	    "short_name": "unicorn_face",
	    "short_names": ["unicorn_face"],
	    "sort_order": 30
	  }],
	  "Foods": [{
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOT BEVERAGE",
	    "short_name": "coffee",
	    "short_names": ["coffee"],
	    "sort_order": 64
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "HOT DOG",
	    "short_name": "hotdog",
	    "short_names": ["hotdog"],
	    "sort_order": 28
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "TACO",
	    "short_name": "taco",
	    "short_names": ["taco"],
	    "sort_order": 31
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "BURRITO",
	    "short_name": "burrito",
	    "short_names": ["burrito"],
	    "sort_order": 32
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOT PEPPER",
	    "short_name": "hot_pepper",
	    "short_names": ["hot_pepper"],
	    "sort_order": 16
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EAR OF MAIZE",
	    "short_name": "corn",
	    "short_names": ["corn"],
	    "sort_order": 17
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TOMATO",
	    "short_name": "tomato",
	    "short_names": ["tomato"],
	    "sort_order": 14
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "AUBERGINE",
	    "short_name": "eggplant",
	    "short_names": ["eggplant"],
	    "sort_order": 15
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GRAPES",
	    "short_name": "grapes",
	    "short_names": ["grapes"],
	    "sort_order": 8
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MELON",
	    "short_name": "melon",
	    "short_names": ["melon"],
	    "sort_order": 10
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WATERMELON",
	    "short_name": "watermelon",
	    "short_names": ["watermelon"],
	    "sort_order": 7
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TANGERINE",
	    "short_name": "tangerine",
	    "short_names": ["tangerine"],
	    "sort_order": 4
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LEMON",
	    "short_name": "lemon",
	    "short_names": ["lemon"],
	    "sort_order": 5
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BANANA",
	    "short_name": "banana",
	    "short_names": ["banana"],
	    "sort_order": 6
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PINEAPPLE",
	    "short_name": "pineapple",
	    "short_names": ["pineapple"],
	    "sort_order": 13
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RED APPLE",
	    "short_name": "apple",
	    "short_names": ["apple"],
	    "sort_order": 2
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GREEN APPLE",
	    "short_name": "green_apple",
	    "short_names": ["green_apple"],
	    "sort_order": 1
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PEAR",
	    "short_name": "pear",
	    "short_names": ["pear"],
	    "sort_order": 3
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PEACH",
	    "short_name": "peach",
	    "short_names": ["peach"],
	    "sort_order": 12
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHERRIES",
	    "short_name": "cherries",
	    "short_names": ["cherries"],
	    "sort_order": 11
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "STRAWBERRY",
	    "short_name": "strawberry",
	    "short_names": ["strawberry"],
	    "sort_order": 9
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HAMBURGER",
	    "short_name": "hamburger",
	    "short_names": ["hamburger"],
	    "sort_order": 26
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SLICE OF PIZZA",
	    "short_name": "pizza",
	    "short_names": ["pizza"],
	    "sort_order": 29
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MEAT ON BONE",
	    "short_name": "meat_on_bone",
	    "short_names": ["meat_on_bone"],
	    "sort_order": 23
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POULTRY LEG",
	    "short_name": "poultry_leg",
	    "short_names": ["poultry_leg"],
	    "sort_order": 22
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RICE CRACKER",
	    "short_name": "rice_cracker",
	    "short_names": ["rice_cracker"],
	    "sort_order": 41
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RICE BALL",
	    "short_name": "rice_ball",
	    "short_names": ["rice_ball"],
	    "sort_order": 39
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "COOKED RICE",
	    "short_name": "rice",
	    "short_names": ["rice"],
	    "sort_order": 40
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CURRY AND RICE",
	    "short_name": "curry",
	    "short_names": ["curry"],
	    "sort_order": 38
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "STEAMING BOWL",
	    "short_name": "ramen",
	    "short_names": ["ramen"],
	    "sort_order": 33
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPAGHETTI",
	    "short_name": "spaghetti",
	    "short_names": ["spaghetti"],
	    "sort_order": 30
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BREAD",
	    "short_name": "bread",
	    "short_names": ["bread"],
	    "sort_order": 20
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FRENCH FRIES",
	    "short_name": "fries",
	    "short_names": ["fries"],
	    "sort_order": 27
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ROASTED SWEET POTATO",
	    "short_name": "sweet_potato",
	    "short_names": ["sweet_potato"],
	    "sort_order": 18
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DANGO",
	    "short_name": "dango",
	    "short_names": ["dango"],
	    "sort_order": 43
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ODEN",
	    "short_name": "oden",
	    "short_names": ["oden"],
	    "sort_order": 42
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SUSHI",
	    "short_name": "sushi",
	    "short_names": ["sushi"],
	    "sort_order": 36
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FRIED SHRIMP",
	    "short_name": "fried_shrimp",
	    "short_names": ["fried_shrimp"],
	    "sort_order": 24
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FISH CAKE WITH SWIRL DESIGN",
	    "short_name": "fish_cake",
	    "short_names": ["fish_cake"],
	    "sort_order": 35
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SOFT ICE CREAM",
	    "short_name": "icecream",
	    "short_names": ["icecream"],
	    "sort_order": 46
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SHAVED ICE",
	    "short_name": "shaved_ice",
	    "short_names": ["shaved_ice"],
	    "sort_order": 44
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ICE CREAM",
	    "short_name": "ice_cream",
	    "short_names": ["ice_cream"],
	    "sort_order": 45
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DOUGHNUT",
	    "short_name": "doughnut",
	    "short_names": ["doughnut"],
	    "sort_order": 54
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "COOKIE",
	    "short_name": "cookie",
	    "short_names": ["cookie"],
	    "sort_order": 55
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHOCOLATE BAR",
	    "short_name": "chocolate_bar",
	    "short_names": ["chocolate_bar"],
	    "sort_order": 52
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CANDY",
	    "short_name": "candy",
	    "short_names": ["candy"],
	    "sort_order": 50
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LOLLIPOP",
	    "short_name": "lollipop",
	    "short_names": ["lollipop"],
	    "sort_order": 51
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CUSTARD",
	    "short_name": "custard",
	    "short_names": ["custard"],
	    "sort_order": 49
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HONEY POT",
	    "short_name": "honey_pot",
	    "short_names": ["honey_pot"],
	    "sort_order": 19
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SHORTCAKE",
	    "short_name": "cake",
	    "short_names": ["cake"],
	    "sort_order": 47
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BENTO BOX",
	    "short_name": "bento",
	    "short_names": ["bento"],
	    "sort_order": 37
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POT OF FOOD",
	    "short_name": "stew",
	    "short_names": ["stew"],
	    "sort_order": 34
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "COOKING",
	    "short_name": "egg",
	    "short_names": ["egg"],
	    "sort_order": 25
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FORK AND KNIFE",
	    "short_name": "fork_and_knife",
	    "short_names": ["fork_and_knife"],
	    "sort_order": 66
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TEACUP WITHOUT HANDLE",
	    "short_name": "tea",
	    "short_names": ["tea"],
	    "sort_order": 63
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SAKE BOTTLE AND CUP",
	    "short_name": "sake",
	    "short_names": ["sake"],
	    "sort_order": 62
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WINE GLASS",
	    "short_name": "wine_glass",
	    "short_names": ["wine_glass"],
	    "sort_order": 58
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "COCKTAIL GLASS",
	    "short_name": "cocktail",
	    "short_names": ["cocktail"],
	    "sort_order": 59
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TROPICAL DRINK",
	    "short_name": "tropical_drink",
	    "short_names": ["tropical_drink"],
	    "sort_order": 60
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BEER MUG",
	    "short_name": "beer",
	    "short_names": ["beer"],
	    "sort_order": 56
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLINKING BEER MUGS",
	    "short_name": "beers",
	    "short_names": ["beers"],
	    "sort_order": 57
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BABY BOTTLE",
	    "short_name": "baby_bottle",
	    "short_names": ["baby_bottle"],
	    "sort_order": 65
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FORK AND KNIFE WITH PLATE",
	    "short_name": "knife_fork_plate",
	    "short_names": ["knife_fork_plate"],
	    "sort_order": 67
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "BOTTLE WITH POPPING CORK",
	    "short_name": "champagne",
	    "short_names": ["champagne"],
	    "sort_order": 61
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "POPCORN",
	    "short_name": "popcorn",
	    "short_names": ["popcorn"],
	    "sort_order": 53
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BIRTHDAY CAKE",
	    "short_name": "birthday",
	    "short_names": ["birthday"],
	    "sort_order": 48
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "CHEESE WEDGE",
	    "short_name": "cheese_wedge",
	    "short_names": ["cheese_wedge"],
	    "sort_order": 21
	  }],
	  "People": [{
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE UP POINTING INDEX",
	    "short_name": "point_up",
	    "short_names": ["point_up"],
	    "sort_order": 101
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "WHITE FROWNING FACE",
	    "short_name": "white_frowning_face",
	    "short_names": ["white_frowning_face"],
	    "sort_order": 44
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE SMILING FACE",
	    "short_name": "relaxed",
	    "short_names": ["relaxed"],
	    "sort_order": 14
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "HELMET WITH WHITE CROSS",
	    "short_name": "helmet_with_white_cross",
	    "short_names": ["helmet_with_white_cross"],
	    "sort_order": 193
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RAISED FIST",
	    "short_name": "fist",
	    "short_names": ["fist"],
	    "sort_order": 94
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RAISED HAND",
	    "short_name": "hand",
	    "short_names": ["hand", "raised_hand"],
	    "sort_order": 97
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "VICTORY HAND",
	    "short_name": "v",
	    "short_names": ["v"],
	    "sort_order": 95
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "WRITING HAND",
	    "short_name": "writing_hand",
	    "short_names": ["writing_hand"],
	    "sort_order": 110
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLOSED UMBRELLA",
	    "short_name": "closed_umbrella",
	    "short_names": ["closed_umbrella"],
	    "sort_order": 204
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FATHER CHRISTMAS",
	    "short_name": "santa",
	    "short_names": ["santa"],
	    "sort_order": 135
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SCHOOL SATCHEL",
	    "short_name": "school_satchel",
	    "short_names": ["school_satchel"],
	    "sort_order": 196
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GRADUATION CAP",
	    "short_name": "mortar_board",
	    "short_names": ["mortar_board"],
	    "sort_order": 194
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TOP HAT",
	    "short_name": "tophat",
	    "short_names": ["tophat"],
	    "sort_order": 192
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RUNNER",
	    "short_name": "runner",
	    "short_names": ["runner", "running"],
	    "sort_order": 140
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EYES",
	    "short_name": "eyes",
	    "short_names": ["eyes"],
	    "sort_order": 117
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EYE",
	    "short_name": "eye",
	    "short_names": ["eye"],
	    "sort_order": 116
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EAR",
	    "short_name": "ear",
	    "short_names": ["ear"],
	    "sort_order": 114
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NOSE",
	    "short_name": "nose",
	    "short_names": ["nose"],
	    "sort_order": 115
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOUTH",
	    "short_name": "lips",
	    "short_names": ["lips"],
	    "sort_order": 112
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TONGUE",
	    "short_name": "tongue",
	    "short_names": ["tongue"],
	    "sort_order": 113
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE UP POINTING BACKHAND INDEX",
	    "short_name": "point_up_2",
	    "short_names": ["point_up_2"],
	    "sort_order": 102
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE DOWN POINTING BACKHAND INDEX",
	    "short_name": "point_down",
	    "short_names": ["point_down"],
	    "sort_order": 103
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE LEFT POINTING BACKHAND INDEX",
	    "short_name": "point_left",
	    "short_names": ["point_left"],
	    "sort_order": 104
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WHITE RIGHT POINTING BACKHAND INDEX",
	    "short_name": "point_right",
	    "short_names": ["point_right"],
	    "sort_order": 105
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FISTED HAND SIGN",
	    "short_name": "facepunch",
	    "short_names": ["facepunch", "punch"],
	    "sort_order": 93
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WAVING HAND SIGN",
	    "short_name": "wave",
	    "short_names": ["wave"],
	    "sort_order": 90
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OK HAND SIGN",
	    "short_name": "ok_hand",
	    "short_names": ["ok_hand"],
	    "sort_order": 96
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "THUMBS UP SIGN",
	    "short_name": "+1",
	    "short_names": ["+1", "thumbsup"],
	    "sort_order": 91
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "THUMBS DOWN SIGN",
	    "short_name": "-1",
	    "short_names": ["-1", "thumbsdown"],
	    "sort_order": 92
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLAPPING HANDS SIGN",
	    "short_name": "clap",
	    "short_names": ["clap"],
	    "sort_order": 89
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OPEN HANDS SIGN",
	    "short_name": "open_hands",
	    "short_names": ["open_hands"],
	    "sort_order": 98
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CROWN",
	    "short_name": "crown",
	    "short_names": ["crown"],
	    "sort_order": 195
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WOMANS HAT",
	    "short_name": "womans_hat",
	    "short_names": ["womans_hat"],
	    "sort_order": 191
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EYEGLASSES",
	    "short_name": "eyeglasses",
	    "short_names": ["eyeglasses"],
	    "sort_order": 201
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NECKTIE",
	    "short_name": "necktie",
	    "short_names": ["necktie"],
	    "sort_order": 179
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "T-SHIRT",
	    "short_name": "shirt",
	    "short_names": ["shirt", "tshirt"],
	    "sort_order": 177
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "JEANS",
	    "short_name": "jeans",
	    "short_names": ["jeans"],
	    "sort_order": 178
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DRESS",
	    "short_name": "dress",
	    "short_names": ["dress"],
	    "sort_order": 180
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "KIMONO",
	    "short_name": "kimono",
	    "short_names": ["kimono"],
	    "sort_order": 182
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BIKINI",
	    "short_name": "bikini",
	    "short_names": ["bikini"],
	    "sort_order": 181
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WOMANS CLOTHES",
	    "short_name": "womans_clothes",
	    "short_names": ["womans_clothes"],
	    "sort_order": 176
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PURSE",
	    "short_name": "purse",
	    "short_names": ["purse"],
	    "sort_order": 198
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HANDBAG",
	    "short_name": "handbag",
	    "short_names": ["handbag"],
	    "sort_order": 199
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POUCH",
	    "short_name": "pouch",
	    "short_names": ["pouch"],
	    "sort_order": 197
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MANS SHOE",
	    "short_name": "mans_shoe",
	    "short_names": ["mans_shoe", "shoe"],
	    "sort_order": 189
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ATHLETIC SHOE",
	    "short_name": "athletic_shoe",
	    "short_names": ["athletic_shoe"],
	    "sort_order": 190
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HIGH-HEELED SHOE",
	    "short_name": "high_heel",
	    "short_names": ["high_heel"],
	    "sort_order": 186
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WOMANS SANDAL",
	    "short_name": "sandal",
	    "short_names": ["sandal"],
	    "sort_order": 187
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WOMANS BOOTS",
	    "short_name": "boot",
	    "short_names": ["boot"],
	    "sort_order": 188
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FOOTPRINTS",
	    "short_name": "footprints",
	    "short_names": ["footprints"],
	    "sort_order": 185
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BUST IN SILHOUETTE",
	    "short_name": "bust_in_silhouette",
	    "short_names": ["bust_in_silhouette"],
	    "sort_order": 118
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BUSTS IN SILHOUETTE",
	    "short_name": "busts_in_silhouette",
	    "short_names": ["busts_in_silhouette"],
	    "sort_order": 119
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BOY",
	    "short_name": "boy",
	    "short_names": ["boy"],
	    "sort_order": 122
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GIRL",
	    "short_name": "girl",
	    "short_names": ["girl"],
	    "sort_order": 123
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MAN",
	    "short_name": "man",
	    "short_names": ["man"],
	    "sort_order": 124
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WOMAN",
	    "short_name": "woman",
	    "short_names": ["woman"],
	    "sort_order": 125
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FAMILY",
	    "short_name": "family",
	    "short_names": ["family", "man-woman-boy"],
	    "sort_order": 161
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MAN AND WOMAN HOLDING HANDS",
	    "short_name": "couple",
	    "short_names": ["couple", "man_and_woman_holding_hands"],
	    "sort_order": 143
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TWO MEN HOLDING HANDS",
	    "short_name": "two_men_holding_hands",
	    "short_names": ["two_men_holding_hands"],
	    "sort_order": 144
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TWO WOMEN HOLDING HANDS",
	    "short_name": "two_women_holding_hands",
	    "short_names": ["two_women_holding_hands"],
	    "sort_order": 145
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POLICE OFFICER",
	    "short_name": "cop",
	    "short_names": ["cop"],
	    "sort_order": 131
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WOMAN WITH BUNNY EARS",
	    "short_name": "dancers",
	    "short_names": ["dancers"],
	    "sort_order": 142
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BRIDE WITH VEIL",
	    "short_name": "bride_with_veil",
	    "short_names": ["bride_with_veil"],
	    "sort_order": 138
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PERSON WITH BLOND HAIR",
	    "short_name": "person_with_blond_hair",
	    "short_names": ["person_with_blond_hair"],
	    "sort_order": 126
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MAN WITH GUA PI MAO",
	    "short_name": "man_with_gua_pi_mao",
	    "short_names": ["man_with_gua_pi_mao"],
	    "sort_order": 129
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MAN WITH TURBAN",
	    "short_name": "man_with_turban",
	    "short_names": ["man_with_turban"],
	    "sort_order": 130
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OLDER MAN",
	    "short_name": "older_man",
	    "short_names": ["older_man"],
	    "sort_order": 127
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OLDER WOMAN",
	    "short_name": "older_woman",
	    "short_names": ["older_woman"],
	    "sort_order": 128
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BABY",
	    "short_name": "baby",
	    "short_names": ["baby"],
	    "sort_order": 121
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CONSTRUCTION WORKER",
	    "short_name": "construction_worker",
	    "short_names": ["construction_worker"],
	    "sort_order": 132
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PRINCESS",
	    "short_name": "princess",
	    "short_names": ["princess"],
	    "sort_order": 137
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "JAPANESE OGRE",
	    "short_name": "japanese_ogre",
	    "short_names": ["japanese_ogre"],
	    "sort_order": 73
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "JAPANESE GOBLIN",
	    "short_name": "japanese_goblin",
	    "short_names": ["japanese_goblin"],
	    "sort_order": 74
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GHOST",
	    "short_name": "ghost",
	    "short_names": ["ghost"],
	    "sort_order": 76
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BABY ANGEL",
	    "short_name": "angel",
	    "short_names": ["angel"],
	    "sort_order": 136
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EXTRATERRESTRIAL ALIEN",
	    "short_name": "alien",
	    "short_names": ["alien"],
	    "sort_order": 77
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "IMP",
	    "short_name": "imp",
	    "short_names": ["imp"],
	    "sort_order": 72
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SKULL",
	    "short_name": "skull",
	    "short_names": ["skull"],
	    "sort_order": 75
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "INFORMATION DESK PERSON",
	    "short_name": "information_desk_person",
	    "short_names": ["information_desk_person"],
	    "sort_order": 147
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GUARDSMAN",
	    "short_name": "guardsman",
	    "short_names": ["guardsman"],
	    "sort_order": 133
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DANCER",
	    "short_name": "dancer",
	    "short_names": ["dancer"],
	    "sort_order": 141
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LIPSTICK",
	    "short_name": "lipstick",
	    "short_names": ["lipstick"],
	    "sort_order": 183
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NAIL POLISH",
	    "short_name": "nail_care",
	    "short_names": ["nail_care"],
	    "sort_order": 111
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE MASSAGE",
	    "short_name": "massage",
	    "short_names": ["massage"],
	    "sort_order": 154
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HAIRCUT",
	    "short_name": "haircut",
	    "short_names": ["haircut"],
	    "sort_order": 153
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "KISS MARK",
	    "short_name": "kiss",
	    "short_names": ["kiss"],
	    "sort_order": 184
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RING",
	    "short_name": "ring",
	    "short_names": ["ring"],
	    "sort_order": 203
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "KISS",
	    "short_name": "couplekiss",
	    "short_names": ["couplekiss"],
	    "sort_order": 158
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "COUPLE WITH HEART",
	    "short_name": "couple_with_heart",
	    "short_names": ["couple_with_heart"],
	    "sort_order": 155
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SLEEPING SYMBOL",
	    "short_name": "zzz",
	    "short_names": ["zzz"],
	    "sort_order": 69
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PILE OF POO",
	    "short_name": "hankey",
	    "short_names": ["hankey", "poop", "shit"],
	    "sort_order": 70
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FLEXED BICEPS",
	    "short_name": "muscle",
	    "short_names": ["muscle"],
	    "sort_order": 99
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BRIEFCASE",
	    "short_name": "briefcase",
	    "short_names": ["briefcase"],
	    "sort_order": 200
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SLEUTH OR SPY",
	    "short_name": "sleuth_or_spy",
	    "short_names": ["sleuth_or_spy"],
	    "sort_order": 134
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DARK SUNGLASSES",
	    "short_name": "dark_sunglasses",
	    "short_names": ["dark_sunglasses"],
	    "sort_order": 202
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RAISED HAND WITH FINGERS SPLAYED",
	    "short_name": "raised_hand_with_fingers_splayed",
	    "short_names": ["raised_hand_with_fingers_splayed"],
	    "sort_order": 107
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REVERSED HAND WITH MIDDLE FINGER EXTENDED",
	    "short_name": "middle_finger",
	    "short_names": ["middle_finger", "reversed_hand_with_middle_finger_extended"],
	    "sort_order": 106
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS",
	    "short_name": "spock-hand",
	    "short_names": ["spock-hand"],
	    "sort_order": 109
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPEAKING HEAD IN SILHOUETTE",
	    "short_name": "speaking_head_in_silhouette",
	    "short_names": ["speaking_head_in_silhouette"],
	    "sort_order": 120
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GRINNING FACE",
	    "short_name": "grinning",
	    "short_names": ["grinning"],
	    "sort_order": 1
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GRINNING FACE WITH SMILING EYES",
	    "short_name": "grin",
	    "short_names": ["grin"],
	    "sort_order": 3
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITH TEARS OF JOY",
	    "short_name": "joy",
	    "short_names": ["joy"],
	    "sort_order": 4
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMILING FACE WITH OPEN MOUTH",
	    "short_name": "smiley",
	    "short_names": ["smiley"],
	    "sort_order": 5
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMILING FACE WITH OPEN MOUTH AND SMILING EYES",
	    "short_name": "smile",
	    "short_names": ["smile"],
	    "sort_order": 6
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMILING FACE WITH OPEN MOUTH AND COLD SWEAT",
	    "short_name": "sweat_smile",
	    "short_names": ["sweat_smile"],
	    "sort_order": 7
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES",
	    "short_name": "laughing",
	    "short_names": ["laughing", "satisfied"],
	    "sort_order": 8
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMILING FACE WITH HALO",
	    "short_name": "innocent",
	    "short_names": ["innocent"],
	    "sort_order": 9
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMILING FACE WITH HORNS",
	    "short_name": "smiling_imp",
	    "short_names": ["smiling_imp"],
	    "sort_order": 71
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WINKING FACE",
	    "short_name": "wink",
	    "short_names": ["wink"],
	    "sort_order": 10
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMILING FACE WITH SMILING EYES",
	    "short_name": "blush",
	    "short_names": ["blush"],
	    "sort_order": 11
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE SAVOURING DELICIOUS FOOD",
	    "short_name": "yum",
	    "short_names": ["yum"],
	    "sort_order": 15
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RELIEVED FACE",
	    "short_name": "relieved",
	    "short_names": ["relieved"],
	    "sort_order": 16
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMILING FACE WITH HEART-SHAPED EYES",
	    "short_name": "heart_eyes",
	    "short_names": ["heart_eyes"],
	    "sort_order": 17
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMILING FACE WITH SUNGLASSES",
	    "short_name": "sunglasses",
	    "short_names": ["sunglasses"],
	    "sort_order": 27
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMIRKING FACE",
	    "short_name": "smirk",
	    "short_names": ["smirk"],
	    "sort_order": 29
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NEUTRAL FACE",
	    "short_name": "neutral_face",
	    "short_names": ["neutral_face"],
	    "sort_order": 31
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EXPRESSIONLESS FACE",
	    "short_name": "expressionless",
	    "short_names": ["expressionless"],
	    "sort_order": 32
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "UNAMUSED FACE",
	    "short_name": "unamused",
	    "short_names": ["unamused"],
	    "sort_order": 33
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITH COLD SWEAT",
	    "short_name": "sweat",
	    "short_names": ["sweat"],
	    "sort_order": 60
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PENSIVE FACE",
	    "short_name": "pensive",
	    "short_names": ["pensive"],
	    "sort_order": 41
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CONFUSED FACE",
	    "short_name": "confused",
	    "short_names": ["confused"],
	    "sort_order": 42
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CONFOUNDED FACE",
	    "short_name": "confounded",
	    "short_names": ["confounded"],
	    "sort_order": 46
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "KISSING FACE",
	    "short_name": "kissing",
	    "short_names": ["kissing"],
	    "sort_order": 19
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE THROWING A KISS",
	    "short_name": "kissing_heart",
	    "short_names": ["kissing_heart"],
	    "sort_order": 18
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "KISSING FACE WITH SMILING EYES",
	    "short_name": "kissing_smiling_eyes",
	    "short_names": ["kissing_smiling_eyes"],
	    "sort_order": 20
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "KISSING FACE WITH CLOSED EYES",
	    "short_name": "kissing_closed_eyes",
	    "short_names": ["kissing_closed_eyes"],
	    "sort_order": 21
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITH STUCK-OUT TONGUE",
	    "short_name": "stuck_out_tongue",
	    "short_names": ["stuck_out_tongue"],
	    "sort_order": 24
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITH STUCK-OUT TONGUE AND WINKING EYE",
	    "short_name": "stuck_out_tongue_winking_eye",
	    "short_names": ["stuck_out_tongue_winking_eye"],
	    "sort_order": 22
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES",
	    "short_name": "stuck_out_tongue_closed_eyes",
	    "short_names": ["stuck_out_tongue_closed_eyes"],
	    "sort_order": 23
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DISAPPOINTED FACE",
	    "short_name": "disappointed",
	    "short_names": ["disappointed"],
	    "sort_order": 37
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WORRIED FACE",
	    "short_name": "worried",
	    "short_names": ["worried"],
	    "sort_order": 38
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ANGRY FACE",
	    "short_name": "angry",
	    "short_names": ["angry"],
	    "sort_order": 39
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POUTING FACE",
	    "short_name": "rage",
	    "short_names": ["rage"],
	    "sort_order": 40
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CRYING FACE",
	    "short_name": "cry",
	    "short_names": ["cry"],
	    "sort_order": 57
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PERSEVERING FACE",
	    "short_name": "persevere",
	    "short_names": ["persevere"],
	    "sort_order": 45
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITH LOOK OF TRIUMPH",
	    "short_name": "triumph",
	    "short_names": ["triumph"],
	    "sort_order": 49
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DISAPPOINTED BUT RELIEVED FACE",
	    "short_name": "disappointed_relieved",
	    "short_names": ["disappointed_relieved"],
	    "sort_order": 58
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FROWNING FACE WITH OPEN MOUTH",
	    "short_name": "frowning",
	    "short_names": ["frowning"],
	    "sort_order": 55
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ANGUISHED FACE",
	    "short_name": "anguished",
	    "short_names": ["anguished"],
	    "sort_order": 56
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FEARFUL FACE",
	    "short_name": "fearful",
	    "short_names": ["fearful"],
	    "sort_order": 52
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WEARY FACE",
	    "short_name": "weary",
	    "short_names": ["weary"],
	    "sort_order": 48
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SLEEPY FACE",
	    "short_name": "sleepy",
	    "short_names": ["sleepy"],
	    "sort_order": 59
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TIRED FACE",
	    "short_name": "tired_face",
	    "short_names": ["tired_face"],
	    "sort_order": 47
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GRIMACING FACE",
	    "short_name": "grimacing",
	    "short_names": ["grimacing"],
	    "sort_order": 2
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LOUDLY CRYING FACE",
	    "short_name": "sob",
	    "short_names": ["sob"],
	    "sort_order": 61
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITH OPEN MOUTH",
	    "short_name": "open_mouth",
	    "short_names": ["open_mouth"],
	    "sort_order": 50
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HUSHED FACE",
	    "short_name": "hushed",
	    "short_names": ["hushed"],
	    "sort_order": 54
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITH OPEN MOUTH AND COLD SWEAT",
	    "short_name": "cold_sweat",
	    "short_names": ["cold_sweat"],
	    "sort_order": 53
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE SCREAMING IN FEAR",
	    "short_name": "scream",
	    "short_names": ["scream"],
	    "sort_order": 51
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ASTONISHED FACE",
	    "short_name": "astonished",
	    "short_names": ["astonished"],
	    "sort_order": 63
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FLUSHED FACE",
	    "short_name": "flushed",
	    "short_names": ["flushed"],
	    "sort_order": 36
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SLEEPING FACE",
	    "short_name": "sleeping",
	    "short_names": ["sleeping"],
	    "sort_order": 68
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DIZZY FACE",
	    "short_name": "dizzy_face",
	    "short_names": ["dizzy_face"],
	    "sort_order": 62
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITHOUT MOUTH",
	    "short_name": "no_mouth",
	    "short_names": ["no_mouth"],
	    "sort_order": 30
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITH MEDICAL MASK",
	    "short_name": "mask",
	    "short_names": ["mask"],
	    "sort_order": 65
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GRINNING CAT FACE WITH SMILING EYES",
	    "short_name": "smile_cat",
	    "short_names": ["smile_cat"],
	    "sort_order": 80
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CAT FACE WITH TEARS OF JOY",
	    "short_name": "joy_cat",
	    "short_names": ["joy_cat"],
	    "sort_order": 81
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMILING CAT FACE WITH OPEN MOUTH",
	    "short_name": "smiley_cat",
	    "short_names": ["smiley_cat"],
	    "sort_order": 79
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMILING CAT FACE WITH HEART-SHAPED EYES",
	    "short_name": "heart_eyes_cat",
	    "short_names": ["heart_eyes_cat"],
	    "sort_order": 82
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CAT FACE WITH WRY SMILE",
	    "short_name": "smirk_cat",
	    "short_names": ["smirk_cat"],
	    "sort_order": 83
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "KISSING CAT FACE WITH CLOSED EYES",
	    "short_name": "kissing_cat",
	    "short_names": ["kissing_cat"],
	    "sort_order": 84
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POUTING CAT FACE",
	    "short_name": "pouting_cat",
	    "short_names": ["pouting_cat"],
	    "sort_order": 87
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CRYING CAT FACE",
	    "short_name": "crying_cat_face",
	    "short_names": ["crying_cat_face"],
	    "sort_order": 86
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WEARY CAT FACE",
	    "short_name": "scream_cat",
	    "short_names": ["scream_cat"],
	    "sort_order": 85
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SLIGHTLY FROWNING FACE",
	    "short_name": "slightly_frowning_face",
	    "short_names": ["slightly_frowning_face"],
	    "sort_order": 43
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SLIGHTLY SMILING FACE",
	    "short_name": "slightly_smiling_face",
	    "short_names": ["slightly_smiling_face"],
	    "sort_order": 12
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "UPSIDE-DOWN FACE",
	    "short_name": "upside_down_face",
	    "short_names": ["upside_down_face"],
	    "sort_order": 13
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "FACE WITH ROLLING EYES",
	    "short_name": "face_with_rolling_eyes",
	    "short_names": ["face_with_rolling_eyes"],
	    "sort_order": 34
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITH NO GOOD GESTURE",
	    "short_name": "no_good",
	    "short_names": ["no_good"],
	    "sort_order": 148
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACE WITH OK GESTURE",
	    "short_name": "ok_woman",
	    "short_names": ["ok_woman"],
	    "sort_order": 149
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PERSON BOWING DEEPLY",
	    "short_name": "bow",
	    "short_names": ["bow"],
	    "sort_order": 146
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HAPPY PERSON RAISING ONE HAND",
	    "short_name": "raising_hand",
	    "short_names": ["raising_hand"],
	    "sort_order": 150
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PERSON RAISING BOTH HANDS IN CELEBRATION",
	    "short_name": "raised_hands",
	    "short_names": ["raised_hands"],
	    "sort_order": 88
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PERSON FROWNING",
	    "short_name": "person_frowning",
	    "short_names": ["person_frowning"],
	    "sort_order": 152
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PERSON WITH POUTING FACE",
	    "short_name": "person_with_pouting_face",
	    "short_names": ["person_with_pouting_face"],
	    "sort_order": 151
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PERSON WITH FOLDED HANDS",
	    "short_name": "pray",
	    "short_names": ["pray"],
	    "sort_order": 100
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PEDESTRIAN",
	    "short_name": "walking",
	    "short_names": ["walking"],
	    "sort_order": 139
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "ZIPPER-MOUTH FACE",
	    "short_name": "zipper_mouth_face",
	    "short_names": ["zipper_mouth_face"],
	    "sort_order": 64
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "MONEY-MOUTH FACE",
	    "short_name": "money_mouth_face",
	    "short_names": ["money_mouth_face"],
	    "sort_order": 25
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "FACE WITH THERMOMETER",
	    "short_name": "face_with_thermometer",
	    "short_names": ["face_with_thermometer"],
	    "sort_order": 66
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "NERD FACE",
	    "short_name": "nerd_face",
	    "short_names": ["nerd_face"],
	    "sort_order": 26
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "THINKING FACE",
	    "short_name": "thinking_face",
	    "short_names": ["thinking_face"],
	    "sort_order": 35
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "FACE WITH HEAD-BANDAGE",
	    "short_name": "face_with_head_bandage",
	    "short_names": ["face_with_head_bandage"],
	    "sort_order": 67
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "ROBOT FACE",
	    "short_name": "robot_face",
	    "short_names": ["robot_face"],
	    "sort_order": 78
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "HUGGING FACE",
	    "short_name": "hugging_face",
	    "short_names": ["hugging_face"],
	    "sort_order": 28
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "SIGN OF THE HORNS",
	    "short_name": "the_horns",
	    "short_names": ["the_horns", "sign_of_the_horns"],
	    "sort_order": 108
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "man-man-boy",
	    "short_names": ["man-man-boy"],
	    "sort_order": 171
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "man-man-boy-boy",
	    "short_names": ["man-man-boy-boy"],
	    "sort_order": 174
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "man-man-girl",
	    "short_names": ["man-man-girl"],
	    "sort_order": 172
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "man-man-girl-boy",
	    "short_names": ["man-man-girl-boy"],
	    "sort_order": 173
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "man-man-girl-girl",
	    "short_names": ["man-man-girl-girl"],
	    "sort_order": 175
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "man-woman-boy-boy",
	    "short_names": ["man-woman-boy-boy"],
	    "sort_order": 164
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "man-woman-girl",
	    "short_names": ["man-woman-girl"],
	    "sort_order": 162
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "man-woman-girl-boy",
	    "short_names": ["man-woman-girl-boy"],
	    "sort_order": 163
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "man-woman-girl-girl",
	    "short_names": ["man-woman-girl-girl"],
	    "sort_order": 165
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": null,
	    "short_name": "man-heart-man",
	    "short_names": ["man-heart-man"],
	    "sort_order": 157
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": null,
	    "short_name": "man-kiss-man",
	    "short_names": ["man-kiss-man"],
	    "sort_order": 160
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "woman-woman-boy",
	    "short_names": ["woman-woman-boy"],
	    "sort_order": 166
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "woman-woman-boy-boy",
	    "short_names": ["woman-woman-boy-boy"],
	    "sort_order": 169
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "woman-woman-girl",
	    "short_names": ["woman-woman-girl"],
	    "sort_order": 167
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "woman-woman-girl-boy",
	    "short_names": ["woman-woman-girl-boy"],
	    "sort_order": 168
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": null,
	    "short_name": "woman-woman-girl-girl",
	    "short_names": ["woman-woman-girl-girl"],
	    "sort_order": 170
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": null,
	    "short_name": "woman-heart-woman",
	    "short_names": ["woman-heart-woman"],
	    "sort_order": 156
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": null,
	    "short_name": "woman-kiss-woman",
	    "short_names": ["woman-kiss-woman"],
	    "sort_order": 159
	  }],
	  "Places": [{
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ANCHOR",
	    "short_name": "anchor",
	    "short_names": ["anchor"],
	    "sort_order": 49
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "SHINTO SHRINE",
	    "short_name": "shinto_shrine",
	    "short_names": ["shinto_shrine"],
	    "sort_order": 115
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHURCH",
	    "short_name": "church",
	    "short_names": ["church"],
	    "sort_order": 111
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "MOUNTAIN",
	    "short_name": "mountain",
	    "short_names": ["mountain"],
	    "sort_order": 66
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FOUNTAIN",
	    "short_name": "fountain",
	    "short_names": ["fountain"],
	    "sort_order": 64
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "FERRY",
	    "short_name": "ferry",
	    "short_names": ["ferry"],
	    "sort_order": 44
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SAILBOAT",
	    "short_name": "boat",
	    "short_names": ["boat", "sailboat"],
	    "sort_order": 41
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TENT",
	    "short_name": "tent",
	    "short_names": ["tent"],
	    "sort_order": 72
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FUEL PUMP",
	    "short_name": "fuelpump",
	    "short_names": ["fuelpump"],
	    "sort_order": 51
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "AIRPLANE",
	    "short_name": "airplane",
	    "short_names": ["airplane"],
	    "sort_order": 38
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FOGGY",
	    "short_name": "foggy",
	    "short_names": ["foggy"],
	    "sort_order": 61
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NIGHT WITH STARS",
	    "short_name": "night_with_stars",
	    "short_names": ["night_with_stars"],
	    "sort_order": 84
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SUNRISE OVER MOUNTAINS",
	    "short_name": "sunrise_over_mountains",
	    "short_names": ["sunrise_over_mountains"],
	    "sort_order": 77
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SUNRISE",
	    "short_name": "sunrise",
	    "short_names": ["sunrise"],
	    "sort_order": 76
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CITYSCAPE AT DUSK",
	    "short_name": "city_sunset",
	    "short_names": ["city_sunset"],
	    "sort_order": 82
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SUNSET OVER BUILDINGS",
	    "short_name": "city_sunrise",
	    "short_names": ["city_sunrise"],
	    "sort_order": 81
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RAINBOW",
	    "short_name": "rainbow",
	    "short_names": ["rainbow"],
	    "sort_order": 90
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BRIDGE AT NIGHT",
	    "short_name": "bridge_at_night",
	    "short_names": ["bridge_at_night"],
	    "sort_order": 85
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "VOLCANO",
	    "short_name": "volcano",
	    "short_names": ["volcano"],
	    "sort_order": 69
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MILKY WAY",
	    "short_name": "milky_way",
	    "short_names": ["milky_way"],
	    "sort_order": 86
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SHOOTING STAR",
	    "short_name": "stars",
	    "short_names": ["stars"],
	    "sort_order": 87
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FIREWORKS",
	    "short_name": "fireworks",
	    "short_names": ["fireworks"],
	    "sort_order": 89
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FIREWORK SPARKLER",
	    "short_name": "sparkler",
	    "short_names": ["sparkler"],
	    "sort_order": 88
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOON VIEWING CEREMONY",
	    "short_name": "rice_scene",
	    "short_names": ["rice_scene"],
	    "sort_order": 65
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CAROUSEL HORSE",
	    "short_name": "carousel_horse",
	    "short_names": ["carousel_horse"],
	    "sort_order": 59
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FERRIS WHEEL",
	    "short_name": "ferris_wheel",
	    "short_names": ["ferris_wheel"],
	    "sort_order": 57
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ROLLER COASTER",
	    "short_name": "roller_coaster",
	    "short_names": ["roller_coaster"],
	    "sort_order": 58
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CHEQUERED FLAG",
	    "short_name": "checkered_flag",
	    "short_names": ["checkered_flag"],
	    "sort_order": 55
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RACING MOTORCYCLE",
	    "short_name": "racing_motorcycle",
	    "short_names": ["racing_motorcycle"],
	    "sort_order": 14
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RACING CAR",
	    "short_name": "racing_car",
	    "short_names": ["racing_car"],
	    "sort_order": 6
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SNOW CAPPED MOUNTAIN",
	    "short_name": "snow_capped_mountain",
	    "short_names": ["snow_capped_mountain"],
	    "sort_order": 67
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CAMPING",
	    "short_name": "camping",
	    "short_names": ["camping"],
	    "sort_order": 71
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BEACH WITH UMBRELLA",
	    "short_name": "beach_with_umbrella",
	    "short_names": ["beach_with_umbrella"],
	    "sort_order": 79
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BUILDING CONSTRUCTION",
	    "short_name": "building_construction",
	    "short_names": ["building_construction"],
	    "sort_order": 60
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOUSE BUILDINGS",
	    "short_name": "house_buildings",
	    "short_names": ["house_buildings"],
	    "sort_order": 91
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CITYSCAPE",
	    "short_name": "cityscape",
	    "short_names": ["cityscape"],
	    "sort_order": 83
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DERELICT HOUSE BUILDING",
	    "short_name": "derelict_house_building",
	    "short_names": ["derelict_house_building"],
	    "sort_order": 98
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLASSICAL BUILDING",
	    "short_name": "classical_building",
	    "short_names": ["classical_building"],
	    "sort_order": 110
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DESERT",
	    "short_name": "desert",
	    "short_names": ["desert"],
	    "sort_order": 78
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DESERT ISLAND",
	    "short_name": "desert_island",
	    "short_names": ["desert_island"],
	    "sort_order": 80
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "NATIONAL PARK",
	    "short_name": "national_park",
	    "short_names": ["national_park"],
	    "sort_order": 73
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "STADIUM",
	    "short_name": "stadium",
	    "short_names": ["stadium"],
	    "sort_order": 94
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOUSE BUILDING",
	    "short_name": "house",
	    "short_names": ["house"],
	    "sort_order": 96
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOUSE WITH GARDEN",
	    "short_name": "house_with_garden",
	    "short_names": ["house_with_garden"],
	    "sort_order": 97
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "OFFICE BUILDING",
	    "short_name": "office",
	    "short_names": ["office"],
	    "sort_order": 99
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "JAPANESE POST OFFICE",
	    "short_name": "post_office",
	    "short_names": ["post_office"],
	    "sort_order": 101
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EUROPEAN POST OFFICE",
	    "short_name": "european_post_office",
	    "short_names": ["european_post_office"],
	    "sort_order": 102
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOSPITAL",
	    "short_name": "hospital",
	    "short_names": ["hospital"],
	    "sort_order": 103
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BANK",
	    "short_name": "bank",
	    "short_names": ["bank"],
	    "sort_order": 104
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HOTEL",
	    "short_name": "hotel",
	    "short_names": ["hotel"],
	    "sort_order": 105
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LOVE HOTEL",
	    "short_name": "love_hotel",
	    "short_names": ["love_hotel"],
	    "sort_order": 108
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CONVENIENCE STORE",
	    "short_name": "convenience_store",
	    "short_names": ["convenience_store"],
	    "sort_order": 106
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SCHOOL",
	    "short_name": "school",
	    "short_names": ["school"],
	    "sort_order": 107
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DEPARTMENT STORE",
	    "short_name": "department_store",
	    "short_names": ["department_store"],
	    "sort_order": 100
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FACTORY",
	    "short_name": "factory",
	    "short_names": ["factory"],
	    "sort_order": 63
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "JAPANESE CASTLE",
	    "short_name": "japanese_castle",
	    "short_names": ["japanese_castle"],
	    "sort_order": 93
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "EUROPEAN CASTLE",
	    "short_name": "european_castle",
	    "short_names": ["european_castle"],
	    "sort_order": 92
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WEDDING",
	    "short_name": "wedding",
	    "short_names": ["wedding"],
	    "sort_order": 109
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SEAT",
	    "short_name": "seat",
	    "short_names": ["seat"],
	    "sort_order": 48
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "KAABA",
	    "short_name": "kaaba",
	    "short_names": ["kaaba"],
	    "sort_order": 114
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "MOSQUE",
	    "short_name": "mosque",
	    "short_names": ["mosque"],
	    "sort_order": 112
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "SYNAGOGUE",
	    "short_name": "synagogue",
	    "short_names": ["synagogue"],
	    "sort_order": 113
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOUNT FUJI",
	    "short_name": "mount_fuji",
	    "short_names": ["mount_fuji"],
	    "sort_order": 68
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TOKYO TOWER",
	    "short_name": "tokyo_tower",
	    "short_names": ["tokyo_tower"],
	    "sort_order": 62
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "STATUE OF LIBERTY",
	    "short_name": "statue_of_liberty",
	    "short_names": ["statue_of_liberty"],
	    "sort_order": 95
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SILHOUETTE OF JAPAN",
	    "short_name": "japan",
	    "short_names": ["japan"],
	    "sort_order": 70
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ROCKET",
	    "short_name": "rocket",
	    "short_names": ["rocket"],
	    "sort_order": 46
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HELICOPTER",
	    "short_name": "helicopter",
	    "short_names": ["helicopter"],
	    "sort_order": 36
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "STEAM LOCOMOTIVE",
	    "short_name": "steam_locomotive",
	    "short_names": ["steam_locomotive"],
	    "sort_order": 31
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RAILWAY CAR",
	    "short_name": "railway_car",
	    "short_names": ["railway_car"],
	    "sort_order": 24
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HIGH-SPEED TRAIN",
	    "short_name": "bullettrain_side",
	    "short_names": ["bullettrain_side"],
	    "sort_order": 27
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HIGH-SPEED TRAIN WITH BULLET NOSE",
	    "short_name": "bullettrain_front",
	    "short_names": ["bullettrain_front"],
	    "sort_order": 28
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TRAIN",
	    "short_name": "train2",
	    "short_names": ["train2"],
	    "sort_order": 32
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "METRO",
	    "short_name": "metro",
	    "short_names": ["metro"],
	    "sort_order": 33
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "LIGHT RAIL",
	    "short_name": "light_rail",
	    "short_names": ["light_rail"],
	    "sort_order": 29
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "STATION",
	    "short_name": "station",
	    "short_names": ["station"],
	    "sort_order": 35
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TRAM",
	    "short_name": "tram",
	    "short_names": ["tram"],
	    "sort_order": 34
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TRAM CAR",
	    "short_name": "train",
	    "short_names": ["train"],
	    "sort_order": 25
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BUS",
	    "short_name": "bus",
	    "short_names": ["bus"],
	    "sort_order": 4
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ONCOMING BUS",
	    "short_name": "oncoming_bus",
	    "short_names": ["oncoming_bus"],
	    "sort_order": 18
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TROLLEYBUS",
	    "short_name": "trolleybus",
	    "short_names": ["trolleybus"],
	    "sort_order": 5
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BUS STOP",
	    "short_name": "busstop",
	    "short_names": ["busstop"],
	    "sort_order": 52
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MINIBUS",
	    "short_name": "minibus",
	    "short_names": ["minibus"],
	    "sort_order": 10
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "AMBULANCE",
	    "short_name": "ambulance",
	    "short_names": ["ambulance"],
	    "sort_order": 8
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FIRE ENGINE",
	    "short_name": "fire_engine",
	    "short_names": ["fire_engine"],
	    "sort_order": 9
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POLICE CAR",
	    "short_name": "police_car",
	    "short_names": ["police_car"],
	    "sort_order": 7
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ONCOMING POLICE CAR",
	    "short_name": "oncoming_police_car",
	    "short_names": ["oncoming_police_car"],
	    "sort_order": 17
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TAXI",
	    "short_name": "taxi",
	    "short_names": ["taxi"],
	    "sort_order": 2
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ONCOMING TAXI",
	    "short_name": "oncoming_taxi",
	    "short_names": ["oncoming_taxi"],
	    "sort_order": 20
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "AUTOMOBILE",
	    "short_name": "car",
	    "short_names": ["car", "red_car"],
	    "sort_order": 1
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ONCOMING AUTOMOBILE",
	    "short_name": "oncoming_automobile",
	    "short_names": ["oncoming_automobile"],
	    "sort_order": 19
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RECREATIONAL VEHICLE",
	    "short_name": "blue_car",
	    "short_names": ["blue_car"],
	    "sort_order": 3
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DELIVERY TRUCK",
	    "short_name": "truck",
	    "short_names": ["truck"],
	    "sort_order": 11
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ARTICULATED LORRY",
	    "short_name": "articulated_lorry",
	    "short_names": ["articulated_lorry"],
	    "sort_order": 12
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TRACTOR",
	    "short_name": "tractor",
	    "short_names": ["tractor"],
	    "sort_order": 13
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MONORAIL",
	    "short_name": "monorail",
	    "short_names": ["monorail"],
	    "sort_order": 26
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOUNTAIN RAILWAY",
	    "short_name": "mountain_railway",
	    "short_names": ["mountain_railway"],
	    "sort_order": 30
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SUSPENSION RAILWAY",
	    "short_name": "suspension_railway",
	    "short_names": ["suspension_railway"],
	    "sort_order": 23
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOUNTAIN CABLEWAY",
	    "short_name": "mountain_cableway",
	    "short_names": ["mountain_cableway"],
	    "sort_order": 22
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "AERIAL TRAMWAY",
	    "short_name": "aerial_tramway",
	    "short_names": ["aerial_tramway"],
	    "sort_order": 21
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SHIP",
	    "short_name": "ship",
	    "short_names": ["ship"],
	    "sort_order": 56
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPEEDBOAT",
	    "short_name": "speedboat",
	    "short_names": ["speedboat"],
	    "sort_order": 43
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HORIZONTAL TRAFFIC LIGHT",
	    "short_name": "traffic_light",
	    "short_names": ["traffic_light"],
	    "sort_order": 54
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "VERTICAL TRAFFIC LIGHT",
	    "short_name": "vertical_traffic_light",
	    "short_names": ["vertical_traffic_light"],
	    "sort_order": 53
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CONSTRUCTION SIGN",
	    "short_name": "construction",
	    "short_names": ["construction"],
	    "sort_order": 50
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "POLICE CARS REVOLVING LIGHT",
	    "short_name": "rotating_light",
	    "short_names": ["rotating_light"],
	    "sort_order": 16
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BICYCLE",
	    "short_name": "bike",
	    "short_names": ["bike"],
	    "sort_order": 15
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOTORWAY",
	    "short_name": "motorway",
	    "short_names": ["motorway"],
	    "sort_order": 74
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RAILWAY TRACK",
	    "short_name": "railway_track",
	    "short_names": ["railway_track"],
	    "sort_order": 75
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOTOR BOAT",
	    "short_name": "motor_boat",
	    "short_names": ["motor_boat"],
	    "sort_order": 42
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SMALL AIRPLANE",
	    "short_name": "small_airplane",
	    "short_names": ["small_airplane"],
	    "sort_order": 37
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "AIRPLANE DEPARTURE",
	    "short_name": "airplane_departure",
	    "short_names": ["airplane_departure"],
	    "sort_order": 39
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "AIRPLANE ARRIVING",
	    "short_name": "airplane_arriving",
	    "short_names": ["airplane_arriving"],
	    "sort_order": 40
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SATELLITE",
	    "short_name": "satellite",
	    "short_names": ["satellite"],
	    "sort_order": 47
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PASSENGER SHIP",
	    "short_name": "passenger_ship",
	    "short_names": ["passenger_ship"],
	    "sort_order": 45
	  }],
	  "Activity": [{
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SOCCER BALL",
	    "short_name": "soccer",
	    "short_names": ["soccer"],
	    "sort_order": 1
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BASEBALL",
	    "short_name": "baseball",
	    "short_names": ["baseball"],
	    "sort_order": 4
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FLAG IN HOLE",
	    "short_name": "golf",
	    "short_names": ["golf"],
	    "sort_order": 9
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "SKIER",
	    "short_name": "skier",
	    "short_names": ["skier"],
	    "sort_order": 17
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "ICE SKATE",
	    "short_name": "ice_skate",
	    "short_names": ["ice_skate"],
	    "sort_order": 19
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "PERSON WITH BALL",
	    "short_name": "person_with_ball",
	    "short_names": ["person_with_ball"],
	    "sort_order": 26
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MILITARY MEDAL",
	    "short_name": "medal",
	    "short_names": ["medal"],
	    "sort_order": 35
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REMINDER RIBBON",
	    "short_name": "reminder_ribbon",
	    "short_names": ["reminder_ribbon"],
	    "sort_order": 36
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ADMISSION TICKETS",
	    "short_name": "admission_tickets",
	    "short_names": ["admission_tickets"],
	    "sort_order": 39
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "FISHING POLE AND FISH",
	    "short_name": "fishing_pole_and_fish",
	    "short_names": ["fishing_pole_and_fish"],
	    "sort_order": 21
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MICROPHONE",
	    "short_name": "microphone",
	    "short_names": ["microphone"],
	    "sort_order": 43
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HEADPHONE",
	    "short_name": "headphones",
	    "short_names": ["headphones"],
	    "sort_order": 44
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ARTIST PALETTE",
	    "short_name": "art",
	    "short_names": ["art"],
	    "sort_order": 41
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CIRCUS TENT",
	    "short_name": "circus_tent",
	    "short_names": ["circus_tent"],
	    "sort_order": 42
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TICKET",
	    "short_name": "ticket",
	    "short_names": ["ticket"],
	    "sort_order": 38
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "CLAPPER BOARD",
	    "short_name": "clapper",
	    "short_names": ["clapper"],
	    "sort_order": 51
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "PERFORMING ARTS",
	    "short_name": "performing_arts",
	    "short_names": ["performing_arts"],
	    "sort_order": 40
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "VIDEO GAME",
	    "short_name": "video_game",
	    "short_names": ["video_game"],
	    "sort_order": 52
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "DIRECT HIT",
	    "short_name": "dart",
	    "short_names": ["dart"],
	    "sort_order": 54
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SLOT MACHINE",
	    "short_name": "slot_machine",
	    "short_names": ["slot_machine"],
	    "sort_order": 56
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BILLIARDS",
	    "short_name": "8ball",
	    "short_names": ["8ball"],
	    "sort_order": 8
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GAME DIE",
	    "short_name": "game_die",
	    "short_names": ["game_die"],
	    "sort_order": 55
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BOWLING",
	    "short_name": "bowling",
	    "short_names": ["bowling"],
	    "sort_order": 57
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SAXOPHONE",
	    "short_name": "saxophone",
	    "short_names": ["saxophone"],
	    "sort_order": 47
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GUITAR",
	    "short_name": "guitar",
	    "short_names": ["guitar"],
	    "sort_order": 49
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MUSICAL KEYBOARD",
	    "short_name": "musical_keyboard",
	    "short_names": ["musical_keyboard"],
	    "sort_order": 46
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TRUMPET",
	    "short_name": "trumpet",
	    "short_names": ["trumpet"],
	    "sort_order": 48
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "VIOLIN",
	    "short_name": "violin",
	    "short_names": ["violin"],
	    "sort_order": 50
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MUSICAL SCORE",
	    "short_name": "musical_score",
	    "short_names": ["musical_score"],
	    "sort_order": 45
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RUNNING SHIRT WITH SASH",
	    "short_name": "running_shirt_with_sash",
	    "short_names": ["running_shirt_with_sash"],
	    "sort_order": 33
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TENNIS RACQUET AND BALL",
	    "short_name": "tennis",
	    "short_names": ["tennis"],
	    "sort_order": 5
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SKI AND SKI BOOT",
	    "short_name": "ski",
	    "short_names": ["ski"],
	    "sort_order": 16
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BASKETBALL AND HOOP",
	    "short_name": "basketball",
	    "short_names": ["basketball"],
	    "sort_order": 2
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SNOWBOARDER",
	    "short_name": "snowboarder",
	    "short_names": ["snowboarder"],
	    "sort_order": 18
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SURFER",
	    "short_name": "surfer",
	    "short_names": ["surfer"],
	    "sort_order": 24
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SPORTS MEDAL",
	    "short_name": "sports_medal",
	    "short_names": ["sports_medal"],
	    "sort_order": 34
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "TROPHY",
	    "short_name": "trophy",
	    "short_names": ["trophy"],
	    "sort_order": 32
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "HORSE RACING",
	    "short_name": "horse_racing",
	    "short_names": ["horse_racing"],
	    "sort_order": 30
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "AMERICAN FOOTBALL",
	    "short_name": "football",
	    "short_names": ["football"],
	    "sort_order": 3
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "RUGBY FOOTBALL",
	    "short_name": "rugby_football",
	    "short_names": ["rugby_football"],
	    "sort_order": 7
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "SWIMMER",
	    "short_name": "swimmer",
	    "short_names": ["swimmer"],
	    "sort_order": 23
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "WEIGHT LIFTER",
	    "short_name": "weight_lifter",
	    "short_names": ["weight_lifter"],
	    "sort_order": 27
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "GOLFER",
	    "short_name": "golfer",
	    "short_names": ["golfer"],
	    "sort_order": 10
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "CRICKET BAT AND BALL",
	    "short_name": "cricket_bat_and_ball",
	    "short_names": ["cricket_bat_and_ball"],
	    "sort_order": 15
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "VOLLEYBALL",
	    "short_name": "volleyball",
	    "short_names": ["volleyball"],
	    "sort_order": 6
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "FIELD HOCKEY STICK AND BALL",
	    "short_name": "field_hockey_stick_and_ball",
	    "short_names": ["field_hockey_stick_and_ball"],
	    "sort_order": 14
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "ICE HOCKEY STICK AND PUCK",
	    "short_name": "ice_hockey_stick_and_puck",
	    "short_names": ["ice_hockey_stick_and_puck"],
	    "sort_order": 13
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "TABLE TENNIS PADDLE AND BALL",
	    "short_name": "table_tennis_paddle_and_ball",
	    "short_names": ["table_tennis_paddle_and_ball"],
	    "sort_order": 11
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ROSETTE",
	    "short_name": "rosette",
	    "short_names": ["rosette"],
	    "sort_order": 37
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "BADMINTON RACQUET AND SHUTTLECOCK",
	    "short_name": "badminton_racquet_and_shuttlecock",
	    "short_names": ["badminton_racquet_and_shuttlecock"],
	    "sort_order": 12
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "BOW AND ARROW",
	    "short_name": "bow_and_arrow",
	    "short_names": ["bow_and_arrow"],
	    "sort_order": 20
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ALIEN MONSTER",
	    "short_name": "space_invader",
	    "short_names": ["space_invader"],
	    "sort_order": 53
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MAN IN BUSINESS SUIT LEVITATING",
	    "short_name": "man_in_business_suit_levitating",
	    "short_names": ["man_in_business_suit_levitating"],
	    "sort_order": 31
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "ROWBOAT",
	    "short_name": "rowboat",
	    "short_names": ["rowboat"],
	    "sort_order": 22
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BICYCLIST",
	    "short_name": "bicyclist",
	    "short_names": ["bicyclist"],
	    "sort_order": 28
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "MOUNTAIN BICYCLIST",
	    "short_name": "mountain_bicyclist",
	    "short_names": ["mountain_bicyclist"],
	    "sort_order": 29
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "BATH",
	    "short_name": "bath",
	    "short_names": ["bath"],
	    "sort_order": 25
	  }],
	  "Flags": [{
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AD",
	    "short_name": "flag-ad",
	    "short_names": ["flag-ad"],
	    "sort_order": 6
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AE",
	    "short_name": "flag-ae",
	    "short_names": ["flag-ae"],
	    "sort_order": 233
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AF",
	    "short_name": "flag-af",
	    "short_names": ["flag-af"],
	    "sort_order": 1
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AG",
	    "short_name": "flag-ag",
	    "short_names": ["flag-ag"],
	    "sort_order": 10
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AI",
	    "short_name": "flag-ai",
	    "short_names": ["flag-ai"],
	    "sort_order": 8
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AL",
	    "short_name": "flag-al",
	    "short_names": ["flag-al"],
	    "sort_order": 3
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AM",
	    "short_name": "flag-am",
	    "short_names": ["flag-am"],
	    "sort_order": 12
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AO",
	    "short_name": "flag-ao",
	    "short_names": ["flag-ao"],
	    "sort_order": 7
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AQ",
	    "short_name": "flag-aq",
	    "short_names": ["flag-aq"],
	    "sort_order": 9
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AR",
	    "short_name": "flag-ar",
	    "short_names": ["flag-ar"],
	    "sort_order": 11
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AS",
	    "short_name": "flag-as",
	    "short_names": ["flag-as"],
	    "sort_order": 5
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AT",
	    "short_name": "flag-at",
	    "short_names": ["flag-at"],
	    "sort_order": 15
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AU",
	    "short_name": "flag-au",
	    "short_names": ["flag-au"],
	    "sort_order": 14
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AW",
	    "short_name": "flag-aw",
	    "short_names": ["flag-aw"],
	    "sort_order": 13
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AX",
	    "short_name": "flag-ax",
	    "short_names": ["flag-ax"],
	    "sort_order": 2
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS AZ",
	    "short_name": "flag-az",
	    "short_names": ["flag-az"],
	    "sort_order": 16
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BA",
	    "short_name": "flag-ba",
	    "short_names": ["flag-ba"],
	    "sort_order": 29
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BB",
	    "short_name": "flag-bb",
	    "short_names": ["flag-bb"],
	    "sort_order": 20
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BD",
	    "short_name": "flag-bd",
	    "short_names": ["flag-bd"],
	    "sort_order": 19
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BE",
	    "short_name": "flag-be",
	    "short_names": ["flag-be"],
	    "sort_order": 22
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BF",
	    "short_name": "flag-bf",
	    "short_names": ["flag-bf"],
	    "sort_order": 36
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BG",
	    "short_name": "flag-bg",
	    "short_names": ["flag-bg"],
	    "sort_order": 35
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BH",
	    "short_name": "flag-bh",
	    "short_names": ["flag-bh"],
	    "sort_order": 18
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BI",
	    "short_name": "flag-bi",
	    "short_names": ["flag-bi"],
	    "sort_order": 37
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BJ",
	    "short_name": "flag-bj",
	    "short_names": ["flag-bj"],
	    "sort_order": 24
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BL",
	    "short_name": "flag-bl",
	    "short_names": ["flag-bl"],
	    "sort_order": 185
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BM",
	    "short_name": "flag-bm",
	    "short_names": ["flag-bm"],
	    "sort_order": 25
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BN",
	    "short_name": "flag-bn",
	    "short_names": ["flag-bn"],
	    "sort_order": 34
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BO",
	    "short_name": "flag-bo",
	    "short_names": ["flag-bo"],
	    "sort_order": 27
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BQ",
	    "short_name": "flag-bq",
	    "short_names": ["flag-bq"],
	    "sort_order": 28
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BR",
	    "short_name": "flag-br",
	    "short_names": ["flag-br"],
	    "sort_order": 31
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BS",
	    "short_name": "flag-bs",
	    "short_names": ["flag-bs"],
	    "sort_order": 17
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BT",
	    "short_name": "flag-bt",
	    "short_names": ["flag-bt"],
	    "sort_order": 26
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BW",
	    "short_name": "flag-bw",
	    "short_names": ["flag-bw"],
	    "sort_order": 30
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BY",
	    "short_name": "flag-by",
	    "short_names": ["flag-by"],
	    "sort_order": 21
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS BZ",
	    "short_name": "flag-bz",
	    "short_names": ["flag-bz"],
	    "sort_order": 23
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CA",
	    "short_name": "flag-ca",
	    "short_names": ["flag-ca"],
	    "sort_order": 41
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CC",
	    "short_name": "flag-cc",
	    "short_names": ["flag-cc"],
	    "sort_order": 49
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CD",
	    "short_name": "flag-cd",
	    "short_names": ["flag-cd"],
	    "sort_order": 53
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CF",
	    "short_name": "flag-cf",
	    "short_names": ["flag-cf"],
	    "sort_order": 44
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CG",
	    "short_name": "flag-cg",
	    "short_names": ["flag-cg"],
	    "sort_order": 52
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CH",
	    "short_name": "flag-ch",
	    "short_names": ["flag-ch"],
	    "sort_order": 215
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CI",
	    "short_name": "flag-ci",
	    "short_names": ["flag-ci"],
	    "sort_order": 110
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CK",
	    "short_name": "flag-ck",
	    "short_names": ["flag-ck"],
	    "sort_order": 54
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CL",
	    "short_name": "flag-cl",
	    "short_names": ["flag-cl"],
	    "sort_order": 46
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CM",
	    "short_name": "flag-cm",
	    "short_names": ["flag-cm"],
	    "sort_order": 40
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CN",
	    "short_name": "flag-cn",
	    "short_names": ["flag-cn", "cn"],
	    "sort_order": 47
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CO",
	    "short_name": "flag-co",
	    "short_names": ["flag-co"],
	    "sort_order": 50
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CR",
	    "short_name": "flag-cr",
	    "short_names": ["flag-cr"],
	    "sort_order": 55
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CU",
	    "short_name": "flag-cu",
	    "short_names": ["flag-cu"],
	    "sort_order": 57
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CV",
	    "short_name": "flag-cv",
	    "short_names": ["flag-cv"],
	    "sort_order": 38
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CW",
	    "short_name": "flag-cw",
	    "short_names": ["flag-cw"],
	    "sort_order": 58
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CX",
	    "short_name": "flag-cx",
	    "short_names": ["flag-cx"],
	    "sort_order": 48
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CY",
	    "short_name": "flag-cy",
	    "short_names": ["flag-cy"],
	    "sort_order": 59
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS CZ",
	    "short_name": "flag-cz",
	    "short_names": ["flag-cz"],
	    "sort_order": 60
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS DE",
	    "short_name": "flag-de",
	    "short_names": ["flag-de", "de"],
	    "sort_order": 84
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS DJ",
	    "short_name": "flag-dj",
	    "short_names": ["flag-dj"],
	    "sort_order": 62
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS DK",
	    "short_name": "flag-dk",
	    "short_names": ["flag-dk"],
	    "sort_order": 61
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS DM",
	    "short_name": "flag-dm",
	    "short_names": ["flag-dm"],
	    "sort_order": 63
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS DO",
	    "short_name": "flag-do",
	    "short_names": ["flag-do"],
	    "sort_order": 64
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS DZ",
	    "short_name": "flag-dz",
	    "short_names": ["flag-dz"],
	    "sort_order": 4
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS EC",
	    "short_name": "flag-ec",
	    "short_names": ["flag-ec"],
	    "sort_order": 65
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS EE",
	    "short_name": "flag-ee",
	    "short_names": ["flag-ee"],
	    "sort_order": 70
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS EG",
	    "short_name": "flag-eg",
	    "short_names": ["flag-eg"],
	    "sort_order": 66
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS EH",
	    "short_name": "flag-eh",
	    "short_names": ["flag-eh"],
	    "sort_order": 244
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS ER",
	    "short_name": "flag-er",
	    "short_names": ["flag-er"],
	    "sort_order": 69
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS ES",
	    "short_name": "flag-es",
	    "short_names": ["flag-es", "es"],
	    "sort_order": 209
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS ET",
	    "short_name": "flag-et",
	    "short_names": ["flag-et"],
	    "sort_order": 71
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS EU",
	    "short_name": "flag-eu",
	    "short_names": ["flag-eu"],
	    "sort_order": 72
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS FI",
	    "short_name": "flag-fi",
	    "short_names": ["flag-fi"],
	    "sort_order": 76
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS FJ",
	    "short_name": "flag-fj",
	    "short_names": ["flag-fj"],
	    "sort_order": 75
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS FK",
	    "short_name": "flag-fk",
	    "short_names": ["flag-fk"],
	    "sort_order": 73
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS FM",
	    "short_name": "flag-fm",
	    "short_names": ["flag-fm"],
	    "sort_order": 144
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS FO",
	    "short_name": "flag-fo",
	    "short_names": ["flag-fo"],
	    "sort_order": 74
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS FR",
	    "short_name": "flag-fr",
	    "short_names": ["flag-fr", "fr"],
	    "sort_order": 77
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GA",
	    "short_name": "flag-ga",
	    "short_names": ["flag-ga"],
	    "sort_order": 81
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GB",
	    "short_name": "flag-gb",
	    "short_names": ["flag-gb", "gb", "uk"],
	    "sort_order": 234
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GD",
	    "short_name": "flag-gd",
	    "short_names": ["flag-gd"],
	    "sort_order": 89
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GE",
	    "short_name": "flag-ge",
	    "short_names": ["flag-ge"],
	    "sort_order": 83
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GF",
	    "short_name": "flag-gf",
	    "short_names": ["flag-gf"],
	    "sort_order": 78
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GG",
	    "short_name": "flag-gg",
	    "short_names": ["flag-gg"],
	    "sort_order": 93
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GH",
	    "short_name": "flag-gh",
	    "short_names": ["flag-gh"],
	    "sort_order": 85
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GI",
	    "short_name": "flag-gi",
	    "short_names": ["flag-gi"],
	    "sort_order": 86
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GL",
	    "short_name": "flag-gl",
	    "short_names": ["flag-gl"],
	    "sort_order": 88
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GM",
	    "short_name": "flag-gm",
	    "short_names": ["flag-gm"],
	    "sort_order": 82
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GN",
	    "short_name": "flag-gn",
	    "short_names": ["flag-gn"],
	    "sort_order": 94
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GP",
	    "short_name": "flag-gp",
	    "short_names": ["flag-gp"],
	    "sort_order": 90
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GQ",
	    "short_name": "flag-gq",
	    "short_names": ["flag-gq"],
	    "sort_order": 68
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GR",
	    "short_name": "flag-gr",
	    "short_names": ["flag-gr"],
	    "sort_order": 87
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GS",
	    "short_name": "flag-gs",
	    "short_names": ["flag-gs"],
	    "sort_order": 206
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GT",
	    "short_name": "flag-gt",
	    "short_names": ["flag-gt"],
	    "sort_order": 92
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GU",
	    "short_name": "flag-gu",
	    "short_names": ["flag-gu"],
	    "sort_order": 91
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GW",
	    "short_name": "flag-gw",
	    "short_names": ["flag-gw"],
	    "sort_order": 95
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS GY",
	    "short_name": "flag-gy",
	    "short_names": ["flag-gy"],
	    "sort_order": 96
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS HK",
	    "short_name": "flag-hk",
	    "short_names": ["flag-hk"],
	    "sort_order": 99
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS HN",
	    "short_name": "flag-hn",
	    "short_names": ["flag-hn"],
	    "sort_order": 98
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS HR",
	    "short_name": "flag-hr",
	    "short_names": ["flag-hr"],
	    "sort_order": 56
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS HT",
	    "short_name": "flag-ht",
	    "short_names": ["flag-ht"],
	    "sort_order": 97
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS HU",
	    "short_name": "flag-hu",
	    "short_names": ["flag-hu"],
	    "sort_order": 100
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS IC",
	    "short_name": "flag-ic",
	    "short_names": ["flag-ic"],
	    "sort_order": 42
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS ID",
	    "short_name": "flag-id",
	    "short_names": ["flag-id"],
	    "sort_order": 103
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS IE",
	    "short_name": "flag-ie",
	    "short_names": ["flag-ie"],
	    "sort_order": 106
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS IL",
	    "short_name": "flag-il",
	    "short_names": ["flag-il"],
	    "sort_order": 108
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS IM",
	    "short_name": "flag-im",
	    "short_names": ["flag-im"],
	    "sort_order": 107
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS IN",
	    "short_name": "flag-in",
	    "short_names": ["flag-in"],
	    "sort_order": 102
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS IO",
	    "short_name": "flag-io",
	    "short_names": ["flag-io"],
	    "sort_order": 32
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS IQ",
	    "short_name": "flag-iq",
	    "short_names": ["flag-iq"],
	    "sort_order": 105
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS IR",
	    "short_name": "flag-ir",
	    "short_names": ["flag-ir"],
	    "sort_order": 104
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS IS",
	    "short_name": "flag-is",
	    "short_names": ["flag-is"],
	    "sort_order": 101
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS IT",
	    "short_name": "flag-it",
	    "short_names": ["flag-it", "it"],
	    "sort_order": 109
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS JE",
	    "short_name": "flag-je",
	    "short_names": ["flag-je"],
	    "sort_order": 113
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS JM",
	    "short_name": "flag-jm",
	    "short_names": ["flag-jm"],
	    "sort_order": 111
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS JO",
	    "short_name": "flag-jo",
	    "short_names": ["flag-jo"],
	    "sort_order": 114
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS JP",
	    "short_name": "flag-jp",
	    "short_names": ["flag-jp", "jp"],
	    "sort_order": 112
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS KE",
	    "short_name": "flag-ke",
	    "short_names": ["flag-ke"],
	    "sort_order": 116
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS KG",
	    "short_name": "flag-kg",
	    "short_names": ["flag-kg"],
	    "sort_order": 120
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS KH",
	    "short_name": "flag-kh",
	    "short_names": ["flag-kh"],
	    "sort_order": 39
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS KI",
	    "short_name": "flag-ki",
	    "short_names": ["flag-ki"],
	    "sort_order": 117
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS KM",
	    "short_name": "flag-km",
	    "short_names": ["flag-km"],
	    "sort_order": 51
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS KN",
	    "short_name": "flag-kn",
	    "short_names": ["flag-kn"],
	    "sort_order": 187
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS KP",
	    "short_name": "flag-kp",
	    "short_names": ["flag-kp"],
	    "sort_order": 165
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS KR",
	    "short_name": "flag-kr",
	    "short_names": ["flag-kr", "kr"],
	    "sort_order": 207
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS KW",
	    "short_name": "flag-kw",
	    "short_names": ["flag-kw"],
	    "sort_order": 119
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS KY",
	    "short_name": "flag-ky",
	    "short_names": ["flag-ky"],
	    "sort_order": 43
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS KZ",
	    "short_name": "flag-kz",
	    "short_names": ["flag-kz"],
	    "sort_order": 115
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS LA",
	    "short_name": "flag-la",
	    "short_names": ["flag-la"],
	    "sort_order": 121
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS LB",
	    "short_name": "flag-lb",
	    "short_names": ["flag-lb"],
	    "sort_order": 123
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS LC",
	    "short_name": "flag-lc",
	    "short_names": ["flag-lc"],
	    "sort_order": 188
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS LI",
	    "short_name": "flag-li",
	    "short_names": ["flag-li"],
	    "sort_order": 127
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS LK",
	    "short_name": "flag-lk",
	    "short_names": ["flag-lk"],
	    "sort_order": 210
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS LR",
	    "short_name": "flag-lr",
	    "short_names": ["flag-lr"],
	    "sort_order": 125
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS LS",
	    "short_name": "flag-ls",
	    "short_names": ["flag-ls"],
	    "sort_order": 124
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS LT",
	    "short_name": "flag-lt",
	    "short_names": ["flag-lt"],
	    "sort_order": 128
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS LU",
	    "short_name": "flag-lu",
	    "short_names": ["flag-lu"],
	    "sort_order": 129
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS LV",
	    "short_name": "flag-lv",
	    "short_names": ["flag-lv"],
	    "sort_order": 122
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS LY",
	    "short_name": "flag-ly",
	    "short_names": ["flag-ly"],
	    "sort_order": 126
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MA",
	    "short_name": "flag-ma",
	    "short_names": ["flag-ma"],
	    "sort_order": 150
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MC",
	    "short_name": "flag-mc",
	    "short_names": ["flag-mc"],
	    "sort_order": 146
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MD",
	    "short_name": "flag-md",
	    "short_names": ["flag-md"],
	    "sort_order": 145
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS ME",
	    "short_name": "flag-me",
	    "short_names": ["flag-me"],
	    "sort_order": 148
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MG",
	    "short_name": "flag-mg",
	    "short_names": ["flag-mg"],
	    "sort_order": 132
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MH",
	    "short_name": "flag-mh",
	    "short_names": ["flag-mh"],
	    "sort_order": 138
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MK",
	    "short_name": "flag-mk",
	    "short_names": ["flag-mk"],
	    "sort_order": 131
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS ML",
	    "short_name": "flag-ml",
	    "short_names": ["flag-ml"],
	    "sort_order": 136
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MM",
	    "short_name": "flag-mm",
	    "short_names": ["flag-mm"],
	    "sort_order": 152
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MN",
	    "short_name": "flag-mn",
	    "short_names": ["flag-mn"],
	    "sort_order": 147
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MO",
	    "short_name": "flag-mo",
	    "short_names": ["flag-mo"],
	    "sort_order": 130
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MP",
	    "short_name": "flag-mp",
	    "short_names": ["flag-mp"],
	    "sort_order": 164
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MQ",
	    "short_name": "flag-mq",
	    "short_names": ["flag-mq"],
	    "sort_order": 139
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MR",
	    "short_name": "flag-mr",
	    "short_names": ["flag-mr"],
	    "sort_order": 140
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MS",
	    "short_name": "flag-ms",
	    "short_names": ["flag-ms"],
	    "sort_order": 149
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MT",
	    "short_name": "flag-mt",
	    "short_names": ["flag-mt"],
	    "sort_order": 137
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MU",
	    "short_name": "flag-mu",
	    "short_names": ["flag-mu"],
	    "sort_order": 141
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MV",
	    "short_name": "flag-mv",
	    "short_names": ["flag-mv"],
	    "sort_order": 135
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MW",
	    "short_name": "flag-mw",
	    "short_names": ["flag-mw"],
	    "sort_order": 133
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MX",
	    "short_name": "flag-mx",
	    "short_names": ["flag-mx"],
	    "sort_order": 143
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MY",
	    "short_name": "flag-my",
	    "short_names": ["flag-my"],
	    "sort_order": 134
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS MZ",
	    "short_name": "flag-mz",
	    "short_names": ["flag-mz"],
	    "sort_order": 151
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NA",
	    "short_name": "flag-na",
	    "short_names": ["flag-na"],
	    "sort_order": 153
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NC",
	    "short_name": "flag-nc",
	    "short_names": ["flag-nc"],
	    "sort_order": 157
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NE",
	    "short_name": "flag-ne",
	    "short_names": ["flag-ne"],
	    "sort_order": 160
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NF",
	    "short_name": "flag-nf",
	    "short_names": ["flag-nf"],
	    "sort_order": 163
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NG",
	    "short_name": "flag-ng",
	    "short_names": ["flag-ng"],
	    "sort_order": 161
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NI",
	    "short_name": "flag-ni",
	    "short_names": ["flag-ni"],
	    "sort_order": 159
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NL",
	    "short_name": "flag-nl",
	    "short_names": ["flag-nl"],
	    "sort_order": 156
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NO",
	    "short_name": "flag-no",
	    "short_names": ["flag-no"],
	    "sort_order": 166
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NP",
	    "short_name": "flag-np",
	    "short_names": ["flag-np"],
	    "sort_order": 155
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NR",
	    "short_name": "flag-nr",
	    "short_names": ["flag-nr"],
	    "sort_order": 154
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NU",
	    "short_name": "flag-nu",
	    "short_names": ["flag-nu"],
	    "sort_order": 162
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS NZ",
	    "short_name": "flag-nz",
	    "short_names": ["flag-nz"],
	    "sort_order": 158
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS OM",
	    "short_name": "flag-om",
	    "short_names": ["flag-om"],
	    "sort_order": 167
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PA",
	    "short_name": "flag-pa",
	    "short_names": ["flag-pa"],
	    "sort_order": 171
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PE",
	    "short_name": "flag-pe",
	    "short_names": ["flag-pe"],
	    "sort_order": 174
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PF",
	    "short_name": "flag-pf",
	    "short_names": ["flag-pf"],
	    "sort_order": 79
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PG",
	    "short_name": "flag-pg",
	    "short_names": ["flag-pg"],
	    "sort_order": 172
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PH",
	    "short_name": "flag-ph",
	    "short_names": ["flag-ph"],
	    "sort_order": 175
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PK",
	    "short_name": "flag-pk",
	    "short_names": ["flag-pk"],
	    "sort_order": 168
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PL",
	    "short_name": "flag-pl",
	    "short_names": ["flag-pl"],
	    "sort_order": 177
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PM",
	    "short_name": "flag-pm",
	    "short_names": ["flag-pm"],
	    "sort_order": 189
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PN",
	    "short_name": "flag-pn",
	    "short_names": ["flag-pn"],
	    "sort_order": 176
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PR",
	    "short_name": "flag-pr",
	    "short_names": ["flag-pr"],
	    "sort_order": 179
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PS",
	    "short_name": "flag-ps",
	    "short_names": ["flag-ps"],
	    "sort_order": 170
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PT",
	    "short_name": "flag-pt",
	    "short_names": ["flag-pt"],
	    "sort_order": 178
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PW",
	    "short_name": "flag-pw",
	    "short_names": ["flag-pw"],
	    "sort_order": 169
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS PY",
	    "short_name": "flag-py",
	    "short_names": ["flag-py"],
	    "sort_order": 173
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS QA",
	    "short_name": "flag-qa",
	    "short_names": ["flag-qa"],
	    "sort_order": 180
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS RE",
	    "short_name": "flag-re",
	    "short_names": ["flag-re"],
	    "sort_order": 181
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS RO",
	    "short_name": "flag-ro",
	    "short_names": ["flag-ro"],
	    "sort_order": 182
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS RS",
	    "short_name": "flag-rs",
	    "short_names": ["flag-rs"],
	    "sort_order": 196
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS RU",
	    "short_name": "flag-ru",
	    "short_names": ["flag-ru", "ru"],
	    "sort_order": 183
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS RW",
	    "short_name": "flag-rw",
	    "short_names": ["flag-rw"],
	    "sort_order": 184
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SA",
	    "short_name": "flag-sa",
	    "short_names": ["flag-sa"],
	    "sort_order": 194
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SB",
	    "short_name": "flag-sb",
	    "short_names": ["flag-sb"],
	    "sort_order": 203
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SC",
	    "short_name": "flag-sc",
	    "short_names": ["flag-sc"],
	    "sort_order": 197
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SD",
	    "short_name": "flag-sd",
	    "short_names": ["flag-sd"],
	    "sort_order": 211
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SE",
	    "short_name": "flag-se",
	    "short_names": ["flag-se"],
	    "sort_order": 214
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SG",
	    "short_name": "flag-sg",
	    "short_names": ["flag-sg"],
	    "sort_order": 199
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SH",
	    "short_name": "flag-sh",
	    "short_names": ["flag-sh"],
	    "sort_order": 186
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SI",
	    "short_name": "flag-si",
	    "short_names": ["flag-si"],
	    "sort_order": 202
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SK",
	    "short_name": "flag-sk",
	    "short_names": ["flag-sk"],
	    "sort_order": 201
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SL",
	    "short_name": "flag-sl",
	    "short_names": ["flag-sl"],
	    "sort_order": 198
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SM",
	    "short_name": "flag-sm",
	    "short_names": ["flag-sm"],
	    "sort_order": 192
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SN",
	    "short_name": "flag-sn",
	    "short_names": ["flag-sn"],
	    "sort_order": 195
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SO",
	    "short_name": "flag-so",
	    "short_names": ["flag-so"],
	    "sort_order": 204
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SR",
	    "short_name": "flag-sr",
	    "short_names": ["flag-sr"],
	    "sort_order": 212
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SS",
	    "short_name": "flag-ss",
	    "short_names": ["flag-ss"],
	    "sort_order": 208
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS ST",
	    "short_name": "flag-st",
	    "short_names": ["flag-st"],
	    "sort_order": 193
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SV",
	    "short_name": "flag-sv",
	    "short_names": ["flag-sv"],
	    "sort_order": 67
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SX",
	    "short_name": "flag-sx",
	    "short_names": ["flag-sx"],
	    "sort_order": 200
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SY",
	    "short_name": "flag-sy",
	    "short_names": ["flag-sy"],
	    "sort_order": 216
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS SZ",
	    "short_name": "flag-sz",
	    "short_names": ["flag-sz"],
	    "sort_order": 213
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TC",
	    "short_name": "flag-tc",
	    "short_names": ["flag-tc"],
	    "sort_order": 229
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TD",
	    "short_name": "flag-td",
	    "short_names": ["flag-td"],
	    "sort_order": 45
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TF",
	    "short_name": "flag-tf",
	    "short_names": ["flag-tf"],
	    "sort_order": 80
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TG",
	    "short_name": "flag-tg",
	    "short_names": ["flag-tg"],
	    "sort_order": 222
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TH",
	    "short_name": "flag-th",
	    "short_names": ["flag-th"],
	    "sort_order": 220
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TJ",
	    "short_name": "flag-tj",
	    "short_names": ["flag-tj"],
	    "sort_order": 218
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TK",
	    "short_name": "flag-tk",
	    "short_names": ["flag-tk"],
	    "sort_order": 223
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TL",
	    "short_name": "flag-tl",
	    "short_names": ["flag-tl"],
	    "sort_order": 221
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TM",
	    "short_name": "flag-tm",
	    "short_names": ["flag-tm"],
	    "sort_order": 228
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TN",
	    "short_name": "flag-tn",
	    "short_names": ["flag-tn"],
	    "sort_order": 226
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TO",
	    "short_name": "flag-to",
	    "short_names": ["flag-to"],
	    "sort_order": 224
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TR",
	    "short_name": "flag-tr",
	    "short_names": ["flag-tr"],
	    "sort_order": 227
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TT",
	    "short_name": "flag-tt",
	    "short_names": ["flag-tt"],
	    "sort_order": 225
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TV",
	    "short_name": "flag-tv",
	    "short_names": ["flag-tv"],
	    "sort_order": 230
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TW",
	    "short_name": "flag-tw",
	    "short_names": ["flag-tw"],
	    "sort_order": 217
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS TZ",
	    "short_name": "flag-tz",
	    "short_names": ["flag-tz"],
	    "sort_order": 219
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS UA",
	    "short_name": "flag-ua",
	    "short_names": ["flag-ua"],
	    "sort_order": 232
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS UG",
	    "short_name": "flag-ug",
	    "short_names": ["flag-ug"],
	    "sort_order": 231
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS US",
	    "short_name": "flag-us",
	    "short_names": ["flag-us", "us"],
	    "sort_order": 235
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS UY",
	    "short_name": "flag-uy",
	    "short_names": ["flag-uy"],
	    "sort_order": 237
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS UZ",
	    "short_name": "flag-uz",
	    "short_names": ["flag-uz"],
	    "sort_order": 238
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS VA",
	    "short_name": "flag-va",
	    "short_names": ["flag-va"],
	    "sort_order": 240
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS VC",
	    "short_name": "flag-vc",
	    "short_names": ["flag-vc"],
	    "sort_order": 190
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS VE",
	    "short_name": "flag-ve",
	    "short_names": ["flag-ve"],
	    "sort_order": 241
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS VG",
	    "short_name": "flag-vg",
	    "short_names": ["flag-vg"],
	    "sort_order": 33
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS VI",
	    "short_name": "flag-vi",
	    "short_names": ["flag-vi"],
	    "sort_order": 236
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS VN",
	    "short_name": "flag-vn",
	    "short_names": ["flag-vn"],
	    "sort_order": 242
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS VU",
	    "short_name": "flag-vu",
	    "short_names": ["flag-vu"],
	    "sort_order": 239
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS WF",
	    "short_name": "flag-wf",
	    "short_names": ["flag-wf"],
	    "sort_order": 243
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS WS",
	    "short_name": "flag-ws",
	    "short_names": ["flag-ws"],
	    "sort_order": 191
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS XK",
	    "short_name": "flag-xk",
	    "short_names": ["flag-xk"],
	    "sort_order": 118
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS YE",
	    "short_name": "flag-ye",
	    "short_names": ["flag-ye"],
	    "sort_order": 245
	  }, {
	    "has_img_apple": true,
	    "has_img_google": false,
	    "has_img_twitter": true,
	    "has_img_emojione": false,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS YT",
	    "short_name": "flag-yt",
	    "short_names": ["flag-yt"],
	    "sort_order": 142
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS ZA",
	    "short_name": "flag-za",
	    "short_names": ["flag-za"],
	    "sort_order": 205
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS ZM",
	    "short_name": "flag-zm",
	    "short_names": ["flag-zm"],
	    "sort_order": 246
	  }, {
	    "has_img_apple": true,
	    "has_img_google": true,
	    "has_img_twitter": true,
	    "has_img_emojione": true,
	    "name": "REGIONAL INDICATOR SYMBOL LETTERS ZW",
	    "short_name": "flag-zw",
	    "short_names": ["flag-zw"],
	    "sort_order": 247
	  }]
	};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(11);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div id=\"emoji-picker\"><div class=\"emoji-section emoji-header\">");if(t.s(t.f("categories",c,p,1),c,p,0,78,145,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div class=\"select-category\" data-name=\"");t.b(t.v(t.f("title",c,p,0)));t.b("\">");t.b(t.t(t.f("icon",c,p,0)));t.b("</div>");});c.pop();}t.b("</div><div class=\"emoji-section emoji-search\"><div class=\"search-wrapper\"><div class=\"search-section centered\">");t.b(t.t(t.f("search_icon",c,p,0)));t.b("</div><div class=\"search-section input\"><input class=\"search-emojis\" placeholder=\"Search\"></div></div></div><div class=\"emoji-title-overlay\"><span id=\"active-title\"></span></div><div class=\"emoji-section emoji-content\"></div><div class=\"emoji-section emoji-footer\"><div class=\"default-content\"><span>");t.b(t.v(t.f("default_content",c,p,0)));t.b("</span></div><div class=\"emoji-preview\"><div class=\"preview-section\" id=\"emoji-large-preview\"></div><div class=\"preview-section\"><span id=\"emoji-name\"></span> <span id=\"colon-display\"></span></div></div></div></div>");return t.fl(); },partials: {}, subs: {  }}, "<div id=\"emoji-picker\"><div class=\"emoji-section emoji-header\">{{#categories}}<div class=\"select-category\" data-name=\"{{title}}\">{{{icon}}}</div>{{/categories}}</div><div class=\"emoji-section emoji-search\"><div class=\"search-wrapper\"><div class=\"search-section centered\">{{{search_icon}}}</div><div class=\"search-section input\"><input class=\"search-emojis\" placeholder=\"Search\"></div></div></div><div class=\"emoji-title-overlay\"><span id=\"active-title\"></span></div><div class=\"emoji-section emoji-content\"></div><div class=\"emoji-section emoji-footer\"><div class=\"default-content\"><span>{{default_content}}</span></div><div class=\"emoji-preview\"><div class=\"preview-section\" id=\"emoji-large-preview\"></div><div class=\"preview-section\"><span id=\"emoji-name\"></span> <span id=\"colon-display\"></span></div></div></div></div>", H);return T.render.apply(T, arguments); };

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(11);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"icon-tooltip\"><span>");t.b(t.v(t.f("text",c,p,0)));t.b("</span></div>");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"icon-tooltip\"><span>{{text}}</span></div>", H);return T.render.apply(T, arguments); };

/***/ })
/******/ ])
});
;;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('checkbox', function(checkbox) {
    checkbox.id = 0;
    checkbox.controller = function(opts){
        if (!(this instanceof checkbox.controller)) {
            return new checkbox.controller(opts);
        }

        this.opts = opts;
        this.id = 'checkbox_' + checkbox.id++;
        if (opts.undeNullValue) {
            this.open = function(){
                if (arguments.length) {
                    opts.undeNullValue(opts.undeNullValue() === undefined ? null : undefined);
                    if (opts.undeNullOnChange) {
                        opts.undeNullOnChange(opts.undeNullValue());
                    }
                }
                return opts.undeNullValue() === null || opts.undeNullValue() !== undefined;
            };
        } else {
            this.open = typeof opts.open === 'function' ? opts.open : m.prop(opts.open || false);
        }
        this.config = function(el, isInitialized){
            if (!isInitialized) {
                el.onclick = function(ev) {
                    if (ev.target.tagName.toLowerCase() === 'label' || ev.target.className.indexOf('comp-check') !== -1 || ev.target.className.indexOf('comp-view') !== -1) {
                        m.startComputation();
                        ev.stopPropagation();
                        this.open(!this.open());
                        m.endComputation();
                    }
                }.bind(this);
            }
        }.bind(this);

    };
    checkbox.view = function(ctrl){
        var cldrn = [],
            input = m('input[type=checkbox]', {checked: ctrl.open(), onchange: m.withAttr('checked', ctrl.open)}),
            label = m('label', ctrl.opts.title),
            view = ctrl.opts.view ? ctrl.opts.view(ctrl.open()) : '';

        view = view.length ? view : [view];

        if (ctrl.opts.group) {
            cldrn.push(m('.comp-check.' + ctrl.opts.group, {onclick: ctrl.open.bind(null, !ctrl.open())}, {config: ctrl.config}, [input, label]));
            cldrn.push(m('.comp-view.' + ctrl.opts.group + (ctrl.open() ? '.comp-active' : '.comp-inactive'), {config: ctrl.config}, view));
        } else {
            cldrn.push(input);
            cldrn.push(label);
            cldrn = cldrn.concat(view);
        }
        return m('.comp-checkbox' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), cldrn);
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m, CountlyHelpers */

window.component('credentials', function(credentials) {
    var components = window.components, 
        t = components.t,
        SEPARATOR = '[CLY]';

    credentials.Credentials = function(data) {
        if (!(this instanceof credentials.Credentials)) {
            return new credentials.Credentials(data);
        }
        this._id = m.prop(data._id);
        this.type = m.prop(data.type);
        this.toJSON = function() {
            return {
                _id: this._id(),
                type: this.type()
            };
        };
    };

    credentials.app_component = function(platform, app, type) {
        return {
            controller: function(){
                this.platform = platform;
                this.app = app;
                this.creds = new credentials.Credentials(app[platform] && app[platform].length ? app[platform][0] : {type: type ? type : platform === 'apn' ? 'apn_token' : 'gcm'});

                this.remove = function(ev) {
                    ev.preventDefault();
                    this.app[this.platform] = [];
                    this.creds = new credentials.Credentials({type: this.creds.type()});
                    if (platform === 'apn') {
                        this.apn_type.value = this.creds.type;
                    }
                }.bind(this);

                this._cert = m.prop();
                this.cert = function(v){
                    if (typeof v !== 'undefined' && v.length === 1) {
                        var match = v[0].name.match(/AuthKey_([A-Z0-9]{10})\.p8/);
                        if (match && match[1] && !this.apn_key()) {
                            this.apn_key(match[1]);
                        }
                        this._cert(v);
                    }
                    return this._cert();
                }.bind(this);
                this.passphrase = m.prop('');
                this.key = m.prop();

                if (platform === 'apn') {
                    this.apn_key = m.prop('');
                    this.apn_team = m.prop('');
                    this.apn_bundle = m.prop('');

                    this.apn_type = new components.segmented.controller({
                        value: this.creds.type,
                        options: [
                            {value: 'apn_token', title: t('pu.creds.apn.type.apn_token')},
                            {value: 'apn_universal', title: t('pu.creds.apn.type.apn_universal')}
                        ]
                    });
                }

                this.isReadyForValidation = function(){
                    if (this.creds.type() === 'gcm') {
                        return !!this.key();
                    } else if (this.creds.type() === 'apn_universal') {
                        return !!this.cert() && this.cert().length === 1 && this.cert()[0].name.endsWith('.p12');
                    } else if (this.creds.type() === 'apn_token') {
                        return !!this.cert() && this.cert().length === 1 && this.cert()[0].name.endsWith('.p8') && this.apn_key() && this.apn_team() && this.apn_bundle();
                    } else {
                        return false;
                    }
                }.bind(this);

                this.validate = function(ev) {
                    ev.preventDefault();
                    if (!ev.target.attributes.disabled || ev.target.attributes.disabled.value === 'true') {
                        return;
                    }
                    if (this.platform === 'apn') {
                        if (this.cert() && this.cert().length === 1) {
                            var reader = new window.FileReader();
                            reader.addEventListener('load', function(){
                                var secret = this.creds.type() === 'apn_universal' ? this.passphrase() : [this.apn_key(), this.apn_team(), this.apn_bundle()].join(SEPARATOR);
                                this._validate('i', this.creds.type(), reader.result, secret);
                            }.bind(this));
                            reader.readAsDataURL(this.cert()[0]);
                        }
                    } else {
                        this._validate('a', this.creds.type(), this.key(), '');
                    }
                }.bind(this);

                this._validate = function(platform, type, data, secret) {
                    var loading = CountlyHelpers.loading(t('pu.validating'));
                    components.push.remoteValidate(platform, type, data, secret).then(function(data){
                        CountlyHelpers.removeDialog(loading);
                        this.creds._id(data.cid);
                    }.bind(this), function(err){
                        // this.cert(null);
                        // this.passphrase('');
                        // this.key('');
                        err = err.error || err.result || err;
                        CountlyHelpers.removeDialog(loading);
                        CountlyHelpers.alert(t('pu.validation.error') + ' ' + t('pu.validation.error.' + err, t('push.errorCode.' + err + '.desc', err)));
                    }.bind(this));
                };
            },
            view: function(ctrl){
                var edit = m('.comp-credentials-edit', [
                    ctrl.creds._id() ? 
                        m('div.existing', [
                            m('.comp-credentials-type', t('pu.creds.type.' + ctrl.creds.type())),
                            m('a.remove[href=#]', {onclick: ctrl.remove}, t('pu.remove'))
                        ])
                        : m('div', [
                            // m('.comp-credentials-type', t('pu.creds.set.' + ctrl.creds.type())),
                            ctrl.platform === 'apn' ? 
                                m('.form', [
                                    components.segmented.view(ctrl.apn_type),
                                    m('br'),
                                    ctrl.creds.type() === 'apn_universal' ? 
                                        m('.comp-push-box', [
                                            m('.comp-push-box-cell', [m('label', t('pu.creds.cert')), m('input[type=file]', {onchange: m.withAttr('files', ctrl.cert)})]),
                                            m('.comp-push-box-cell', [m('label', t('pu.creds.pass')), m('input[type=password]', {oninput: m.withAttr('value', ctrl.passphrase), placeholder: t('pu.creds.pass')})]),
                                        ])
                                        : m('.comp-push-box', [
                                            m('.comp-push-box-cell', [m('label', t('pu.creds.auth_key')), m('input[type=file]', {onchange: m.withAttr('files', ctrl.cert)})]),
                                            m('.comp-push-box-cell', [m('label', t('pu.creds.key_id')), m('input[type=text]', {value: ctrl.apn_key(), oninput: m.withAttr('value', ctrl.apn_key), placeholder: t('pu.creds.key_id')})]),
                                            m('.comp-push-box-cell', [m('label', t('pu.creds.team_id')), m('input[type=text]', {value: ctrl.apn_team(), oninput: m.withAttr('value', ctrl.apn_team), placeholder: t('pu.creds.team_id')})]),
                                            m('.comp-push-box-cell', [m('label', t('pu.creds.bundle_id')), m('input[type=text]', {value: ctrl.apn_bundle(), oninput: m.withAttr('value', ctrl.apn_bundle), placeholder: t('pu.creds.bundle_id')})]),
                                        ]),
                                    m('br.clearfix'),
                                    m('a.icon-button.light[href=#]', {onclick: ctrl.validate, disabled: !ctrl.isReadyForValidation()}, t('pu.validate'))
                                ])
                                : m('.form', [
                                    m('.comp-push-box', m('input[type=text]', {oninput: m.withAttr('value', ctrl.key), placeholder: t('pu.creds.set.gcm')})),
                                    m('br.clearfix'),
                                    m('a.icon-button.light[href=#]', {onclick: ctrl.validate, disabled: !ctrl.isReadyForValidation()}, t('pu.validate'))
                                ])
                        ])
                ]);
                return m('.comp-credentials', [
                    ctrl.app._id ? 
                        m('div', [
                            m('.read', [
                                ctrl.creds._id() ? 
                                    m('.comp-credentials-type', t('pu.creds.type.' + ctrl.creds.type()))
                                    : m('.comp-credentials-type.none', t('pu.creds.none'))
                            ]),
                            m('.edit', [
                                edit
                            ])
                        ])
                        : 
                        edit
                ]);
            }
        };
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m, moment, jQuery, $ */

window.component('datepicker', function(datepicker) {
    var t = window.components.t;
	
    datepicker.controller = function(opts){
        if (!(this instanceof datepicker.controller)) {
            return new datepicker.controller(opts);
        }
        this.opts = opts;
        this.value = opts.value;
        this.date = (opts.value() || opts.defaultDate) ? new Date((opts.value() || opts.defaultDate).getTime()) : new Date();
        this.hours = m.prop(('00' + this.date.getHours()).slice(-2));
        this.minutes = m.prop(('00' + this.date.getMinutes()).slice(-2));
        var open = false;
        this.open = function(){
            if (arguments.length) {
                open = !!arguments[0];
                if (open) {
                    this.date = (opts.value() || opts.defaultDate) ? new Date((opts.value() || opts.defaultDate).getTime()) : new Date();
                }
            }
            return open;
        }.bind(this);
        this.valueFormatter = opts.valueFormatter || function(d) { return moment(d).format('DD.MM.YYYY, HH:mm'); };

        this.normalize = function() {
            var d = new Date(this.date.getTime()),
                h = parseInt(this.hours()),
                m = parseInt(this.minutes());

            if (isNaN(h)) {
                d.setHours(0);
                this.hours('00');
            } else if (isNaN(m)) {
                d.setMinutes(0);
                this.minutes('00');
            } else if (h > 23) {
                d.setHours(h);
                d.setMinutes(m);
                d.setHours(0);
                d.setMinutes(0);
                this.hours('00');
                this.minutes('00');
            } else if (m > 59) {
                d.setHours(h);
                d.setMinutes(m);
                d.setHours(0);
                d.setMinutes(0);
                this.hours('00');
                this.minutes('00');
            } else {
                d.setHours(h);
                d.setMinutes(m);
                this.hours(('00' + h).slice(-2));
                this.minutes(('00' + m).slice(-2));
            }
            this.date = d;
        };

        this.isValid = function() {
            return this.date.getTime() > Date.now();
        };

        this.applyDate = function(ev) {
            ev.stopPropagation();
            this.normalize();
            if (this.isValid()) {
                this.value(new Date(this.date.getTime()));
                this.open(false);
            }
        }.bind(this);

        this.clearDate = function(ev){
            ev.stopPropagation();
            this.value(undefined);
            this.open(false);
        }.bind(this);

        // this.date = m.prop(opts.defaultDate ? new Date(opts.defaultDate.getTime()) : new Date());
    };

    datepicker.view = function(ctrl){
        return m('.comp-datepicker' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), {
            class: ctrl.open() ? 'active' : '',
            config : function(){
                $(window).unbind('click.' + ctrl.opts.id).bind('click.' + ctrl.opts.id,  function(e){
                    if (!$(e.target).parents('.comp-datepicker').length) {
                        m.startComputation();
                        ctrl.open(false);
                        $(window).unbind('click.' + ctrl.opts.id);
                        m.endComputation();
                    }
                });
            }
        }, [
            m('.comp-datepicker-head', {onclick: function(ev) {
                if (ctrl.opts.onclick) {
                    ctrl.opts.onclick(ev);
                }
                ctrl.open(!ctrl.open());
            }}, [
                m('i.material-icons', {}, 'date_range'),
                ctrl.value() ? 
                    m('span.formatted', ctrl.valueFormatter(ctrl.value())) :
                    m('span.formatted', t('datepicker.dt.click')),
                m('span.ion-chevron-down'),
            ]),
            m('.picker', {
                class : ctrl.opts.position === 'top' ? 'on-top' : '',
                config: function(element, isInitialized) {
                    if (!isInitialized) {
                        var parent = element.parentElement.clientWidth || 180;
                        element.style['margin-left'] = (parent - 205 - 10) + 'px';
                    }
                }
            }, [
                m('.comp-datepicker-ui-picker', {config: datepicker.config(ctrl)}),
                m('.comp-datepicker-time', [
                    m('span.comp-datepicker-time-label', t('datepicker.pick-time') + ': '),
                    m('input[type=number][min=0][max=23]', {value: ctrl.hours(), oninput: m.withAttr('value', ctrl.hours), onblur: ctrl.normalize}),
                    m('span.comp-datepicker-time-spacer', ':'),
                    m('input[type=number][min=0][max=59]', {value: ctrl.minutes(), oninput: m.withAttr('value', ctrl.minutes), onblur: ctrl.normalize})
                ]),
                m('.comp-datepicker-apply', [
                    m('div', [
                        m('.icon-button.dark', { onclick: ctrl.clearDate }, t('datepicker.clear')),
                        m('.icon-button.green', { class: ctrl.isValid() ? '' : 'disabled', onclick: ctrl.applyDate }, t('datepicker.apply'))
                    ])
                ])
            ])
        ]);
    };

    datepicker.config = function(ctrl) {
        return function(element, isInitialized) {
            if (typeof jQuery !== 'undefined' && typeof jQuery.fn.datepicker !== 'undefined') {
                if (!isInitialized) {
                    $(element).datepicker({
                        defaultDate: ctrl.opts.defaultDate,
                        minDate: ctrl.opts.minDate || new Date(),
                        maxDate: ctrl.opts.maxDate,
                        numberOfMonths:1,
                        showOtherMonths:true,
                        onSelect:function (selectedDate) {
                            var instance = $(this).data('datepicker'),
                                date = $.datepicker.parseDate(instance.settings.dateFormat || $.datepicker._defaults.dateFormat, selectedDate, instance.settings);

                            if (ctrl.hours()) {
                                date.setHours(ctrl.hours());
                            }
                            if (ctrl.minutes()) {
                                date.setMinutes(ctrl.minutes());
                            }

                            m.startComputation();
                            ctrl.date = date;
                            m.endComputation();
                        }
                    });
                }
            } else {
                console.warn('ERROR: No jQuery found when initializing comp-datepicker');    
            }
        };
    };
});;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('delay', function(delay) {
    var MS_IN_HOUR = delay.MS_IN_HOUR = 1000 * 60 * 60,
        MS_IN_DAY = delay.MS_IN_DAY = MS_IN_HOUR * 24,
        t = window.components.t;

    delay.controller = function(opts){
        if (!(this instanceof delay.controller)) {
            return new delay.controller(opts);
        }

        this.opts = opts;
        this.value = typeof opts.value === 'function' ? opts.value : m.prop(opts.value || 0);
        this.days = m.prop(0);
        this.hours = m.prop(0);

        this.set = function(){
            this.days(Math.floor((this.value() || 0) / MS_IN_DAY));
            this.hours(Math.floor(((this.value() || 0) - this.days() * MS_IN_DAY) / MS_IN_HOUR));
        }.bind(this);

        this.reset = function() {
            this.days(parseInt(this.days()));
            this.hours(parseInt(this.hours()));

            if (isNaN(this.days()) || this.days() < 0) {
                this.days(0);
            }
            if (isNaN(this.hours()) || this.hours() < 0) {
                this.hours(0);
            }

            this.value(MS_IN_HOUR * (this.hours() || 0) + MS_IN_DAY * (this.days() || 0));
            this.days(Math.floor(this.value() / MS_IN_DAY));
            this.hours(Math.floor((this.value() - this.days() * MS_IN_DAY) / MS_IN_HOUR));
        }.bind(this);

        this.set();
    };
    delay.view = function(ctrl){
        return m('.comp-delay' + (ctrl.opts.class ? '.' + ctrl.opts.class : '') + (ctrl.opts.days && ctrl.opts.hours ? '' : '.single'), [
            ctrl.opts.days ?
                m('input[type=number][min=0].comp-delay-days', {value: ctrl.days(), oninput: m.withAttr('value', ctrl.days), onblur: ctrl.reset, placeholder: '0'})
                : '',
            ctrl.opts.days ?
                m('label.comp-delay-days', t.n('pu.days', ctrl.days()))
                : '',

            ctrl.opts.hours ?
                m('input[type="number"][min=0].comp-delay-hours', {value: ctrl.hours(), oninput: m.withAttr('value', ctrl.hours), onblur: ctrl.reset, placeholder: '0'})
                : '',
            ctrl.opts.hours ?
                m('label.comp-delay-hours', t.n('pu.hours', ctrl.hours()))
                : ''
        ]);
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m, window, document */

window.component('emoji', function(emoji) {
    var C = window.components,
        t = C.t,
        OPEN, OPEN_CUST,
        isInvalid = function(ctrl, dom){
            if (OPEN) {
                var f = falValue(),
                    k = keyValue();

                if (k === undefined || k === null || k === '') {
                    if (ctrl.persPanel.className.indexOf('acked-key') !== -1) {
                        dom.parentNode.removeChild(dom);
                    } else {
                        ctrl.persPanel.className = ctrl.persPanel.className + ' acked-key';
                        return true;
                    }
                } else if (f === undefined || f === null || f === '') {
                    if (ctrl.persPanel.className.indexOf('acked-fal') !== -1) {
                        dom.parentNode.removeChild(dom);
                    } else {
                        ctrl.persPanel.className = ctrl.persPanel.className + ' acked-fal';
                        return true;
                    }
                }

                return false;
            }
        },
        appendCustom = function(ctrl, dom, append){
            var range, open = !dom; 

            if (!dom) {
                dom = document.createElement('span');
                if (!append) {
                    range = window.getSelection().getRangeAt(0);
                }
            }

            dom.setAttribute('contenteditable', 'false');
            dom.addEventListener('click', function(ev){ 
                m.startComputation();
                ev.stopPropagation();
				
                if (OPEN) {
                    if (isInvalid(ctrl, dom)) {
                        m.endComputation();
                        return;
                    }

                    OPEN.persOpen(false);
                    if (OPEN_CUST === dom) {
                        OPEN.persPanel.className = 'pers-panel';
                        OPEN = undefined;
                        OPEN_CUST = undefined;
                        m.endComputation();
                        return;
                    }
                }

                if (ctrl.picker() && ctrl.picker().picker_open) {
                    ctrl.picker().picker_open = false;
                }

                OPEN = ctrl;
                OPEN_CUST = dom;
                ctrl.persOpen(true);
                ctrl.persPanel.className = 'pers-panel open centered';
                ctrl.persPanel.style.right = (dom.parentNode.clientWidth - dom.offsetWidth / 2 - dom.offsetLeft - 340 / 2 - 18) + 'px';
                ctrl.persPanel.style.top = (dom.offsetHeight + dom.offsetTop + 7) + 'px';
                m.endComputation();
            });

            if (range) {
                range.deleteContents();
                range.insertNode(dom);
            } else if (append && !dom.parentNode) {
                ctrl.element.appendChild(dom);
            }

            if (dom.parentNode.className === 'pers') {
                var p = dom.parentNode;
                p.removeChild(dom);
                p.parentNode.appendChild(dom);
            }

            OPEN = ctrl;
            OPEN_CUST = dom;
            resetCustom();
            ctrl.persOpen(open);
            if (ctrl.persPanel) {
                ctrl.persPanel.className = 'pers-panel ' + (open ? 'open' : '') + ' centered';
                ctrl.persPanel.style.right = (dom.parentNode.clientWidth - dom.offsetWidth / 2 - dom.offsetLeft - 340 / 2 - 18) + 'px';
                ctrl.persPanel.style.top = (dom.offsetHeight + dom.offsetTop + 7) + 'px';
            }
        },

        resetCustom = function(){
            if (OPEN_CUST) {
                if (OPEN.closeElement) {
                    OPEN.closeElement.style.display = 'none';
                }
	
                var f = falValue(),
                    c = capValue(),
                    k = keyValue();

                if (k) {
                    var title = OPEN.persOpts.filter(function(o){return o.value() === k;})[0].title().toLowerCase();
                    if (c) {
                        title = title.substr(0, 1).toUpperCase() + title.substr(1);
                    }
                    OPEN_CUST.innerHTML = title + ' | ' + (f || '');
                    OPEN_CUST.className = 'pers';
                    if (f && OPEN.picker().editor) {
                        var html = OPEN.element.innerHTML;
                        if (html === '<br>') {
                            html = '';
                        }
                        OPEN.valueHTML(html);
                        OPEN.value(OPEN.picker().getText());
                        OPEN.valuePers(OPEN.getPersonalization());
                        OPEN.valuePersDef(OPEN.getPersonalizationDef());
                        OPEN.closeElement.style.display = 'inline-block';
                        return;
                    }
                } else {
                    OPEN_CUST.innerHTML = 'Select property | ' + (f || '');
                    OPEN_CUST.className = 'pers placeholder';
                }

                if (OPEN.picker().editor) {
                    var html = OPEN.element.innerHTML;
                    if (html === '<br>') {
                        html = '';
                    }
                    OPEN.valueHTML(html);
                    OPEN.value(OPEN.picker().getText());
                    OPEN.valuePers(OPEN.getPersonalization(OPEN_CUST));
                    OPEN.valuePersDef(OPEN.getPersonalizationDef(OPEN_CUST));
                }
            }
        },

        attrValue = function(name, bool) {
            return function(){
                if (OPEN_CUST) {
                    var v;
                    if (arguments.length) {
                        v = arguments[0];
                        OPEN_CUST.setAttribute(name, v);
                        resetCustom();
                    }
                    v = OPEN_CUST.getAttribute(name);
                    return bool ? v === 'true' : v;
                }
            };
        },

        keyValue = attrValue('data-key'),
        falValue = attrValue('data-fallback'),
        capValue = attrValue('data-capital', true);

    emoji.controller = function(opts){
        if (!(this instanceof emoji.controller)) {
            return new emoji.controller(opts);
        }

        this.opts = opts;
        // this.value = function() {
        // 	if (arguments.length) {
        // 		opts.value(arguments[0]);
        // 	}
        // 	if (!this.persOpts || !this.element) {
        // 		return opts.value();
        // 	}
        // 	var text = '', customs = {};
        // 	for (var i = 0; i < this.element.children.length; i++) {
        // 		var c = this.element.children[i];
        // 		if (c.nodeType === Node.TEXT_NODE) {
        // 			text += c.textContent;
        // 		} else if (c.cust) {
        // 			customs[text.length] = {
        // 				f: c.cust.fallback,
        // 				c: c.cust.capital,
        // 				k: c.cust.key
        // 			};
        // 		}
        // 	}
        // 	return [text, customs];
        // };
        this.value = typeof opts.value === 'function' ? opts.value : m.prop(opts.value);
        this.valueHTML = typeof opts.valueHTML === 'function' ? opts.valueHTML : m.prop(opts.valueHTML);
        this.valuePers = typeof opts.valuePers === 'function' ? opts.valuePers : m.prop(opts.valuePers);
        this.valuePersDef = typeof opts.valuePersDef === 'function' ? opts.valuePersDef : m.prop(opts.valuePersDef);
        this.valueCompiled = opts.valueCompiled;

		this.picker = function(){
			if (!this._picker) {
				this._picker = new window.EmojiPicker({
					sheets: {
						apple   : '/images/push/sheet_apple_64_indexed_128.png',
						google  : '/images/push/sheet_google_64_indexed_128.png',
						twitter : '/images/push/sheet_twitter_64_indexed_128.png',
						emojione: '/images/push/sheet_emojione_64_indexed_128.png'
					},
					show_icon_tooltips: false,
					default_footer_message: null,
					prevent_new_line: !opts.textarea
				});
			}
			return this._picker;
		};
		this.forcefocus = m.prop(false);

		this.persOpen = m.prop(false);
		this.persOpts = opts.persOpts;
		this.isPersonalizationAvailable = function () {
			return !!opts.persOpts;
		};

		if (this.isPersonalizationAvailable()) {
			this.getPersonalization = function(exclude) {
				var ret = {}, index = 0;
				(this.element && this.element.childNodes || []).forEach(function(el){
					if (el.nodeType === 1 && el.tagName.toLowerCase() === 'span' && el.className && el.className.indexOf('pers') !== -1 && (!exclude || exclude !== el)) {
						ret[index] = {
							f: el.getAttribute('data-fallback'),
							c: el.getAttribute('data-capital') === 'true',
							k: el.getAttribute('data-key'),
						};
					} else if (el.nodeType === 3) {
						index += el.textContent.length;
					}
				});
				return ret;
			};
			
			this.getPersonalizationDef = function(exclude) {
				var ret = '';
				(this.element && this.element.childNodes || []).forEach(function(el){
					if (el.nodeType === 1 && el.tagName.toLowerCase() === 'span' && el.className && el.className.indexOf('pers') !== -1 && (!exclude || exclude !== el)) {
						var c = el.getAttribute('data-capital') === 'true',
							f = el.getAttribute('data-fallback');
						if (c && f) {
							ret += f.substr(0, 1).toUpperCase() + f.substr(1);
						} else {
							ret += (f || '');
						}
					} else if (el.nodeType === 3) {
						ret += el.textContent;
					}
				});
				return ret;
			};

			this.persCtrl = new C.singleselect.controller({
				options: this.persOpts,
				value: keyValue,
				placeholder: t('pu.po.tab2.varpl'),
			});
			
			this.inputClick = function(){
				if (OPEN) {
					if (!OPEN_CUST.parentNode) {
						OPEN = OPEN_CUST = undefined;
						return;
					}
					if (isInvalid(OPEN, OPEN_CUST)) {
						return;
					}

					OPEN.persOpen(undefined);
					OPEN = OPEN_CUST = undefined;
				}
			};

			this.closeBtnClick = function(ev){
				ev.preventDefault();
				if (OPEN) {
					if (isInvalid(OPEN, OPEN_CUST)) {
						return;
					}

					OPEN.persPanel.className = 'pers-panel centered asd';
					OPEN.persOpen(undefined);
					OPEN = OPEN_CUST = undefined;
				}
			};

			this.deleteBtnClick = function(ev){
				ev.preventDefault();
				if (OPEN) {
					var o = OPEN;
					OPEN_CUST.parentNode.removeChild(OPEN_CUST);
					OPEN.persOpen(undefined);
					OPEN = OPEN_CUST = undefined;

					o.valueHTML(o.element.innerHTML);
					o.value(o.picker().getText());
					o.valuePers(o.getPersonalization());
					o.valuePersDef(o.getPersonalizationDef());
				}
			};

			this.persBtnClick = function(opt, ev){
				ev.preventDefault();
				if (OPEN) {
					if (!OPEN_CUST.parentNode) {
						OPEN = OPEN_CUST = undefined;
						return;
					}
					if (isInvalid(OPEN, OPEN_CUST)) {
						return;
					}

					OPEN.persOpen(undefined);
					if (OPEN === this) {
						OPEN = undefined;
						OPEN_CUST = undefined;
						return;
					}
				}

				if (this.picker() && this.picker().picker_open) {
					this.picker().picker_open = false;
				}

				var target = window.getSelection().anchorNode;
				while (target.parentNode) {
					if (target === this.element) {
						return appendCustom(this);
					} else {
						target = target.parentNode;
					}
				}

				if (!OPEN) {
					appendCustom(this, null, true);
				}
			}.bind(this);
		}
    };
    emoji.view = function(ctrl){
        return m('.emoji' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), {key: ctrl.opts.key ? 'emoji-' + ctrl.opts.key : undefined}, [
            m('div[contenteditable=true]' + (ctrl.opts.textarea ? '.textarea' : '.input'), {
                key: ctrl.opts.key ? 'emoji-ce-' + ctrl.opts.key : undefined,
                config: function(element, isInitialized) {
                    if (!isInitialized) {
                        ctrl.element = element;
                        if (ctrl.valueCompiled()) {
                            element.innerHTML = ctrl.valueHTML() || ctrl.valueCompiled();
                            element.querySelectorAll('.pers').forEach(function(el){
                                appendCustom(ctrl, el);
                            });
                        }
                        ctrl.picker().listenOn(element.parentElement.querySelector('a.fa-smile-o'), element.parentElement, element);
                    } else if (ctrl.forcefocus()) {
                        if (!ctrl.picker().editor) {
                            ctrl.picker().listenOn(element.parentElement.querySelector('a.fa-smile-o'), element.parentElement, element);
                        }
                        if (ctrl.value() !== ctrl.picker().getText()) {
                            element.focus();
                            if (typeof window.getSelection != 'undefined' && typeof document.createRange != 'undefined') {
                                var range = document.createRange();
                                range.selectNodeContents(element);
                                range.collapse(false);
                                var sel = window.getSelection();
                                sel.removeAllRanges();
                                sel.addRange(range);
                            } else if (typeof document.body.createTextRange != 'undefined') {
                                var textRange = document.body.createTextRange();
                                textRange.moveToElementText(element);
                                textRange.collapse(false);
                                textRange.select();
                            }					
                        }
                    }
                }, 
                oninput: function(){
                    var html = this.innerHTML;
                    if (html === '<br>') {
                        html = '';
                    }
                    ctrl.valueHTML(html);
                    ctrl.value(ctrl.picker().getText());
					if (ctrl.isPersonalizationAvailable()) {
						ctrl.valuePers(ctrl.getPersonalization());
						ctrl.valuePersDef(ctrl.getPersonalizationDef());
					}
                },
                onkeydown: function(ev){
                    if (ev.key === 'Enter') {
                        ev.preventDefault();
                    }
                },
                onkeyup: function(){
                    if (ctrl.value() !== ctrl.picker().getText()) {
                        var html = this.innerHTML;
                        if (html === '<br>') {
                            html = '';
                        }
                        ctrl.valueHTML(html);
                        ctrl.value(ctrl.picker().getText());
                    }
					if (ctrl.isPersonalizationAvailable()) {
						ctrl.valuePers(ctrl.getPersonalization());
						ctrl.valuePersDef(ctrl.getPersonalizationDef());
					}
                },
                onfocus: function(){
                    ctrl.forcefocus(true);
                },
                onblur: function(){
                    ctrl.forcefocus(false);
                },
                onclick: ctrl.inputClick
                // onfocus: ctrl.focus.bind(ctrl, true),
                // onblur: ctrl.focus.bind(ctrl, false),
			}, !ctrl.value() && (!ctrl.isPersonalizationAvailable() || !Object.keys(ctrl.getPersonalization()).length) && !ctrl.forcefocus() ? 
                m('div.placeholder', {
                    key: 'pl' + Math.random(),
                    config: function(el) {
                        el.innerHTML = typeof ctrl.opts.placeholder === 'function' ? ctrl.opts.placeholder() : ctrl.opts.placeholder || '';
                    }
                }) 
                : undefined),
			ctrl.isPersonalizationAvailable() ? m('a.pers', {title: t('pu.po.tt.pers'), config: C.tooltip.configF, onmousedown: ctrl.persBtnClick.bind(ctrl, null)}, '{{') : '',
			ctrl.isPersonalizationAvailable() ? m('.pers-panel.centered', {class: (ctrl.persOpen() ? 'open' : ''), config: function(el){ ctrl.persPanel = el; }}, [
                m('label', t('pu.po.tab2.variable')),
                C.singleselect.view(ctrl.persCtrl),
                m('input[type=checkbox][name=pers-capital]', {checked: capValue(), onchange: function(){
                    capValue(!capValue());
                }}), m('label.check[for=pers-capital]', t('pu.po.tab2.capital')),
                m('label', t('pu.po.tab2.fallback')),
                m('input[type=text]', {value: falValue(), oninput: m.withAttr('value', falValue), placeholder: t('pu.po.tab2.fallpl')}),
                m('.help', t('pu.po.tab2.help')),
                m('.btns', [
                    m('a.delete[href=#]', {onclick: ctrl.deleteBtnClick}, t('pu.po.delete')),
                    m('a.close.icon-button.light[href=#]', {config: function(el){ ctrl.closeElement = el; }, onclick: ctrl.closeBtnClick}, t('pu.po.close')),
                ])
            ]) : '',
            m('a.fa.fa-smile-o', C.tooltip.config(t('pu.po.tt.emoji')))
        ]);
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('enableable', function(enableable) {
    enableable.id = 0;
    enableable.controller = function(opts){
        if (!(this instanceof enableable.controller)) {
            return new enableable.controller(opts);
        }

        this.opts = opts;
        this.id = 'enableable_' + enableable.id++;
        this.open = typeof opts.open === 'function' ? opts.open : m.prop(opts.open || false);
        this.view = opts.view;
    };
    enableable.view = function(ctrl){
        return m('.comp-enableable' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), [
            m('h4', [
                ctrl.opts.title,
                m('.on-off-switch', [
                    m('input[type=checkbox][id=' + ctrl.id + '].on-off-switch-checkbox', {checked: ctrl.open(), onchange: m.withAttr('checked', ctrl.open)}),
                    m('label[for=' + ctrl.id + '].on-off-switch-label')
                ])
            ]),
            m('div', {class: ctrl.open() ? 'open' : 'closed'}, ctrl.view())
        ]);
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('input', function(input) {
    input.controller = function(opts){
        if (!(this instanceof input.controller)) {
            return new input.controller(opts);
        }

        this.opts = opts;
        this.value = typeof opts.value === 'function' ? opts.value : m.prop(opts.value);
    };
    input.view = function(ctrl){
        var pls = (typeof ctrl.opts.placeholder === 'function' ? ctrl.opts.placeholder() : ctrl.opts.placeholder) || '';

        return m('input.comp-input' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), {placeholder: pls, value: ctrl.value() || '', oninput: function(ev){
            ctrl.value(ev.target.value);
            if (ctrl.opts.onchange) { ctrl.opts.onchange(ctrl.value()); }
        }});
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m, $ */

window.component('multiselect', function (mselect) {
    mselect.controller = function (opts) {
        if (!(this instanceof mselect.controller)) {
            return new mselect.controller(opts);
        }

        this.opts = opts;
        this.value = typeof opts.value === 'function' ? opts.value : m.prop(opts.value);
        this.options = m.prop(opts.options.map(window.components.selector.Option));
        this.isOpen = false;
        this.onMultiSelectClick = function () {
            this.isOpen = !this.isOpen;
        };
        this.hideDropDown = function () {
            m.startComputation();
            this.isOpen = false;
            m.endComputation();
        };
    };
    mselect.view = function (ctrl) {
        // var unSelectedData = ctrl.data.filter(function (data) { return ctrl.selected.indexOf(data) < 0 });

        var unSelectedData = ctrl.options().filter(function(o){ return !o.selected();});

        var selectedData = ctrl.options().filter(function(o){ return o.selected();});

        return m('div.cly-multi-select', {
            class: selectedData.length > 0 ? 'selection-exists' : '',
            style: 'width:100%',
            data: ctrl.selected,
            config: function (elm, isInitialized) {
                if (!isInitialized) {
                    $(window).click(ctrl.hideDropDown.bind(ctrl));
                }
            },
            onclick: function (e) {
                ctrl.onMultiSelectClick();
                e.stopPropagation();
            },
        }, [
            m('.select-inner', [
                m('.text-container', [
                    m('.text', [
                        m('.default-text', ctrl.opts.placeholder),
                        ctrl.value()
                            .filter(function(o) { return o.selected(); })
                            .map(function (o) {
                                return m('.selection', { 'data-value': o.value() }, [
                                    m('span', o.title()),
                                    m('.remove', {
                                        onclick: function (e) {
                                            e.stopPropagation();
                                            o.selected(false);
                                            ctrl.value(ctrl.options());
                                        }
                                    }, m('i.ion-android-close'))
                                ]);
                            })
                    ])
                ]),
                m('.right combo')
            ]),
            m('.select-items square', {
                style: {
                    width: '100%',
                    display: (ctrl.isOpen && unSelectedData.length > 0 ? 'block' : 'none')
                }
            }, unSelectedData.map(function (data) {
                return m('.item', {
                    'data-value': data.value(),
                    onclick: function (e) {
                        e.stopPropagation();
                        data.selected(true);
                        ctrl.value(ctrl.options());
                        ctrl.isOpen = false;
                    }
                }, data.title());
            })
            )
        ]);
    };
});;'use strict';

/* jshint undef: true, unused: true */
/* globals m, components, $, countlyView, countlyGlobal, countlyCommon, CountlyHelpers */

window.component('push.dash', function (dash) {
    var t = window.components.t,
        PUSH = window.components.push;

    dash.controller = function (refresh) {
        this.app_id = countlyCommon.ACTIVE_APP_ID;
        this.period = m.prop('monthly');
        this.source = m.prop('dash');
        this.tab = m.prop('');
        this.messages = m.prop([]);
        this.loaded = m.prop(false);
        var dt = m.prop({
            users: 0,
            enabled: 0,
            cohorts: [],
            geos: [],
            location: null,
            sent: { monthly: { data: [], keys: [], total: 0 }, weekly: { data: [], keys: [], total: 0 } },
            actions: { monthly: { data: [], keys: [], total: 0 }, weekly: { data: [], keys: [], total: 0 } },
            sent_automated: { daily: { data: [], keys: [], total: 0 } },
            actions_automated: { daily: { data: [], keys: [], total: 0 }},
        });

        var self = this;
        this.data = function () {

            if (arguments.length) {
                var data = arguments[0];
                if (data) {
                    ['sent', 'actions', 'sent_automated', 'actions_automated'].forEach(function (ev) {
                        ev = data[ev];
                        ['weekly', 'monthly', 'daily'].forEach(function (period) {
                            if (!ev[period] || typeof ev[period].total !== 'undefined') {
                                return;
                            }

                            if (period === 'weekly') {
                                period = ev[period];

                                var len = Math.floor(period.data.length / 2);
                                period.data = period.data.slice(len);
                                period.keys = period.keys.slice(len);
                            } else {
                                period = ev[period];
                            }

                            period.total = period.data.reduce(function (a, b) { return a + b; });
                        });
                    });

                    dt(data);
                }
            }
            return dt();
        };

        setTimeout(function () {
            components.push.remoteDashboard(this.app_id, refresh).then(this.data, console.log).then(this.loaded.bind(null, true));
        }.bind(this), 1);

        this.dataDP = function () {

            return {
                dp: [
                    { label: t('pu.dash.metrics.sent'), data: this.data() ? this.data()['sent' + this.tab()][this.period()].data.map(function (d, i) { return [i, d]; }) : [[], []] },
                    { label: t('pu.dash.metrics.acti'), data: this.data() ? this.data()['actions' + this.tab()][this.period()].data.map(function (d, i) { return [i, d]; }) : [[], []] },
                ],
                ticks: this.data() ? this.data()['sent' + this.tab()][this.period()].keys.map(function (d, i) { return [i, d]; }) : []
            };
        };
        this.chartConfig = function (element) {
            // element.style.height = element.clientWidth * 1 / 4 + 'px';
            element.style.height = '330px';
            // if (!isInitialized) {

            if (this.tab() === ''){
                countlyCommon.drawGraph(this.dataDP(), element, 'bar', { legend: { show: false } });
            } else {
                countlyCommon.drawTimeGraph([
                    { label: t('pu.dash.metrics.sent'), data: this.data().sent_automated.daily.data.map(function (data, key) { return [key, data]; }) },
                    { label: t('pu.dash.metrics.acti'), data: this.data().actions_automated.daily.data.map(function (data, key) { return [key, data]; }) },
                ], '.chart');
            }
            // }
        }.bind(this);

        this.setTable = function (element, context, tableName) {

            context.onunload = function () {
                if (this[tableName]) {
                    try {
                        this[tableName].fnDestroy(true);
                    } catch (e) { }

                    var id = $(this[tableName].context).attr('id');
                    if (id)
                        $('#' + id + '_wrapper').remove();
                    delete this[tableName];
                }
            }.bind(this);
            var unprop = function (name, def, x, val, val2) {
                if (x === 'set') {
                    return val;
                } else if (val === 'set') {
                    return val2;
                }
                if (x === undefined) {
                    x = def;
                }
                var v = window.dot(x, name);
                return typeof v === 'undefined' ? def : typeof v === 'function' ? v() || def : v || def;
            };

            this[tableName] = $(element).dataTable($.extend({}, $.fn.dataTable.defaults, {
                bServerSide: true,
                iDisplayLength: 10,
                sAjaxSource: countlyCommon.API_PARTS.data.r + '/pushes/all?api_key=' + countlyGlobal.member.api_key + '&app_id=' + countlyCommon.ACTIVE_APP_ID,
                fnServerData: function (sSource, aoData, fnCallback) {
                    $.ajax({
                        dataType: 'jsonp',
                        type: 'POST',
                        url: sSource,
                        data: aoData,
                        success: function (data) {
                            data.aaData = this.messages(data.aaData.map(components.push.Message));
                            fnCallback(data);
                        }.bind(this)
                    });
                }.bind(this),
                fnServerParams: function (aoData) {
                    aoData.forEach(function (d) {
                        if (d.name === 'iSortCol_0') {
                            d.value = ['messagePerLocale.default', 'appNames', tableName === 'dtable' ? 'result.status' : 'active', 'created', 'created', 'date', 'date'][d.value];
                        }
                    });
                    aoData.push({ name: 'source', value: this.source() });
                    aoData.push({ name: 'auto', value: tableName === 'dtableAutomated' });
                }.bind(this),
                oLanguage: {
                    sZeroRecords: t('pu.t.nothing'),
                    sEmptyTable: t('pu.t.nothing'),
                    sSearch: t('pu.t.search')
                },
                fnRowCallback: function (nRow, aData) {
                    $(nRow).attr('mid', aData._id());
                },
                aoColumns: [
                    { mData: function(x){ 
                        return x.messageCompile() || ''; 
                    }, sName: 'message', mRender: CountlyHelpers.clip(null, t('push.no-message')), sTitle: t('pu.t.message') },

                    tableName === 'dtable' ? {
                        mData: unprop.bind(null, 'result'), sName: 'status', sType: 'string', mRender: function (d, type, result) {
                            var s = result.result.status(),
                                override;
                            if (PUSH.statusers) {
                                PUSH.statusers.forEach(function (statuser) {
                                    var o = statuser(result.___data);
                                    if (o) {
                                        override = o;
                                    }
                                });
                            }
                            return '<span>' + (override || result.result.statusString()) + '</span>';
                        }, sTitle: t('pu.t.status'), bSearchable: false
                    }
                        : {
                            mData: unprop.bind(null, 'result'), sName: 'status', sType: 'string', mRender: function (d, type, msg) {
                                var s = d.result.status(),
                                    override;
                                if (PUSH.statusers) {
                                    PUSH.statusers.forEach(function (statuser) {
                                        var o = statuser(d.___data);
                                        if (o) {
                                            override = o;
                                        }
                                    });
                                }
                                if (override) {
                                    return '<span>' + override + '</span>';
                                } else if (d.autoEnd() && new Date(d.autoEnd()).getTime() < Date.now()) {
                                    return t('pu.ended');
                                } else {
                                    return '<div class="on-off-switch">' + 
										'<input type="checkbox" class="on-off-switch-checkbox status-switcher" id="message-' + d._id() + '" ' + (msg.result.isScheduled() ? 'checked' : '') + '>' + 
										'<label class="on-off-switch-label" for="message-' + d._id() + '"></label>' + 
										'<span class="text">' + t('pu.enable') + '</span>';
                                }
                            }, sTitle: t('pu.t.status'), bSearchable: false
                        },
                    { mData: function (x) { return x.appNames().join(', '); }, sName: 'apps', sType: 'string', mRender: CountlyHelpers.clip(), sTitle: t('pu.t.apps'), bSearchable: false },
                    { mData: unprop.bind(null, 'dates.createdSeconds'), bVisible: false, sType: 'numeric', bSearchable: false },
                    { mData: unprop.bind(null, 'dates.created'), sName: 'created', sType: 'date', iDataSort: 3, sTitle: t('pu.t.created'), mRender: function (x) { return x.dates().created; }, bSearchable: false },
                    { mData: unprop.bind(null, 'dates.dateSeconds'), bVisible: false, sType: 'numeric', bSearchable: false },
                    {
                        mData: unprop.bind(null, 'dates'), sName: 'sent', sType: 'string', iDataSort: 5, sTitle: t('pu.t.sent-scheduled'), mRender: function (local) {
                            var dates = local.dates();
                            return dates.sent || dates.date || '';
                        }, bSearchable: false
                    },
                    {
                        mData: unprop.bind(null, 'result'), sName: 'result', sType: 'string', iDataSort: 5, sTitle: t('pu.t.result'), mRender: function (local) {
                            var result = local.result;
                            return (result.sent() || 0) + ' / ' + (result.actioned() || 0);
                        }, bSearchable: false
                    },
                    {
                        mData: function (x) { return x; },
                        sName: 'menu',
                        sType: 'string',
                        sTitle: '',
                        sClass: 'shrink right',
                        mRender: function () {
                            return '<a class="cly-list-options"></a>';
                        },
                        sWidth: '100px',
                        bSortable: false,
                        bSearchable: false
                    }
                ],
                aaSorting: [[4, 'asc']]
            }));

            // if (tableName === "dtableAutomated") {
            // this[tableName].find('tbody').on('click', '.status-switcher', function () {
            // 	var _id = this.id.toString().replace(/^message-/, '');
            // 	var newStatus = $(this).is(":checked");

            // 	//TODO: Update message status
            // })
            // }

            CountlyHelpers.initializeTableOptions();

            var self = this;
            $('.cly-button-menu').off('cly-list.click').on('cly-list.click', function (event, data) {
                var id = $(data.target).parents('tr').attr('mid');
                if (id) {
                    $('.message-menu').find('.duplicate-message').data('id', id);
                    $('.message-menu').find('.delete-message').data('id', id);
                }
            });

            $('.cly-button-menu').off('cly-list.item').on('cly-list.item', function (event, data) {
                var id = $(data.target).data('id'),
                    message = self.messages().find(function (m) { return m._id() === id; });

                if ($(data.target).hasClass('duplicate-message') && message) {
                    var json = message.toJSON(false, true, true);
                    if (!message.active) {
                        delete json.date;
                    }
                    components.push.popup.show(json, true);
                } else if ($(data.target).hasClass('delete-message') && message) {
                    message.remoteDelete().then(function () {
                        if (window.app.activeView.mounted) {
                            window.app.activeView.mounted.refresh();
                        }
                    });
                }
            });

            this[tableName].find('tbody').on('click', '.status-switcher', function (ev) {
                var id = this.id.toString().replace(/^message-/, ''),
                    message = self.messages().find(function (m) { return m._id() === id; }),
                    switcher = $(this);

                if (message) {
                    message.remoteActive(switcher.is(':checked') ? true : false).then(function () {
                        if (window.app.activeView.mounted) {
                            window.app.activeView.mounted.refresh();
                        }
                    }, function(err) {
                        switcher.attr('checked', false);
                        window.CountlyHelpers.alert(err || t('push.error.cohorts-deleted'), 'red');
                    });
                }
            });

            this[tableName].find('tbody').on('click', 'tr', function (ev) {
                if ($(ev.target).parents('.on-off-switch').length) {
                    return;
                }
                var id = this.attributes && this.attributes.mid && this.attributes.mid.value;
                var message = self.messages().find(function (m) { return m._id() === id; });

                if (message) {
                    message.remoteLoad().then(function () {
                        components.push.view.show(message);
                    });
                }
            });
        };

        this.tableConfig = function (element, isInitialized, context) {
            if (!isInitialized) {
                this.setTable(element, context, 'dtable');
            }

        }.bind(this);

        this.tableConfigAutomatedMessages = function (element, isInitialized, context) {
            if (!isInitialized) {
                this.setTable(element, context, 'dtableAutomated');
            }

        }.bind(this);

        this.refresh = function () {
            if (this.dtable) {
                this.dtable.fnDraw(false);
            }
            if (this.dtableAutomated) {
                this.dtableAutomated.fnDraw(false);
            }
            this.loaded(false);
            components.push.remoteDashboard(this.app_id, true).then(this.data, console.log);
        }.bind(this);

        this.createMessage = function (ev) {
            ev.preventDefault();
            self.pushDrawerMenuOpen = false;
            self.tab('');
            self.period('monthly');
            components.push.popup.show({ apps: [countlyCommon.ACTIVE_APP_ID] });
        };

        this.createAutoMessage = function (e) {
            e.preventDefault();
            self.pushDrawerMenuOpen = false;
            self.tab('_automated');
            self.period('daily');
            components.push.popup.show({ auto: true, apps: [countlyCommon.ACTIVE_APP_ID] });
        };

        this.pushDrawerMenuOpen = false;


        this.messageMenu = function (e) {
            e.preventDefault();
            self.pushDrawerMenuOpen = !self.pushDrawerMenuOpen;
        };

        this.isCohortsEnabled = function () {
            return countlyGlobal.plugins.indexOf('cohorts') >= 0;
        };
    };
    dash.view = function (ctrl) {
        return m('.push-overview', [

            m.component(components.widget, {
                header: {
                    title: 'pu.dash.users',
                    view: (countlyGlobal.member.global_admin || (countlyGlobal.member.admin_of && countlyGlobal.member.admin_of.indexOf(countlyCommon.ACTIVE_APP_ID) !== -1)) ?
                        [
                            m('div', {
                                style: {
                                    overflow: 'initial',
                                    position: 'relative',
                                    width: '500px',
                                    height: '37px',
                                    float: 'right',
                                    marginRight: '5px'
                                }
                            }, [m('a.icon-button.btn-header.push-group.green[href=#]', {
                                id: 'push-group-button',
                                onclick: ctrl.messageMenu,
                                style: { marginRight: '0px' }
                            }, t('pu.dash.btn-group.create-message')),
                            ctrl.pushDrawerMenuOpen ?
                                ctrl.isCohortsEnabled() ?
                                    m('div.push-group-menu.ee-menu', [
                                        m('div.auto-push-image', { onclick: ctrl.createAutoMessage }, [
                                            m('div.title', t('pu.dash.btn-group.automated-message')),
                                            m('div.description', t('pu.dash.btn-group.automated-message-desc')),
                                        ]),
                                        m('div.one-time', { onclick: ctrl.createMessage }, [
                                            m('div', [
                                                m('div.title', t('pu.dash.btn-group.one-time-message')),
                                                m('div.description', t('pu.dash.btn-group.one-time-message-desc'))
                                            ])
                                        ]),
                                    ]) :
                                    m('div.push-group-menu', [
                                        m('div.not-available.auto-push-image', [
                                            m('div.header', t('pu.dash.btn-group-available-in-enterprise')),
                                            m('div.body', [
                                                m('div.title', t('pu.dash.btn-group.automated-message')),
                                                m('div.description', t('pu.dash.btn-group.automated-message-desc')),
                                                m('a.url', t('Learn more about automation'))
                                            ])
                                        ]),
                                        m('div.one-time', { onclick: ctrl.createMessage }, [
                                            m('div', {
                                                style: {
                                                    boxSizing: 'border-box',
                                                    paddingLeft: '10px'
                                                }
                                            }, [
                                                m('div.title', t('pu.dash.btn-group.one-time-message')),
                                                m('div.description', t('pu.dash.btn-group.one-time-message-desc'))
                                            ])
                                        ]),
                                    ]) : ''

                            ])
                        ]
                        : ''
                },
                footer: {
                    config: { class: 'condensed' },
                    bignumbers: [
                        { title: 'pu.dash.users.total', number: ctrl.data().users || 0, help: 'help.dashboard.total-users-push' },
                        { title: 'pu.dash.users.enabl', number: ctrl.data().enabled || 0, help: 'help.dashboard.messaging-users' },
                    ]
                }
            }),

            m.component(components.widget, {
                header: {
                    title: 'pu.dash.metrics',
                    control: ctrl.tab() === '' ?
                        {
                            component: components.segmented,
                            opts: {
                                value: ctrl.period, options: [
                                    { value: 'weekly', title: t('pu.dash.weekly') },
                                    { value: 'monthly', title: t('pu.dash.monthly') }
                                ], legacy: true
                            }
                        } : null
                },
                content: {
                    config: {
                        style: { borderTopWidth: '0px', paddingBottom: '30px' }
                    },
                    tabButtons: {
                        isVisible: true,
                        tab: ctrl.tab,
                        onChange: function (newTab) {
                            if (newTab === '_automated')
                                ctrl.period('daily');
                            else
                                ctrl.period('monthly');

                            ctrl.tab(newTab);
                        }
                    },
                    view: m('.chart', { config: ctrl.chartConfig })
                },
                footer: {
                    bignumbers: [
                        { title: 'pu.dash.metrics.sent', number: ctrl.data() ? ctrl.data()['sent' + ctrl.tab()][ctrl.period()].total : 0, color: true, help: 'help.dashboard.push.sent' },
                        { title: 'pu.dash.metrics.acti', number: ctrl.data() ? ctrl.data()['actions' + ctrl.tab()][ctrl.period()].total : 0, color: true, help: 'help.dashboard.push.actions' },
                    ]
                }
            }),

            m.component(components.widget, {
                header: {
                    title: ctrl.tab() === '' ? 'push.po.one-time-messages' : 'push.po.automated-messages',
                    control: {
                        component: components.segmented,
                        opts: {
                            class: 'large', value: ctrl.source, options: [
                                { value: '', title: t('pu.dash.messages.all') },
                                { value: 'api', title: t('pu.dash.messages.api') },
                                { value: 'dash', title: t('pu.dash.messages.dash') }
                            ], onchange: ctrl.refresh, legacy: true
                        }
                    }
                },
                content: {
                    view: ctrl.tab() === '' ? 
                        m('table.d-table', { config: ctrl.tableConfig, key: 'single_messages' })
                        : m('table.d-table', { config: ctrl.tableConfigAutomatedMessages, key: 'automated_messages' }), 
                    config: { class: 'message-table-container' }
                }
            }),
            m('.cly-button-menu.message-menu', [
                m('a.item.duplicate-message', t('push.po.table.dublicate')),
                m('a.item.delete-message', t('push.po.table.delete'))
            ])
        ]);
    };
});

window.MessagingDashboardView = countlyView.extend({
    showOnGraph: 2,
    initialize: function () {
		setTimeout(function(){
			if (window.countlySegmentation) {
				window.countlySegmentation.initialize("[CLY]_session");
			}
		}, 1000);
    },
    renderCommon: function () {
        if (this.mounted && this.mounted.app_id !== countlyCommon.ACTIVE_APP_ID) {
            this.destroy();
        }
        if (!this.mounted) {
            this.div = $('<div />').appendTo($(this.el))[0];
            this.mounted = m.mount(this.div, components.push.dash);
        }
        var self = this;
        setTimeout(function () {
            if ($('#help-toggle').hasClass('active')) {
                $('.help-zone-vb').tipsy({
                    gravity: $.fn.tipsy.autoNS, trigger: 'manual', title: function () {
                        return ($(this).data('help')) ? $(this).data('help') : '';
                    }, fade: true, offset: 5, cssClass: 'yellow', opacity: 1, html: true
                });
                $('.help-zone-vs').tipsy({
                    gravity: $.fn.tipsy.autoNS, trigger: 'manual', title: function () {
                        return ($(this).data('help')) ? $(this).data('help') : '';
                    }, fade: true, offset: 5, cssClass: 'yellow narrow', opacity: 1, html: true
                });

                $.idleTimer('destroy');
                clearInterval(self.refreshActiveView);
                $('.help-zone-vs, .help-zone-vb').hover(
                    function () {
                        $(this).tipsy('show');
                    },
                    function () {
                        $(this).tipsy('hide');
                    }
                );
            }
        }, 500);
    },
    refresh: function () {
        if (this.mounted) { this.mounted.refresh(true); }
    },

    destroy: function () {
        m.startComputation();
        components.slider.instance.close();
        m.endComputation();

        if (this.mounted) {
            delete components.push.dashboard;
            m.mount(this.div, null);
            this.mounted = null;
        }
    },

    appChanged: function() {
        m.startComputation();
        components.slider.instance.close();
        m.endComputation();
        this.renderCommon();
    }

});

window.app.messagingDashboardView = new window.MessagingDashboardView();

window.app.route('/messaging', 'messagingDashboardView', function () {
    this.renderWhenReady(this.messagingDashboardView);
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m, moment, vprop */

window.component('push', function(push) {
    push.C = {
        TYPE: {
            MESSAGE: 'message',
            DATA: 'data',
        },

        TAB: {
            APPS: 0,
            PLATFORMS: 1,
            TIME_N_LOC: 2,
            MESSAGE: 3
        },

        PLATFORMS: {
            IOS: 'i',
            ANDROID: 'a'
        },
        S: '|'
    };

    push.S = {
        NotCreated: 	0,			// 0
        Created: 		1 << 0,		// 1
        Scheduled: 		1 << 1,		// 2
        Sending: 		1 << 2,		// 4
        Done: 			1 << 3,		// 8
        Error: 			1 << 4,		// 16
        Success: 		1 << 5,		// 32
        Aborted: 		1 << 10,	// 1024
        Deleted: 		1 << 11,	// 2048
    };

    push.ICON = {
        WARN: function(cls){ 
            cls = cls ? '.' + cls : '';
            return m('svg' + cls + '[width=21][height=18]', m('path[fill="#FF9E43"][d="M20,18c0.6,0,0.8-0.4,0.5-0.9L11,0.9c-0.3-0.5-0.7-0.5-1,0L0.5,17.1C0.2,17.6,0.4,18,1,18H20zM10,13h2v2h-2V13z M10,8h2v4h-2V8z"]')); 
        }
    };

    var t = window.components.t,
        URL_REGEXP = push.URL_REGEXP = new RegExp('([A-Za-z][A-Za-z0-9+\\-.]*):(?:(//)(?:((?:[A-Za-z0-9\\-._~!$&\'()*+,;=:]|%[0-9A-Fa-f]{2})*)@)?((?:\\[(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){6}|::(?:[0-9A-Fa-f]{1,4}:){5}|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}|(?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}|(?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:|(?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::)(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))|(?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::)|[Vv][0-9A-Fa-f]+\\.[A-Za-z0-9\\-._~!$&\'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[A-Za-z0-9\\-._~!$&\'()*+,;=]|%[0-9A-Fa-f]{2})*))(?::([0-9]*))?((?:/(?:[A-Za-z0-9\\-._~!$&\'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)|/((?:(?:[A-Za-z0-9\\-._~!$&\'()*+,;=:@]|%[0-9A-Fa-f]{2})+(?:/(?:[A-Za-z0-9\\-._~!$&\'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)?)|((?:[A-Za-z0-9\\-._~!$&\'()*+,;=:@]|%[0-9A-Fa-f]{2})+(?:/(?:[A-Za-z0-9\\-._~!$&\'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)|)(?:\\?((?:[A-Za-z0-9\\-._~!$&\'()*+,;=:@/?]|%[0-9A-Fa-f]{2})*))?(?:\\#((?:[A-Za-z0-9\\-._~!$&\'()*+,;=:@/?]|%[0-9A-Fa-f]{2})*))?'),
        IMAGE_MIMES = ['image/jpeg', 'image/png'],
        ANIMA_MIMES = ['image/gif'],
        VIDEO_MIMES = ['video/mp4', 'video/mpeg', 'video/avi', 'video/mpg', 'video/mpeg2'],
        AUDIO_MIMES = ['audio/mpeg', 'audio/aiff', 'audio/wav'],
        SUPPORTED_MIMES = Array.prototype.concat.apply([], [IMAGE_MIMES, ANIMA_MIMES, VIDEO_MIMES, AUDIO_MIMES]);

    if (!push.statusers) { push.statusers = []; }
    if (!push.actions) { push.actions = []; }


    push.Message = function(data) {
        if (!(this instanceof push.Message)) {
            return new push.Message(data);
        }

        var buildClearingProp = function() {
            var prop = m.prop.apply(m, arguments);
            return function(){
                if (arguments.length) {
                    this._id(undefined);
                    this.count(undefined);
                    this.locales([]);
                    return prop.apply(null, arguments);
                }
                return prop();
            }.bind(this);
        }.bind(this);

        this.___data = data;
		
        // ID of tokens build when building audience
        this._id = m.prop(data._id);
        this.type = m.prop(data.type || push.C.TYPE.MESSAGE);
        this.apps = buildClearingProp(data.apps || []);

        // Automated push fields
        this.auto = m.prop(data.auto || false);
        this.autoOnEntry = m.prop(data.autoOnEntry || false);
        this.autoCohorts = m.prop(data.autoCohorts || []);
        this.autoEnd = m.prop(data.autoEnd || undefined);
        this.autoDelay = m.prop(data.autoDelay || undefined);
        this.autoTime = m.prop(data.autoTime || undefined);
        this.autoCapMessages = m.prop(data.autoCapMessages || undefined);
        this.autoCapSleep = m.prop(data.autoCapSleep || undefined);
        // this.availableCohorts = buildClearingProp(data.availableCohorts || []);
        // Automated push fields -----

        this.platforms = buildClearingProp(data.platforms || []);
        this.sent = m.prop(data.sent);
        this.sound = vprop(data.sound, function(v){ return !!v; }, t('pu.po.tab2.extras.sound.invalid'));
        this.badge = vprop(data.badge, function(v){ return v === undefined || ((v + '') === (parseInt(v) + '') && parseInt(v) >= 0); }, t('pu.po.tab2.extras.badge.invalid'));
        this.url = vprop(data.url, function(v){ return v && URL_REGEXP.test(v); }, t('pu.po.tab2.extras.url.invalid'));
        this.data = vprop(typeof data.data === 'object' ? JSON.stringify(data.data) : data.data, function(v){
            try {
                var o = window.jsonlite.parse(v);
                return o && typeof o === 'object';
            } catch(e){
                return false;
            }
        }, t('pu.po.tab2.extras.data.invalid'));
        this.test = buildClearingProp(typeof data.test === 'undefined' ? false : data.test);

        this.userConditions = buildClearingProp(data.userConditions === '{}' ? undefined : typeof data.userConditions === 'string' ? JSON.parse(data.userConditions) : data.userConditions);
        this.drillConditions = buildClearingProp(data.drillConditions === '{}' ? undefined : typeof data.drillConditions === 'string' ? JSON.parse(data.drillConditions) : data.drillConditions);
        this.geo = buildClearingProp(data.geo || undefined);

        this.count = m.prop();
        this.locales = m.prop(data.locales || []);
        this.messagePerLocale = m.prop(data.messagePerLocale || {});

        function compile(str, pers, user, html) {
            var ret = str;
            Object.keys(pers).sort(function(a, b){ return b - a; }).forEach(function(k){
                var p = pers[k], v;
                k = parseInt(k);

                if (user && user[p.k]) {
                    v = user[p.k];
                } else if (html) {
                    v = '<span class="pers" data-key="' + p.k + '" data-fallback="' + (p.f || '') + '" data-capitalize="' + p.c + '">' + (p.f || '') + '</span>';
                } else {
                    v = p.f || '';
                }
                ret = ret.substr(0, k) + v + ret.substr(k);
            });
            return ret;
        }
        this.titleCompile = function(locale, html) {
            locale = locale || 'default';
            var m = this.messagePerLocale()[locale + push.C.S + 't'],
                p = this.messagePerLocale()[locale + push.C.S + 'tp'];
            // if (!m) {
            // 	m = this.messagePerLocale()['default|t'];
            // 	p = this.messagePerLocale()['default' + push.C.S + 'tp'];
            // }
            if (m && p) {
                return compile(m, p, null, html);
            } else if (!m && p && p[0] && Object.keys(p).length === 1){
                return compile('', p, null, html);
            } else {
                return m || '';
            }
        };
        this.messageCompile = function(locale, html) {
            locale = locale || 'default';
            var m = this.messagePerLocale()[locale],
                p = this.messagePerLocale()[locale + push.C.S + 'p'];
            // if (!m) {
            // 	m = this.messagePerLocale()['default'];
            // 	p = this.messagePerLocale()['default' + push.C.S + 'p'];
            // }
            if (m && p) {
                return compile(m, p, null, html);
            } else if (!m && p && p[0] && Object.keys(p).length === 1){
                return compile('', p, null, html);
            } else {
                return m || '';
            }
        };

        this.result = new push.MessageResult(data.result || {});

        this.expiryDate = m.prop(data.expiryDate);
        this.appNames = m.prop(data.appNames || []);
        this.created = m.prop(data.created);
        this.saved = m.prop(false);
        this.buttons = m.prop(data.buttons || 0);
        this.media = (function(val){
            var prop = m.prop(),
                f = function(){
                    if (arguments.length) {
                        f.valid = false;
                        prop(arguments[0]);
						
                        if (URL_REGEXP.test(prop())) {
                            f.mime = undefined;
                            f.mimeSize = undefined;
                            f.errorText = undefined;
                            f.statusErrorText = undefined;
                            f.typeWarn = undefined;
                            f.platforms = undefined;

                            push.remoteMimeInfo(prop()).then(function(resp){
                                if (resp.status >= 200 && resp.status < 300 && resp.headers && resp.headers['content-type']) {
                                    f.mime = resp.headers['content-type'];

                                    if (IMAGE_MIMES.indexOf(f.mime) !== -1) {
                                        f.type = t('pu.po.tab2.mmedia.type.image');
                                    } else if (ANIMA_MIMES.indexOf(f.mime) !== -1) {
                                        f.type = t('pu.po.tab2.mmedia.type.anima');
                                        f.typeWarn = t('pu.po.tab2.mmedia.type.warn.android');
                                        f.platforms = [push.C.PLATFORMS.IOS];
                                    } else if (VIDEO_MIMES.indexOf(f.mime) !== -1) {
                                        f.type = t('pu.po.tab2.mmedia.type.video');
                                        f.typeWarn = t('pu.po.tab2.mmedia.type.warn.android');
                                        f.platforms = [push.C.PLATFORMS.IOS];
                                    } else if (AUDIO_MIMES.indexOf(f.mime) !== -1) {
                                        f.type = t('pu.po.tab2.mmedia.type.audio');
                                        f.typeWarn = t('pu.po.tab2.mmedia.type.warn.android');
                                        f.platforms = [push.C.PLATFORMS.IOS];
                                    } else {
                                        f.errorText = t('pu.po.tab2.extras.media.invalid');
                                        f.valid = false;
                                        return;
                                    }
									
                                    var bytes = parseInt(resp.headers['content-length']);
                                    if (isNaN(bytes)) {
                                        f.mimeSize = 'n/a';
                                        f.errorText = 'Unknown size';
                                    } else if (bytes <= 1024) {
                                        f.mimeSize = '< 1Kb';
                                        f.valid = true;
                                    } else if (bytes <= 1024 * 1024) {
                                        f.mimeSize = Math.ceil(bytes / 1024) + 'Kb';
                                        f.valid = true;
                                    } else if ((AUDIO_MIMES.indexOf(f.mime) !== -1 && bytes >= 5 * 1024 * 1024) || 
											   (VIDEO_MIMES.indexOf(f.mime) !== -1 && bytes >= 50 * 1024 * 1024) ||
											   (AUDIO_MIMES.indexOf(f.mime) === -1 && VIDEO_MIMES.indexOf(f.mime) === -1 && bytes >= 10 * 1024 * 1024)) {
                                        f.mimeSize = Math.ceil(bytes / 1024 / 1024) + 'Mb';
                                        f.valid = false;
                                        f.errorText = t('pu.po.tab2.extras.media.toobig');
                                    } else {
                                        f.mimeSize = Math.ceil(bytes / 1024 / 1024) + 'Mb';
                                        f.valid = true;
                                    }
                                } else {
                                    f.mime = undefined;
                                    f.mimeSize = undefined;
                                    f.statusErrorText = t('pu.po.tab2.mmedia.status') + ' ' + resp.status;
                                }
                            }, function(err){
                                f.mime = undefined;
                                f.mimeSize = undefined;
                                f.errorText = typeof err === 'object' ? JSON.stringify(err) : err;
                            });
                        } else if (prop() === undefined) {
                            f.valid = true;
                            f.mime = undefined;
                            f.mimeSize = undefined;
                            f.errorText = undefined;
                            f.typeWarn = undefined;
                        } else {
                            f.mime = undefined;
                            f.mimeSize = undefined;
                            f.typeWarn = undefined;
                            f.errorText = t('pu.po.tab2.extras.media.invalid');
                        }
                    }
                    return prop();
                };

            f.view = function(){
                if (!prop() || !f.valid) { return ''; }
				
                if (f.mime && f.mime.indexOf('image/') === 0) {
                    return m('img.preview-message-media', {src: prop()});
                } else if (f.mime && f.mime.indexOf('audio/') === 0) {
                    return m('audio[controls]', m('source', {src: prop(), type: f.mime}));
                } else if (f.mime && f.mime.indexOf('video/') === 0) {
                    return m('video[controls]', m('source', {src: prop(), type: f.mime}));
                }
                return m('span', 'not supported media type');
            };
            if (!data._id) {
                f(val);
            } else {
                prop(val);
                f.valid = true;
            }
            return f;
        })(data.media);

        if (this.apps().length && !this.appNames().length) {
            this.appNames(this.apps().map(function(id){ return window.countlyGlobal.apps[id].name; }));
        }

        this.availablePlatforms = function() {
            var platofrms = [];
            this.apps().forEach(function(id){
                var a = window.countlyGlobal.apps[id];
                [push.C.PLATFORMS.IOS, push.C.PLATFORMS.ANDROID].forEach(function(p) {
                    if (countlyCommon.dot(a, 'plugins.push.' + p + '._id') && platofrms.indexOf(p) === -1) {
                        platofrms.push(p);
                    }
                });
            });
            return platofrms;
        };
        if (this.apps().length && !this.platforms().length) {
            this.platforms(this.availablePlatforms());
        }

        if (this.apps().length && this.platforms().length) {
            var av = this.availablePlatforms();
            this.platforms(this.platforms().filter(function(p){ return av.indexOf(p) !== -1; }));
        }

        this.ack = m.prop(false);

        this._id(data._id);
        this.locales(data.locales || []);
        this.count(data.count);
		
        this.remotePrepare = function(onFullBuild) {
            var data = new FormData();
            data.append('args', JSON.stringify(this.toJSON(true)));

            return m.request({
                method: 'POST',
                url: window.countlyCommon.API_URL + '/i/pushes/prepare?api_key=' + window.countlyGlobal.member.api_key,
                data: data,
                serialize: function(data) { return data; }
            }).then(function(data){
                this.setBuild(data);
                if (data.build && data.build.count) {
                    if (onFullBuild) { onFullBuild(); }
                } else if (this._id()) {
                    setTimeout(this.remotePrepare.bind(this, onFullBuild), 2000);
                }
            }.bind(this));
        };

        this.toJSON = function(includeId, includeOthers, clearNulls) {
            var obj = {
                apps: this.apps(),
                platforms: this.platforms(),
                userConditions: this.userConditions(),
                drillConditions: this.drillConditions(),
                geo: this.geo(),
                tz: this.tz(),
                test: this.test(),
                auto: this.auto()
            };
            if (includeId) {
                obj._id = this._id();
            }
            if (includeOthers) {
                obj.type = this.type();
                obj.messagePerLocale = this.messagePerLocale();
                obj.locales = this.locales();
                obj.sound = this.sound();
                obj.badge = this.badge();
                obj.url = this.url();
                obj.source = 'dash';
                obj.date = this.date();
                obj.buttons = parseInt(this.buttons());
                obj.media = this.media();
                obj.autoOnEntry = this.autoOnEntry();
                obj.autoCohorts = this.autoCohorts();
                obj.autoEnd = this.autoEnd();
                obj.autoDelay = this.autoDelay();
                obj.autoTime = this.autoTime();
                obj.autoCapMessages = this.autoCapMessages();
                obj.autoCapSleep = this.autoCapSleep();

                if (this.data()) {
                    obj.data = typeof this.data() === 'string' ? JSON.parse(this.data()) : this.data();
                }
            }
            if (clearNulls) {
                Object.keys(obj).forEach(function(k){
                    if (obj[k] === null) {
                        delete obj[k];
                    }
                });
            }
            return obj;
        };

        this.remoteCreate = function() {
            var data = new FormData();
            data.append('args', JSON.stringify(this.toJSON(true, true)));

            return m.request({
                method: 'POST',
                url: window.countlyCommon.API_URL + '/i/pushes/create?api_key=' + window.countlyGlobal.member.api_key,
                data: data,
                serialize: function(data) { return data; }
            }).then(function(resp){
                if (resp.error) { throw resp.error; }
                return resp;
            });
        };

        this.remoteDelete = function() {
            return m.request({
                method: 'GET',
                url: window.countlyCommon.API_URL + '/i/pushes/delete',
                data: {
                    api_key: window.countlyGlobal.member.api_key,
                    _id: this._id()
                }
            }).then(function(resp){
                if (resp.error) { throw resp.error; }
                return resp;
            });
        };

        // Clear audience built previously
        this.remoteClear = function() {
            if (this._id()) {
                return m.request({
                    method: 'GET',
                    url: window.countlyCommon.API_URL + '/i/pushes/clear',
                    data: {
                        api_key: window.countlyGlobal.member.api_key,
                        args: {
                            _id: this._id()
                        }
                    }
                });
            } else {
                return Promise.resolve();
            }
        };

        this.setBuild = function(resp) {
            if (resp) {				
                this._id(resp._id);
                if (resp.build) {
                    this.count(resp.build.total);
					
                    if (resp.build.count) {
                        var count = resp.build.count,
                            locales = [];
                        for (var l in count) {		// locale
                            var ll = locales.filter(function(loc){ return loc.value === l; });
                            if (ll.length) {
                                ll[0].count += count[l];
                            } else {
                                var title = l === 'default' ? 'Default' : l === 'null' ? t('pu.locale.null') : window.countlyGlobalLang.languages[l] ? window.countlyGlobalLang.languages[l].englishName : l;
                                locales.push({value: l, title: title, count: count[l]});
                            }
                        }
                        var sum = 0;
                        locales.forEach(function(l){ sum += l.count; });
                        locales.sort(function(a, b){ return b.count - a.count; });
                        locales.unshift({value: 'default', title: t('pu.locale.default'), count: sum});
                        locales.forEach(function(l){ l.percent = Math.round(l.count / sum * 100); });

                        this.locales(locales);
                    } else if (!this.locales().length) {
                        this.locales([{value: 'default', title: t('pu.locale.default'), percent: 100}]);
                    }
                }
            } else {
                this._id(undefined);
                this.count(0);
                this.locales([]);
            }
        };

        this.date = m.prop(typeof data.date === 'string' ? new Date(data.date) : data.date || undefined);
        this.tz = buildClearingProp(typeof data.tz === 'undefined' ? false : data.tz);
        this.created = m.prop(data.created || null);
        this.sent = m.prop(data.sent || null);
        this.dates = function() {
            var dates = {
			    created: moment(this.created()).format('D MMM, YYYY HH:mm'),
			    createdSeconds: moment(this.created()).unix()
            };

            if (this.date()) {
			    dates.date = moment(this.date()).format('D MMM, YYYY HH:mm');
			    dates.dateSeconds = moment(this.date()).unix();
            }
            if (this.sent() && !this.result.isSending()) {
			    dates.sent = moment(this.sent()).format('D MMM, YYYY HH:mm');
			    dates.dateSeconds = moment(this.sent()).unix();
            }

            return dates;
        };
        this.createdSeconds = function() {
            return this.dateDate() ? new Date(this.dateDate()).getTime() : null;
        };
        this.createdSeconds = function() {
            return this.date() ? new Date(this.date()).getTime() : null;
        };

        this.remoteActive = function(active) {
            var self = this;
            return m.request({
                method: 'GET',
                url: window.countlyCommon.API_URL + '/i/pushes/active',
                data: {
                    api_key: window.countlyGlobal.member.api_key,
                    _id: this._id(),
                    active: active
                }
            }).then(function(resp){
                if (resp.error) { throw resp.error; }
                self.result.status(resp.result.status);
                return resp;
            });
        };

        this.remoteLoad = function() {
            return m.request({
                method: 'GET',
                url: window.countlyCommon.API_URL + '/i/pushes/message',
                data: {
                    api_key: window.countlyGlobal.member.api_key,
                    args: JSON.stringify({
                        _id: this._id(),
                        apps: this.apps()
                    })
                }
            }).then(function(resp){
                this.result.events(resp.result.events);
                return resp;
            }.bind(this));
        };
    };

    push.MessageResult = function(data) {
        this.status = m.prop(data.status || 0);
        this.total = m.prop(data.total || data.found || 0);
        this.processed = m.prop(data.processed || 0);
        this.sent = m.prop(data.sent || 0);
        this.errors = m.prop(data.errors || 0);
        this.resourceErrors = m.prop(data.resourceErrors || []);
        this.actioned = m.prop(data.actioned || 0);
        this.actioned0 = m.prop(data['actioned' + push.C.S + '0'] || 0);
        this.actioned1 = m.prop(data['actioned' + push.C.S + '1'] || 0);
        this.actioned2 = m.prop(data['actioned' + push.C.S + '2'] || 0);
        this.error = m.prop(data.error);
        this.errorCodes = m.prop(data.errorCodes);
        this.nextbatch = m.prop(data.nextbatch);
        this.events = m.prop(data.events || {});

        if (this.actioned() > this.sent()) {
            this.actioned(this.sent());
        }

        if (this.actioned0() > this.actioned()) {
            this.actioned0(this.actioned());
        }

        if (this.actioned0() + this.actioned1() + this.actioned2() > this.actioned()) {
            this.actioned1(0);
            this.actioned2(0);
        }
		
        if (this.errorCodes()) {
            var ec = this.errorCodes(),
                keys = Object.keys(ec).filter(function(k){ return ec[k] > 0; });
            if (keys.length === 0) {
                this.errorCodes(undefined);
            } else {
                var filtered = {};
                keys.forEach(function(k){
                    if (ec[k]) {
                        filtered[k] = ec[k];
                    }
                });
                this.errorCodes(ec);
            }
        }

        this.percentSent = function() {
            return this.total() === 0 ? 0 : Math.min(100, +(100 * this.sent() / (this.total() - (this.processed() - this.sent()))).toFixed(2));
        };

        this.isSending = function() {
            return (this.status() & push.S.Sending) > 0;
        };

        this.isInitial = function() {
            return this.status() === push.S.NotCreated;
        };

        this.isCreated = function() {
            return (this.status() & push.S.Created) > 0;
        };

        this.isScheduled = function() {
            return (this.status() & push.S.Scheduled) > 0;
        };

        this.isAborted = function() {
            return (this.status() & push.S.Aborted) > 0;
        };

        this.isDone = function() {
            return (this.status() & push.S.Done) > 0;
        };

        this.statusString = function() {
            if (this.isSending()) {
                if (this.error) {
                    return t('push.message.status.sending-errors');
                } else {
                    return t('push.message.status.sending');
                }
            } else if (this.isAborted()) {
                return t('push.message.status.aborted');
            } else if (this.isDone()) {
                if (this.error()) {
                    return t('push.message.status.sent-errors');
                } else {
                    return t('push.message.status.sent');
                }
            } else if (this.isScheduled()) {
                return t('push.message.status.scheduled');
            } else if (this.isCreated()) {
                return t('push.message.status.created');
            } else if (this.isInitial()) {
                return t('push.message.status.initial');
            } else {
                return this.status() + '';
            }
        };

        this.errorFixed = function() {
            if (this.error() === 'Process exited') {
                return (this.status() & (1 << 4)) ? 'exited' :  'exited-sent';
            }
            return this.error();
        };
    };

    push.remoteDashboard = function(appId, refresh) {
        if (!push.dashboard || push.dashboard.app_id !== appId || refresh) {
            return m.request({
                method: 'GET',
                url: window.countlyCommon.API_URL + '/i/pushes/dashboard',
                data: {
                    api_key: window.countlyGlobal.member.api_key,
                    app_id: appId
                }
            }).then(function(data){
                data.app_id = appId;
                push.dashboard = data;
                return data;
            });
        } else {
            var deferred = m.deferred();
            setTimeout(function(){
                m.startComputation();
                deferred.resolve(push.dashboard);
                m.endComputation();
            });
            return deferred.promise;
        }
    };

    push.remoteValidate = function(platform, type, key, secret) {
        var data = new FormData();
        data.append('platform', platform);
        data.append('type', type);
        data.append('key', key);
        data.append('secret', secret);

        return m.request({
            method: 'POST',
            url: window.countlyCommon.API_URL + '/i/pushes/validate?api_key=' + window.countlyGlobal.member.api_key,
            data: data,
            serialize: function(data) { return data; }
        }).then(function(data){
            if (data.error) { throw data.error; }
            return data;
        });
    };

    push.remoteMimeInfo = function(url) {
        return m.request({
            method: 'GET',
            url: window.countlyCommon.API_URL + '/i/pushes/mime',
            data: {
                api_key: window.countlyGlobal.member.api_key,
                url: url
            }
        });
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m, moment, vprop, countlyCommon, $ */

window.component('push.popup', function (popup) {
    var C = window.components,
        CC = window.countlyCommon,
        CG = window.countlyGlobal,
        t = C.t,
        push = C.push,
        PERS_PROPS;

    popup.show = function (prefilled, duplicate) {
        if (!push.dashboard) {
            return push.remoteDashboard(countlyCommon.ACTIVE_APP_ID).then(function () {
                popup.show(prefilled, duplicate);
            });
        }
        m.startComputation();
        var message = new push.Message(prefilled || {});
        if (!duplicate) {
            message.sound('default');
            if (message.auto()) {
                message.autoOnEntry(true);
                message.autoCapMessages(2);
                message.autoCapSleep(1000 * 3600 * 24);
            }
        }

        if (message.platforms().length && message.apps().length) {
            var found = false;
            message.platforms().forEach(function (p) {
                message.apps().forEach(function (a) {
                    if (CC.dot(CG.apps[a], 'plugins.push.' + p + '._id')) {
                        found = true;
                    }
                });
            });

            if (!found) {
                m.endComputation();
                return window.CountlyHelpers.alert(t('push.error.no-credentials'), 'red');
            }
        }

        if (message.auto() && (!push.dashboard.cohorts || !push.dashboard.cohorts.length)) {
            m.endComputation();
            return window.CountlyHelpers.alert(t('push.error.no-cohorts'), 'red');
        }

        push.popup.slider = C.slider.show({
            key: 'meow',
            title: function () {
                var els = [
                    t('pu.po.title')
                ];
                return m('h3', els);
            },
            desc: message.auto() ? t('pu.po.desc').replace('4', '5') : t('pu.po.desc'),
            // onclose: function() {
            //  console.log('slider closed');
            // },
            component: C.push.popup,
            componentOpts: message,
            loadingTitle: function () {
                return message.count() ? message.saved() ? t('pu.po.sent') : t('pu.po.sending') : t('pu.po.loading');
            },
            loadingDesc: function () {
                return message.count() ? message.saved() ? t('pu.po.sent-desc') : t('pu.po.sending-desc') : t('pu.po.loading-desc');
            },
        });
        m.endComputation();
    };

    popup.controller = function (message) {
        var popup = this, apps = [], cohorts = [];

        if (message.auto()) {
            cohorts = push.dashboard.cohorts.map(function (cohort) {
                return new C.selector.Option({ value: cohort._id, title: cohort.name, selected: false });
            }); 
        }

        // t.set('pu.po.tab1.title', t('pu.po.tab1.title' + !!window.countlyGeo));

        this.message = message;
        this.renderTab = function (i, active) {
            var tab;
            if ((message.auto() && i <= 2) || (!message.auto() && i <= 1)) {
                tab = 'tab' + i;
            } else {
                if ((message.auto() && i === 3) || (!message.auto() && i === 2)) {
                    tab = 'compose';
                } else if ((message.auto() && i === 4) || (!message.auto() && i === 3)) {
                    tab = 'review';
                }
            }

            return m('.comp-push-tab', { class: active && !popup.warnNoUsers() ? 'active' : '' }, [
                popup.warnNoUsers() ?
                    i < 2 ? push.ICON.WARN('comp-push-tab-warn') : m('.comp-push-tab-num', i + 1)
                    // i < 2 ? m('svg.comp-push-tab-warn[width=21][height=18]', m('path[fill="#FF9E43"][d="M20,18c0.6,0,0.8-0.4,0.5-0.9L11,0.9c-0.3-0.5-0.7-0.5-1,0L0.5,17.1C0.2,17.6,0.4,18,1,18H20zM10,13h2v2h-2V13z M10,8h2v4h-2V8z"]')) : m('.comp-push-tab-num', i + 1)
                    : i < this.tabs.tab() ? m('.comp-push-tab-num.ion-checkmark') : m('.comp-push-tab-num', i + 1),
                m('.comp-push-tab-title', t('pu.po.' + tab + '.title' + (message.auto() ? '.auto' : ''), t('pu.po.' + tab + '.title'))),
                m('.comp-push-tab-desc', t('pu.po.' + tab + '.desc' + (message.auto() ? '.auto' : ''), t('pu.po.' + tab + '.desc')))
            ]);
        };

        for (var k in CG.apps) {
            var a = CG.apps[k];
            if (CC.dot(a, 'plugins.push.i._id') || CC.dot(a, 'plugins.push.a._id')) {
                apps.push(new C.selector.Option({ value: a._id, title: a.name, selected: message.apps().indexOf(a._id) !== -1 }));
            }
        }

        this.previewPlatform = m.prop(message.platforms() && message.platforms().length ? message.platforms()[0] : push.C.PLATFORMS.IOS);
        this.warnNoUsers = m.prop(false);

        this.tabenabled = function (tab) {
            if (this.tabs.tab() >= tab) {
                return true;
            }

            var enabled = true;
            if ((message.auto() && tab >= 4) || (!message.auto() && tab >= 3)) {
                if (message.type() === push.C.TYPE.MESSAGE) {
                    enabled = enabled && message.messagePerLocale().default;
                } else if (message.type() === push.C.TYPE.DATA) {
                    enabled = enabled && message.data.valid;
                }
                if ((message.sound() !== undefined && !message.sound.valid) ||
                    (message.badge() !== undefined && !message.badge.valid) ||
                    (message.url() !== undefined && !message.url.valid) ||
                    (message.media() !== undefined && !message.media.valid) ||
                    (message.buttons() > 0 && (!message.messagePerLocale()['default' + push.C.S + '0' + push.C.S + 't'] || !message.messagePerLocale()['default' + push.C.S + '0' + push.C.S + 'l'] || !push.URL_REGEXP.test(message.messagePerLocale()['default' + push.C.S + '0' + push.C.S + 'l']))) ||
                    (message.buttons() > 1 && (!message.messagePerLocale()['default' + push.C.S + '1' + push.C.S + 't'] || !message.messagePerLocale()['default' + push.C.S + '1' + push.C.S + 'l'] || !push.URL_REGEXP.test(message.messagePerLocale()['default' + push.C.S + '1' + push.C.S + 'l']))) ||
                    (message.data() !== undefined && !message.data.valid)) {
                    enabled = false;
                }
            }
            if (enabled && message.auto() && tab >= 3) {
                if (message.autoDelay() === null ||
                    message.autoTime() === null ||
                    message.autoCapMessages() === null || 
                    message.autoCapSleep() === null) {
                    enabled = false;
                }
            }
            if (enabled && !message.auto() && tab >= 2) {
                if (message.date() === null) {
                    enabled = enabled && !!message.date();
                }
            }
            if (enabled && message.auto() && tab >= 2) {
                if ((message.autoCohorts().length === 0) ||
                    message.date() === null ||
                    message.autoEnd() === null) {
                    enabled = false;
                }
            }
            if (enabled) {
                enabled = enabled && message.platforms().length && message.apps().length;
            }

            return enabled;
        }.bind(this);

        this.checkForNoUsers = function (final) {
            if (!message.count()) {
                this.warnNoUsers(true);

                var swtch = function (tab, ev) {
                    ev.preventDefault();
                    this.tabs.customComponent = null;
                    this.warnNoUsers(false);
                    popup.tabs.set(tab);
                };
                this.tabs.customComponent = {
                    view: function () {
                        return m('.comp-push-no-users', [
                            m('.comp-push-no-users-zero', '0'),
                            m('.comp-push-no-users-text', [
                                t('pu.po.no-users'),
                                m('br'),
                                t('pu.po.no-users-try-change') + ' ',
                                m('a[href=#]', { onclick: swtch.bind(popup, 0) }, t('pu.po.no-users-try-change-apps') + '.'),
                                m('br'),
                                m('a.btn-next[href=#]', { onclick: swtch.bind(popup, 0) }, t('pu.po.no-users-start-over'))
                            ])
                        ]);
                    }
                };
            } else if (this.warnNoUsers()) {
                this.tabs.customComponent = null;
                this.warnNoUsers(false);
                popup.tabs.set(2);
            }

            if (final === true && localesController) {
                localesController.relocale();
            }
        };

        this.next = function (ev, tab) {
            if (ev) { ev.preventDefault(); }

            tab = typeof tab === 'undefined' ? this.tabs.tab() + 1 : tab;
            if (this.tabenabled(tab)) {
                // if (!message.auto() && tab >= 2) {
                //  if (!message.schedule() && (message.date() !== undefined || message.tz() !== false)) {
                //      message.date(undefined);
                //      message.tz(false);
                //  }
                // }
                if (((message.auto() && tab >= 3) || (!message.auto() && tab >= 2)) && !message.count()) {
                    C.slider.instance.loading(true);
                    message.remotePrepare(this.checkForNoUsers.bind(this, true)).then(function () {
                        setTimeout(function () {
                            m.startComputation();
                            C.slider.instance.loading(false);
                            this.checkForNoUsers();
                            if (message.count() && this.tabenabled(tab)) {
                                popup.tabs.set(tab);
                            }
                            m.endComputation();
                        }.bind(this), 400);
                    }.bind(this), C.slider.instance.loading.bind(C.slider.instance, false));
                } else {
                    this.tabs.customComponent = null;
                    this.warnNoUsers(false);
                    popup.tabs.set(tab);
                }

                C.slider.instance.onresize();
            }
        }.bind(this);

        this.prev = function (ev) {
            ev.preventDefault();
            if (this.tabs.tab() > 0) {
                this.tabs.set(popup.tabs.tab() - 1);
                C.slider.instance.onresize();
            }
        }.bind(this);

        this.send = function (ev) {
            ev.preventDefault();
            if (!message.ack()) { return; }
            C.slider.instance.loading(true);
            message.remoteCreate().then(function () {
                message.saved(true);

                setTimeout(function () {
                    m.startComputation();
                    C.slider.instance.close();
                    if (window.app.activeView.mounted) {
                        window.app.activeView.mounted.refresh();
                    }

                    m.endComputation();
                }, 1000);
            }, function (error) {
                C.slider.instance.loading(false);
                window.alert(error.error || error.result || error);
            });
            // setTimeout(function(){
            //  m.startComputation();
            //  message.saved(true);
            //  m.endComputation();

            //  setTimeout(function(){
            //      m.startComputation();
            //      C.slider.instance.loading(false);
            //      m.endComputation();
            //  }, 1000);
            // }, 1000);

        }.bind(this);

        var activeLocale = m.prop('default'), localesController, htmlTitles = {}, htmlMessages = {},
            messageTitleHTML = function (locale) {
                if (arguments.length > 1) {
                    htmlTitles[locale] = arguments[1];
                }
                return htmlTitles[locale];
            },
            messageMessageHTML = function (locale) {
                if (arguments.length > 1) {
                    htmlMessages[locale] = arguments[1];
                }
                return htmlMessages[locale];
            };

        function buttonTitle(index, key, locale) {
            var k = (locale || activeLocale()) + (index === undefined ? (push.C.S + key) : (push.C.S + index + push.C.S + key));

            return vprop(message.messagePerLocale()[k] || (index === undefined ? undefined : key === 't' && (locale || activeLocale()) === 'default' ? t('pu.po.tab2.mbtn.' + (index + 1)) : undefined), function (v) {
                return !!v;
            }, t('pu.po.tab2.mbtn.req'), function (v) {
                k = (locale || activeLocale()) + (index === undefined ? (push.C.S + key) : (push.C.S + index + push.C.S + key));

                if (arguments.length) {
                    message.messagePerLocale()[k] = v;
                }

                return message.messagePerLocale()[k];
            });
        }

        var locales = {
            controller: function () {
                var self = this;

                this.text = m.prop();
                this.ontab = function (tab) {
                    activeLocale(this.locales[tab].value);
                    this.text(message.messagePerLocale()[this.locales[tab].value]);
                }.bind(this);
                this.ontext = function (text) {
                    this.text(text);
                    if (text) {
                        message.messagePerLocale()[this.locales[this.tabs.tab()].value] = text;
                    } else {
                        delete message.messagePerLocale()[this.locales[this.tabs.tab()].value];
                    }
                }.bind(this);

                this.relocale = function () {
                    this.locales = message.locales().map(function (l, i) {
                        l = Object.assign({}, l);
                        l.key = 'tab' + l.value;
                        l.messageTitle = buttonTitle(undefined, 't', l.value);
                        l.messageTitlePers = function(){
                            if (arguments.length) {
                                message.messagePerLocale()[l.value + push.C.S + 'tp'] = arguments[0];
                            }
                            return message.messagePerLocale()[l.value + push.C.S + 'tp'];
                        };
                        l.messageMessage = function () {
                            if (arguments.length) {
                                if (arguments[0]) {
                                    message.messagePerLocale()[l.value] = arguments[0];
                                } else {
                                    delete message.messagePerLocale()[l.value];
                                }
                            }
                            return message.messagePerLocale()[l.value];
                        };
                        l.messageMessagePers = function(){
                            if (arguments.length) {
                                message.messagePerLocale()[l.value + push.C.S + 'p'] = arguments[0];
                            }
                            return message.messagePerLocale()[l.value + push.C.S + 'p'];
                        };
                        l.buttonTitle0 = buttonTitle(0, 't', l.value);
                        l.buttonTitle1 = buttonTitle(1, 't', l.value);
                        l.buttonUrl0 = buttonTitle(0, 'l', l.value);
                        l.buttonUrl1 = buttonTitle(1, 'l', l.value);

                        var filters = window.countlySegmentation ? window.countlySegmentation.getFilters() : [],
                            props = filters.filter(function(f){return f.id && f.id.indexOf('up.') === 0;}).map(function(f){ return new C.selector.Option({value: f.id.substr(3), title: f.name}); }),
                            custom = filters.filter(function(f){return f.id && f.id.indexOf('custom.') === 0;}).map(function(f){ return new C.selector.Option({value: f.id.substr(7), title: f.name}); }),
                            opts = (props.length ? [new C.selector.Option({title: t('pu.po.tab2.props')})] : [])
                                .concat(props)
                                .concat(custom.length ? [new C.selector.Option({title: t('pu.po.tab2.cust')})] : [])
                                .concat(custom);

                        // opts = [];
                        PERS_PROPS = opts;
                        
                        l.titleCtrl = new C.emoji.controller({
                            key: 't' + l.value, 
                            value: l.messageTitle, 
                            valueHTML: messageTitleHTML.bind(null, l.value), 
                            valuePers: l.messageTitlePers, 
                            valueCompiled: message.titleCompile.bind(message, l.value, true), 
                            placeholder: function () { return l.value === 'default' ? t('pu.po.tab2.mtitle.placeholder') : messageTitleHTML('default') || t('pu.po.tab2.mtitle.placeholder'); },
                            persOpts: opts.length ? opts : undefined
                        });
                        l.messageCtrl = new C.emoji.controller({
                            key: 'm' + l.value, 
                            value: l.messageMessage, 
                            valueHTML: messageMessageHTML.bind(null, l.value), 
                            valuePers: l.messageMessagePers, 
                            valueCompiled: message.messageCompile.bind(message, l.value, true), 
                            textarea: true, 
                            placeholder: function () { return l.value === 'default' ? t('pu.po.tab2.placeholder') : messageMessageHTML('default') || t('pu.po.tab2.placeholder'); },
                            persOpts: opts.length ? opts : undefined
                        });

                        l.btn0t = new C.input.controller({ value: l.buttonTitle0, placeholder: function () { return l.value === 'default' ? t('pu.po.tab2.btntext') : message.messagePerLocale()['default' + push.C.S + '0' + push.C.S + 't']; } });
                        l.btn1t = new C.input.controller({ value: l.buttonTitle1, placeholder: function () { return l.value === 'default' ? t('pu.po.tab2.btntext') : message.messagePerLocale()['default' + push.C.S + '1' + push.C.S + 't']; } });

                        l.btn0l = new C.input.controller({ value: l.buttonUrl0, placeholder: function () { return l.value === 'default' ? t('pu.po.tab2.urlordeep') : message.messagePerLocale()['default' + push.C.S + '0' + push.C.S + 'l']; } });
                        l.btn1l = new C.input.controller({ value: l.buttonUrl1, placeholder: function () { return l.value === 'default' ? t('pu.po.tab2.urlordeep') : message.messagePerLocale()['default' + push.C.S + '1' + push.C.S + 'l']; } });

                        l.tab = function () {
                            var checkmark;
                            if (l.value === 'default') {
                                var error = '';
                                if (!l.messageMessage()) {
                                    error = 'pu.po.tab2.default-message.invalid';
                                } else if (message.buttons() > 0 && !message.messagePerLocale()['default' + push.C.S + '0' + push.C.S + 't']) {
                                    error = 'pu.po.tab2.default-button-title.invalid';
                                } else if (message.buttons() > 0 && (!message.messagePerLocale()['default' + push.C.S + '0' + push.C.S + 'l'] || !push.URL_REGEXP.test(message.messagePerLocale()['default' + push.C.S + '0' + push.C.S + 'l']))) {
                                    error = 'pu.po.tab2.default-button-link.invalid';
                                } else if (message.buttons() > 1 && !message.messagePerLocale()['default' + push.C.S + '1' + push.C.S + 't']) {
                                    error = 'pu.po.tab2.default-button-title.invalid';
                                } else if (message.buttons() > 1 && (!message.messagePerLocale()['default' + push.C.S + '1' + push.C.S + 'l'] || !push.URL_REGEXP.test(message.messagePerLocale()['default' + push.C.S + '1' + push.C.S + 'l']))) {
                                    error = 'pu.po.tab2.default-button-link.invalid';
                                }
                                var config = C.tooltip.config(t(error));
                                config.key = error;
                                config.appendToBody = true;
                                checkmark = !error ? m('span.ion-checkmark') : m('.error', C.tooltip.config(t(error)), push.ICON.WARN());
                            } else {
                                var found = false, mpl = message.messagePerLocale();
                                [l.value, l.value + push.C.S + 't', l.value + push.C.S + '0' + push.C.S + 't', l.value + push.C.S + '0' + push.C.S + 'l', l.value + push.C.S + '1' + push.C.S + 't', l.value + push.C.S + '1' + push.C.S + 'l'].forEach(function (k) {
                                    if (mpl[k]) { found = true; }
                                });
                                checkmark = found ? m('span.ion-checkmark') : '';
                            }
                            return m('div', { class: self.tabs.tab() === i ? 'active' : '' }, [
                                // message.locales()[l] ? m('.comp-push-tab-num.ion-checkmark') : 
                                m('span.comp-push-locale-count',
                                    l.value === 'default' ?
                                        m('.help-tt', m('span.ion-information-circled', C.tooltip.config(t('pu.po.tab2.default-message.help'))))
                                        : (l.percent + '%')
                                ),
                                m('span.comp-push-locale-title', l.title),
                                checkmark
                            ]);
                        };
                        l.view = function () {
                            return m('div', { key: 'locale-' + l.value }, [
                                m('.emoji', [
                                    m('h6', t('pu.po.tab2.mtitle')),
                                    C.emoji.view(l.titleCtrl)
                                ]),
                                m('.emoji', [
                                    m('h6', t('pu.po.tab2.mtext')),
                                    C.emoji.view(l.messageCtrl)
                                ]),
                                message.buttons() > 0 ?
                                    m('div', [
                                        m('h6', t('pu.po.tab2.mbtn')),
                                        message.buttons() > 0 ?
                                            m('.custom-button', [
                                                m('h6', '#1'),
                                                m('div', [
                                                    C.input.view(l.btn0t),
                                                    l.buttonTitle0() && !l.buttonTitle0.valid ?
                                                        m('.error', C.tooltip.config(t('pu.po.tab2.mbtn.req')), push.ICON.WARN())
                                                        : '',
                                                ]),
                                                m('div', [
                                                    C.input.view(l.btn0l),
                                                    l.buttonUrl0() && !l.buttonUrl0.valid ?
                                                        m('.error', C.tooltip.config(t('pu.po.tab2.mbtn.url')), push.ICON.WARN())
                                                        : ''
                                                ])
                                            ])
                                            : '',
                                        message.buttons() > 1 ?
                                            m('.custom-button', [
                                                m('h6', '#2'),
                                                m('div', [
                                                    C.input.view(l.btn1t),
                                                    l.buttonTitle1() && !l.buttonTitle1.valid ?
                                                        m('.error', C.tooltip.config(t('pu.po.tab2.mbtn.req')), push.ICON.WARN())
                                                        : '',
                                                ]),
                                                m('div', [
                                                    C.input.view(l.btn1l),
                                                    l.buttonUrl1() && !l.buttonUrl1.valid ?
                                                        m('.error', C.tooltip.config(t('pu.po.tab2.mbtn.url')), push.ICON.WARN())
                                                        : ''
                                                ])
                                            ])
                                            : '',
                                    ])
                                    : '',
                            ]);
                        };
                        return l;
                    });
                    this.tabs = new C.tabs.controller(this.locales, { ontab: this.ontab });
                };
                this.relocale();
                this.ontab(0);
            },
            view: function (ctrl) {
                return m('.comp-push-locales', { class: 'buttons-' + message.buttons() }, [
                    C.tabs.view(ctrl.tabs),
                ]);
            },
        };

        var extra = {
            controller: function (opts) {
                this.title = opts.title;
                this.titlePlaceholder = opts.titlePlaceholder;
                this.value = opts.value;
                this.valuePlaceholder = opts.valuePlaceholder;
                this.typ = opts.typ || 'text';
                this.help = opts.help;
                this.textarea = opts.textarea;
                this.oncheck = function (ev) {
                    if (ev && ev instanceof MouseEvent && ev.target.tagName.toLowerCase() === 'input') {
                        return true;
                    }
                    this.value(this.value() !== undefined ? undefined : (typeof opts.def === 'undefined' ? '' : opts.def));
                    return true;
                }.bind(this);
                this.onchange = function (val) {
                    if (opts.converter) {
                        var v = opts.converter(val);
                        if (v !== null) {
                            this.value(v);
                        } else {
                            this.value(undefined);
                        }
                    }
                }.bind(this);
            },

            view: function (ctrl) {
                var check = {
                    onchange: ctrl.oncheck
                };
                if (ctrl.value() !== undefined) { check.checked = 'checked'; }

                var inp = {
                    value: ctrl.value() === undefined ? '' : ctrl.value(),
                    oninput: m.withAttr('value', ctrl.value),
                    onchange: m.withAttr('value', ctrl.onchange),
                    placeholder: ctrl.value() !== undefined ? ctrl.valuePlaceholder || '' : ''
                };
                if (ctrl.value() === undefined) { inp.disabled = 'disabled'; }

                return m('.comp-push-extra', { class: !ctrl.textarea || ctrl.value() === undefined ? '' : 'expanded' }, [
                    m('.comp-push-extra-check', { onclick: ctrl.oncheck }, [
                        m('input[type=checkbox]', check),
                        m('label', typeof ctrl.title === 'string' ?
                            ctrl.title :
                            [
                                m('input', { onclick: function () { ctrl.value(ctrl.value() || ''); }, oninput: m.withAttr('value', ctrl.title), placeholder: ctrl.titlePlaceholder }, ctrl.title() || ''),
                                ctrl.title() !== undefined && !ctrl.title.valid ?
                                    m('.error', C.tooltip.config(ctrl.title.errorText), push.ICON.WARN())
                                    : ''
                            ]
                        ),
                        ctrl.help ? m('.help-tt', C.tooltip.config(ctrl.help), m('span.ion-information-circled')) : ''
                    ]),
                    m('.comp-push-extra-value', {
                        class: ctrl.value() === undefined ? '' : 'active', onclick: function () {
                            if (ctrl.value() === undefined) { ctrl.oncheck(); }
                        }
                    }, [
                        m(ctrl.textarea ? 'textarea' : 'input[type=' + ctrl.typ + ']', inp),
                        ctrl.value() !== undefined && !ctrl.value.valid ?
                            m('.error', C.tooltip.config(ctrl.value.errorText), push.ICON.WARN())
                            : ''
                    ])
                ]);
            }
        };

        var tabs = [
            // Apps & Platforms
            {
                tab: this.renderTab.bind(this, 0),
                controller: function () {
                    // this.appsSelector = new C.multiselect.controller({
                    //  options: apps,
                    //  value: function () {
                    //      if (arguments.length) {
                    //          var selectedApps = apps.filter(function (o) { return o.selected(); });

                    //          message.apps(selectedApps.map(function (o) { return o.value(); }));
                    //          message.appNames(selectedApps.map(function (o) { return o.title(); }));

                    //          if (!message.apps().length) {
                    //              message.platforms([]);
                    //          } else {
                    //              message.platforms(message.availablePlatforms());
                    //          }
                    //      }
                            
                    //      return apps;
                    //  }
                    // });

                    this.onplatform = function (p, ev) {
                        if (ev instanceof MouseEvent && ev.target.tagName.toLowerCase() === 'input') {
                            return true;
                        }
                        var i = message.platforms().indexOf(p);
                        if (i === -1) {
                            message.platforms(message.platforms().concat([p]));
                        } else {
                            message.platforms(message.platforms().filter(function (pl) { return pl !== p; }));
                        }
                        popup.previewPlatform(message.platforms()[0]);
                        return true;
                    };

                    this.selectGeos = new C.singleselect.controller({
                        options: [{ value: undefined, title: t('pu.po.tab1.geos.no') }].concat(push.dashboard.geos.map(function (geo) {
                            return { value: geo._id, title: geo.title };
                        })),
                        value: message.geo
                    });

                    this.radioTest = new C.radio.controller({
                        options: [
                            { value: false, title: t('pu.po.tab1.testing-prod') },
                            { value: true, title: t('pu.po.tab1.testing-test'), desc: t('pu.po.tab1.testing-test-desc') }
                        ], value: message.test
                    });
                },

                view: function (ctrl) {
                    var platforms = message.availablePlatforms();
                    return m('.comp-push-tab-content', [
                        m('.comp-panel', [
                            // message.auto() ? '' : m('.form-group', [
                            //  m('h4', t('pu.po.tab0.select-apps')),
                            //  C.multiselect.view(ctrl.appsSelector),
                            //  // C.tagselector.view(ctrl.appsSelector),
                            //  m('.desc', t('pu.po.tab0.select-apps-desc'))
                            // ]),
                            m('.form-group', [
                                m('h4', t('pu.po.tab0.select-platforms')),
                                !platforms.length ? m('.help.pulsating', t('pu.po.tab0.select-platforms-no')) : platforms.map(function (p) {
                                    var o = { value: p, onchange: ctrl.onplatform.bind(ctrl, p) };
                                    if (message.platforms().indexOf(p) !== -1) {
                                        o.checked = 'checked';
                                    }

                                    return m('.comp-push', { onclick: ctrl.onplatform.bind(ctrl, p) }, [
                                        m('input[type="checkbox"]', o),
                                        m('label', t('pu.platform.' + p))
                                    ]);
                                })
                            ]),
                            !message.auto() && push.dashboard.geos && push.dashboard.geos.length ?
                                m('.form-group', [
                                    m('h4', t('pu.po.tab1.geos')),
                                    C.singleselect.view(ctrl.selectGeos),
                                    m('.desc', t('pu.po.tab1.geos-desc')),
                                ])
                                : '',
                            m('.form-group', [
                                m('h4', t('pu.po.tab1.testing')),
                                C.radio.view(ctrl.radioTest),
                                m('.desc', t('pu.po.tab1.testing-desc')),
                            ]),
                            m('.btns', {key: 'btns'}, [
                                m('a.btn-next', { href: '#', onclick: popup.next, disabled: popup.tabenabled(1) ? false : 'disabled' }, t('pu.po.next')),
                                m('a.btn-prev', { href: '#', onclick: function (ev) { C.slider.instance.close(ev); } }, t('pu.po.close'))
                            ])
                        ])

                    ]);
                }
            }
        ];

        if (message.auto()) {
            // Campaign Rules
            tabs.push({
                tab: this.renderTab.bind(this, 1),
                controller: function () {
                    this.selectCohorts = new C.multiselect.controller({
                        placeholder: t('pu.po.tab1.select-cohort-placeholder'),
                        options: cohorts,
                        value: function () {
                            if (arguments.length) {
                                message.autoCohorts(cohorts.filter(function (o) { return o.selected(); }).map(function(o){ return o.value(); }));
                            }
                            return cohorts;
                        }
                    });
                    this.radioType = new C.radio.controller({
                        options: [
                            { value: true, title: t('pu.po.tab1.trigger-type.entry'), desc: t('pu.po.tab1.cohort-entry-desc') },
                            { value: false, title: t('pu.po.tab1.trigger-type.exit'), desc: t('pu.po.tab1.cohort-exit-desc') }
                        ], value: message.autoOnEntry
                    });

                    this.radioStartDate = new C.radio.controller({
                        options: [
                            { value: false, title: t('pu.po.tab1.scheduling-auto-now') },
                            {
                                value: true, title: t('pu.po.tab1.scheduling-date'), view: function () {
                                    if (!this.datepicker) {
                                        var d = new Date();
                                        d.setHours(d.getHours() + 1);
                                        d.setMinutes(0);
                                        d.setSeconds(0);
                                        d.setMilliseconds(0);
                                        this.datepicker = C.datepicker.controller({ value: message.date, defaultDate: d, position: 'top', id: 'campaign-start-date' });
                                    }
                                    return m('.comp-grid-cell', C.datepicker.view(this.datepicker));
                                }.bind(this)
                            },

                        ], value: function (v) {
                            if (arguments.length) {
                                if (v && message.date() === undefined) {
                                    message.date(null);
                                    this.datepicker.open(true);
                                } else if (!v) {
                                    message.date(undefined);
                                    this.datepicker.open(false);
                                }
                            }
                            return message.date() !== undefined;
                        }.bind(this)
                    });

                    var d = new Date();
                    d.setHours(d.getHours() + 1);
                    d.setMinutes(0);
                    d.setSeconds(0);
                    d.setMilliseconds(0);
                    this.dateAutoEnd = new C.datepicker.controller({
                        position: 'top',
                        id: 'campaign-end-date',
                        defaultDate: d, 
                        value: message.autoEnd,
                        onclick: function() { 
                            if (message.autoEnd() === undefined) {
                                message.autoEnd(null);
                            }
                        },
                    });

                    this.checkAutoEnd = new C.checkbox.controller({
                        class: 'comp-grid-row',
                        group: 'comp-grid-cell',
                        title: t('pu.po.tab1.campaign-end-date'),
                        undeNullValue: message.autoEnd,
                        undeNullOnChange: function(value){
                            if (value === null) {
                                this.dateAutoEnd.open(true);
                            } else if (value === undefined) {
                                this.dateAutoEnd.open(false);
                            }
                        }.bind(this),
                        view: C.datepicker.view.bind(null, this.dateAutoEnd)
                    });
                },
                view: function (ctrl) {
                    return m('.comp-push-tab-content',
                        m('.comp-panel', [
                            m('.form-group', [
                                m('h4', t('pu.po.tab1.trigger-type')),
                                C.radio.view(ctrl.radioType)
                            ]),
                            m('.form-group', [
                                m('h4', t('pu.po.tab1.select-cohort')),
                                C.multiselect.view(ctrl.selectCohorts),
                                m('.desc', t('pu.po.tab1.select-cohort-desc')),
                            ]),
                            m('.form-group', [
                                m('h4', t('pu.po.tab1.campaign-start-date')),
                                C.radio.view(ctrl.radioStartDate)
                            ]),

                            m('.form-group', [
                                m('h4', t('pu.po.tab1.additional-options')),
                                m('.comp-grid.comp-unpadded', [
                                    C.checkbox.view(ctrl.checkAutoEnd)
                                ]),
                                m('.desc', t('pu.po.tab2.delivery-end-desc')),
                            ]),

                            m('.btns', {key: 'btns'}, [
                                m('a.btn-next', { href: '#', onclick: popup.next, disabled: popup.tabenabled(2) ? false : 'disabled' }, t('pu.po.next')),
                                popup.tabs.tab() > 0 ? m('a.btn-prev', { href: '#', onclick: popup.prev }, t('pu.po.prev')) : ''
                            ])
                        ]));
                }
            });

            // Message Delivery
            tabs.push({
                tab: this.renderTab.bind(this, 2),
                controller: function () {
                    this.delay = new C.delay.controller({days: true, hours: true, value: message.autoDelay});
                    this.sleep = new C.delay.controller({days: true, hours: true, value: message.autoCapSleep});
                    this.messageCapped = function(){
                        if (arguments.length) {
                            if (arguments[0]) {
                                message.autoCapMessages(5);
                                message.autoCapSleep(undefined);
                            } else {
                                message.autoCapMessages(undefined);
                                message.autoCapSleep(undefined);
                            }
                        }
                        return message.autoCapSleep() !== undefined || message.autoCapMessages() !== undefined;
                    };
                    this.messageDelayed = function(){
                        if (arguments.length && [undefined, null].indexOf(arguments[0]) !== -1) {
                            var v = arguments[0];
                            if (!(v === null && message.autoDelay())) {
                                setTimeout(function(){
                                    m.startComputation();
                                    message.autoDelay(v);
                                    this.delay.set();
                                    m.endComputation();
                                }.bind(this), 30);
                            }
                        }
                        return message.autoDelay() === undefined ? undefined : null;
                    }.bind(this);
                    this.hours = [];
                    for (var i = 0; i <= 23; i++) {
                        this.hours.push(i);
                    }

                    this.radioDelay = new C.radio.controller({
                        options: [
                            { value: undefined, title: t('pu.po.tab2.immediately'), desc: t('pu.po.tab2.immediately-desc') },
                            { value: null, title: t('pu.po.tab2.delayed'), view: function(){
                                return this.messageDelayed() === undefined ? '' : C.delay.view(this.delay);
                            }.bind(this) }
                        ], value: this.messageDelayed
                    });

                    this.selectTime = new C.singleselect.controller({
                        id: 'delivery-time',
                        class: 'time-select',
                        value: message.autoTime,
                        placeholder: t('pu.po.tab2.select-time'),
                        icon: m('i.material-icons', 'query_builder'),
                        onclick: function() { 
                            if (message.autoTime() === undefined) {
                                message.autoTime(null);
                            }
                        },
                        options: this.hours.map(function (hour) {
                            return new C.selector.Option({
                                value: hour * C.delay.MS_IN_HOUR,
                                title: (hour < 10 ? '0' + hour : hour) + ':00'
                            });
                        })
                    });

                    this.radioCap = new C.radio.controller({
                        options: [
                            { value: false, title: t('pu.po.tab2.capping.no'),  desc: t('pu.po.tab2.capping.no-desc')  },
                            { value: true,  title: t('pu.po.tab2.capping.yes'), desc: t('pu.po.tab2.capping.yes-desc') }
                        ], value: this.messageCapped
                    });

                    this.checkTime = new C.checkbox.controller({
                        class: 'comp-grid-row',
                        group: 'comp-grid-cell',
                        title: t('pu.po.tab2.send-in-user-tz'),
                        undeNullValue: message.autoTime,
                        undeNullOnChange: function(value){
                            if (value === null) {
                                this.selectTime.isOpen = true;
                            }
                        }.bind(this),
                        view: C.singleselect.view.bind(null, this.selectTime)
                    });
                },
                view: function (ctrl) {
                    return m('.comp-push-tab-content',
                        m('.comp-panel', [
                            m('.form-group', [
                                m('h4', t('pu.po.tab2.delivery-method')),
                                C.radio.view(ctrl.radioDelay),
                                m('.desc', t('pu.po.tab2.delivery-method-desc')),
                            ]),

                            m('.form-group', [
                                m('h4', t('pu.po.tab2.delivery-time')),
                                m('.comp-grid.comp-unpadded', [
                                    C.checkbox.view(ctrl.checkTime)
                                ]),
                                m('.desc', t('pu.po.tab2.delivery-time-desc')),
                            ]),

                            m('.form-group', [
                                m('h4', t('pu.po.tab2.capping')),
                                C.radio.view(ctrl.radioCap),
                                m('.desc', t('pu.po.tab2.capping-desc')),
                            ]),

                            ctrl.messageCapped() ? m('.form-group', [
                                m('.comp-grid', [
                                    m('.comp-grid-row', [
                                        m('.comp-grid-cell', t('pu.po.tab2.message-per-user')),
                                        m('.comp-grid-cell', m('.comp-delay.single', [
                                            m('input.comp-delay-days', {
                                                type: 'number', 
                                                value: message.autoCapMessages(),
                                                min: 0,
                                                oninput: function(){
                                                    if (!('' + this.value).length) {
                                                        message.autoCapMessages(undefined);
                                                    } else if (('' + this.value).length && !isNaN(parseInt(this.value)) && !parseInt(this.value) >= 0) {
                                                        message.autoCapMessages(parseInt(this.value));
                                                    }
                                                },
                                                placeholder: 'unlimited'
                                            }),
                                            m('label.comp-delay-days', t.n('pu.messages', message.autoCapMessages()))
                                        ]))
                                    ])
                                ]),
                                m('.desc', t('pu.po.tab2.message-per-user-desc'))
                            ]) : '',

                            ctrl.messageCapped() ? m('.form-group', [
                                m('.comp-grid', [
                                    m('.comp-grid-row', [
                                        m('.comp-grid-cell', t('pu.po.tab2.sleep')),
                                        m('.comp-grid-cell', C.delay.view(ctrl.sleep))
                                    ])
                                ]),
                                m('.desc', t('pu.po.tab2.sleep-desc'))
                            ]) : '',

                            m('.btns', {key: 'btns'}, [
                                m('a.btn-next', { href: '#', onclick: popup.next, disabled: popup.tabenabled(3) ? false : 'disabled' }, t('pu.po.next')),
                                popup.tabs.tab() > 0 ? m('a.btn-prev', { href: '#', onclick: popup.prev }, t('pu.po.prev')) : ''
                            ])
                        ])
                    );
                }
            });
        } else {
            // Time & Location
            tabs.push({
                tab: this.renderTab.bind(this, 1),
                controller: function(){
                    this.radioSchedule = new C.radio.controller({
                        options: [
                            { value: false, title: t('pu.po.tab1.scheduling-now'), desc: t('pu.po.tab1.scheduling-now-desc') },
                            {
                                value: true, title: t('pu.po.tab1.scheduling-date'), view: function () {
                                    if (!this.datepicker) {
                                        var d = new Date();
                                        d.setHours(d.getHours() + 1);
                                        d.setMinutes(0);
                                        d.setSeconds(0);
                                        d.setMilliseconds(0);
                                        this.datepicker = C.datepicker.controller({ value: message.date, defaultDate: d, id: 'campaign-end-date' });
                                    }
                                    return m('.date-time-container', C.datepicker.view(this.datepicker));
                                }.bind(this)
                            }
                        ], value: function (v) {
                            if (arguments.length) {
                                if (v && message.date() === undefined) {
                                    message.date(null);
                                    this.datepicker.open(true);
                                } else if (!v) {
                                    message.date(undefined);
                                    this.datepicker.open(false);
                                }
                            }
                            return message.date() !== undefined;
                        }.bind(this)
                    });

                    this.radioTz = new C.radio.controller({
                        options: [
                            { value: false, title: t('pu.no'), desc: t('pu.po.tab1.tz-no-desc') },
                            { value: -(new Date().getTimezoneOffset()), title: t('pu.po.tab1.tz-yes'), desc: t('pu.po.tab1.tz-yes-desc') }
                        ], value: message.tz
                    });
                },
                view: function (ctrl) {
                    return m('.comp-push-tab-content', [
                        m('.comp-panel', [
                            m('.form-group', [
                                m('h4', t('pu.po.tab1.scheduling')),
                                C.radio.view(ctrl.radioSchedule),
                                m('.desc', t('pu.po.tab1.scheduling-desc')),
                            ]),
                            message.date() ?
                                m('.form-group', [
                                    m('h4', t('pu.po.tab1.tz')),
                                    m('.desc', [
                                        t('pu.po.tab1.tz-desc'),
                                        ' ',
                                        m('span.warn', C.tooltip.config(t('pu.po.tab1.tz-yes-help')), push.ICON.WARN())
                                    ]),
                                    C.radio.view(ctrl.radioTz),
                                    m('.desc', t('pu.po.tab1.scheduling-desc'))
                                ]) : '',
                            m('.btns', {key: 'btns'}, [
                                m('a.btn-next', { href: '#', onclick: popup.next, disabled: popup.tabenabled(2) ? false : 'disabled' }, t('pu.po.next')),
                                popup.tabs.tab() > 0 ? m('a.btn-prev', { href: '#', onclick: popup.prev }, t('pu.po.prev')) : ''
                            ])
                        ])
                    ]);
                }
            });
        }

        var viewTabIndex = tabs.length + 1;
        // Message
        tabs.push({
            tab: this.renderTab.bind(this, tabs.length),
            controller: function () {
                localesController = new locales.controller();
                this.segmentedType = new C.segmented.controller({
                    options: [
                        { value: push.C.TYPE.MESSAGE, title: t('pu.type.message') },
                        { value: push.C.TYPE.DATA, title: t('pu.type.data') },
                    ], value: message.type, class: 'comp-push-message-type', onchange: function (type) {
                        if (type === 'data' && !message.data()) { message.data(''); }
                        if (type === 'message' && message.data() === '') { message.data(undefined); }
                        if (type === 'data' && message.sound()) { message.sound(undefined); }
                        if (type === 'message' && !message.sound()) { message.sound('default'); }
                    }
                });

                this.segmentedButtons = new C.segmented.controller({
                    options: [
                        { value: 0, title: '0' },
                        { value: 1, title: '1' },
                        { value: 2, title: '2' },
                    ], value: message.buttons
                });

                this.segmentedPlatform = new C.segmented.controller({
                    class: 'platforms', options: [
                        { value: push.C.PLATFORMS.IOS, view: m.bind(m, 'span.ion-social-apple') },
                        { value: push.C.PLATFORMS.ANDROID, view: m.bind(m, 'span.ion-social-android') },
                    ].filter(function (o) { return message.platforms().indexOf(o.value) !== -1; }), value: popup.previewPlatform
                });
            },
            view: function (ctrl) {
                var d = moment();

                return m('.comp-push-tab-content', [
                    m('.comp-push-panels', [
                        m('.comp-push-panel.comp-push-panel-compose-left.comp-push-compose', [
                            m('.comp-push-panel-half', [
                                m('div', [
                                    m('h4', t('pu.po.tab2.message.type')),
                                    C.segmented.view(ctrl.segmentedType),
                                ]),
                                message.type() !== 'data' ? m('div', [
                                    m('h4', t('pu.po.tab2.mbtns')),
                                    C.segmented.view(ctrl.segmentedButtons),
                                ]) : ''
                            ]),
                            message.type() === push.C.TYPE.MESSAGE ?
                                m('.comp-push-message.comp-push-space-top', [
                                    locales.view(localesController)
                                ]) : '',
                            message.type() !== 'data' ?
                                m('div', [
                                    m('h4', [
                                        t('pu.po.tab2.mmedia'),
                                        message.media.typeWarn && message.platforms().indexOf(push.C.PLATFORMS.ANDROID) !== -1 ?
                                            m('.android-warn', [
                                                push.ICON.WARN(),
                                                message.media.typeWarn
                                            ])
                                            : ''
                                    ]),
                                    m('.comp-push-extras', m(extra, { title: t('pu.po.tab2.extras.media'), value: message.media, typ: 'url', valuePlaceholder: t('pu.po.tab2.extras.media.placeholder'), help: t('pu.po.tab2.extras.media.help') })),
                                    message.media.valid ?
                                        m('.mime', [
                                            m('.mime-type', message.media.mime || ''),
                                            m('.mime-size', message.media.mimeSize || ''),
                                        ])
                                        : m('.mime', [
                                            m('.mime-type', message.media.mime || message.media.statusErrorText || ''),
                                            m('.mime-size', message.media.mimeSize || ''),
                                        ])
                                ])
                                : '',
                            m('h4', t('pu.po.tab2.extras')),
                            m('.comp-push-extras', [
                                message.type() === 'message' ?
                                    m(extra, { title: t('pu.po.tab2.extras.sound'), value: message.sound, def: 'default' })
                                    : '',
                                m(extra, {
                                    title: t('pu.po.tab2.extras.badge'), value: message.badge, def: 0, typ: 'number', converter: function (val) {
                                        if (val === '') { return 0; }
                                        else if (isNaN(parseInt(val))) { return null; }
                                        return parseInt(val);
                                    }, help: t('pu.po.tab2.extras.badge.help')
                                }),
                                message.type() === 'message' ?
                                    m(extra, { title: t('pu.po.tab2.extras.url'), value: message.url, typ: 'url', valuePlaceholder: t('pu.po.tab2.urlordeep'), help: t('pu.po.tab2.extras.url.help') })
                                    : '',
                                m(extra, {
                                    title: t('pu.po.tab2.extras.data'), value: message.data, textarea: true, converter: function (val) {
                                        try {
                                            var o = window.jsonlite.parse(val);
                                            return typeof o === 'object' ? JSON.stringify(o) : null;
                                        } catch (e) {
                                            return null;
                                        }
                                    }, valuePlaceholder: t('pu.po.tab2.extras.data.placeholder'), help: t('pu.po.tab2.extras.data.help')
                                }),
                            ]),
                        ]),
                        message.type() === push.C.TYPE.MESSAGE ?
                            m('.comp-push-panel.comp-push-panel-compose-right.comp-push-preview', [
                                m('h4', [t('pu.po.preview'), m('i.ion-information-circled', C.tooltip.config(t('pu.po.preview.help')))]),
                                m('.preview.preview-' + popup.previewPlatform(), [
                                    m('img', { src: '/images/push/preview.' + popup.previewPlatform() + '.png' }),
                                    // m('.preview-time', d.format('H:mm')),
                                    // m('.preview-date', d.format("dddd, MMMM DD")),
                                    m('.preview-message', [
                                        m('img', { src: 'appimages/' + message.apps()[0] + '.png' }),
                                        m('.preview-message-title', [
                                            m('span.preview-message-app', CG.apps[message.apps()[0]].name),
                                            m('span.preview-message-date', popup.previewPlatform() === push.C.PLATFORMS.IOS ? 'X' : d.format('LT')),
                                        ]),
                                        popup.previewPlatform() === 'i' && message.media() && message.media.valid ?
                                            message.media.view()
                                            : '',
                                        message.messagePerLocale()[activeLocale() + push.C.S + 't'] || message.messagePerLocale()['default' + push.C.S + 't'] || message.messagePerLocale()['default' + push.C.S + 'tp'] ?
                                            m('.preview-message-message-title', { config: function (el) { 
                                                el.innerHTML = (messageTitleHTML(activeLocale()) || message.titleCompile(activeLocale(), true)) || (messageTitleHTML('default') || message.titleCompile('default', true)); 
                                                // el.innerHTML = message.titleCompile(activeLocale(), true);
                                                el.querySelectorAll('.pers').forEach(function(el){
                                                    el.textContent = el.getAttribute('data-fallback');

                                                    var name = PERS_PROPS.filter(function(opt){ return opt.value() === el.getAttribute('data-key'); })[0];
                                                    if (name) {
                                                        name = name.title();
                                                    }
                                                    if (!name) {
                                                        name = el.getAttribute('data-key');
                                                    }
                                                    el.title = t.p('pu.po.tab2.tt', name, el.getAttribute('data-fallback'));
                                                    $(el).tooltipster({
                                                        animation: 'fade',
                                                        animationDuration: 100,
                                                        delay: 100,
                                                        maxWidth: 240,
                                                        theme: 'tooltipster-borderless',
                                                        trigger: 'custom',
                                                        triggerOpen: {
                                                            mouseenter: true,
                                                            touchstart: true
                                                        },
                                                        triggerClose: {
                                                            mouseleave: true,
                                                            touchleave: true
                                                        },
                                                        interactive: true,
                                                        contentAsHTML: true
                                                    });
                                                });
                                            } })
                                            // m('.preview-message-message-title', message.messagePerLocale()[activeLocale() + push.C.S + 't'] || message.messagePerLocale()['default' + push.C.S + 't'])
                                            : '',
                                        m('.preview-message-message', { config: function (el) { 
                                            // el.innerHTML = (messageMessageHTML(activeLocale()) || message.messagePerLocale()[activeLocale()]) || (messageMessageHTML('default') || message.messagePerLocale().default) || t('pu.po.tab2.default-message'); 
                                            el.innerHTML = (messageMessageHTML(activeLocale()) || message.messageCompile(activeLocale(), true)) || (messageMessageHTML('default') || message.messageCompile('default', true)) || t('pu.po.tab2.default-message'); 
                                            // el.innerHTML = message.messageCompile(activeLocale(), true) || '<div class="placeholder">' + t('pu.po.tab2.placeholder') + '</div>';
                                            el.querySelectorAll('.pers').forEach(function(el){
                                                el.textContent = el.getAttribute('data-fallback');

                                                var name = PERS_PROPS.filter(function(opt){ return opt.value() === el.getAttribute('data-key'); })[0];
                                                if (name) {
                                                    name = name.title();
                                                }
                                                if (!name) {
                                                    name = el.getAttribute('data-key');
                                                }
                                                el.title = t.p('pu.po.tab2.tt', name, el.getAttribute('data-fallback'));
                                                $(el).tooltipster({
                                                    animation: 'fade',
                                                    animationDuration: 100,
                                                    delay: 100,
                                                    maxWidth: 240,
                                                    theme: 'tooltipster-borderless',
                                                    trigger: 'custom',
                                                    triggerOpen: {
                                                        mouseenter: true,
                                                        touchstart: true
                                                    },
                                                    triggerClose: {
                                                        mouseleave: true,
                                                        touchleave: true
                                                    },
                                                    interactive: true,
                                                    contentAsHTML: true
                                                });
                                            });
                                        } }),
                                        // m('.preview-message-message', message.messagePerLocale()[activeLocale()] || message.messagePerLocale().default || t('pu.po.tab2.default-message')),
                                        message.buttons() > 0 ?
                                            m('.preview-buttons', [
                                                message.buttons() > 0 ? m('.preview-button', message.messagePerLocale()[activeLocale() + push.C.S + '0' + push.C.S + 't'] || message.messagePerLocale()['default' + push.C.S + '0' + push.C.S + 't']) : '',
                                                message.buttons() > 1 ? m('.preview-button', message.messagePerLocale()[activeLocale() + push.C.S + '1' + push.C.S + 't'] || message.messagePerLocale()['default' + push.C.S + '1' + push.C.S + 't']) : '',
                                            ])
                                            : '',
                                        popup.previewPlatform() === 'a' && message.media() && message.media.valid && (!message.media.platforms || message.media.platforms.indexOf(popup.previewPlatform()) !== -1) ?
                                            message.media.view()
                                            : '',
                                    ]),
                                ]),
                                message.platforms().length > 1 ? 
                                    C.segmented.view(ctrl.segmentedPlatform)
                                    : '',
                            ]) :
                            ''
                    ]),
                    m('.btns', {key: 'btns'}, [
                        !message.auto() && message.count() ? m('div', {
                            style: {
                                fontSize: '14px',
                                padding: '25px',
                                paddingLeft: '20px',
                                width: '200px',
                                float: 'left'
                            }
                        }, [
                            t.n('pu.po.recipients', message.count()),
                            message.locales().length > 1 ?
                                ''
                                : m('span.warn', C.tooltip.config(t('pu.po.recipients.temporary')), push.ICON.WARN())
                        ])
                            : '',
                        m('a.btn-next', { href: '#', onclick: popup.next, disabled: popup.tabenabled(viewTabIndex) ? false : 'disabled' }, t('pu.po.next')),
                        popup.tabs.tab() > 0 ? m('a.btn-prev', { href: '#', onclick: popup.prev }, t('pu.po.prev')) : ''
                    ])
                ]);
            }
        });

        tabs.push({
            tab: this.renderTab.bind(this, tabs.length),
            controller: function () {
                this.viewContents = new C.push.view.contents.controller({message: message});
            },
            view: function (ctrl) {
                return m('.comp-push-tab-content.comp-summary', [
                    m('.comp-panel', [
                        m('.form-group', [
                            m('h4', t('pu.po.confirm')),
                            m('input[type=checkbox]', { checked: message.ack() ? 'checked' : undefined, onchange: function () { message.ack(!message.ack()); } }),
                            m('label', { onclick: function () { message.ack(!message.ack()); } }, t('pu.po.confirm.ready') + (message.auto() ? '' : ' ' + t.n('pu.po.confirm', message.count())) ),
                        ]),
                        C.push.view.contents.view(ctrl.viewContents),
                        m('.btns.final', {key: 'btns'},
                            m('div.final-footer', [
                                m('div', [
                                    message.auto() ? '' : message.count() ? m('div', { key: 'info-message' }, t.p('pu.po.recipients.message', message.count())) : '',
                                    message.auto() ? m('div', t('pu.po.recipients.message.details')) : '',
                                ]),
                                m('div', [
                                    m('a.btn-next', { href: '#', onclick: popup.send, disabled: message.ack() ? false : 'disabled' }, message.auto() ? t('pu.po.start') : t('pu.po.send')),
                                    m('a.btn-prev', { href: '#', onclick: popup.prev }, t('pu.po.prev'))
                                ])
                            ])
                            // message.auto() ? 

                            // message.count() ? m('div', {
                            //  style: {
                            //      fontSize: "14px",
                            //      padding: "25px",
                            //      paddingLeft: "20px",
                            //      width: "200px",
                            //      float: "left"
                            //  }
                            // }, [
                            //      t.n('pu.po.recipients', message.count()),
                            //      message.locales().length > 1 ?
                            //          ''
                            //          : m('span.warn', C.tooltip.config(t('pu.po.recipients.temporary')), push.ICON.WARN())
                            //  ])
                            //  : "",
                            // m('a.btn-next', { href: '#', onclick: popup.send, disabled: message.ack() ? false : 'disabled' }, t('pu.po.send')),
                            // m('a.btn-prev', { href: '#', onclick: popup.prev }, t('pu.po.prev'))
                        )
                    ])
                ]);
            }
        });


        this.tabs = new C.tabs.controller(tabs, { stepbystep: true, tabenabled: this.tabenabled, tabset: this.next });
        // this.tabs = new C.tabs.controller([

        //  {
        //      tab: this.renderTab.bind(this, 3),
        //      view: function () {
        //          return m('.comp-push-tab-content.comp-summary', [
        //              m('.comp-panel', { style: { width: "590px" } }, [
        //                  m('.form-group', { key: "tab_3_1" }, [
        //                      m('h4', t('pu.po.confirm')),
        //                      m('input[type=checkbox]', { checked: message.ack() ? 'checked' : undefined, onchange: function () { message.ack(!message.ack()); } }),
        //                      m('label', { onclick: function () { message.ack(!message.ack()); } }, t.n('pu.po.confirm', message.count())),
        //                  ]),
        //                  m('.form-group', { key: "tab_3_0" }, [
        //                      m('h4', t('pu.po.tab3.review')),
        //                      m('.sub-desc', t('pu.po.tab3.review-desc')),
        //                      m.component(C.push.view.contents, { message: message }),
        //                  ]),
        //                  m('.btns.final', [
        //                      message.count() ? m('div', {
        //                          style: {
        //                              fontSize: "14px",
        //                              padding: "25px",
        //                              paddingLeft: "20px",
        //                              width: "200px",
        //                              float: "left"
        //                          }
        //                      }, [
        //                              t.n('pu.po.recipients', message.count()),
        //                              message.locales().length > 1 ?
        //                                  ''
        //                                  : m('span.warn', C.tooltip.config(t('pu.po.recipients.temporary')), push.ICON.WARN())
        //                          ])
        //                          : "",
        //                      m('a.btn-next', { href: '#', onclick: popup.send, disabled: message.ack() ? false : 'disabled' }, t('pu.po.send')),
        //                      m('a.btn-prev', { href: '#', onclick: popup.prev }, t('pu.po.prev'))
        //                  ])
        //              ])
        //          ])
        //      }
        //  },
        // ], { stepbystep: true, tabenabled: this.tabenabled, tabset: this.next });

    };

    popup.view = function (ctrl) {
        return m('.comp-push', C.tabs.view(ctrl.tabs));
    };

});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m, moment, countlyCommon, $ */

window.component('push.view', function(view) {
    var components = window.components,
        t = components.t,
        push = components.push,
        ERROR_PARSER = /^([ia])([0-9]+)(\+(.+))?$/,
        HELP = {
            i: 'https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html#//apple_ref/doc/uid/TP40008194-CH11-SW17',
            a: 'https://developers.google.com/cloud-messaging/http-server-ref#error-codes'
        };

    ['push.errorCode.i405.desc', 'push.errorCode.i429.desc', 'push.errorCode.a200+MissingRegistration.desc', 'push.errorCode.a200+InvalidTtl.desc'].forEach(function(code){
        t.set(code, t('push.errorCodes.bug'));
    });
	
    view.show = function(message){
        message = message instanceof components.push.Message ? message : new components.push.Message(message);
        view.slider = components.slider.show({
            key: message._id(),
            title: function(){
                var els = [
                    t('pu.po.view.title')
                ];
                return m('h3', els);
            }, 
            // desc: t('pu.po.view.desc'),
            // onclose: function() {
            // 	console.log('slider closed');
            // },
            component: components.push.view, 
            componentOpts: message,
            loadingTitle: t('pu.po.loading'),
            loadingDesc: t('pu.po.loading-desc'),
        });
    };

    view.controller = function(message){
        this.message = message;

        this.chartConfig = function(element){
            element.style.height = '150px';
            var graphData = [
                {
                    label: t('pu.dash.metrics.sent'),
                    data: message.result.events() ? message.result.events().sent.daily.map(function (d, i) { return [i, d]; }) : [],
                    // data: [ [0, 5], [1, 1], [2, 0], [3, 10], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 1], [11, 0], [12, 1], [13, 0], [14, 0], [15, 0], [16, 0], [17, 0], [18, 0], [19, 0], [20, 1], [21, 10], [22, 2], [23, 0], [24, 0], [25, 0], [26, 0], [27, 0], [28, 0], [29, 0]]
                },
                {
                    label: t('pu.dash.metrics.acti'),
                    data: message.result.events() ? message.result.events().actions.daily.map(function (d, i) { return [i, d]; }) : [],
                    // data: [ [0, 2], [1, 5], [2, 8], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 2], [11, 5], [12, 8], [13, 0], [14, 0], [15, 0], [16, 0], [17, 0], [18, 0], [19, 0], [20, 2], [21, 5], [22, 8], [23, 0], [24, 0], [25, 0], [26, 0], [27, 0], [28, 0], [29, 0]]
                },
            ];

            countlyCommon.setPeriod('30days');
            countlyCommon.drawTimeGraph(graphData, '.message-chart');
        };
    };

    view.view = function(ctrl){
        var r = ctrl.message.result, 
            ec = r.errorCodes() ? Object.keys(r.errorCodes()).sort() : [],
            fi = -1,
            fa = -1;

        ec.forEach(function(k, i) {
            if (fi === -1 && k.indexOf('i') === 0) { fi = i; }
            if (fi === -1 && k.indexOf('a') === 0) { fa= i; }
        });

        var els = [ctrl.message.auto() ? t('pu.po.progress.auto') : t('pu.po.progress')];
        if (ctrl.message.count()) {
            els.push(m('span.count.ion-person', 'Recipients: ' + ctrl.message.count().TOTALLY));
        }
        var s = ctrl.message.result.status(),
			override;
        if (push.statusers) {
            push.statusers.forEach(function(statuser){
                var o = statuser(ctrl.message.___data);
                if (o) {
                    override = o;
                }
            });
        }

        var actionButtons = components.push.actions.map(function(f){ 
            return f(ctrl.message.___data); 
        }).filter(function(x){ 
            return typeof x === 'object'; 
        });

        var status = override || r.statusString();
        // ctrl.message.auto() ? t('push.message.status.auto.' + ctrl.message.isScheduled()) : override || t('push.message.status.' + s);
        // if (message.result.error()) {
        if (r.isDone() && r.error()) {
            els.push(m('.status', [m('svg[viewBox="0 0 56 56"][width=20px][height=20px]', [
                m('circle[fill="#D54043"][cx=28][cy=28][r=28]'),
                m('path[fill="#FFFFFF"][d=M40.9,16.1L40.9,16.1c1.4,1.4,1.4,3.6,0,4.9L21.1,40.9c-1.4,1.4-3.6,1.4-4.9,0l0,0c-1.4-1.4-1.4-3.6,0-4.9l19.8-19.8C37.3,14.8,39.5,14.8,40.9,16.1z]'),
                m('path[fill="#FFFFFF"][d=M40.9,40.9L40.9,40.9c-1.4,1.4-3.6,1.4-4.9,0L16.1,21.1c-1.4-1.4-1.4-3.6,0-4.9l0,0c1.4-1.4,3.6-1.4,4.9,0l19.8,19.8C42.2,37.3,42.2,39.5,40.9,40.9z]'),
            ]), status]));
        } else if (r.isSending()) {
            els.push(m('.status', [m('svg[viewBox="0 0 56 56"][width=20px][height=20px]', [
                m('circle[fill="#50A1EA"][cx=28][cy=28][r=28]'),
                m('circle[fill="#F9F9F9"][cx=14][cy=29][r=5]'),
                m('circle[fill="#ABCBFF"][cx=28][cy=29][r=5]'),
                m('circle[fill="#6EA6FB"][cx=42][cy=29][r=5]'),
            ]), status]));
        } else if (r.isScheduled()) {
            // } else if ((ctrl.message.auto() && !ctrl.message.isScheduled()) || (!ctrl.message.auto() &&  r.isScheduled())) {
            els.push(m('.status', [m('svg[viewBox="0 0 56 56"][width=20px][height=20px]', [
                m('circle[fill="#50A1EA"][cx=28][cy=28][r=28]'),
                m('rect[fill="#F9F9F9"][x=24][y=10][width=7][height=22]'),
                m('rect[fill="#F9F9F9"][x=24][y=27][width=21][height=7]'),
            ]), status]));
        } else if (r.isDone()) {
            els.push(m('.status', [m('svg[viewBox="0 0 56 56"][width=20px][height=20px]', [
                m('circle[fill="#2FA732"][cx=28][cy=28][r=28]'),
                m('polyline[stroke="#FFFFFF"][fill=none][stroke-width=6][stroke-linecap=round][stroke-linejoin=round][points=15,29.4 24.2,40 40.3,16.7]'),
            ]), status]));
        } else if (r.isCreated()) {
            els.push(m('.status', [m('svg[viewBox="0 0 56 56"][width=20px][height=20px]', [
                m('circle[fill="#50A1EA"][cx=28][cy=28][r=28]'),
                m('rect[fill="#F9F9F9"][x=24][y=10][width=7][height=22]'),
                m('rect[fill="#F9F9F9"][x=24][y=27][width=21][height=7]'),
            ]), status]));
        }

        return m('div.comp-push', { class : 'view-message-slider' }, [
            m('h3', els),
            ctrl.message.auto() ? m.component(components.widget, {
                content: {
                    view: m('.message-chart-container',  [
                        m('.message-chart', {config : ctrl.chartConfig})
                    ])
                },
                footer: {
                    bignumbers: [
                        { title: 'pu.dash.metrics.sent', number: r.events().sent.total, color: true, help: 'help.dashboard.push.sent' },
                        { title: 'pu.dash.metrics.acti', number: r.events().actions.total, color: true, help: 'help.dashboard.push.actions' },
                    ]
                }
            }) : '',
            r.error() ? 
                m(r.errorFixed().toLowerCase() === 'exited-sent' ? '.comp-push-warn' : '.comp-push-error', [
                    m('svg[width=21][height=18]', m('path[fill="#FFFFFF"][d="M20,18c0.6,0,0.8-0.4,0.5-0.9L11,0.9c-0.3-0.5-0.7-0.5-1,0L0.5,17.1C0.2,17.6,0.4,18,1,18H20zM10,13h2v2h-2V13z M10,8h2v4h-2V8z"]')),
                    m.trust(t('push.error.' + r.errorFixed().toLowerCase(), r.errorFixed()))
                ])
                : '',
            r.processed() > 0 && (r.isDone() || r.isSending()) ? 
                m('div', [
                    m('h4', t(ctrl.message.auto() ? 'pu.dash.totals' : 'pu.po.metrics')),
                    m('.comp-push-view-table.comp-push-metrics', [
                        r.isSending() ? 
                            m.component(view.metric, {
                                count: r.processed(),
                                total: r.total(),
                                color: '#53A3EB',
                                title: t('pu.po.metrics.processed'),
                                helpr: t('pu.po.metrics.processed.desc'),
                                descr: [
                                    r.processed() === 0 ? '' : r.processed() === r.total() ? 
                                        t('pu.po.left.to.send.none') 
                                        : t.n('pu.po.left.to.send', r.total() - r.processed()),
                                    r.nextbatch() ? 
                                        t.p('pu.po.left.to.send.batch', moment(r.nextbatch()).format('HH:mm'))
                                        : ''
                                ].join('; ').replace(/; $/, '').replace(/^; /, '')
                            })
                            : 
                            r.sent() > 0 || !r.error() ?
                                m.component(view.metric, {
                                    count: r.sent(),
                                    total: r.total(),
                                    color: '#53A3EB',
                                    title: t('pu.po.metrics.sent'),
                                    helpr: t('pu.po.metrics.sent.desc'),
                                    descr: r.sent() === 0 ? 
                                        r.total() - r.sent() - r.errors() > 0 ? 
                                            t.n('pu.po.expired', r.total() - r.sent() - r.errors())
                                            : 
                                            t('pu.po.metrics.sent.none')
                                        : 
                                        r.sent() === r.total() ? 
                                            r.sent() === 1 ? t('pu.po.metrics.sent.one') : t('pu.po.metrics.sent.all')
                                            : 
                                            [
                                                r.total() - r.sent() - r.errors() > 0 ? 
                                                    t.n('pu.po.expired', r.total() - r.sent() - r.errors())
                                                    : '',
                                                r.errors() > 0 ? 
                                                    t.n('pu.po.errors', r.errors())
                                                    : '',
                                            ].join('; ').replace(/; $/, '').replace(/^; /, '')
                                })
                                :
                                '',

                        r.actioned() > 0 ? 
                            m.component(view.metric, {
                                count: r.actioned(),
                                total: r.sent(),
                                subco: [r.actioned0(), r.actioned1(), r.actioned2()].filter(function(c){ return c > 0; }),
                                color: '#FE8827',
                                title: t('pu.po.metrics.actions'),
                                helpr: t('pu.po.metrics.actions.desc'),
                                descr: [r.actioned() === r.sent() ? 
                                    t('pu.po.metrics.actions.all') 
                                    : t.n('pu.po.users', r.actioned()) + ' ' + t('pu.po.metrics.actions.performed'),
                                r.actioned0() > 0 ? 
                                    t.n('pu.po.users', r.actioned0()) + ' ' + t('pu.po.metrics.actions0.performed')
                                    : '',
                                r.actioned1() > 0 ? 
                                    t.n('pu.po.users', r.actioned1()) + ' ' + t('pu.po.metrics.actions1.performed')
                                    : '',
                                r.actioned2() > 0 ? 
                                    t.n('pu.po.users', r.actioned2()) + ' ' + t('pu.po.metrics.actions2.performed')
                                    : '',
                                ].join(' ').replace(/\s+$/, ' ')
                            })
                            : ''

                    ])
                ])
                : '',
            m.component(components.push.view.contents, {message: ctrl.message, isView: true}),
            r.errorCodes() ? 
                m('div.comp-push-error-codes', [
                    m('h4', t('push.errorCodes')),
                    m('.comp-push-view-table', ec.map(function(k){
                        var comps = k.match(ERROR_PARSER);
                        if (comps && comps[1] && comps[2]) {
                            return m('.comp-push-view-row', [
                                m('.col-left', [
                                    m.trust(t('push.errorCode.' + comps[1] + comps[2])),
                                    comps[4] ?
                                        m('div', ' (' + comps[4] + ')')
                                        : ''
                                ]),
                                m('.col-mid', r.errorCodes()[k]),
                                m('.col-right', [
                                    t('push.errorCode.' + k + '.desc', m.trust(t('push.errorCode.' + comps[1] + comps[2] + '.desc', ''))),
                                    t('push.errorCode.' + k + '.desc', m.trust(t('push.errorCode.' + comps[1] + comps[2] + '.desc', ''))) ? m('br') : '',
                                    m('a[target=_blank]', {href: HELP[comps[1]]}, t('push.errorCode.link.' + comps[1])),
                                ])
                            ]);
                        } else {
                            return m('.comp-push-view-row', [
                                m('.col-left', m.trust(t('push.errorCode.' + k))),
                                m('.col-mid', r.errorCodes()[k]),
                                m('.col-right', m.trust(t('push.errorCode.' + k + '.desc', ' ')))
                            ]);
                        }
                    }))
                ])
                : '',
                actionButtons && actionButtons.length ? m('.btns', actionButtons) : ''
            // m('.btns', [
            // 	m('a.btn-prev.orange', {
            // 		href: '#', 
            // 		onclick: function(ev){ 
            // 			ev.preventDefault();
            // 			var json = ctrl.message.toJSON(false, true, true);
            // 			delete json.date;
            // 			components.push.popup.show(json, true);
            // 		}
            // 	}, t('pu.po.duplicate')),
            // 	m('a.btn-next.red', {
            // 		style : { marginRight: 0},
            // 		href: '#', 
            // 		onclick: function(ev){ 
            // 			ev.preventDefault();
            // 			ctrl.message.remoteDelete().then(function(){
            // 				components.slider.instance.close();
            // 				if (window.app.activeView.mounted) {
            // 					window.app.activeView.mounted.refresh();
            // 				}
            // 			});
            // 		}
            // 	}, t('pu.po.delete'))
            // ].concat(components.push.actions.map(function(f){ 
            // 	return f(ctrl.message.___data); 
            // }).filter(function(x){ 
            // 	return typeof x === 'object'; 
            // })))
        ]);
    };

    view.metric = {
        view: function(ctrl, opts) {
            opts.prc = Math.ceil(opts.count / opts.total * 100) + '%';
            return m('.comp-push-view-row', [
                m('.col-left', [
                    m('h5', [
                        opts.title, 
                        opts.helpr ? m('span.ion-information-circled', {
                            title: t(opts.helpr),
                            config: function(el){
                                $(el).tooltipster({
                                    animation: 'fade',
                                    animationDuration: 100,
                                    delay: 100,
                                    maxWidth: 240,
                                    theme: 'tooltipster-borderless',
                                    trigger: 'custom',
                                    triggerOpen: {
                                        mouseenter: true,
                                        touchstart: true
                                    },
                                    triggerClose: {
                                        mouseleave: true,
                                        touchleave: true
                                    },
                                    interactive: true,
                                    contentAsHTML: true
                                });
                            }}) : ''
                    ]),
                    opts.count === opts.total ? 
                        m('span', m('b', opts.count))
                        : m('span', [m('b', opts.count), t('of'), m('b', opts.total)])
                ]),
                m('.col-right', [
                    m('.comp-bar', [
                        m('.percent', {style: {color: opts.color}}, opts.total === 0 ? 0 : opts.prc),
                        m('.bar', [
                            m('.color', {style: {'background-color': opts.color, width: opts.prc}}),
                            opts.subco && opts.subco.length ? 
                                m('.tick-holder', {style: {width: (opts.count / opts.total * 100) + '%'}}, opts.subco.map(function(sub, i){
                                    var prev = opts.subco.slice(0, i).reduce(function(a, b){ return a + b; }, 0);
                                    return m('.tick', {style: {left: (prev / opts.count * 100) + '%', width: (sub / opts.count * 100) + '%'}, config: function(element){
                                        if (element.clientWidth < 20) { element.textContent = ' '; }
                                    }}, Math.ceil(sub / opts.count * 100) + '%');
                                }))
                                : ''
                        ]),
                        opts.descr ? m('.desc', {config: function(element){
                            if (element.scrollHeight > 15) {
                                element.parentElement.parentElement.previousSibling.style['padding-bottom'] = '23px';
                            }
                        }}, m.trust(opts.descr)) : ''
                    ])
                ])
            ]);
        }
    };

    view.contents = {
        controller: function(opts) {
            this.message = opts.message;
            this.isView = opts.isView;
            this.locales = {
                controller: function() {
                    var locales = [], self = this;
                    locales = Object.keys(opts.message.messagePerLocale()).map(function(k, i){
                        var title = k === 'default' ? 'Default' : window.countlyGlobalLang.languages[k] ? window.countlyGlobalLang.languages[k].englishName : k;
                        return {
                            value: k, 
                            title: title,
                            tab: function() {
                                return m('div', {class: self.tabs.tab() === i ? 'active' : ''}, [
                                    m('span.comp-push-locale-count', opts.message.locales().length ? opts.message.locales().filter(function(l){ return l.value === k; })[0].percent : 0 + '%'),
                                    m('span.comp-push-locale-title', title)
                                ]);
                            },
                            view: function() {
                                return m('div.textarea', opts.message.messagePerLocale()[k]);
                            }
                        };
                    });

                    this.tabs = new components.tabs.controller(locales, {ontab: this.ontab});
                },
                view: function(ctrl){
                    return m('.comp-push-locales', [
                        components.tabs.view(ctrl.tabs),
                    ]);
                },
            };		
        },

        view: function(ctrl) {
            var geo;
            if (ctrl.message.geo() && push.dashboard.geos) {
                push.dashboard.geos.forEach(function(loc){
                    if (loc._id === ctrl.message.geo()) { geo = loc; }
                });
            }

            var delayed = ctrl.message.autoDelay() > 0,
                delayedDays = delayed ? Math.floor(ctrl.message.autoDelay() / 1000 / 3600 / 24) : 0,
                delayedHours = delayed ? Math.floor(ctrl.message.autoDelay() / 1000 / 3600) % 24 : 0,
				timed = ctrl.message.autoTime() > 0,
				timedHours = timed ? Math.floor(ctrl.message.autoTime() / 1000 / 3600) : 0,
				timedMinutes = timed ? Math.floor((ctrl.message.autoTime() - timedHours * 3600000) / 1000 / 60) : 0,
                capped = ctrl.message.autoCapSleep() > 0,
                cappedDays = capped ? Math.floor(ctrl.message.autoCapSleep() / 1000 / 3600 / 24) : 0,
                cappedHours = capped ? Math.floor(ctrl.message.autoCapSleep() / 1000 / 3600) % 24 : 0,
                localesSet = [],
                messageContent = {};

			timedHours = ('0' + timedHours).slice(-2);
			timedMinutes = ('0' + timedMinutes).slice(-2);

            Object.keys(ctrl.message.messagePerLocale()).forEach(function(k){
                var l = k.indexOf(push.C.S) === - 1 ? k : k.substr(0, k.indexOf(push.C.S));
                if (localesSet.indexOf(l) === -1 && (ctrl.message.messageCompile(l).length || ctrl.message.titleCompile(l).length)) {
                    localesSet.push(l);
                }
            });

            messageContent.default = {
                title: ctrl.message.titleCompile('default'),
                message: ctrl.message.messageCompile('default'),
            };
            localesSet.forEach(function(l){
                messageContent[l] = {
                    title: ctrl.message.titleCompile(l) || messageContent.default.title,
                    message: ctrl.message.messageCompile(l) || messageContent.default.message,
                };
            });

            var cohortNames = push.dashboard.cohorts
                .filter(function(cohort){ return ctrl.message.autoCohorts().indexOf(cohort._id) !== -1; })
                .map(function (cohort) { return cohort.name; });

            return m('.comp-push-view', [
                m('.form-group', [
                    m('h4', t('pu.po.tab0.title')),
                    m('.comp-push-view-table', [
                        m('.comp-push-view-row', [
                            m('.col-left', t('pu.po.tab3.apps')),
                            m('.col-right', ctrl.message.appNames().join(', '))
                        ]),
                        m('.comp-push-view-row', [
                            m('.col-left', t('pu.po.tab3.platforms')),
                            m('.col-right', ctrl.message.platforms().map(function(p){ return t('pu.platform.' + p); }).join(', '))
                        ]),
                        ctrl.message.auto() || !ctrl.message.geo() ? ''
                            : m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab3.location')),
                                m('.col-right', geo ? geo.title : t('pu.po.tab3.location.unknown'))
                            ]),
                        m('.comp-push-view-row', [
                            m('.col-left', t('pu.po.tab3.test')),
                            m('.col-right', t('pu.po.tab3.test.' + !!ctrl.message.test()))
                        ]),
                    ]),	
                ]),

                ctrl.message.auto() ? 
                    m('.form-group', [
                        m('h4', t('pu.po.tab1.title.auto')),
                        m('.comp-push-view-table', [
                            m('.comp-push-view-row', [
                                m('.col-left', t.n('pu.po.tab4.cohorts', ctrl.message.autoCohorts().length)),
                                m('.col-right', cohortNames.length ? cohortNames.join(', ') : t('pu.po.tab4.cohorts.no'))
                            ]),
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab1.trigger-type')),
                                m('.col-right', ctrl.message.autoOnEntry() ? t('pu.po.tab1.trigger-type.entry') : t('pu.po.tab1.trigger-type.exit'))
                            ]),
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab1.campaign-start-date')),
                                m('.col-right', ctrl.message.date() ? moment(ctrl.message.date()).format('DD.MM.YYYY, HH:mm') : t('pu.po.tab1.scheduling-auto-now'))
                            ]),
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab1.campaign-end-date')),
                                m('.col-right', ctrl.message.autoEnd() ? moment(ctrl.message.autoEnd()).format('DD.MM.YYYY, HH:mm') : t('pu.never'))
                            ]),
                        ]),	
                    ]) 
                    :
                    m('.form-group', [
                        m('h4', t('pu.po.tab1.title')),
                        m('.comp-push-view-table', [
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab3.date')),
                                m('.col-right', (ctrl.message.date() ? moment(ctrl.message.date()).format('DD.MM.YYYY, HH:mm') : t('pu.po.tab3.date.now')) + 
									(ctrl.message.tz() ? 
									    t('pu.po.tab3.date.intz') 
									    : ctrl.message.autoTime() ? 
									        t('pu.po.tab3.date.intz') + ' ' + t('pu.at') + ctrl.message.autoTime()
									        : ''
									)	
                                )
                            ]),
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab1.campaign-end-date')),
                                m('.col-right', ctrl.message.autoEnd() ? moment(ctrl.message.autoEnd()).format('DD.MM.YYYY, HH:mm') : t('pu.never'))
                            ]),
                        ]),	
                    ]),

                ctrl.message.auto() ? 
                    m('.form-group', [
                        m('h4', t('pu.po.tab2.title.auto')),
                        m('.comp-push-view-table', [
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab2.delivery-method')),
                                m('.col-right', delayed ? 
                                    t('pu.po.tab2.delayed') + ': ' + 
										[t('pu.min'),
										    (delayedDays ? t.nn('pu.days', delayedDays) : ''),
										    (delayedHours ? t.nn('pu.hours', delayedHours) : '')].join(' ')
                                    : t('pu.po.tab2.immediately'))
                            ]),
							m('.comp-push-view-row', [
								m('.col-left', t('pu.po.tab2.send-in-user-tz')),
								m('.col-right', timed ? timedHours + ':' + timedMinutes : t('pu.no'))
							]),
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab2.capping')),
                                m('.col-right', ctrl.message.autoCapMessages() || ctrl.message.autoCapSleep() ?
                                    m.trust([
                                        ctrl.message.autoCapMessages() ? t('pu.max') + ' ' + t.nn('pu.messages', ctrl.message.autoCapMessages()) : '',
                                        capped ?  
											 [t('pu.min'),
											 (cappedDays ? t.nn('pu.days', cappedDays) : ''),
											 (cappedHours ? t.nn('pu.hours', cappedHours) : ''),
											 t('pu.messages.between')].join(' ')
                                            : '',
                                    ].filter(function(x){ return !!x; }).join('<br />'))
                                    : t('pu.no')
                                )

                            ]),
                        ]),	
                    ]) 
                    :'',

                m('.form-group', [
                    m('h4', t('pu.po.compose.title')),
                    m('.comp-push-view-table', [
                        m('.comp-push-view-row', [
                            m('.col-left', t('pu.po.tab3.type')),
                            m('.col-right', t('pu.po.tab3.type.' + ctrl.message.type()))
                        ]),
                        ctrl.message.sound() ?
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab3.extras.sound')),
                                m('.col-right', m.trust(ctrl.message.sound()))
                            ])
                            : '',
                        ctrl.message.badge() !== undefined ?
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab3.extras.badge')),
                                m('.col-right', ctrl.message.badge())
                            ])
                            : '',
                        ctrl.message.url() ?
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab3.extras.url')),
                                m('.col-right', m.trust(ctrl.message.url()))
                            ])
                            : '',
                        ctrl.message.media() ?
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab3.extras.media')),
                                m('.col-right', m.trust(ctrl.message.media()))
                            ])
                            : '',
                        ctrl.message.data() ?
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab3.extras.data')),
                                m('.col-right', m.trust(ctrl.message.data()))
                            ])
                            : '',
                        ctrl.message.messagePerLocale() && ctrl.message.messagePerLocale()['default' + push.C.S + 't'] ? m('.comp-push-view-row', [
                            m('.col-left', t('pu.po.tab4.message-title')),
                            m('.col-right', m.trust(ctrl.message.messagePerLocale()['default' + push.C.S + 't']))
                        ]) : '',
                        ctrl.message.buttons() > 0 ? m('.comp-push-view-row', [
                            m('.col-left', t('pu.po.tab3.btns')),
                            m('.col-right', [
                                m('.comp-push-view-row', [
                                    m('.col-left', ctrl.message.messagePerLocale()['default' + push.C.S + '0' + push.C.S + 't']),
                                    m('.col-right', m.trust(ctrl.message.messagePerLocale()['default' + push.C.S + '0' + push.C.S + 'l']))
                                ]),
                                ctrl.message.buttons() > 1 ? m('.comp-push-view-row', [
                                    m('.col-left', ctrl.message.messagePerLocale()['default' + push.C.S + '1' + push.C.S + 't']),
                                    m('.col-right', m.trust(ctrl.message.messagePerLocale()['default' + push.C.S + '1' + push.C.S + 'l']))
                                ]) : ''
                            ])
                        ]) : '',
                        ctrl.message.messagePerLocale() && ctrl.message.messagePerLocale().default ?
                            m('.comp-push-view-row', [
                                m('.col-left', t('pu.po.tab4.message-content')),
                                m('.col-right', 
                                    localesSet.map(function(l){
                                        return m('.comp-push-view-row', [
                                            m('.col-left', l === 'default' ? 'Default' : l === 'null' ? t('pu.locale.null') : window.countlyGlobalLang.languages[l] ? window.countlyGlobalLang.languages[l].englishName : l),
                                            m('.col-right', [
                                                messageContent[l].title ? [m('b', m.trust(messageContent[l].title)), m('br')] : '',
                                                messageContent[l].message ? m.trust(messageContent[l].message) : ''
                                            ])
                                        ]);
                                    })
                                )
                            ])
                            : '',
                    ]),	
                ]), 

                // m('.comp-push-view-table', [
                // 	ctrl.isView ? 
                // 		''
                // 		: m('.comp-push-view-row', [
                // 			m('.col-left', t('pu.po.tab3.audience')),
                // 			m('.col-right', ctrl.message.count() || ctrl.message.result.processed())
                // 		]),
                // 	ctrl.message.result.isDone() ? 
                // 		m('.comp-push-view-row', [
                // 			m('.col-left', t('pu.po.tab3.date.sent')),
                // 			m('.col-right', ctrl.message.sent() ? moment(ctrl.message.sent()).format('DD.MM.YYYY, HH:mm') : '')
                // 		])
                // 		: '',
                // ]),

                // ctrl.message.messagePerLocale() && ctrl.message.messagePerLocale().default ? 
                // 	m('div', [
                // 		m('h4.comp-push-space-top', t('pu.po.tab3.message')),
                // 		m('.comp-push-view-message', ctrl.message.messagePerLocale().default)
                // 		// Object.keys(ctrl.message.messagePerLocale()).length === 1 ? 
                // 			// m('.comp-push-view-table', m('.comp-push-view-row', ctrl.message.messagePerLocale().default))
                // 			// : 
                // 			// m.component(ctrl.locales)
                // 	])
                // 	: '',
            ]);
        }
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('radio', function(radio) {
    var t = window.components.t, count = 0;
	
    radio.controller = function(opts){
        if (!(this instanceof radio.controller)) {
            return new radio.controller(opts);
        }

        this.opts = opts;
        this.value = typeof opts.value === 'function' ? opts.value : m.prop(opts.value);
        this.options = m.prop(opts.options.map(window.components.selector.Option));
        this.id = 'comp-radio-' + count++;
    };
    radio.view = function(ctrl){
        return m('.comp-radio' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), ctrl.options().map(function(o){
            var opts = {name: ctrl.id, 
                value: o.value(), 
                onchange: m.withAttr('checked', ctrl.value)
            };
            if (('' + ctrl.value()) === ('' + o.value())) {
                opts.checked = 'checked';
            }

            return m('.comp-radio-option', {class: opts.checked ? 'comp-active' : 'comp-inactive', onclick: ctrl.value.bind(ctrl, o.value())}, [
                m('div', [
                    m('input[type="radio"]', opts), 
                    m('label', o.title()),
                ]),
				
                o.desc() ? m('div.help-holder', m('span.help', o.desc())) : '',
                o.view ? o.view() : ''
            ]);
        }));
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('segmented', function(segmented) {
    var t = window.components.t, count = 0;
	
    segmented.controller = function(opts){
        if (!(this instanceof segmented.controller)) {
            return new segmented.controller(opts);
        }

        this.opts = opts;
        this.value = typeof opts.value === 'function' ? opts.value : m.prop(opts.value);
        this.options = m.prop(opts.options.map(window.components.selector.Option));
        this.id = 'comp-segmented-' + count++;
    };
    segmented.view = function(ctrl){
        return m(ctrl.opts.legacy ? '.button-selector.btn-header' : '.comp-segmented' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), ctrl.options().map(function(o){
            var opts = {name: ctrl.id, 
                'data-value': o.value(), 
                onclick: function() {
                    ctrl.value(this.attributes['data-value'].value);
                    if (ctrl.opts.onchange) { ctrl.opts.onchange(ctrl.value()); }
                    // m.withAttr('data-value', ctrl.value)
                }
            };
            if (('' + ctrl.value()) === ('' + o.value())) {
                opts.class = 'active';
            }

            return m(ctrl.opts.legacy ? '.button' : '.comp-segmented-option', opts, o.view ? o.view() : o.title());
        }));
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('select', function(select) {
    select.controller = function(opts){
        if (!(this instanceof select.controller)) {
            return new select.controller(opts);
        }

        this.opts = opts;
        this.value = typeof opts.value === 'function' ? opts.value : m.prop(opts.value);
        this.options = m.prop(opts.options.map(window.components.selector.Option));
    };
    select.view = function(ctrl){
        return m('.comp-select', m('select' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), {onchange: m.withAttr('value', ctrl.value)}, ctrl.options().map(function(o){
            var opts = {
                value: o.value()
            };
            if (('' + ctrl.value()) === ('' + o.value())) {
                opts.selected = 'selected';
            }

            return m('option', opts, o.title());
        })));
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('selector', function(selector) {
    var t = window.components.t;
	
    selector.Option = function(data){
        if (data instanceof selector.Option) {
            return data;
        } else if (!(this instanceof selector.Option)) {
            return new selector.Option(data);
        }
        this.value = m.prop(data.value);
        this.title = m.prop(data.title);
        this.desc = m.prop(data.desc);
        this.view = data.view;
        this.selected = m.prop(data.selected || false);
    };
    selector.controller = function(opts){
        if (!(this instanceof selector.controller)) {
            return new selector.controller(opts);
        }

        this.opts = opts;
        this.title = m.prop(opts.title || 'Selector');
        this.addTitle = m.prop(opts.addTitle || 'Add');
        this.searchPlaceholder = m.prop(opts.searchPlaceholder || 'Search ...');
        this.options = m.prop(opts.options.map(selector.Option));
        this.selected = this.options().filter.bind(this.options(), function(o){ return o.selected(); });

        this.adding = m.prop(false);
        this.search = m.prop('');

        this.addToggle = function(ev){
            ev.preventDefault();
            this.search('');
            this.adding(!this.adding());
        }.bind(this);

        this.remove = function(value){
            for (var i = this.selected().length - 1; i >= 0; i--) {
                var o = this.selected()[i];
                if (('' + o.value()) === value) {
                    o.selected(false);
                    if (opts.onchange) { opts.onchange(this.selected()); }
                    break;
                }
            }
        }.bind(this);

        this.checkbox = function(ev){
            for (var i = this.options().length - 1; i >= 0; i--) {
                var o = this.options()[i];
                if (('' + o.value()) === ev.target.value) {
                    o.selected(ev.target.checked);
                    if (opts.onchange) { opts.onchange(this.selected()); }
                    break;
                }
            }
        }.bind(this);
    };
    selector.view = function(ctrl){
        return m('.comp-selector' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), [
            m('.comp-selector-title', [ctrl.title(), m('a.ion-plus', {href: '#', onclick: ctrl.addToggle})]),
            m('.comp-selector-selected', ctrl.selected().length ? ctrl.selected().map(function(o){
                return m('.comp-selector-option.selected', [
                    m('span.ion-close', {'data-value': o.value(), onclick: m.withAttr('data-value', ctrl.remove)}), 
                    o.title()
                ]);
            }) : m('span.help', 'Select one or more apps to proceed')),
            // m('a.comp-selector-add-btn', {href: '#', onclick: ctrl.addToggle}, ctrl.addTitle()),
            m('.comp-selector-add', {class: ctrl.adding() ? 'active' : ''}, [
                m('.comp-selector-title', [ctrl.addTitle(), m('a.ion-plus', {href: '#', onclick: ctrl.addToggle})] ),
                m('.comp-selector-add-search', [
                    m('span.ion-search'),
                    m('input', {onkeyup: m.withAttr('value', ctrl.search), value: ctrl.search()}),
                ]),
                m('.comp-selector-search-values', ctrl.options().filter(function(o){ 
                    return ('' + o.value()).toLowerCase().indexOf(ctrl.search().toLowerCase()) !== -1 || ('' + (o.title() || '')).toLowerCase().indexOf(ctrl.search().toLowerCase()) !== -1; 
                }).map(function(o){
                    return m('.comp-selector-option', {'data-value': o.value()}, [
                        m('input[type="checkbox"]', o.selected() ? {checked: 'checked', value: o.value(), onchange: ctrl.checkbox} : {value: o.value(), onchange: ctrl.checkbox}),
                        o.title()
                    ]);
                }))
            ]),
        ]);
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('singleselect', function (sselect) {
    sselect.controller = function (opts) {
        if (!(this instanceof sselect.controller)) {
            return new sselect.controller(opts);
        }

        this.opts = opts;
        this.value = typeof opts.value === 'function' ? opts.value : m.prop(opts.value);
        this.options = m.prop(opts.options.map(window.components.selector.Option));
        this.icon = opts.icon || '';

        this.isOpen = false;
        this.onSelectClick = function (ev) {
            this.isOpen = !this.isOpen;
            if (opts.onclick) {
                opts.onclick(ev);
            }
        };
        this.hideDropDown = function () {
            m.startComputation();
            this.isOpen = false;
            m.endComputation();
        };
    };
    sselect.view = function (ctrl) {

        var selected = ctrl.options().find(function (o) {
            return (('' + ctrl.value()) === ('' + o.value()));
        });

        return m('div.comp-singleselect.cly-select.text-align-left' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), {
            config: function (elm) {
                var container = $(elm);
                $(window).unbind('click.' + ctrl.opts.id).bind('click.' + ctrl.opts.id,  function(e){
                    if (container && !container.is(e.target) && container.has(e.target).length === 0) {
                        ctrl.hideDropDown();
                    }
                });
            }
        }, [
            m('.select-inner', {
                onclick: function (e) {
                    ctrl.onSelectClick(e);
                    e.stopPropagation();
                }
            }, [
                m('.text-container', [
                    selected
                        ? m('.text', { 'data-value': selected.value() }, [
                            ctrl.icon,
                            m('.default-text', selected.title())
                        ])
                        : m('.text', [
                            ctrl.icon,
                            m('.default-text', ctrl.opts.placeholder)
                        ])
                ]),
                m('.right combo')
            ]),
            m('.select-items square', {
                style: {
                    width: '100%',
                    display: ctrl.isOpen ? 'block' : 'none'
                }
            }, m('.scroll-list', {
                style: {
                    'overflow-y': 'none'
                },
                config: function (el) {
                    if (ctrl.isOpen && !$(el).parent().hasClass('slimScrollDiv') && ctrl.options().length >= 10) {
                        $(el).slimScroll({
                            height: '100%',
                            start: 'top',
                            wheelStep: 10,
                            position: 'right',
                            disableFadeOut: true,
                            allowPageScroll: true,
                            alwaysVisible: true
                        });
                    }
                }
            }, m('.items', [
                ctrl.options()
                    .map(function (o) {
                            return o.value() !== undefined && o.value() !== null && o.value() !== '' ? 
                            m('.item.scrollable', {'data-value': o.value(), onclick: function(e){
                                e.stopPropagation();
                                if (typeof ctrl.value === 'function')
                                    ctrl.value.apply(this, [o.value()]);
                                ctrl.hideDropDown();
                            }}, o.title()) 
                            :
                            m('.group', o.title());
                    })
            ]))
            )
        ]);
    };
});;'use strict';

/* jshint undef: true, unused: true */
/* globals m, app */

if (!window.components) {
    window.components = {};
}

if (!window.components.slider) {
    var t = window.components.t;
    var defaultWidth = function() {
            return Math.min(document.body.clientWidth - document.getElementById('sidebar').clientWidth, 968);
        }, CLS = 'comp-slider comp-tt-bounding';

    var slider = window.components.slider = {
        Slider: function(data) {
            this.key = data.key || '';
            this.class = data.class || '';
            this.width = data.width;
            this.onclose = data.onclose;
            this.title = m.prop(data.title || '');
            this.desc = m.prop(data.desc || '');
            this.loadingTitle = m.prop(data.loadingTitle || '');
            this.loadingDesc = m.prop(data.loadingDesc || '');
            this.component = data.component;
            this.componentOpts = data.componentOpts;
            this.footer = data.footer;
        },

        controller: function() {
            this.config = function(el, isInitialized) {
                if (!isInitialized) {
                    this.el = document.body.querySelector('.comp-slider');
                    // this.overflow = document.body.style.overflow || 'auto';
                    // this.el.onmouseover = function() {
                    // 	document.body.style.overflow = 'hidden';
                    // };
                    // this.el.onmouseout = function() {
                    // 	document.body.style.overflow = this.overflow;
                    // }.bind(this);
                    // this.el.onmousewheel = function(ev) {
                    // 	if (ev.target === el) {
                    // 		ev.stopPropagation();
                    // 		if (ev.deltaY < 0 && ev.target.scrollTop <= 0) { ev.preventDefault(); }
                    // 		else if (ev.deltaY > 0 && ev.target.scrollTop + ev.target.offsetHeight >= ev.target.scrollHeight) { ev.preventDefault(); }
                    // 	}
                    // };
                }
            }.bind(this);

            this.show = function(model) {
                this.model = model;
                this.setWidth(this.model.width || defaultWidth());
                this.el.className = CLS + this.model.class;
                document.body.style.overflow = 'hidden';
                return this;
            };

            this.close = function(ev){
                if (ev) { ev.preventDefault(); }
                if (this.model) {
                    if (this.model.onclose) { this.model.onclose(this.model); }
                }
                this.el.className = CLS + ' comp-slider-closed';
                this.model = null;
                document.body.style.overflow = 'auto';
                return this;
            }.bind(this);

            this.setWidth = function(width, once) {
                if (this.el.className.indexOf('comp-slider') === -1) {
                    return;
                }

                this.el.style.width = width + 'px';

                var btns = this.el.querySelector('.btns');
                if (btns) { btns.style.width = width + 'px'; }

                // if (!once) {
                // 	setTimeout(this.setWidth.bind(this, width, true), 10);
                // 	setTimeout(this.setWidth.bind(this, width, true), 200);
                // }
            };
			
            var prev = document.body.onresize;
            this.onresize = function() {
                if (prev) { prev(); }
                if (this.model) this.setWidth(this.model.width || defaultWidth());
            }.bind(this);
            document.body.onresize = this.onresize;

            this.loading = function(loading) {
                this.el.className = [CLS, (loading ? ' loading' : ''), this.model.class].join(' ');
            };

            slider.instance = this;
        },

        view: function(ctrl) {
            return m('div.comp-slider-inner', {config: ctrl.config, key: ctrl.model ? ctrl.model.key : 'neow'}, 
                ctrl.model ? 
                    [
                        m('.loadable.prevent-body-scroll', [
                            m('div.comp-slider-title', [
                                typeof ctrl.model.title() === 'function' ? ctrl.model.title()() : ctrl.model.title() ? m('h3', ctrl.model.title()) : '',
                                typeof ctrl.model.desc() === 'function' ? ctrl.model.desc()() : ctrl.model.desc() ? m('h5', ctrl.model.desc()) : '',
                                m('div.slider-close', { onclick: ctrl.close }, [
                                    m('i.ion-ios-close-empty')
                                ])
                            ]),
                            m('div.comp-slider-content', m.component(ctrl.model.component, ctrl.model.componentOpts)),
                            ctrl.model.footer ? m.component(ctrl.model.footer) : ''
                        ]),
                        ctrl.model.loadingTitle() ? 
                            m('.loader', [
                                m('.loading-bars'),
                                m('div', [
                                    m('h3', typeof ctrl.model.loadingTitle() === 'function' ? ctrl.model.loadingTitle()() : ctrl.model.loadingTitle()),
                                    m('h6', typeof ctrl.model.loadingDesc() === 'function' ? ctrl.model.loadingDesc()() : ctrl.model.loadingDesc())
                                ])
                            ]) : ''
                    ]
                    : ''
            );
        },

        show: function(opts){
            if (slider.instance.model) {
                slider.instance.close();
                setTimeout(function(){
                    m.startComputation();
                    slider.instance.show(new slider.Slider(opts));
                    m.endComputation();
                }, 300);
            } else {
                slider.instance.show(new slider.Slider(opts));
            }
        },
    };

    var el = document.createElement('div');
    el.className = CLS + ' comp-slider-closed';
    document.body.appendChild(el);
    m.mount(el, window.components.slider);
};'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('tabs', function(tabs) {
    tabs.controller = function(tabs, opts){
        if (!tabs.length && tabs.tabs) {
            opts = tabs.opts;
            tabs = tabs.tabs;
        }
        this.opts = opts;
        this.tab = m.prop(0);
        this.tabs = tabs;
        this.customComponent = null;

        var self = this;
        this.click = function(ev){
            ev.preventDefault();
            var tab = parseInt(this.attributes['data-tab'].value);
            if (opts.tabset) {
                opts.tabset(ev, tab);
            } else if (!opts.stepbystep || (opts.stepbystep && !opts.tabenabled && self.tab() > tab) || (opts.stepbystep && opts.tabenabled && opts.tabenabled(tab))) {
                self.tab(tab);
                if (opts.ontab) { opts.ontab(self.tab()); }
            }
        };

        this.set = function(tab) {
            if (typeof tab === 'undefined') {
                tab = this.tab() < this.tabs.length - 1 ? this.tab() + 1 : this.tab();
            }
            this.tab(tab);
            if (opts.ontab) { opts.ontab(this.tab()); }
        };
    };
    tabs.view = function(ctrl){
        return m('div', [ 
            m('.comp-tabs-tabs' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), ctrl.tabs.map(function(tab, i){
                return m('.comp-tabs-tab', {
                    onclick: ctrl.click, 
                    class: i === ctrl.tab() && !ctrl.customComponent ? 'active' : '',
                    'data-tab': i
                }, 
                tab.tab ? tab.tab(i === ctrl.tab()) : (tab.component ? m.component(tab.component, tab.componentOpts, i === ctrl.tab()) : i)
                );
            })), 
            m('.comp-tabs-content', m.component(ctrl.customComponent || ctrl.tabs[ctrl.tab()])) 
        ]);
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('tagselector', function(tagselector) {
    var t = window.components.t;
	
    tagselector.controller = function(opts){
        if (!(this instanceof tagselector.controller)) {
            return new tagselector.controller(opts);
        }

        this.opts = opts;
        this.placeholder = m.prop(opts.placeholder || 'Nothing to select from ...');
        this.searchPlaceholder = m.prop(opts.searchPlaceholder || 'Type to search ...');
        this.options = m.prop(opts.options.map(window.components.selector.Option));
        this.selected = this.options().filter.bind(this.options(), function(o){ return o.selected(); });
        this.searched = this.options().filter.bind(this.options(), function(o){ 
            return !o.selected() && (('' + o.value()).toLowerCase().indexOf(this.search().toLowerCase()) !== -1 || ('' + (o.title() || '')).toLowerCase().indexOf(this.search().toLowerCase()) !== -1); 
        }.bind(this));

        this.search = m.prop('');

        this.toggle = function(value){
            this.options().forEach(function(o){
                if (('' + o.value()) === value) {
                    if (!o.selected()) { this.search(''); }
                    o.selected(!o.selected());
                    if (opts.onchange) { opts.onchange(this.selected()); }
                }
            }.bind(this));
        }.bind(this);

        this.onsearch = function(ev) {
            // debugger
            if (typeof ev === 'string') {
                this.search(ev);
            } else {
                if (ev.keyCode === 13 && this.searched().length === 1) {
                    this.toggle(this.searched()[0].value());
                    this.search('');
                    return false;
                } else if (ev.keyCode === 27) {
                    this.search('');
                    return false;
                } else {
                    return true;
                }
            }
        }.bind(this);
    };
    tagselector.view = function(ctrl){
        return m('.comp-tagselector' + (ctrl.opts.class ? '.' + ctrl.opts.class : ''), [
            m('.comp-tagselector-selected', ctrl.selected().map(function(o){
                return m('.comp-tagselector-option.selected', [
                    o.title(),
                    m('span.ion-close', {'data-value': o.value(), onclick: m.withAttr('data-value', ctrl.toggle)})
                ]);
            }).concat([m('input.comp-tagselector-search', {placeholder: ctrl.searchPlaceholder(), key: 'comp-tagselector-search', oninput: m.withAttr('value', ctrl.onsearch), onkeydown: ctrl.onsearch, value: ctrl.search()})])),

            m('.comp-tagselector-options', 
                m('div', m('div', ctrl.searched().map(function(o){
                    return m('.comp-tagselector-option', {'data-value': o.value(), onclick: m.withAttr('data-value', ctrl.toggle)}, o.title());
                })))
            )
        ]);
    };
});

;'use strict';

/* jshint undef: true, unused: true */

window.component('tooltip', function (tooltip) {
    tooltip.configF = function (el, isInitialized) {
        if (!isInitialized) {
            $(el).tooltipster({
                animation: 'fade',
                animationDuration: 100,
                delay: 100,
                maxWidth: 240,
                theme: 'tooltipster-borderless',
                trigger: 'custom',
                triggerOpen: {
                    mouseenter: true,
                    touchstart: true
                },
                triggerClose: {
                    mouseleave: true,
                    touchleave: true
                },
                interactive: true,
                contentAsHTML: true
            });
        }
    };

    tooltip.config = function (text) {
        return {
            title: text,
            config: tooltip.configF
        };
    };
});
;'use strict';

/* jshint undef: true, unused: true */
/* globals m */

window.component('widget', function (widget) {
    var t = window.components.t;

    widget.view = function (ctrl, opts) {
        Object.keys(opts).forEach(function (k) {
            opts[k].config = opts[k].config || {};
            if (opts[k].help) {
                opts[k].config = window.components.tooltip.config(opts[k].help, opts[k].config);
            }
        });
        if (opts.footer && opts.footer.bignumbers) {
            opts.footer.config.class = (opts.footer.config.class || '') + ' big-numbers-v2';
        }
        return m('.widget', [
            opts.header ?
                m('.widget-header', opts.header.config, [
                    opts.header.title ?
                        m('.left', m('.title', t(opts.header.title)))
                        : '',
                    opts.header.control ?
                        m.component(opts.header.control.component, opts.header.control.opts)
                        : '',
                    opts.header.view ?
                        opts.header.view
                        : ''
                ])
                : '',
            opts.content ?
                [
                    opts.content.tabButtons && opts.content.tabButtons.isVisible ?
                        m('.tab-buttons', [
                            m('div', {
                                class: opts.content.tabButtons.tab() === '' ? 'active' : '',
                                onclick: function () { opts.content.tabButtons.onChange(''); }
                            }, t('push.po.one-time-messages')),
                            m('div', {
                                class: opts.content.tabButtons.tab() === '_automated' ? 'active' : '',
                                onclick: function () { opts.content.tabButtons.onChange('_automated'); }
                            }, t('push.po.automated-messages'))
                        ]) : '',
                    m('.widget-content', opts.content.config, opts.content.view)
                ]
                : '',
            opts.footer ?
                m('.widget-footer', opts.footer.config, [
                    opts.footer.view ?
                        opts.footer.view
                        : '',
                    opts.footer.bignumbers ?
                        m('.big-numbers-container', opts.footer.bignumbers.map(function (n) {
                            n.config = n.config || {};
                            if (n.help) {
                                // n.config.class = (n.class || '') + ' help-zone-vs';
                                // n.config['data-help-localize'] = n.help;
                                n.config = window.components.tooltip.config(t(n.help), { class: 'help' });
                            }
                            return m('.big-numbers.two-columns', n.config, m('.inner', [
                                typeof n.color !== 'undefined' ?
                                    m('.color')
                                    : '',
                                n.title ?
                                    m('.select', t(n.title))
                                    : '',
                                typeof n.number !== 'undefined' ?
                                    m('.number', n.number)
                                    : '',
                                n.trend ?
                                    m('.trend', { style: { 'background-image': 'url(\'./images/dashboard/{{' + n.trend + '}}trend.png\')' } })
                                    : ''
                            ]));
                        }))
                        : '',
                ])
                : ''
        ]);
    };
});
;var jsonlite;
(function (jsonlite) {
    function parse(source, jsonObjectFormat) {
        if (typeof jsonObjectFormat === "undefined") { jsonObjectFormat = true; }
        var object_start = jsonObjectFormat ? '{' : '(';
        var object_end = jsonObjectFormat ? '}' : ')';
        var pair_seperator = jsonObjectFormat ? ':' : '=';
        var at = 0;
        var ch = ' ';
        var escapee = {
            '"': '"',
            '\\': '\\',
            '/': '/',
            b: '\b',
            f: '\f',
            n: '\n',
            r: '\r',
            t: '\t'
        };
        var text = source;
        var result = readValue();
        skipWhitespace();
        if(ch) {
            raiseError("Syntax error");
        }
        return result;
        function raiseError(m) {
            throw {
                name: 'SyntaxError',
                message: m,
                at: at,
                text: text
            };
        }
        function next(c) {
            if(c && c !== ch) {
                raiseError("Expected '" + c + "' instead of '" + ch + "'");
            }
            ch = text.charAt(at);
            at += 1;
            return ch;
        }
        function readString() {
            var s = '';
            if(ch === '"') {
                while(next()) {
                    if(ch === '"') {
                        next();
                        return s;
                    }
                    if(ch === '\\') {
                        next();
                        if(ch === 'u') {
                            var uffff = 0;
                            for(var i = 0; i < 4; i += 1) {
                                var hex = parseInt(next(), 16);
                                if(!isFinite(hex)) {
                                    break;
                                }
                                uffff = uffff * 16 + hex;
                            }
                            s += String.fromCharCode(uffff);
                        } else if(typeof escapee[ch] === 'string') {
                            s += escapee[ch];
                        } else {
                            break;
                        }
                    } else {
                        s += ch;
                    }
                }
            }
            raiseError("Bad string");
        }
        function skipWhitespace() {
            while(ch && ch <= ' ') {
                next();
            }
        }
        function readWord() {
            var s = '';
            while(allowedInWord()) {
                s += ch;
                next();
            }
            if(s === "true") {
                return true;
            }
            if(s === "false") {
                return false;
            }
            if(s === "null") {
                return null;
            }
            if(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/.test(s)) {
                return parseFloat(s);
            }
            return s;
        }
        function readArray() {
            var array = [];
            if(ch === '[') {
                next('[');
                skipWhitespace();
                if(ch === ']') {
                    next(']');
                    return array;
                }
                while(ch) {
                    array.push(readValue());
                    skipWhitespace();
                    if(ch === ']') {
                        next(']');
                        return array;
                    }
                    next(',');
                    skipWhitespace();
                }
            }
            raiseError("Bad array");
        }
        function readObject() {
            var o = {
            };
            if(ch === object_start) {
                next(object_start);
                skipWhitespace();
                if(ch === object_end) {
                    next(object_end);
                    return o;
                }
                while(ch) {
                    var key = ch === '"' ? readString() : readWord();
                    if(typeof key !== 'string') {
                        raiseError('Bad object key: ' + key);
                    }
                    skipWhitespace();
                    next(pair_seperator);
                    if(Object.hasOwnProperty.call(o, key)) {
                        raiseError('Duplicate key: "' + key + '"');
                    }
                    o[key] = readValue();
                    skipWhitespace();
                    if(ch === object_end) {
                        next(object_end);
                        return o;
                    }
                    next(',');
                    skipWhitespace();
                }
            }
            raiseError("Bad object");
        }
        function readValue() {
            skipWhitespace();
            switch(ch) {
                case object_start:
                    return readObject();
                case '[':
                    return readArray();
                case '"':
                    return readString();
                default:
                    return readWord();
            }
        }
        function allowedInWord() {
            switch(ch) {
                case '"':
                case '\\':
                case '\t':
                case '\n':
                case '\r':
                case ',':
                case '[':
                case ']':
                case object_start:
                case object_end:
                case pair_seperator:
                    return false;
            }
            return ch > ' ';
        }
    }
    jsonlite.parse = parse;
})(jsonlite || (jsonlite = {}));;'use strict';

/* jshint undef: true, unused: true */
/* globals app, $, countlyGlobal, components, countlyCommon, countlySegmentation, countlyUserdata, CountlyHelpers, jQuery, countlyManagementView, Backbone */

app.addAppManagementView('push', jQuery.i18n.map['push.plugin-title'], countlyManagementView.extend({
    initialize: function() {
        this.plugin = 'push';
        this.templatePath = '/push/templates/push.html';
        this.resetTemplateData();
    },

    resetTemplateData: function() {
        var c = this.config();
        if (c.i && c.i._id) {
            this.templateData = {
                i: {
                    _id: c.i._id,
                    type: c.i.type,
                    key: c.i.key,
                    team: c.i.team,
                    bundle: c.i.bundle,
                    help: c.i.type === 'apn_universal' && c.i._id ? '<i class="fa fa-check-circle"></i>' + jQuery.i18n.map['mgmt-plugins.push.uploaded.p12'] : c.i.type === 'apn_token' ? '<i class="fa fa-check-circle"></i>' + jQuery.i18n.map['mgmt-plugins.push.uploaded.p8'] : ''
                    // help: '<a href="' + countlyCommon.API_URL + '/i/pushes/download/' + c.i._id + '?api_key=' + countlyGlobal.member.api_key + '">' + jQuery.i18n.map['mgmt-plugins.push.uploaded'] + '</a>. ' + (c.i.type === 'apn_universal' ? (jQuery.i18n.map['mgmt-plugins.push.uploaded.bundle'] + ' ' + c.i.bundle) : '')
                }
            };
        }
        else {
            this.templateData = {
                i: {
                    type: 'apn_token',
                    key: '',
                    team: '',
                    bundle: '',
                }
            };
        }
        this.templateData.a = {
            _id: c.a && c.a._id || '',
            key: c.a && c.a && c.a.key || '',
            help: c.a && c.a && c.a.key ? jQuery.i18n.map['mgmt-plugins.push.detected'] + ' ' + (c.a.key.length > 50 ? 'FCM' : 'GCM') : ''
        };
    },

    onChange: function(name, value) {
        if (name === 'i.type') {
            this.resetTemplateData();
            countlyCommon.dot(this.templateData, name, value);
            this.render();
        }
        else if (name === 'a.key' && value) {
            this.templateData.a.type = value.length > 100 ? 'fcm' : 'gcm';
            this.el.find('input[name="a.type"]').val(this.templateData.a.type);
        }
        else if (name === 'i.pass' && !value) {
            delete this.templateData.i.pass;
        }
    },

    isSaveAvailable: function() {
        var td = JSON.parse(JSON.stringify(this.templateData)),
            std = JSON.parse(this.savedTemplateData);

        if (td.i) {
            delete td.i.pass;
        }

        if (std.i) {
            delete std.i.pass;
        }

        return JSON.stringify(td) !== JSON.stringify(std);
    },

    validate: function() {
        var i = this.config().i || {},
            //a = this.config().a || {},
            t = this.templateData;

        if (t.i.file || (i.type && t.i.type !== i.type) || t.i.key !== (i.key || '') || t.i.team !== (i.team || '') || t.i.bundle !== (i.bundle || '')) {
            if (t.i.type === 'apn_token') {
                if (!t.i.key) {
                    return jQuery.i18n.map['mgmt-plugins.push.error.nokey'];
                }
                if (!t.i.team) {
                    return jQuery.i18n.map['mgmt-plugins.push.error.noteam'];
                }
                if (!t.i.bundle) {
                    return jQuery.i18n.map['mgmt-plugins.push.error.nobundle'];
                }
                if ((!t.i.file || !t.i.file.length) && !t.i._id) {
                    return jQuery.i18n.map['mgmt-plugins.push.error.nofile'];
                }
            }
            else {
                if ((!t.i.file || !t.i.file.length) && !t.i._id) {
                    return jQuery.i18n.map['mgmt-plugins.push.error.nofile'];
                }
            }
        }
    },

    loadFile: function() {
        var data = JSON.parse(JSON.stringify(this.templateData));

        if (data.i.file) {
            if (data.i.file.indexOf('.p8') === data.i.file.length - 3) {
                data.i.fileType = 'p8';
            }
            else if (data.i.file.indexOf('.p12') === data.i.file.length - 4) {
                data.i.fileType = 'p12';
            }
            else {
                return $.Deferred().reject('File type not supported');
            }

            var d = new $.Deferred(),
                reader = new window.FileReader();

            reader.addEventListener('load', function() {
                data.i.file = reader.result;
                d.resolve({push: data});
            });
            reader.addEventListener('error', d.reject.bind(d));
            reader.readAsDataURL(this.el.find('input[name="i.file"]')[0].files[0]);

            return d.promise();
        }
        else {
            return $.when({push: data});
        }
    },

    prepare: function() {
        // var text = jQuery.i18n.map["plugins.confirm"];
        // var msg = { title: jQuery.i18n.map["plugins.processing"], message: jQuery.i18n.map["plugins.wait"], info: jQuery.i18n.map["plugins.hold-on"], sticky: true };
        // CountlyHelpers.confirm(text, "popStyleGreen popStyleGreenWide", function (result) {
        //     if (!result) {
        //         return true;
        //     }
        //     CountlyHelpers.notify(msg);
        //     app.activeView.togglePlugin(plugins);
        // },[jQuery.i18n.map["common.no-dont-continue"],jQuery.i18n.map["plugins.yes-i-want-to-apply-changes"]],{title:jQuery.i18n.map["plugins-apply-changes-to-plugins"],image:"apply-changes-to-plugins"});
        return this.loadFile().then(function(data) {
            delete data.push.i.help;
            delete data.push.a.help;

            if (!data.push.i.file && !data.push.i._id) {
                data.push.i = null;
            }
            else if (data.push.i.file) {
                delete data.push.i._id;
            }

            if (!data.push.a.key) {
                data.push.a = null;
            }


            return data;
        });
    }
}));

app.addPageScript('/drill#', function() {
    if (countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === 'mobile') {
        if (countlyGlobal.member.global_admin || (countlyGlobal.member.admin_of && countlyGlobal.member.admin_of.indexOf(countlyCommon.ACTIVE_APP_ID) !== -1)) {
            var content =
            '<div class="item" id="action-create-message">' +
                '<div class="item-icon">' +
                    '<span class="logo ion-chatbox-working"></span>' +
                '</div>' +
                '<div class="content">' +
                    '<div class="title" data-localize="pu.send-message"></div>' +
                    '<div class="subtitle" data-localize="pu.send-message-desc"></div>' +
                '</div>' +
            '</div>';

            $('#actions-popup').append(content);
            app.localize();
            $('#action-create-message').off('click').on('click', function() {
                var message = {
                    apps: [countlyCommon.ACTIVE_APP_ID],
                    drillConditions: countlySegmentation.getRequestData()
                };

                // for (var k in filterData.dbFilter) {
                //     if (k.indexOf('up.') === 0) message.conditions[k.substr(3).replace("cmp_","cmp.")] = filterData.dbFilter[k];
                // }

                components.push.popup.show(message);
            });
            $('#bookmark-view').on('click', '.bookmark-action.send', function() {
                var filter = $(this).data('query');

                var message = {
                    apps: [countlyCommon.ACTIVE_APP_ID],
                    drillConditions: filter
                };

                // for (var k in filter) {
                //     if (k.indexOf('up.') === 0) message.conditions[k.substr(3).replace("cmp_","cmp.")] = filter[k];
                // }

                components.push.popup.show(message);
            });
        }
        else {
            $('#drill-actions').remove('.btn-create-message');
        }
    }
});
/**
* Modify user profile views with push additions
**/
function modifyUserDetailsForPush() {
    if (Backbone.history.fragment.indexOf('manage/') === -1 && countlyGlobal.apps[countlyCommon.ACTIVE_APP_ID].type === 'mobile') {
        //check if it is profile view
        if (app.activeView.updateEngagement) {
            var userDetails = countlyUserdata.getUserdetails();

            var tokens = [], platforms = [], test = false, prod = false;
            if (userDetails.tk) {
                tokens = Object.keys(userDetails.tk);
                if (userDetails.tk.id || userDetails.tk.ia || userDetails.tk.ip) {
                    platforms.push('i');
                }
                if (userDetails.tk.at || userDetails.tk.ap) {
                    platforms.push('a');
                }

                test = !!userDetails.tk.id || !!userDetails.tk.ia || !!userDetails.tk.at;
                prod = !!userDetails.tk.ip || !!userDetails.tk.ap;
            }
            if (tokens.length && (countlyGlobal.member.global_admin || (countlyGlobal.member.admin_of && countlyGlobal.member.admin_of.indexOf(countlyCommon.ACTIVE_APP_ID) !== -1))) {
                if (!$('.btn-create-message').length) {
                    $('#user-profile-detail-buttons .cly-button-menu').append('<div class="item btn-create-message" >' + jQuery.i18n.map['push.create'] + '</div>');
                    app.activeView.resetExportSubmenu();
                }
                $('.btn-create-message').show().off('click').on('click', function() {
                    if (platforms.length) {
                        components.push.popup.show({
                            platforms: platforms,
                            apps: [countlyCommon.ACTIVE_APP_ID],
                            test: test && !prod,
                            userConditions: {_id: app.userdetailsView.user_id}
                        });
                    }
                    else {
                        CountlyHelpers.alert(jQuery.i18n.map['push.no-user-token'], 'red');
                    }
                });
                if (!$('#userdata-info > tbody > tr:last-child table .user-property-push').length) {
                    $('<tr class="user-property-push"><td class="text-left"><span>' + components.t('userdata.push') + '</span></td><td class="text-right"></td></tr>').appendTo($('#userdata-info > tbody > tr:last-child table tbody'));
                }
                $('#userdata-info > tbody > tr:last-child table .user-property-push td.text-right').html(tokens.map(function(t) {
                    return components.t('pu.tk.' + t);
                }).join('<br />'));
            }
            else {
                $('#userdata-info > tbody > tr:last-child table .user-property-push').remove();
                $('.btn-create-message').remove();
                app.activeView.resetExportSubmenu();
            }
        }
        else {
            //list view
            if (countlyGlobal.member.global_admin || (countlyGlobal.member.admin_of && countlyGlobal.member.admin_of.indexOf(countlyCommon.ACTIVE_APP_ID) !== -1)) {
                if (!$('.btn-create-message').length) {
                    $('.widget-header').append($('<a class="icon-button green btn-header right btn-create-message" data-localize="push.create"></a>').text(jQuery.i18n.map['push.create']));

                }
                $('.btn-create-message').off('click').on('click', function() {
                    var q = app.userdataView.getExportQuery().query, filterData = {};
                    if (q) {
                        try {
                            filterData = JSON.parse(q);
                        }
                        catch (ignored) {
                            //ignoring error
                        }
                    }

                    components.push.popup.show({
                        apps: [countlyCommon.ACTIVE_APP_ID],
                        userConditions: filterData
                    });
                });
            }
            else {
                $('.btn-create-message').remove();
            }
        }
    }
}

app.addRefreshScript('/users#', modifyUserDetailsForPush);
app.addPageScript('/users#', modifyUserDetailsForPush);

$(document).ready(function() {

    var menu = '<a class="item messaging" id="sidebar-messaging">' +
        '<div class="logo ion-chatbox-working"></div>' +
        '<div class="text" data-localize="push.sidebar.section">Messaging</div>' +
    '</a>' +
    '<div class="sidebar-submenu" id="messaging-submenu">' +
        '<a href="#/messaging" class="item">' +
            '<div class="logo-icon fa fa-line-chart"></div>' +
            '<div class="text" data-localize="push.sidebar.overview">Overview</div>' +
        '</a>' +
    '</div>';
    if ($('#mobile-type #management-menu').length) {
        $('#mobile-type #management-menu').before(menu);
    }
    else {
        $('#mobile-type').append(menu);
    }
});;/*global countlyCommon, countlyGlobal, jQuery, $*/
(function(starRatingPlugin) {
    var _pv = {};
    // feedbackd datas
    var _fd = {};
    // feedback widget datas
    var _fwd = {};
    var _rating = {};
    var _period = {};
    /**
     * This is for  platform  and version info request
     * @namespace starRatingPlugin
     * @method requestPlatformVersion
     * @param {boolean} isRefresh - is it refresh?
     * @return {func} ajax func to request data and store in _pv
     */
    starRatingPlugin.requestPlatformVersion = function(isRefresh) {
        var periodString = countlyCommon.getPeriodForAjax();
        //returning promise
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o",
            data: {
                api_key: countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID,
                method: 'star',
                period: periodString,
                display_loader: !isRefresh
            },
            success: function(json) {
                _pv = json;
            }
        });
    };

    /**
     * This is for fetching star rating data in a period
     * @namespace starRatingPlugin
     * @method requestRatingInPeriod
     * @param {boolean} isRefresh - is it refresh?
     * @return {func} ajax func to request data and store in _rating
     */
    starRatingPlugin.requestRatingInPeriod = function(isRefresh) {
        var periodString = countlyCommon.getPeriodForAjax();
        //returning promise
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o",
            data: {
                api_key: countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID,
                method: 'events',
                period: periodString,
                event: '[CLY]_star_rating',
                segmentation: 'platform_version_rate',
                display_loader: !isRefresh
            },
            success: function(json) {
                _rating = json;
            }
        });
    };


    /**
     * This is for fetching period object from server side when selected period is 'month' in frontend
     * @namespace starRatingPlugin
     * @method requesPeriod
     * @return {func} ajax func to request data and store in _period
     */
    starRatingPlugin.requesPeriod = function() {
        var periodString = countlyCommon.getPeriodForAjax();

        //returning promise
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o",
            data: {
                api_key: countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID,
                method: 'get_period_obj',
                period: periodString
            },
            success: function(json) {
                _period = json;
            }
        });
    };

    /**
     * This is for fetching feedback comments objects from server side 
     * @namespace starRatingPlugin
     * @method requestFeedbackData
     * @param {object} filterObj -  filter querys for feedback data list
     * @return {func} ajax func to request data and store in _fd
     */
    starRatingPlugin.requestFeedbackData = function(filterObj) {
        var periodString = countlyCommon.getPeriodForAjax();
        var data = {api_key: countlyGlobal.member.api_key, app_id: countlyCommon.ACTIVE_APP_ID, period: periodString};
        if (filterObj) {
            if (filterObj.rating && filterObj.rating !== "") {
                data.rating = filterObj.rating;
            }
            if (filterObj.version && filterObj.version !== "") {
                data.version = filterObj.version.replace(":", ".");
            }
            if (filterObj.platform && filterObj.platform !== "") {
                data.platform = filterObj.platform;
            }
            if (filterObj.widget && filterObj.widget !== "") {
                data.widget_id = filterObj.widget;
            }
        }
        // returning promise
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o/feedback/data",
            data: data,
            success: function(json) {
                _fd = json;
            }
        });
    };

    /**
     * This is for fetching feedback comments objects from server side 
     * @namespace starRatingPlugin
     * @method requestSingleWidget
     * @param {string} id - id of widget
     * @param {func} callback - callback method
     * @return {func} ajax func to request data and store in _fd
     */
    starRatingPlugin.requestSingleWidget = function(id, callback) {
        // returning promise
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o/feedback/widget",
            data: {
                widget_id: id,
                app_id: countlyCommon.ACTIVE_APP_ID,
                api_key: countlyGlobal.member.api_key,
            },
            success: function(json) {
                callback(json);
            }
        });
    };

    starRatingPlugin.createFeedbackWidget = function(feedbackWidget, callback) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/i/feedback/widgets/create",
            data: {
                api_key: countlyGlobal.member.api_key,
                popup_header_text: feedbackWidget.popup_header_text,
                popup_comment_callout: feedbackWidget.popup_comment_callout,
                popup_email_callout: feedbackWidget.popup_email_callout,
                popup_button_callout: feedbackWidget.popup_button_callout,
                popup_thanks_message: feedbackWidget.popup_thanks_message,
                trigger_position: feedbackWidget.trigger_position,
                trigger_bg_color: feedbackWidget.trigger_bg_color,
                trigger_font_color: feedbackWidget.trigger_font_color,
                trigger_button_text: feedbackWidget.trigger_button_text,
                target_devices: feedbackWidget.target_devices,
                target_page: feedbackWidget.target_page,
                target_pages: feedbackWidget.target_pages,
                is_active: feedbackWidget.is_active,
                app_id: countlyCommon.ACTIVE_APP_ID
            },
            success: function(json, textStatus, xhr) {
                callback(json, xhr.status);
            }
        });
    };

    starRatingPlugin.editFeedbackWidget = function(feedbackWidget, callback) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/i/feedback/widgets/edit",
            data: {
                api_key: countlyGlobal.member.api_key,
                popup_header_text: feedbackWidget.popup_header_text,
                popup_comment_callout: feedbackWidget.popup_comment_callout,
                popup_email_callout: feedbackWidget.popup_email_callout,
                popup_button_callout: feedbackWidget.popup_button_callout,
                popup_thanks_message: feedbackWidget.popup_thanks_message,
                trigger_position: feedbackWidget.trigger_position,
                trigger_bg_color: feedbackWidget.trigger_bg_color,
                trigger_font_color: feedbackWidget.trigger_font_color,
                trigger_button_text: feedbackWidget.trigger_button_text,
                target_devices: feedbackWidget.target_devices,
                target_page: feedbackWidget.target_page,
                target_pages: feedbackWidget.target_pages,
                is_active: feedbackWidget.is_active,
                app_id: countlyCommon.ACTIVE_APP_ID,
                widget_id: feedbackWidget._id
            },
            success: function(json, textStatus, xhr) {
                callback(json, xhr.status);
            }
        });
    };

    starRatingPlugin.removeFeedbackWidget = function(widget_id, with_data, callback) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/i/feedback/widgets/remove",
            data: {
                app_id: countlyCommon.ACTIVE_APP_ID,
                widget_id: widget_id,
                with_data: true,
                api_key: countlyGlobal.member.api_key
            },
            success: function(json, textStatus, xhr) {
                callback(json, xhr.status);
            }
        });
    };

    /**
     * This is for fetching feedback comments objects from server side 
     * @namespace starRatingPlugin
     * @method requestFeedbackData
     * @return {func} ajax func to request data and store in _fd
     */
    starRatingPlugin.requestFeedbackWidgetsData = function() {
        // returning promise
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o/feedback/widgets",
            data: {
                api_key: countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID
            },
            success: function(json) {
                _fwd = json;
            }
        });
    };

    starRatingPlugin.getFeedbackData = function() {
        return _fd;
    };

    starRatingPlugin.getFeedbackWidgetsData = function() {
        return _fwd;
    };

    starRatingPlugin.getPlatformVersion = function() {
        return _pv;
    };

    starRatingPlugin.getRatingInPeriod = function() {
        return _rating;
    };
    starRatingPlugin.getPeriod = function() {
        return _period;
    };

}(window.starRatingPlugin = window.starRatingPlugin || {}, jQuery));;/*!
 * clipboard.js v2.0.0
 * https://zenorocha.github.io/clipboard.js
 * 
 * Licensed MIT © Zeno Rocha
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.ClipboardJS=e():t.ClipboardJS=e()}(this,function(){return function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=3)}([function(t,e,n){var o,r,i;!function(a,c){r=[t,n(7)],o=c,void 0!==(i="function"==typeof o?o.apply(e,r):o)&&(t.exports=i)}(0,function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var o=function(t){return t&&t.__esModule?t:{default:t}}(e),r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),a=function(){function t(e){n(this,t),this.resolveOptions(e),this.initSelection()}return i(t,[{key:"resolveOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=t.action,this.container=t.container,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var t=this,e="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return t.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[e?"right":"left"]="-9999px";var n=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=n+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,o.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,o.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var t=void 0;try{t=document.execCommand(this.action)}catch(e){t=!1}this.handleResult(t)}},{key:"handleResult",value:function(t){this.emitter.emit(t?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=t,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(t){if(void 0!==t){if(!t||"object"!==(void 0===t?"undefined":r(t))||1!==t.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&t.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(t.hasAttribute("readonly")||t.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=t}},get:function(){return this._target}}]),t}();t.exports=a})},function(t,e,n){function o(t,e,n){if(!t&&!e&&!n)throw new Error("Missing required arguments");if(!c.string(e))throw new TypeError("Second argument must be a String");if(!c.fn(n))throw new TypeError("Third argument must be a Function");if(c.node(t))return r(t,e,n);if(c.nodeList(t))return i(t,e,n);if(c.string(t))return a(t,e,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function r(t,e,n){return t.addEventListener(e,n),{destroy:function(){t.removeEventListener(e,n)}}}function i(t,e,n){return Array.prototype.forEach.call(t,function(t){t.addEventListener(e,n)}),{destroy:function(){Array.prototype.forEach.call(t,function(t){t.removeEventListener(e,n)})}}}function a(t,e,n){return u(document.body,t,e,n)}var c=n(6),u=n(5);t.exports=o},function(t,e){function n(){}n.prototype={on:function(t,e,n){var o=this.e||(this.e={});return(o[t]||(o[t]=[])).push({fn:e,ctx:n}),this},once:function(t,e,n){function o(){r.off(t,o),e.apply(n,arguments)}var r=this;return o._=e,this.on(t,o,n)},emit:function(t){var e=[].slice.call(arguments,1),n=((this.e||(this.e={}))[t]||[]).slice(),o=0,r=n.length;for(o;o<r;o++)n[o].fn.apply(n[o].ctx,e);return this},off:function(t,e){var n=this.e||(this.e={}),o=n[t],r=[];if(o&&e)for(var i=0,a=o.length;i<a;i++)o[i].fn!==e&&o[i].fn._!==e&&r.push(o[i]);return r.length?n[t]=r:delete n[t],this}},t.exports=n},function(t,e,n){var o,r,i;!function(a,c){r=[t,n(0),n(2),n(1)],o=c,void 0!==(i="function"==typeof o?o.apply(e,r):o)&&(t.exports=i)}(0,function(t,e,n,o){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function u(t,e){var n="data-clipboard-"+t;if(e.hasAttribute(n))return e.getAttribute(n)}var l=r(e),s=r(n),f=r(o),d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),p=function(t){function e(t,n){i(this,e);var o=a(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return o.resolveOptions(n),o.listenClick(t),o}return c(e,t),h(e,[{key:"resolveOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText,this.container="object"===d(t.container)?t.container:document.body}},{key:"listenClick",value:function(t){var e=this;this.listener=(0,f.default)(t,"click",function(t){return e.onClick(t)})}},{key:"onClick",value:function(t){var e=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new l.default({action:this.action(e),target:this.target(e),text:this.text(e),container:this.container,trigger:e,emitter:this})}},{key:"defaultAction",value:function(t){return u("action",t)}},{key:"defaultTarget",value:function(t){var e=u("target",t);if(e)return document.querySelector(e)}},{key:"defaultText",value:function(t){return u("text",t)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],e="string"==typeof t?[t]:t,n=!!document.queryCommandSupported;return e.forEach(function(t){n=n&&!!document.queryCommandSupported(t)}),n}}]),e}(s.default);t.exports=p})},function(t,e){function n(t,e){for(;t&&t.nodeType!==o;){if("function"==typeof t.matches&&t.matches(e))return t;t=t.parentNode}}var o=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var r=Element.prototype;r.matches=r.matchesSelector||r.mozMatchesSelector||r.msMatchesSelector||r.oMatchesSelector||r.webkitMatchesSelector}t.exports=n},function(t,e,n){function o(t,e,n,o,r){var a=i.apply(this,arguments);return t.addEventListener(n,a,r),{destroy:function(){t.removeEventListener(n,a,r)}}}function r(t,e,n,r,i){return"function"==typeof t.addEventListener?o.apply(null,arguments):"function"==typeof n?o.bind(null,document).apply(null,arguments):("string"==typeof t&&(t=document.querySelectorAll(t)),Array.prototype.map.call(t,function(t){return o(t,e,n,r,i)}))}function i(t,e,n,o){return function(n){n.delegateTarget=a(n.target,e),n.delegateTarget&&o.call(t,n)}}var a=n(4);t.exports=r},function(t,e){e.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},e.nodeList=function(t){var n=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in t&&(0===t.length||e.node(t[0]))},e.string=function(t){return"string"==typeof t||t instanceof String},e.fn=function(t){return"[object Function]"===Object.prototype.toString.call(t)}},function(t,e){function n(t){var e;if("SELECT"===t.nodeName)t.focus(),e=t.value;else if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName){var n=t.hasAttribute("readonly");n||t.setAttribute("readonly",""),t.select(),t.setSelectionRange(0,t.value.length),n||t.removeAttribute("readonly"),e=t.value}else{t.hasAttribute("contenteditable")&&t.focus();var o=window.getSelection(),r=document.createRange();r.selectNodeContents(t),o.removeAllRanges(),o.addRange(r),e=o.toString()}return e}t.exports=n}])});;/*jslint devel: true, bitwise: true, regexp: true, browser: true, confusion: true, unparam: true, eqeq: true, white: true, nomen: true, plusplus: true, maxerr: 50, indent: 4 */
/*globals jQuery,Color,define */

/*!
 * ColorPicker
 *
 * Copyright (c) 2011-2017 Martijn W. van der Lee
 * Licensed under the MIT.
 */
/* Full-featured colorpicker for jQueryUI with full theming support.
 * Most images from jPicker by Christopher T. Tillman.
 * Sourcecode created from scratch by Martijn W. van der Lee.
 */
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define([
			"jquery"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} (function ($) {
	"use strict";

	var _colorpicker_index = 0,

		_container_popup = '<div class="ui-colorpicker ui-colorpicker-dialog ui-dialog ui-widget ui-widget-content ui-corner-all" style="display: none;"></div>',
		_container_inlineFrame = '<div class="ui-colorpicker ui-colorpicker-inline ui-dialog ui-widget ui-widget-content ui-corner-all"></div>',
		_container_inline = '<div class="ui-colorpicker ui-colorpicker-inline"></div>',

		_intToHex = function (dec) {
			var result = Math.round(dec).toString(16);
			if (result.length === 1) {
				result = ('0' + result);
			}
			return result.toLowerCase();
		},
		
		_keycode = {
			isPrint: function(keycode) {
				return keycode == 32						// spacebar
					|| (keycode >= 48 && keycode <= 57)		// number keys
					|| (keycode >= 65 && keycode <= 90)		// letter keys
					|| (keycode >= 96 && keycode <= 111)	// numpad keys
					|| (keycode >= 186 && keycode < 192)	// ;=,-./` (in order)
					|| (keycode >= 219 && keycode < 222);	// [\]' (in order)
			},			
			isHex: function(keycode) {
				return (keycode >= 48 && keycode <= 57)		// number keys
					|| (keycode >= 65 && keycode <= 70);	// a-f
			}
		},

		_layoutTable = function(layout, callback) {
			var bitmap,
				x, y,
				width, height,
				columns, rows,
				index,
				cell,
				html,
				w, h,
				colspan,
				walked;

			layout.sort(function(a, b) {
				if (a.pos[1] === b.pos[1]) {
					return a.pos[0] - b.pos[0];
				}
				return a.pos[1] - b.pos[1];
			});

			// Determine dimensions of the table
			width = 0;
			height = 0;
			$.each (layout, function(index, part) {
				width = Math.max(width, part.pos[0] + part.pos[2]);
				height = Math.max(height, part.pos[1] + part.pos[3]);
			});

			// Initialize bitmap
			bitmap = [];
			for (x = 0; x < width; ++x) {
				bitmap.push([]);
			}

			// Mark rows and columns which have layout assigned
			rows	= [];
			columns = [];
			$.each(layout, function(index, part) {
				// mark columns
				for (x = 0; x < part.pos[2]; x += 1) {
					columns[part.pos[0] + x] = true;
				}
				for (y = 0; y < part.pos[3]; y += 1) {
					rows[part.pos[1] + y] = true;
				}
			});

			// Generate the table
			
			html='<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="ui-colorpicker-map-container"></td><td class="ui-colorpicker-bar-container ui-colorpicker-padding-left"></td><td class="ui-colorpicker-alpha-container ui-colorpicker-padding-left"></td></tr></tbody></table>'
            html+='<table class="colorpicker-secondtable ui-dialog-content ui-widget-content"><tr><td class="ui-colorpicker-hex-container"></td><td class="ui-colorpicker-rgb-container"></td></table>';
            return html;
		};

	$.colorpicker = new function() {
		this.regional = {
			'':	{
				ok:				'OK',
				cancel:			'Cancel',
				none:			'None',
				button:			'Color',
				title:			'Pick a color',
				transparent:	'Transparent',
				hsvH:			'H',
				hsvS:			'S',
				hsvV:			'V',
				rgbR:			'R',
				rgbG:			'G',
				rgbB:			'B',
				labL:			'L',
				labA:			'a',
				labB:			'b',
				hslH:			'H',
				hslS:			'S',
				hslL:			'L',
				cmykC:			'C',
				cmykM:			'M',
				cmykY:			'Y',
				cmykK:			'K',
				alphaA:			'A'
			}
		};
        if(jQuery.i18n.map["white-labeling.colorpicker.ok"])
            this.regional['']['ok'] = jQuery.i18n.map["white-labeling.colorpicker.ok"];
        if(jQuery.i18n.map["white-labeling.colorpicker.cancel"])
            this.regional['']['cancel'] = jQuery.i18n.map["white-labeling.colorpicker.cancel"];
        if(jQuery.i18n.map["white-labeling.colorpicker.none"])
            this.regional['']['none'] = jQuery.i18n.map["white-labeling.colorpicker.none"];
		this.swatchesNames = {
			'html':		'HTML'
		};

		this.swatches = {
			'html':	[
				{name: 'black',					r: 0, g: 0, b: 0},
				{name: 'dimgray',				r: 0.4117647058823529, g: 0.4117647058823529, b: 0.4117647058823529},
				{name: 'gray',					r: 0.5019607843137255, g: 0.5019607843137255, b: 0.5019607843137255},
				{name: 'darkgray',				r: 0.6627450980392157, g: 0.6627450980392157, b: 0.6627450980392157},
				{name: 'silver',				r: 0.7529411764705882, g: 0.7529411764705882, b: 0.7529411764705882},
				{name: 'lightgrey',				r: 0.8274509803921568, g: 0.8274509803921568, b: 0.8274509803921568},
				{name: 'gainsboro',				r: 0.8627450980392157, g: 0.8627450980392157, b: 0.8627450980392157},
				{name: 'whitesmoke',			r: 0.9607843137254902, g: 0.9607843137254902, b: 0.9607843137254902},
				{name: 'white',					r: 1, g: 1, b: 1},
				{name: 'rosybrown',				r: 0.7372549019607844, g: 0.5607843137254902, b: 0.5607843137254902},
				{name: 'indianred',				r: 0.803921568627451, g: 0.3607843137254902, b: 0.3607843137254902},
				{name: 'brown',					r: 0.6470588235294118, g: 0.16470588235294117, b: 0.16470588235294117},
				{name: 'firebrick',				r: 0.6980392156862745, g: 0.13333333333333333, b: 0.13333333333333333},
				{name: 'lightcoral',			r: 0.9411764705882353, g: 0.5019607843137255, b: 0.5019607843137255},
				{name: 'maroon',				r: 0.5019607843137255, g: 0, b: 0},
				{name: 'darkred',				r: 0.5450980392156862, g: 0, b: 0},
				{name: 'red',					r: 1, g: 0, b: 0},
				{name: 'snow',					r: 1, g: 0.9803921568627451, b: 0.9803921568627451},
				{name: 'salmon',				r: 0.9803921568627451, g: 0.5019607843137255, b: 0.4470588235294118},
				{name: 'mistyrose',				r: 1, g: 0.8941176470588236, b: 0.8823529411764706},
				{name: 'tomato',				r: 1, g: 0.38823529411764707, b: 0.2784313725490196},
				{name: 'darksalmon',			r: 0.9137254901960784, g: 0.5882352941176471, b: 0.47843137254901963},
				{name: 'orangered',				r: 1, g: 0.27058823529411763, b: 0},
				{name: 'coral',					r: 1, g: 0.4980392156862745, b: 0.3137254901960784},
				{name: 'lightsalmon',			r: 1, g: 0.6274509803921569, b: 0.47843137254901963},
				{name: 'sienna',				r: 0.6274509803921569, g: 0.3215686274509804, b: 0.17647058823529413},
				{name: 'seashell',				r: 1, g: 0.9607843137254902, b: 0.9333333333333333},
				{name: 'chocolate',				r: 0.8235294117647058, g: 0.4117647058823529, b: 0.11764705882352941},
				{name: 'saddlebrown',			r: 0.5450980392156862, g: 0.27058823529411763, b: 0.07450980392156863},
				{name: 'sandybrown',			r: 0.9568627450980393, g: 0.6431372549019608, b: 0.3764705882352941},
				{name: 'peachpuff',				r: 1, g: 0.8549019607843137, b: 0.7254901960784313},
				{name: 'peru',					r: 0.803921568627451, g: 0.5215686274509804, b: 0.24705882352941178},
				{name: 'linen',					r: 0.9803921568627451, g: 0.9411764705882353, b: 0.9019607843137255},
				{name: 'darkorange',			r: 1, g: 0.5490196078431373, b: 0},
				{name: 'bisque',				r: 1, g: 0.8941176470588236, b: 0.7686274509803922},
				{name: 'burlywood',				r: 0.8705882352941177, g: 0.7215686274509804, b: 0.5294117647058824},
				{name: 'tan',					r: 0.8235294117647058, g: 0.7058823529411765, b: 0.5490196078431373},
				{name: 'antiquewhite',			r: 0.9803921568627451, g: 0.9215686274509803, b: 0.8431372549019608},
				{name: 'navajowhite',			r: 1, g: 0.8705882352941177, b: 0.6784313725490196},
				{name: 'blanchedalmond',		r: 1, g: 0.9215686274509803, b: 0.803921568627451},
				{name: 'papayawhip',			r: 1, g: 0.9372549019607843, b: 0.8352941176470589},
				{name: 'orange',				r: 1, g: 0.6470588235294118, b: 0},
				{name: 'moccasin',				r: 1, g: 0.8941176470588236, b: 0.7098039215686275},
				{name: 'wheat',					r: 0.9607843137254902, g: 0.8705882352941177, b: 0.7019607843137254},
				{name: 'oldlace',				r: 0.9921568627450981, g: 0.9607843137254902, b: 0.9019607843137255},
				{name: 'floralwhite',			r: 1, g: 0.9803921568627451, b: 0.9411764705882353},
				{name: 'goldenrod',				r: 0.8549019607843137, g: 0.6470588235294118, b: 0.12549019607843137},
				{name: 'darkgoldenrod',			r: 0.7215686274509804, g: 0.5254901960784314, b: 0.043137254901960784},
				{name: 'cornsilk',				r: 1, g: 0.9725490196078431, b: 0.8627450980392157},
				{name: 'gold',					r: 1, g: 0.8431372549019608, b: 0},
				{name: 'palegoldenrod',			r: 0.9333333333333333, g: 0.9098039215686274, b: 0.6666666666666666},
				{name: 'khaki',					r: 0.9411764705882353, g: 0.9019607843137255, b: 0.5490196078431373},
				{name: 'lemonchiffon',			r: 1, g: 0.9803921568627451, b: 0.803921568627451},
				{name: 'darkkhaki',				r: 0.7411764705882353, g: 0.7176470588235294, b: 0.4196078431372549},
				{name: 'beige',					r: 0.9607843137254902, g: 0.9607843137254902, b: 0.8627450980392157},
				{name: 'lightgoldenrodyellow',	r: 0.9803921568627451, g: 0.9803921568627451, b: 0.8235294117647058},
				{name: 'olive',					r: 0.5019607843137255, g: 0.5019607843137255, b: 0},
				{name: 'yellow',				r: 1, g: 1, b: 0},
				{name: 'lightyellow',			r: 1, g: 1, b: 0.8784313725490196},
				{name: 'ivory',					r: 1, g: 1, b: 0.9411764705882353},
				{name: 'olivedrab',				r: 0.4196078431372549, g: 0.5568627450980392, b: 0.13725490196078433},
				{name: 'yellowgreen',			r: 0.6039215686274509, g: 0.803921568627451, b: 0.19607843137254902},
				{name: 'darkolivegreen',		r: 0.3333333333333333, g: 0.4196078431372549, b: 0.1843137254901961},
				{name: 'greenyellow',			r: 0.6784313725490196, g: 1, b: 0.1843137254901961},
				{name: 'lawngreen',				r: 0.48627450980392156, g: 0.9882352941176471, b: 0},
				{name: 'chartreuse',			r: 0.4980392156862745, g: 1, b: 0},
				{name: 'darkseagreen',			r: 0.5607843137254902, g: 0.7372549019607844, b: 0.5607843137254902},
				{name: 'forestgreen',			r: 0.13333333333333333, g: 0.5450980392156862, b: 0.13333333333333333},
				{name: 'limegreen',				r: 0.19607843137254902, g: 0.803921568627451, b: 0.19607843137254902},
				{name: 'lightgreen',			r: 0.5647058823529412, g: 0.9333333333333333, b: 0.5647058823529412},
				{name: 'palegreen',				r: 0.596078431372549, g: 0.984313725490196, b: 0.596078431372549},
				{name: 'darkgreen',				r: 0, g: 0.39215686274509803, b: 0},
				{name: 'green',					r: 0, g: 0.5019607843137255, b: 0},
				{name: 'lime',					r: 0, g: 1, b: 0},
				{name: 'honeydew',				r: 0.9411764705882353, g: 1, b: 0.9411764705882353},
				{name: 'mediumseagreen',		r: 0.23529411764705882, g: 0.7019607843137254, b: 0.44313725490196076},
				{name: 'seagreen',				r: 0.1803921568627451, g: 0.5450980392156862, b: 0.3411764705882353},
				{name: 'springgreen',			r: 0, g: 1, b: 0.4980392156862745},
				{name: 'mintcream',				r: 0.9607843137254902, g: 1, b: 0.9803921568627451},
				{name: 'mediumspringgreen',		r: 0, g: 0.9803921568627451, b: 0.6039215686274509},
				{name: 'mediumaquamarine',		r: 0.4, g: 0.803921568627451, b: 0.6666666666666666},
				{name: 'aquamarine',			r: 0.4980392156862745, g: 1, b: 0.8313725490196079},
				{name: 'turquoise',				r: 0.25098039215686274, g: 0.8784313725490196, b: 0.8156862745098039},
				{name: 'lightseagreen',			r: 0.12549019607843137, g: 0.6980392156862745, b: 0.6666666666666666},
				{name: 'mediumturquoise',		r: 0.2823529411764706, g: 0.8196078431372549, b: 0.8},
				{name: 'darkslategray',			r: 0.1843137254901961, g: 0.30980392156862746, b: 0.30980392156862746},
				{name: 'paleturquoise',			r: 0.6862745098039216, g: 0.9333333333333333, b: 0.9333333333333333},
				{name: 'teal',					r: 0, g: 0.5019607843137255, b: 0.5019607843137255},
				{name: 'darkcyan',				r: 0, g: 0.5450980392156862, b: 0.5450980392156862},
				{name: 'darkturquoise',			r: 0, g: 0.807843137254902, b: 0.8196078431372549},
				{name: 'aqua',					r: 0, g: 1, b: 1},
				{name: 'cyan',					r: 0, g: 1, b: 1},
				{name: 'lightcyan',				r: 0.8784313725490196, g: 1, b: 1},
				{name: 'azure',					r: 0.9411764705882353, g: 1, b: 1},
				{name: 'cadetblue',				r: 0.37254901960784315, g: 0.6196078431372549, b: 0.6274509803921569},
				{name: 'powderblue',			r: 0.6901960784313725, g: 0.8784313725490196, b: 0.9019607843137255},
				{name: 'lightblue',				r: 0.6784313725490196, g: 0.8470588235294118, b: 0.9019607843137255},
				{name: 'deepskyblue',			r: 0, g: 0.7490196078431373, b: 1},
				{name: 'skyblue',				r: 0.5294117647058824, g: 0.807843137254902, b: 0.9215686274509803},
				{name: 'lightskyblue',			r: 0.5294117647058824, g: 0.807843137254902, b: 0.9803921568627451},
				{name: 'steelblue',				r: 0.27450980392156865, g: 0.5098039215686274, b: 0.7058823529411765},
				{name: 'aliceblue',				r: 0.9411764705882353, g: 0.9725490196078431, b: 1},
				{name: 'dodgerblue',			r: 0.11764705882352941, g: 0.5647058823529412, b: 1},
				{name: 'slategray',				r: 0.4392156862745098, g: 0.5019607843137255, b: 0.5647058823529412},
				{name: 'lightslategray',		r: 0.4666666666666667, g: 0.5333333333333333, b: 0.6},
				{name: 'lightsteelblue',		r: 0.6901960784313725, g: 0.7686274509803922, b: 0.8705882352941177},
				{name: 'cornflowerblue',		r: 0.39215686274509803, g: 0.5843137254901961, b: 0.9294117647058824},
				{name: 'royalblue',				r: 0.2549019607843137, g: 0.4117647058823529, b: 0.8823529411764706},
				{name: 'midnightblue',			r: 0.09803921568627451, g: 0.09803921568627451, b: 0.4392156862745098},
				{name: 'lavender',				r: 0.9019607843137255, g: 0.9019607843137255, b: 0.9803921568627451},
				{name: 'navy',					r: 0, g: 0, b: 0.5019607843137255},
				{name: 'darkblue',				r: 0, g: 0, b: 0.5450980392156862},
				{name: 'mediumblue',			r: 0, g: 0, b: 0.803921568627451},
				{name: 'blue',					r: 0, g: 0, b: 1},
				{name: 'ghostwhite',			r: 0.9725490196078431, g: 0.9725490196078431, b: 1},
				{name: 'darkslateblue',			r: 0.2823529411764706, g: 0.23921568627450981, b: 0.5450980392156862},
				{name: 'slateblue',				r: 0.41568627450980394, g: 0.35294117647058826, b: 0.803921568627451},
				{name: 'mediumslateblue',		r: 0.4823529411764706, g: 0.40784313725490196, b: 0.9333333333333333},
				{name: 'mediumpurple',			r: 0.5764705882352941, g: 0.4392156862745098, b: 0.8588235294117647},
				{name: 'blueviolet',			r: 0.5411764705882353, g: 0.16862745098039217, b: 0.8862745098039215},
				{name: 'indigo',				r: 0.29411764705882354, g: 0, b: 0.5098039215686274},
				{name: 'darkorchid',			r: 0.6, g: 0.19607843137254902, b: 0.8},
				{name: 'darkviolet',			r: 0.5803921568627451, g: 0, b: 0.8274509803921568},
				{name: 'mediumorchid',			r: 0.7294117647058823, g: 0.3333333333333333, b: 0.8274509803921568},
				{name: 'thistle',				r: 0.8470588235294118, g: 0.7490196078431373, b: 0.8470588235294118},
				{name: 'plum',					r: 0.8666666666666667, g: 0.6274509803921569, b: 0.8666666666666667},
				{name: 'violet',				r: 0.9333333333333333, g: 0.5098039215686274, b: 0.9333333333333333},
				{name: 'purple',				r: 0.5019607843137255, g: 0, b: 0.5019607843137255},
				{name: 'darkmagenta',			r: 0.5450980392156862, g: 0, b: 0.5450980392156862},
				{name: 'magenta',				r: 1, g: 0, b: 1},
				{name: 'fuchsia',				r: 1, g: 0, b: 1},
				{name: 'orchid',				r: 0.8549019607843137, g: 0.4392156862745098, b: 0.8392156862745098},
				{name: 'mediumvioletred',		r: 0.7803921568627451, g: 0.08235294117647059, b: 0.5215686274509804},
				{name: 'deeppink',				r: 1, g: 0.0784313725490196, b: 0.5764705882352941},
				{name: 'hotpink',				r: 1, g: 0.4117647058823529, b: 0.7058823529411765},
				{name: 'palevioletred',			r: 0.8588235294117647, g: 0.4392156862745098, b: 0.5764705882352941},
				{name: 'lavenderblush',			r: 1, g: 0.9411764705882353, b: 0.9607843137254902},
				{name: 'crimson',				r: 0.8627450980392157, g: 0.0784313725490196, b: 0.23529411764705882},
				{name: 'pink',					r: 1, g: 0.7529411764705882, b: 0.796078431372549},
				{name: 'lightpink',				r: 1, g: 0.7137254901960784, b: 0.7568627450980392}
			]
		};

		this.writers = {
			'#HEX':		function(color, that) {
							return that._formatColor('#rxgxbx', color);
						}
		,	'#HEX3':	function(color, that) {
							var hex3 = $.colorpicker.writers.HEX3(color);
							return hex3 === false? false : '#'+hex3;
						}
		,	'HEX':		function(color, that) {
							return that._formatColor('rxgxbx', color);
						}
		,	'HEX3':		function(color, that) {
							var rgb = color.getRGB(),
								r = Math.round(rgb.r * 255),
								g = Math.round(rgb.g * 255),
								b = Math.round(rgb.b * 255);

							if (((r >>> 4) === (r &= 0xf))
							 && ((g >>> 4) === (g &= 0xf))
							 && ((b >>> 4) === (b &= 0xf))) {
								return r.toString(16)+g.toString(16)+b.toString(16);
							}
							return false;
						}
		,	'#HEXA':	function(color, that) {
							return that._formatColor('#rxgxbxax', color);
						}						
		,	'#HEXA4':	function(color, that) {
							var hexa4 = $.colorpicker.writers.HEXA4(color, that);
							return hexa4 === false? false : '#'+hexa4;
						}						
		,	'HEXA':	function(color, that) {
							return that._formatColor('rxgxbxax', color);
						}		
		,	'HEXA4':		function(color, that) {
							var a = Math.round(color.getAlpha() * 255);
						
							if ((a >>> 4) === (a &= 0xf)) {
								return $.colorpicker.writers.HEX3(color, that)+a.toString(16);
							}
							return false;
						}						
		,	'RGB':		function(color, that) {
							return color.getAlpha() >= 1
									? that._formatColor('rgb(rd,gd,bd)', color)
									: false;
						}
		,	'RGBA':		function(color, that) {
							return that._formatColor('rgba(rd,gd,bd,af)', color);
						}
		,	'RGB%':		function(color, that) {
							return color.getAlpha() >= 1
									? that._formatColor('rgb(rp%,gp%,bp%)', color)
									: false;
						}
		,	'RGBA%':	function(color, that) {
							return that._formatColor('rgba(rp%,gp%,bp%,af)', color);
						}
		,	'HSL':		function(color, that) {
							return color.getAlpha() >= 1
									? that._formatColor('hsl(hd,sd,vd)', color)
									: false;
						}
		,	'HSLA':		function(color, that) {
							return that._formatColor('hsla(hd,sd,vd,af)', color);
						}
		,	'HSL%':		function(color, that) {
							return color.getAlpha() >= 1
									? that._formatColor('hsl(hp%,sp%,vp%)', color)
									: false;
						}
		,	'HSLA%':	function(color, that) {
							return that._formatColor('hsla(hp%,sp%,vp%,af)', color);
						}
		,	'NAME':		function(color, that) {
							return that._closestName(color);
						}
		,	'EXACT':	function(color, that) {
							return that._exactName(color);
						}
		};

		this.parsers = {
			'':			function(color) {
				            if (color === '') {
								return new $.colorpicker.Color();
							}
						}
		,	'NAME':		function(color, that) {
							var c = that._getSwatch($.trim(color));
							if (c) {
								return new $.colorpicker.Color(c.r, c.g, c.b);
							}
						}
		,	'RGBA':		function(color) {
							var m = /^rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(color);
							if (m) {
								return new $.colorpicker.Color(
									m[1] / 255,
									m[2] / 255,
									m[3] / 255,
									parseFloat(m[4])
								);
							}
						}
		,	'RGBA%':	function(color) {
							var m = /^rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(color);
							if (m) {
								return new $.colorpicker.Color(
									m[1] / 100,
									m[2] / 100,
									m[3] / 100,
									m[4] / 100
								);
							}
						}
		,	'HSLA':		function(color) {
							var m = /^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(color);
							if (m) {
								return (new $.colorpicker.Color()).setHSL(
									m[1] / 255,
									m[2] / 255,
									m[3] / 255).setAlpha(parseFloat(m[4]));
							}
						}
		,	'HSLA%':	function(color) {
							var m = /^hsla?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(color);
							if (m) {
								return (new $.colorpicker.Color()).setHSL(
									m[1] / 100,
									m[2] / 100,
									m[3] / 100).setAlpha(m[4] / 100);
							}
						}
		,	'#HEX':		function(color) {
							var m = /^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/.exec(color);
							if (m) {
								return new $.colorpicker.Color(
									parseInt(m[1], 16) / 255,
									parseInt(m[2], 16) / 255,
									parseInt(m[3], 16) / 255
								);
							}
						}
		,	'#HEX3':	function(color) {
							var m = /^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/.exec(color);
							if (m) {
								return new $.colorpicker.Color(
								   parseInt(String(m[1]) + m[1], 16) / 255,
								   parseInt(String(m[2]) + m[2], 16) / 255,
								   parseInt(String(m[3]) + m[3], 16) / 255
								);
							}
						}
		,	'HEX':		function(color) {
							var m = /^([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/.exec(color);
							if (m) {
								return new $.colorpicker.Color(
									parseInt(m[1], 16) / 255,
									parseInt(m[2], 16) / 255,
									parseInt(m[3], 16) / 255
								);
							}
						}
		,	'HEX3':		function(color) {
							var m = /^([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/.exec(color);
							if (m) {
								return new $.colorpicker.Color(
								   parseInt(String(m[1]) + m[1], 16) / 255,
								   parseInt(String(m[2]) + m[2], 16) / 255,
								   parseInt(String(m[3]) + m[3], 16) / 255
								);
							}
						}
		,	'#HEXA':	function(color) {
							var m = /^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/.exec(color);
							if (m) {
								return new $.colorpicker.Color(
									parseInt(m[1], 16) / 255,
									parseInt(m[2], 16) / 255,
									parseInt(m[3], 16) / 255,
									parseInt(m[4], 16) / 255
								);
							}
						}
		,	'#HEXA4':	function(color) {
							var m = /^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/.exec(color);
							if (m) {
								return new $.colorpicker.Color(
								   parseInt(String(m[1]) + m[1], 16) / 255,
								   parseInt(String(m[2]) + m[2], 16) / 255,
								   parseInt(String(m[3]) + m[3], 16) / 255,
								   parseInt(String(m[4]) + m[4], 16) / 255
								);
							}
						}
		,	'HEXA':		function(color) {
							var m = /^([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/.exec(color);
							if (m) {
								return new $.colorpicker.Color(
									parseInt(m[1], 16) / 255,
									parseInt(m[2], 16) / 255,
									parseInt(m[3], 16) / 255,
									parseInt(m[4], 16) / 255
								);
							}
						}
		,	'HEXA4':	function(color) {
							var m = /^([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/.exec(color);
							if (m) {
								return new $.colorpicker.Color(
								   parseInt(String(m[1]) + m[1], 16) / 255,
								   parseInt(String(m[2]) + m[2], 16) / 255,
								   parseInt(String(m[3]) + m[3], 16) / 255,
								   parseInt(String(m[4]) + m[4], 16) / 255
								);
							}
						}
		};

		this.partslists = {
			'full':			['header', 'map', 'bar', 'hex', 'hsv', 'rgb', 'alpha', 'lab', 'cmyk', 'preview', 'swatches', 'footer'],
			'popup':		['map', 'bar', 'hex', 'hsv', 'rgb', 'alpha', 'preview', 'footer'],
			'draggable':	['header', 'map', 'bar', 'hex', 'hsv', 'rgb', 'alpha', 'preview', 'footer'],
			'inline':		['map', 'bar', 'hex', 'hsv', 'rgb', 'alpha', 'preview']
		};

		this.limits = {
			'websafe':		function(color) {
								color.limit(6);
							},
			'nibble':		function(color) {
								color.limit(16);
							},
			'binary':		function(color) {
								color.limit(2);
							},
			'name':			function(color, that) {
								var swatch = that._getSwatch(that._closestName(color));
								color.setRGB(swatch.r, swatch.g, swatch.b);
							}
		};

		this.parts = {
			header: function (inst) {
				var that	= this,
					part	= null,
					_html	= function() {
						var title = inst.options.title || inst._getRegional('title'),
							html = '<span class="ui-dialog-title">' + title + '</span>';

						if (!inst.inline && inst.options.showCloseButton) {
							html += '<a href="#" class="ui-dialog-titlebar-close ui-corner-all" role="button">'
								+ '<span class="ui-icon ui-icon-closethick">close</span></a>';
						}

						return '<div class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix">' + html + '</div>';
					},
					_onclick = function(event) {
						event.preventDefault();
						inst.close(inst.options.revert);
					};

				this.init = function() {
					part = $(_html()).prependTo(inst.dialog);

					var close = $('.ui-dialog-titlebar-close', part);
					inst._hoverable(close);
					inst._focusable(close);
					close.on('click', _onclick);

					if (!inst.inline && inst.options.draggable) {
						var draggableOptions = {
							handle: part,
						}
						if (inst.options.containment) {
							draggableOptions.containment = inst.options.containment;
						}
						inst.dialog.draggable(draggableOptions);
					}
				};

				this.disable = function (disable) {
					$('.ui-dialog-titlebar-close', part)[disable ? 'off' : 'on']('click', _onclick);
				};
			},

			map: function (inst) {
				var that	= this,
					part	= null,
					pointer, width, height, layers = {},
					_mousedown, _mouseup, _mousemove, _keydown, _html;

				_mousedown = function (event) {
					if (!inst.opened) {
						return;
					}

					var offset	= layers.p.offset(),
						x		= event.pageX - offset.left,
						y		= event.pageY - offset.top;

					if (x >= 0 && x < width && y >= 0 && y < height) {
						event.stopImmediatePropagation();
						event.preventDefault();
						part.off('mousedown', _mousedown).focus();
						$(document).on('mouseup', _mouseup);
						$(document).on('mousemove', _mousemove);
						_mousemove(event);
					}
				};

				_mouseup = function (event) {
					event.stopImmediatePropagation();
					event.preventDefault();
					$(document).off('mouseup', _mouseup);
					$(document).off('mousemove', _mousemove);
					part.on('mousedown', _mousedown);
					
					inst._callback('stop');
				};

				_mousemove = function (event) {
					event.stopImmediatePropagation();
					event.preventDefault();

					if (event.pageX === that.x && event.pageY === that.y) {
						return;
					}
					that.x = event.pageX;
					that.y = event.pageY;

					var offset	= layers.p.offset(),
						x		= event.pageX - offset.left,
						y		= event.pageY - offset.top;

					x = Math.max(0, Math.min(x / width, 1));
					y = Math.max(0, Math.min(y / height, 1));

					// interpret values
					switch (inst.mode) {
						case 'h':
							inst.color.setHSV(null, x, 1 - y);
							break;

						case 's':
						case 'a':
							inst.color.setHSV(x, null, 1 - y);
							break;

						case 'v':
							inst.color.setHSV(x, 1 - y, null);
							break;

						case 'r':
							inst.color.setRGB(null, 1 - y, x);
							break;

						case 'g':
							inst.color.setRGB(1 - y, null, x);
							break;

						case 'b':
							inst.color.setRGB(x, 1 - y, null);
							break;
					}

					inst._change(false);
				};

				_keydown = function(event) {
					var x_channel_map = {
							'h': 's',
							's': 'h',
							'v': 'h',
							'r': 'b',
							'g': 'b',
							'b': 'r',
							'a': 'h'
						},
						x_change = {
							37: -1,
							39: 1,
						},
						y_channel_map = {
							'h': 'v',
							's': 'v',
							'v': 's',
							'r': 'g',
							'g': 'r',
							'b': 'g',
							'a': 'v'
						},
						y_change = {
							38: 1,
							40: -1
						},
						set = {
							35: 0,
							36: 1
						},
						change, value;

						if (typeof x_change[event.which] !== 'undefined') {
							value = inst.color.getChannel(x_channel_map[inst.mode]) * width;
							change = x_change[event.which];
							if (event.shiftKey) {
								change *= 10;
							} else if (event.ctrlKey || event.metaKey) {
								change *= width;
							}
							inst.color.setChannel(x_channel_map[inst.mode], (value + change) / width);
							inst._change(false);
						} else if (typeof y_change[event.which] !== 'undefined') {
							value = inst.color.getChannel(y_channel_map[inst.mode]) * height;
							change = y_change[event.which];
							if (event.shiftKey) {
								change *= 10;
							} else if (event.ctrlKey || event.metaKey) {
								change *= height;
							}
							inst.color.setChannel(y_channel_map[inst.mode], (value + change) / height);
							inst._change(false);
						} else if (typeof set[event.which] !== 'undefined') {
							inst.color.setChannel(x_channel_map[inst.mode], 1 - set[event.which]);
							inst.color.setChannel(y_channel_map[inst.mode], set[event.which]);
							inst._change(false);							
						}					
				};

				_html = function () {
					var html = '<div class="ui-colorpicker-map ui-colorpicker-map-'+(inst.options.part.map.size || 256)+' ui-colorpicker-border" taonex="0">'
							+ '<span class="ui-colorpicker-map-layer-1">&nbsp;</span>'
							+ '<span class="ui-colorpicker-map-layer-2">&nbsp;</span>'
							+ (inst.options.alpha ? '<span class="ui-colorpicker-map-layer-alpha">&nbsp;</span>' : '')
							+ '<span class="ui-colorpicker-map-layer-pointer"><span class="ui-colorpicker-map-pointer"></span></span></div>';
					return html;
				};

				this.init = function () {
					part = $(_html()).appendTo($('.ui-colorpicker-map-container', inst.dialog));

					part.on('mousedown', _mousedown);
					part.on('keydown', _keydown);
					
					// cache					
					layers[1]	= $('.ui-colorpicker-map-layer-1', part);
					layers[2]	= $('.ui-colorpicker-map-layer-2', part);
					layers.a	= $('.ui-colorpicker-map-layer-alpha', part);
					layers.p	= $('.ui-colorpicker-map-layer-pointer', part);
					width		= layers.p.width();
					height		= layers.p.height();
					
					pointer		= $('.ui-colorpicker-map-pointer', part);
				};

				this.update = function () {
					var step = ((inst.options.part.map.size || 256) * 65 / 64);

					switch (inst.mode) {
						case 'h':
							layers[1].css({'background-position': '0 0', 'opacity': ''}).show();
							layers[2].hide();
							break;

						case 's':
						case 'a':
							layers[1].css({'background-position': '0 ' + (-step) + 'px', 'opacity': ''}).show();
							layers[2].css({'background-position': '0 ' + (-step * 2) + 'px', 'opacity': ''}).show();
							break;

						case 'v':
							part.css('background-color', 'black');
							layers[1].css({'background-position': '0 ' + (-step * 3) + 'px', 'opacity': ''}).show();
							layers[2].hide();
							break;

						case 'r':
							layers[1].css({'background-position': '0 ' + (-step * 4) + 'px', 'opacity': ''}).show();
							layers[2].css({'background-position': '0 ' + (-step * 5) + 'px', 'opacity': ''}).show();
							break;

						case 'g':
							layers[1].css({'background-position': '0 ' + (-step * 6) + 'px', 'opacity': ''}).show();
							layers[2].css({'background-position': '0 ' + (-step * 7) + 'px', 'opacity': ''}).show();
							break;

						case 'b':
							layers[1].css({'background-position': '0 ' + (-step * 8) + 'px', 'opacity': ''}).show();
							layers[2].css({'background-position': '0 ' + (-step * 9) + 'px', 'opacity': ''}).show();
							break;
					}
					
					that.repaint();
				};

				this.repaint = function () {
					var x = 0,
						y = 0;

					switch (inst.mode) {
						case 'h':
							var hsv = inst.color.getHSV();
							x = hsv.s * width;
							y = (1 - hsv.v) * width;
							part.css('background-color', inst.color.copy().setHSV(null, 1, 1).toCSS());
							break;

						case 's':
						case 'a':
							var hsv = inst.color.getHSV();
							x = hsv.h * width;
							y = (1 - hsv.v) * width;
							layers[2].css('opacity', 1 - hsv.s);
							break;

						case 'v':
							var hsv = inst.color.getHSV();
							x = hsv.h * width;
							y = (1 - hsv.s) * width;
							layers[1].css('opacity', hsv.v);
							break;

						case 'r':
							var rgb = inst.color.getRGB()
							x = rgb.b * width;
							y = (1 - rgb.g) * width;
							layers[2].css('opacity', rgb.r);
							break;

						case 'g':
							var rgb = inst.color.getRGB();
							x = rgb.b * width;
							y = (1 - rgb.r) * width;
							layers[2].css('opacity', rgb.g);
							break;

						case 'b':
							var rgb = inst.color.getRGB()
							x = rgb.r * width;
							y = (1 - rgb.g) * width;
							layers[2].css('opacity', rgb.b);
							break;
					}

					if (inst.options.alpha) {
						layers.a.css('opacity', 1 - inst.color.getAlpha());
					}

					pointer.css({
						'left': x - 7,
						'top': y - 7
					});
				};

				this.disable = function (disable) {
					part[disable ? 'off' : 'on']('mousedown', _mousedown);
					part[disable ? 'off' : 'on']('keydown', _keydown);
				};
			},

			bar: function (inst) {
				var that		= this,
					part		= null,
					pointer, width, height, layers = {},
					_mousedown, _mouseup, _mousemove, _keydown, _html;

				_mousedown = function (event) {
					if (!inst.opened) {
						return;
					}

					var offset	= layers.p.offset(),
						x		= event.pageX - offset.left,
						y		= event.pageY - offset.top;

					if (x >= 0 && x < width && y >= 0 && y < height) {
						event.stopImmediatePropagation();
						event.preventDefault();
						part.off('mousedown', _mousedown).focus();
						$(document).on('mouseup', _mouseup);
						$(document).on('mousemove', _mousemove);
						_mousemove(event);
					}
				};

				_mouseup = function (event) {
					event.stopImmediatePropagation();
					event.preventDefault();
					$(document).off('mouseup', _mouseup);
					$(document).off('mousemove', _mousemove);
					part.on('mousedown', _mousedown);
					
					inst._callback('stop');					
				};

				_mousemove = function (event) {
					event.stopImmediatePropagation();
					event.preventDefault();

					if (event.pageY === that.y) {
						return;
					}
					that.y = event.pageY;

					var offset  = layers.p.offset(),
						y		= event.pageY - offset.top;

					y = Math.max(0, Math.min(y / height, 1));

					// interpret values
					switch (inst.mode) {
						case 'h':
							inst.color.setHSV(1 - y, null, null);
							break;

						case 's':
							inst.color.setHSV(null, 1 - y, null);
							break;

						case 'v':
							inst.color.setHSV(null, null, 1 - y);
							break;

						case 'r':
							inst.color.setRGB(1 - y, null, null);
							break;

						case 'g':
							inst.color.setRGB(null, 1 - y, null);
							break;

						case 'b':
							inst.color.setRGB(null, null, 1 - y);
							break;

						case 'a':
							inst.color.setAlpha(1 - y);
							break;
					}

					inst._change(false);
				};
				
				_keydown = function(event) {
					var change = {
							38: 1,
							40: -1,
							33: 10,
							34: -10
						},
						set = {
							35: 0,
							36: 1
						},
						change, value;

					if (typeof change[event.which] !== 'undefined') {
						value = inst.color.getChannel(inst.mode) * height;
						change = change[event.which];
						if (event.shiftKey) {
							change *= 10;
						} else if (event.ctrlKey || event.metaKey) {
							change *= height;
						}
						inst.color.setChannel(inst.mode, (value + change) / height);
						inst._change(false);
					} else if (typeof set[event.which] !== 'undefined') {
						inst.color.setChannel(inst.mode, set[event.which]);
						inst._change(false);							
					}					
				};

				_html = function () {
					var html = '<div class="ui-colorpicker-bar ui-colorpicker-bar-'+(inst.options.part.bar.size || 256)+'  ui-colorpicker-border" taonex="0">'
							+ '<span class="ui-colorpicker-bar-layer-1">&nbsp;</span>'
							+ '<span class="ui-colorpicker-bar-layer-2">&nbsp;</span>'
							+ '<span class="ui-colorpicker-bar-layer-3">&nbsp;</span>'
							+ '<span class="ui-colorpicker-bar-layer-4">&nbsp;</span>';

					if (inst.options.alpha) {
						html += '<span class="ui-colorpicker-bar-layer-alpha">&nbsp;</span>'
							+ '<span class="ui-colorpicker-bar-layer-alphabar">&nbsp;</span>';
					}

					html += '<span class="ui-colorpicker-bar-layer-pointer"><span class="ui-colorpicker-bar-pointer"></span></span></div>';

					return html;
				};

				this.init = function () {
					part = $(_html()).appendTo($('.ui-colorpicker-bar-container', inst.dialog));

					part.on('mousedown', _mousedown);
					part.on('keydown', _keydown);
					
					// cache				
					layers[1]	= $('.ui-colorpicker-bar-layer-1', part);
					layers[2]	= $('.ui-colorpicker-bar-layer-2', part);
					layers[3]	= $('.ui-colorpicker-bar-layer-3', part);
					layers[4]	= $('.ui-colorpicker-bar-layer-4', part);
					layers.a	= $('.ui-colorpicker-bar-layer-alpha', part);
					layers.ab	= $('.ui-colorpicker-bar-layer-alphabar', part);
					layers.p	= $('.ui-colorpicker-bar-layer-pointer', part);
					width		= layers.p.width();
					height		= layers.p.height();		
					
					pointer		= $('.ui-colorpicker-bar-pointer', part);
				};
				
				this.update = function () {
					var step = ((inst.options.part.bar.size || 256) * 65 / 64);

					switch (inst.mode) {
						case 'h':
						case 's':
						case 'v':
						case 'r':
						case 'g':
						case 'b':
							layers.a.show();
							layers.ab.hide();
							break;

						case 'a':
							layers.a.hide();
							layers.ab.show();
							break;
					}

					switch (inst.mode) {
						case 'h':
							layers[1].css({'background-position': '0 0', 'opacity': ''}).show();
							layers[2].hide();
							layers[3].hide();
							layers[4].hide();
							break;

						case 's':
							layers[1].css({'background-position': '0 ' + (-step) + 'px', 'opacity': ''}).show();
							layers[2].css({'background-position': '0 ' + (-step * 2) + 'px', 'opacity': ''}).show();
							layers[3].hide();
							layers[4].hide();
							break;

						case 'v':
							layers[1].css({'background-position': '0 ' + (-step * 2) + 'px', 'opacity': ''}).show();
							layers[2].hide();
							layers[3].hide();
							layers[4].hide();
							break;

						case 'r':
							layers[1].css({'background-position': '0 ' + (-step * 6) + 'px', 'opacity': ''}).show();
							layers[2].css({'background-position': '0 ' + (-step * 5) + 'px', 'opacity': ''}).show();
							layers[3].css({'background-position': '0 ' + (-step * 3) + 'px', 'opacity': ''}).show();
							layers[4].css({'background-position': '0 ' + (-step * 4) + 'px', 'opacity': ''}).show();
							break;

						case 'g':
							layers[1].css({'background-position': '0 ' + (-step * 10) + 'px', 'opacity': ''}).show();
							layers[2].css({'background-position': '0 ' + (-step * 9) + 'px', 'opacity': ''}).show();
							layers[3].css({'background-position': '0 ' + (-step * 7) + 'px', 'opacity': ''}).show();
							layers[4].css({'background-position': '0 ' + (-step * 8) + 'px', 'opacity': ''}).show();
							break;

						case 'b':
							layers[1].css({'background-position': '0 ' + (-step * 14) + 'px', 'opacity': ''}).show();
							layers[2].css({'background-position': '0 ' + (-step * 13) + 'px', 'opacity': ''}).show();
							layers[3].css({'background-position': '0 ' + (-step * 11) + 'px', 'opacity': ''}).show();
							layers[4].css({'background-position': '0 ' + (-step * 12) + 'px', 'opacity': ''}).show();
							break;

						case 'a':
							layers[1].hide();
							layers[2].hide();
							layers[3].hide();
							layers[4].hide();
							break;
					}
					
					that.repaint();
				};

				this.repaint = function () {
					var y = 0;

					switch (inst.mode) {
						case 'h':
							y = (1 - inst.color.getHSV().h) * height;
							break;

						case 's':
							var hsv = inst.color.getHSV();
							y = (1 - hsv.s) * height;
							layers[2].css('opacity', 1 - hsv.v);
							part.css('background-color', inst.color.copy().setHSV(null, 1, null).toCSS());
							break;

						case 'v':
							y = (1 - inst.color.getHSV().v) * height;
							part.css('background-color', inst.color.copy().setHSV(null, null, 1).toCSS());
							break;

						case 'r':
							var rgb = inst.color.getRGB();
							y = (1 - rgb.r) * height;
							layers[2].css('opacity', Math.max(0, (rgb.b - rgb.g)));
							layers[3].css('opacity', Math.max(0, (rgb.g - rgb.b)));
							layers[4].css('opacity', Math.min(rgb.b, rgb.g));
							break;

						case 'g':
							var rgb = inst.color.getRGB();
							y = (1 - rgb.g) * height;
							layers[2].css('opacity', Math.max(0, (rgb.b - rgb.r)));
							layers[3].css('opacity', Math.max(0, (rgb.r - rgb.b)));
							layers[4].css('opacity', Math.min(rgb.r, rgb.b));
							break;

						case 'b':
							var rgb = inst.color.getRGB();
							y = (1 - rgb.b) * height;
							layers[2].css('opacity', Math.max(0, (rgb.r - rgb.g)));
							layers[3].css('opacity', Math.max(0, (rgb.g - rgb.r)));
							layers[4].css('opacity', Math.min(rgb.r, rgb.g));
							break;

						case 'a':
							y = (1 - inst.color.getAlpha()) * height;
							part.css('background-color', inst.color.copy().toCSS());
							break;
					}

					if (inst.mode !== 'a') {
						layers.a.css('opacity', 1 - inst.color.getAlpha());
					}

					pointer.css('top', y - 3);
				};

				this.disable = function (disable) {
					part[disable ? 'off' : 'on']('mousedown', _mousedown);
					part[disable ? 'off' : 'on']('keydown', _keydown);
				};
			},

			preview: function (inst) {
				var that = this,
					part = null,
					both,
					initial, initial_alpha,
					current, current_alpha,
					_html,
					onclick = function () {
						inst.color = inst.currentColor.copy();
						inst._change();
					};

				_html = function () {
					return '<div class="ui-colorpicker-preview ui-colorpicker-border">'
						+ '<div class="ui-colorpicker-preview-initial"><div class="ui-colorpicker-preview-initial-alpha"></div></div>'
						+ '<div class="ui-colorpicker-preview-current"><div class="ui-colorpicker-preview-current-alpha"></div></div>'
						+ '</div>';
				};

				this.init = function () {
					part = $(_html()).appendTo($('.ui-colorpicker-preview-container', inst.dialog));

					$('.ui-colorpicker-preview-initial', part).on('click', onclick);

					// cache
					initial			= $('.ui-colorpicker-preview-initial', part);
					initial_alpha	= $('.ui-colorpicker-preview-initial-alpha', part);
					current			= $('.ui-colorpicker-preview-current', part);
					current_alpha	= $('.ui-colorpicker-preview-current-alpha', part);
					both			= $('.ui-colorpicker-preview-initial-alpha, .ui-colorpicker-preview-current-alpha', part);
				};

				this.update = function () {
					both[inst.options.alpha ? 'show' : 'hide']();

					this.repaint();
				};

				this.repaint = function () {
					initial.css('background-color', inst.currentColor.set ? inst.currentColor.toCSS() : '').attr('title', inst.currentColor.set ? inst.currentColor.toCSS() : '');
					initial_alpha.css('opacity', 1 - inst.currentColor.getAlpha());
					current.css('background-color', inst.color.set ? inst.color.toCSS() : '').attr('title', inst.color.set ? inst.color.toCSS() : '');
					current_alpha.css('opacity', 1 - inst.color.getAlpha());
				};

				this.disable = function (disable) {
					$('.ui-colorpicker-preview-initial', part)[disable ? 'off' : 'on']('click', onclick);
				};
			},

			hsv: function (inst) {
				var that = this,
					part = null,
					inputs = {},
					_html;

				_html = function () {
					var html = '';

					if (inst.options.hsv) {
						html +=	'<div class="ui-colorpicker-hsv-h"><input class="ui-colorpicker-mode" type="radio" value="h"/><label>' + inst._getRegional('hsvH') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="360" size="10"/><span class="ui-colorpicker-unit">&deg;</span></div>'
							+ '<div class="ui-colorpicker-hsv-s"><input class="ui-colorpicker-mode" type="radio" value="s"/><label>' + inst._getRegional('hsvS') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100" size="10"/><span class="ui-colorpicker-unit">%</span></div>'
							+ '<div class="ui-colorpicker-hsv-v"><input class="ui-colorpicker-mode" type="radio" value="v"/><label>' + inst._getRegional('hsvV') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100" size="10"/><span class="ui-colorpicker-unit">%</span></div>';
					}

					return '<div class="ui-colorpicker-hsv">' + html + '</div>';
				};

				this.init = function () {
					part = $(_html()).appendTo($('.ui-colorpicker-hsv-container', inst.dialog));

					$('.ui-colorpicker-mode', part).click(function () {
						inst.mode = $(this).val();
						inst._updateAllParts();
					});
					
					inputs.h = $('.ui-colorpicker-hsv-h .ui-colorpicker-number', part);
					inputs.s = $('.ui-colorpicker-hsv-s .ui-colorpicker-number', part);
					inputs.v = $('.ui-colorpicker-hsv-v .ui-colorpicker-number', part);

					$('.ui-colorpicker-number', part).on('change keyup', function () {
						inst.color.setHSV(
							inputs.h.val() / 360,
							inputs.s.val() / 100,
							inputs.v.val() / 100
						);
						inst._change();
					});
				};

				this.repaint = function () {
					var hsv = inst.color.getHSV();
					inputs.h.val(Math.round(hsv.h * 360));
					inputs.s.val(Math.round(hsv.s * 100));
					inputs.v.val(Math.round(hsv.v * 100));
				};

				this.update = function () {
					$('.ui-colorpicker-mode', part).each(function () {
						var $this = $(this);
						$this.prop('checked', $this.val() === inst.mode);
					});
					this.repaint();
				};

				this.disable = function (disable) {
					$(':input', part).prop('disabled', disable);
				};
			},

			rgb: function (inst) {
				var that = this,
					part = null,
					inputs = {},
					_html;

				_html = function () {
					var html = '';

					if (inst.options.rgb) {
						html += '<div class="ui-colorpicker-rgb-r"><input class="ui-colorpicker-number" min="0" max="255"/><p>' + inst._getRegional('rgbR') + '</p></div>'
							+ '<div class="ui-colorpicker-rgb-g"><input class="ui-colorpicker-number"  min="0" max="255"/><p>' + inst._getRegional('rgbG') + '</p></div>'
							+ '<div class="ui-colorpicker-rgb-b"><input class="ui-colorpicker-number"  min="0" max="255"/><p>' + inst._getRegional('rgbB') + '</p></div>';
                        html+='<div class="ui-colorpicker-alpha"><input class="ui-colorpicker-number alphainput2" min="0" max="100" value="100" /><p>' + inst._getRegional('alphaA') + '</p></div>';
					}

					return '<div class="ui-colorpicker-rgb">' + html + '</div>';
				};

				this.init = function () {
					part = $(_html()).appendTo($('.ui-colorpicker-rgb-container', inst.dialog));

					$('.ui-colorpicker-mode', part).click(function () {
						inst.mode = $(this).val();
						inst._updateAllParts();
					});
					
					inputs.r = $('.ui-colorpicker-rgb-r .ui-colorpicker-number', part);
					inputs.g = $('.ui-colorpicker-rgb-g .ui-colorpicker-number', part);
					inputs.b = $('.ui-colorpicker-rgb-b .ui-colorpicker-number', part);

					$('.ui-colorpicker-number', part).on('change keyup', function () {
						var r = $('.ui-colorpicker-rgb-r .ui-colorpicker-number', part).val();
						inst.color.setRGB(
							inputs.r.val() / 255,
							inputs.g.val() / 255,
							inputs.b.val() / 255
						);

						inst._change();
					});
				};

				this.repaint = function () {
					var rgb = inst.color.getRGB();
					inputs.r.val(Math.round(rgb.r * 255));
					inputs.g.val(Math.round(rgb.g * 255));
					inputs.b.val(Math.round(rgb.b * 255));
				};

				this.update = function () {
					$('.ui-colorpicker-mode', part).each(function () {
						var $this = $(this);
						$this.prop('checked', $this.val() === inst.mode);
					});
					this.repaint();
				};

				this.disable = function (disable) {
					$(':input', part).prop('disabled', disable);
				};
			},

			lab: function (inst) {
				var that = this,
					part = null,
					inputs = {},
					html = function () {
						var html = '';

						if (inst.options.hsv) {
							html +=	'<div class="ui-colorpicker-lab-l"><label>' + inst._getRegional('labL') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/></div>'
								+ '<div class="ui-colorpicker-lab-a"><label>' + inst._getRegional('labA') + '</label><input class="ui-colorpicker-number" type="number" min="-128" max="127"/></div>'
								+ '<div class="ui-colorpicker-lab-b"><label>' + inst._getRegional('labB') + '</label><input class="ui-colorpicker-number" type="number" min="-128" max="127"/></div>';
						}

						return '<div class="ui-colorpicker-lab">' + html + '</div>';
					};

				this.init = function () {
					var data = 0;

					part = $(html()).appendTo($('.ui-colorpicker-lab-container', inst.dialog));
					
					inputs.l = $('.ui-colorpicker-lab-l .ui-colorpicker-number', part);
					inputs.a = $('.ui-colorpicker-lab-a .ui-colorpicker-number', part);
					inputs.b = $('.ui-colorpicker-lab-b .ui-colorpicker-number', part);

					$('.ui-colorpicker-number', part).on('change keyup', function (event) {
						inst.color.setLAB(
							parseInt(inputs.l.val(), 10) / 100,
							(parseInt(inputs.a.val(), 10) + 128) / 255,
							(parseInt(inputs.b.val(), 10) + 128) / 255
						);
						inst._change();
					});
				};

				this.repaint = function () {
					var lab = inst.color.getLAB();
					inputs.l.val(Math.round(lab.l * 100));
					inputs.a.val(Math.round(lab.a * 255) - 128);
					inputs.b.val(Math.round(lab.b * 255) - 128);
				};

				this.update = this.repaint;
				
				this.disable = function (disable) {
					$(':input', part).prop('disabled', disable);
				};
			},

			cmyk: function (inst) {
				var that = this,
					part = null,
					inputs = {},
					html = function () {
						var html = '';

						if (inst.options.hsv) {
							html +=	'<div class="ui-colorpicker-cmyk-c"><label>' + inst._getRegional('cmykC') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div>'
								+ '<div class="ui-colorpicker-cmyk-m"><label>' + inst._getRegional('cmykM') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div>'
								+ '<div class="ui-colorpicker-cmyk-y"><label>' + inst._getRegional('cmykY') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div>'
								+ '<div class="ui-colorpicker-cmyk-k"><label>' + inst._getRegional('cmykK') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div>';
						}

						return '<div class="ui-colorpicker-cmyk">' + html + '</div>';
					};

				this.init = function () {
					part = $(html()).appendTo($('.ui-colorpicker-cmyk-container', inst.dialog));
					
					inputs.c = $('.ui-colorpicker-cmyk-c .ui-colorpicker-number', part);
					inputs.m = $('.ui-colorpicker-cmyk-m .ui-colorpicker-number', part);
					inputs.y = $('.ui-colorpicker-cmyk-y .ui-colorpicker-number', part);
					inputs.k = $('.ui-colorpicker-cmyk-k .ui-colorpicker-number', part);
					
					$('.ui-colorpicker-number', part).on('change keyup', function (event) {
						inst.color.setCMYK(
							parseInt(inputs.c.val(), 10) / 100,
							parseInt(inputs.m.val(), 10) / 100,
							parseInt(inputs.y.val(), 10) / 100,
							parseInt(inputs.k.val(), 10) / 100
						);
						inst._change();
					});
				};

				this.repaint = function () {
					var cmyk = inst.color.getCMYK();
					inputs.c.val(Math.round(cmyk.c * 100));
					inputs.m.val(Math.round(cmyk.m * 100));
					inputs.y.val(Math.round(cmyk.y * 100));
					inputs.k.val(Math.round(cmyk.k * 100));
				};

				this.update = this.repaint;

				this.disable = function (disable) {
					$(':input', part).prop('disabled', disable);
				};
			},

			alpha: function (inst) {
				var that = this,
					part = null,
					input,
					html = function () {
						var html = '';

						
                        html+='<input class="ui-colorpicker-number alphainput" id="alphainput" type="number" min="0" max=100" value="100" style="display:none;" /><div class="sliderbg"><div class="rangeslider"></div></div>';

						return '<div class="ui-colorpicker-a">' + html + '</div>';
					};

				this.init = function () {
					part = $(html()).appendTo($('.ui-colorpicker-alpha-container', inst.dialog));

					$('.ui-colorpicker-mode', part).click(function () {
						inst.mode = $(this).val();
						inst._updateAllParts();
					});
					
					input = $('.ui-colorpicker-a ui-colorpicker-number', part);

					$('.ui-colorpicker-number', part).on('change keyup', function () {
                    //console.log(input.val() / 100);
                        
						inst.color.setAlpha($('#alphainput').val() / 100);
						inst._change();
					});
				};

				this.update = function () {
					$('.ui-colorpicker-mode', part).each(function () {
						$(this).prop('checked', $(this).val() === inst.mode);
					});
					this.repaint();
				};

				this.repaint = function () {
					input.val(Math.round(inst.color.getAlpha() * 100));
				};
				
				this.disable = function (disable) {
					$(':input', part).prop('disabled', disable);
				};
			},

			hex: function (inst) {
				var that = this,
					part = null,
					inputs = {},
					parseHex = function(color) {
						var c,
							m;

						// {#}rgb
						m = /^#?([a-fA-F0-9]{1,3})$/.exec(color);
						if (m) {
							c = parseInt(m[1], 16);
							return new $.colorpicker.Color(
								((c >> 8) & 0xF) / 15,
								((c >> 4) & 0xF) / 15,
								(c & 0xF) / 15
							);
						}

						// {#}rrggbb
						m = /^#?([a-fA-F0-9]{1,6})$/.exec(color);
						if (m) {
							c = parseInt(m[1], 16);
							return new $.colorpicker.Color(
								((c >> 16) & 0xFF) / 255,
								((c >>  8) & 0xFF) / 255,
								(c & 0xFF) / 255
							);
						}
						
						return new $.colorpicker.Color();
					},
					html = function () {
						var html = '';

						html += '<input class="ui-colorpicker-hex-input" type="text" maxlength="7" size="7"/>';

						return '<div class="ui-colorpicker-hex">' + html + '<p>HEX</p></div>';
					};

				this.init = function () {
					part = $(html()).appendTo($('.ui-colorpicker-hex-container', inst.dialog));

					inputs.color = $('.ui-colorpicker-hex-input', part);
					inputs.alpha = $('.ui-colorpicker-hex-alpha', part);

					inputs.color.on('keydown keyup', function(e) {	
						return e.ctrlKey || e.metaKey || _keycode.isHex(e.which) || !_keycode.isPrint(e.which);
					});

					// repeat here makes the invalid input disappear faster
					inputs.color.on('change', function () {
						if (/[^a-fA-F0-9]/.test(inputs.color.val())) {
							inputs.color.val(inputs.color.val().replace(/[^a-fA-F0-9]/g, ''));
						}
					});

					inputs.color.on('change keyup', function () {
						// repeat here makes sure that the invalid input doesn't get parsed
						inst.color = parseHex(inputs.color.val()).setAlpha(inst.color.getAlpha());
						inst._change();
					});

					inputs.alpha.on('keydown keyup', function(e) {
						return e.ctrlKey || e.metaKey || _keycode.isHex(e.which) || !_keycode.isPrint(e.which);
					});
					
					inputs.alpha.on('change', function () {
						if (/[^a-fA-F0-9]/.test(inputs.alpha)) {
							inputs.alpha.val(inputs.alpha.val().replace(/[^a-fA-F0-9]/g, ''));
						}
					});

					inputs.alpha.on('change keyup', function () {
						inst.color.setAlpha(parseInt(inputs.alpha.val(), 16) / 255);
						inst._change();
					});
				};

				this.repaint = function () {
					if (!inputs.color.is(':focus')) {
						inputs.color.val('#'+inst.color.toHex(true));
					}

					if (!inputs.alpha.is(':focus')) {
						inputs.alpha.val(_intToHex(inst.color.getAlpha() * 255));
					}
				};

				this.update = this.repaint;

				this.disable = function (disable) {
					$(':input', part).prop('disabled', disable);
				};
			},

			swatches: function (inst) {
				var that = this,
					part = null,
					html = function () {
						var html = '';

						inst._eachSwatch(function (name, color) {
							var c = new $.colorpicker.Color(color.r, color.g, color.b),
								css = c.toCSS();
							html += '<div class="ui-colorpicker-swatch" style="background-color:' + css + '" title="' + name + '"></div>';
						});

						return '<div class="ui-colorpicker-swatches ui-colorpicker-border" style="width:' + inst.options.swatchesWidth + 'px">' + html + '</div>';
					},
					onclick = function () {
						inst.color	= inst._parseColor($(this).css('background-color')) || new $.colorpicker.Color();
						inst._change();
					};

				this.init = function () {
					part = $(html());
					$('.ui-colorpicker-swatches-container', inst.dialog).html(part);
					$('.ui-colorpicker-swatch', part).on('click', onclick);
				};

				this.disable = function (disable) {
					$('.ui-colorpicker-swatch', part)[disable ? 'off' : 'on']('click', onclick);
				};
			},

			footer: function (inst) {
				var that = this,
					part = null,
					id_transparent = 'ui-colorpicker-special-transparent-' + inst.colorpicker_index,
					id_none = 'ui-colorpicker-special-none-' + inst.colorpicker_index,
					html = function () {
						var html = '';

							html += '<div class="ui-dialog-buttonset">';
                            if (!inst.inline && inst.options.showNoneButton) {
								/*html += '<input type="radio" name="ui-colorpicker-special" id="'+id_none+'" class="ui-colorpicker-special-none"><label for="'+id_none+'">' + inst._getRegional('none') + '</label>';*/
                                
                                html += '<button class="ui-colorpicker-cancel" id="'+id_none+'">' + inst._getRegional('none') + '</button>';
							}
                            
							if (inst.options.showCancelButton) {
								html += '<button class="ui-colorpicker-cancel">' + inst._getRegional('cancel') + '</button>';
							}
							html += '<button class="ui-colorpicker-ok">' + inst._getRegional('ok') + '</button>';
							html += '</div>';
						

						return '<div>' + html + '</div>';
					};

				this.init = function () {
					part = $(html()).appendTo(inst.dialog);

					$('.ui-colorpicker-ok', part).button().click(function () {
						inst.close();
					});

					$('.ui-colorpicker-cancel', part).button().click(function () {
						inst.close(false);   //cancel
					});

					$('.ui-colorpicker-buttonset', part)[$.fn.controlgroup ? 'controlgroup' : 'buttonset']();

					$('.ui-colorpicker-special-color', part).click(function () {
						inst._change();
					});

					$('#'+id_none, part).click(function () {
						inst.color.set = false;
						inst._change();
					});

					$('#'+id_transparent, part).click(function () {
						inst.color.setAlpha(0);
						inst._change();
					});
				};

				this.repaint = function () {
					$('.ui-colorpicker-special-none', part).prop('checked', !inst.color.set).button('refresh');
					$('.ui-colorpicker-special-transparent', part).prop('checked', inst.color.set && inst.color.getAlpha() === 0).button('refresh');
					$('.ui-colorpicker-ok', part).button(inst.changed ? 'enable' : 'disable');
				};

				this.update = function () {};

				this.disable = function (disabled) {
					$(':input, :button', part).button(disabled ? 'disable' : 'enable');
					if (!disabled) {
						$('.ui-colorpicker-ok', part).button(inst.changed ? 'enable' : 'disable');
					}
				};
			}
		};

		this.Color = function () {
			var spaces = {	rgb:	{r: 0, g: 0, b: 0},
							hsv:	{h: 0, s: 0, v: 0},
							hsl:	{h: 0, s: 0, l: 0},
							lab:	{l: 0, a: 0, b: 0},
							cmyk:	{c: 0, m: 0, y: 0, k: 1}
						},
				a = 1,
				illuminant = [0.9504285, 1, 1.0889],	// CIE-L*ab D65/2' 1931
				args = arguments,
				_clip = function(v) {
					if (isNaN(v) || v === null) {
						return 0;
					}
					if (typeof v == 'string') {
						v = parseInt(v, 10);
					}
					return Math.max(0, Math.min(v, 1));
				},
				_hexify = function (number) {
					var number = Math.round(number),
						digits = '0123456789abcdef',
						lsd = number % 16,
						msd = (number - lsd) / 16,
						hexified = digits.charAt(msd) + digits.charAt(lsd);
					return hexified;
				},
				_rgb_to_xyz = function(rgb) {
					var r = (rgb.r > 0.04045) ? Math.pow((rgb.r + 0.055) / 1.055, 2.4) : rgb.r / 12.92,
						g = (rgb.g > 0.04045) ? Math.pow((rgb.g + 0.055) / 1.055, 2.4) : rgb.g / 12.92,
						b = (rgb.b > 0.04045) ? Math.pow((rgb.b + 0.055) / 1.055, 2.4) : rgb.b / 12.92;

					return {
						x: r * 0.4124 + g * 0.3576 + b * 0.1805,
						y: r * 0.2126 + g * 0.7152 + b * 0.0722,
						z: r * 0.0193 + g * 0.1192 + b * 0.9505
					};
				},
				_xyz_to_rgb = function(xyz) {
					var rgb = {
						r: xyz.x *  3.2406 + xyz.y * -1.5372 + xyz.z * -0.4986,
						g: xyz.x * -0.9689 + xyz.y *  1.8758 + xyz.z *  0.0415,
						b: xyz.x *  0.0557 + xyz.y * -0.2040 + xyz.z *  1.0570
					};

					rgb.r = (rgb.r > 0.0031308) ? 1.055 * Math.pow(rgb.r, (1 / 2.4)) - 0.055 : 12.92 * rgb.r;
					rgb.g = (rgb.g > 0.0031308) ? 1.055 * Math.pow(rgb.g, (1 / 2.4)) - 0.055 : 12.92 * rgb.g;
					rgb.b = (rgb.b > 0.0031308) ? 1.055 * Math.pow(rgb.b, (1 / 2.4)) - 0.055 : 12.92 * rgb.b;

					return rgb;
				},
				_rgb_to_hsv = function(rgb) {
					var minVal = Math.min(rgb.r, rgb.g, rgb.b),
						maxVal = Math.max(rgb.r, rgb.g, rgb.b),
						delta = maxVal - minVal,
						del_R, del_G, del_B,
						hsv = {
							h: 0,
							s: 0,
							v: maxVal
						};

					if (delta === 0) {
						hsv.h = 0;
						hsv.s = 0;
					} else {
						hsv.s = delta / maxVal;

						del_R = (((maxVal - rgb.r) / 6) + (delta / 2)) / delta;
						del_G = (((maxVal - rgb.g) / 6) + (delta / 2)) / delta;
						del_B = (((maxVal - rgb.b) / 6) + (delta / 2)) / delta;

						if (rgb.r === maxVal) {
							hsv.h = del_B - del_G;
						} else if (rgb.g === maxVal) {
							hsv.h = (1 / 3) + del_R - del_B;
						} else if (rgb.b === maxVal) {
							hsv.h = (2 / 3) + del_G - del_R;
						}

						if (hsv.h < 0) {
							hsv.h += 1;
						} else if (hsv.h > 1) {
							hsv.h -= 1;
						}
					}

					return hsv;
				},
				_hsv_to_rgb = function(hsv) {
					var rgb = {
							r: 0,
							g: 0,
							b: 0
						},
						var_h,
						var_i,
						var_1,
						var_2,
						var_3;

					if (hsv.s === 0) {
						rgb.r = rgb.g = rgb.b = hsv.v;
					} else {
						var_h = hsv.h === 1 ? 0 : hsv.h * 6;
						var_i = Math.floor(var_h);
						var_1 = hsv.v * (1 - hsv.s);
						var_2 = hsv.v * (1 - hsv.s * (var_h - var_i));
						var_3 = hsv.v * (1 - hsv.s * (1 - (var_h - var_i)));

						if (var_i === 0) {
							rgb.r = hsv.v;
							rgb.g = var_3;
							rgb.b = var_1;
						} else if (var_i === 1) {
							rgb.r = var_2;
							rgb.g = hsv.v;
							rgb.b = var_1;
						} else if (var_i === 2) {
							rgb.r = var_1;
							rgb.g = hsv.v;
							rgb.b = var_3;
						} else if (var_i === 3) {
							rgb.r = var_1;
							rgb.g = var_2;
							rgb.b = hsv.v;
						} else if (var_i === 4) {
							rgb.r = var_3;
							rgb.g = var_1;
							rgb.b = hsv.v;
						} else {
							rgb.r = hsv.v;
							rgb.g = var_1;
							rgb.b = var_2;
						}
					}

					return rgb;
				},
				_rgb_to_hsl = function(rgb) {
					var minVal = Math.min(rgb.r, rgb.g, rgb.b),
						maxVal = Math.max(rgb.r, rgb.g, rgb.b),
						delta = maxVal - minVal,
						del_R, del_G, del_B,
						hsl = {
							h: 0,
							s: 0,
							l: (maxVal + minVal) / 2
						};

					if (delta === 0) {
						hsl.h = 0;
						hsl.s = 0;
					} else {
						hsl.s = hsl.l < 0.5 ? delta / (maxVal + minVal) : delta / (2 - maxVal - minVal);

						del_R = (((maxVal - rgb.r) / 6) + (delta / 2)) / delta;
						del_G = (((maxVal - rgb.g) / 6) + (delta / 2)) / delta;
						del_B = (((maxVal - rgb.b) / 6) + (delta / 2)) / delta;

						if (rgb.r === maxVal) {
							hsl.h = del_B - del_G;
						} else if (rgb.g === maxVal) {
							hsl.h = (1 / 3) + del_R - del_B;
						} else if (rgb.b === maxVal) {
							hsl.h = (2 / 3) + del_G - del_R;
						}

						if (hsl.h < 0) {
							hsl.h += 1;
						} else if (hsl.h > 1) {
							hsl.h -= 1;
						}
					}

					return hsl;
				},
				_hsl_to_rgb = function(hsl) {
					var var_1,
						var_2,
						hue_to_rgb	= function(v1, v2, vH) {
										if (vH < 0) {
											vH += 1;
										}
										if (vH > 1) {
											vH -= 1;
										}
										if ((6 * vH) < 1) {
											return v1 + (v2 - v1) * 6 * vH;
										}
										if ((2 * vH) < 1) {
											return v2;
										}
										if ((3 * vH) < 2) {
											return v1 + (v2 - v1) * ((2 / 3) - vH) * 6;
										}
										return v1;
									};

					if (hsl.s === 0) {
						return {
							r: hsl.l,
							g: hsl.l,
							b: hsl.l
						};
					}

					var_2 = (hsl.l < 0.5) ? hsl.l * (1 + hsl.s) : (hsl.l + hsl.s) - (hsl.s * hsl.l);
					var_1 = 2 * hsl.l - var_2;

					return {
						r: hue_to_rgb(var_1, var_2, hsl.h + (1 / 3)),
						g: hue_to_rgb(var_1, var_2, hsl.h),
						b: hue_to_rgb(var_1, var_2, hsl.h - (1 / 3))
					};
				},
				_xyz_to_lab = function(xyz) {
					var x = xyz.x / illuminant[0],
						y = xyz.y / illuminant[1],
						z = xyz.z / illuminant[2];

					x = (x > 0.008856) ? Math.pow(x, (1/3)) : (7.787 * x) + (16/116);
					y = (y > 0.008856) ? Math.pow(y, (1/3)) : (7.787 * y) + (16/116);
					z = (z > 0.008856) ? Math.pow(z, (1/3)) : (7.787 * z) + (16/116);

					return {
						l: ((116 * y) - 16) / 100,	// [0,100]
						a: ((500 * (x - y)) + 128) / 255,	// [-128,127]
						b: ((200 * (y - z))	+ 128) / 255	// [-128,127]
					};
				},
				_lab_to_xyz = function(lab) {
					var lab2 = {
							l: lab.l * 100,
							a: (lab.a * 255) - 128,
							b: (lab.b * 255) - 128
						},
						xyz = {
							x: 0,
							y: (lab2.l + 16) / 116,
							z: 0
						};

					xyz.x = lab2.a / 500 + xyz.y;
					xyz.z = xyz.y - lab2.b / 200;

					xyz.x = (Math.pow(xyz.x, 3) > 0.008856) ? Math.pow(xyz.x, 3) : (xyz.x - 16 / 116) / 7.787;
					xyz.y = (Math.pow(xyz.y, 3) > 0.008856) ? Math.pow(xyz.y, 3) : (xyz.y - 16 / 116) / 7.787;
					xyz.z = (Math.pow(xyz.z, 3) > 0.008856) ? Math.pow(xyz.z, 3) : (xyz.z - 16 / 116) / 7.787;

					xyz.x *= illuminant[0];
					xyz.y *= illuminant[1];
					xyz.z *= illuminant[2];

					return xyz;
				},
				_rgb_to_cmy = function(rgb) {
					return {
						c: 1 - (rgb.r),
						m: 1 - (rgb.g),
						y: 1 - (rgb.b)
					};
				},
				_cmy_to_rgb = function(cmy) {
					return {
						r: 1 - (cmy.c),
						g: 1 - (cmy.m),
						b: 1 - (cmy.y)
					};
				},
				_cmy_to_cmyk = function(cmy) {
					var K = 1;

					if (cmy.c < K) {
						K = cmy.c;
					}
					if (cmy.m < K) {
						K = cmy.m;
					}
					if (cmy.y < K) {
						K = cmy.y;
					}

					if (K === 1) {
						return {
							c: 0,
							m: 0,
							y: 0,
							k: 1
						};
					}

					return {
						c: (cmy.c - K) / (1 - K),
						m: (cmy.m - K) / (1 - K),
						y: (cmy.y - K) / (1 - K),
						k: K
					};
				},
				_cmyk_to_cmy = function(cmyk) {
					return {
						c: cmyk.c * (1 - cmyk.k) + cmyk.k,
						m: cmyk.m * (1 - cmyk.k) + cmyk.k,
						y: cmyk.y * (1 - cmyk.k) + cmyk.k
					};
				};

			this.set = false;

			this.setAlpha = function(_a) {
				if (_a !== null) {
					a = _clip(_a);
				}
				this.set = true;

				return this;
			};

			this.getAlpha = function() {
				return a;
			};

			this.setRGB = function(r, g, b) {
				spaces = { rgb: this.getRGB() };
				if (r !== null) {
					spaces.rgb.r = _clip(r);
				}
				if (g !== null) {
					spaces.rgb.g = _clip(g);
				}
				if (b !== null) {
					spaces.rgb.b = _clip(b);
				}
				this.set = true;
				
				return this;
			};
			
			this.getChannel = function(channel) {
				switch (channel) {
					case 'h':
					case 's':
					case 'v':
						return this.getHSV()[channel];

					case 'r':
					case 'g':
					case 'b':
						return this.getRGB()[channel];

					case 'a':
						return this.getAlpha();
				}			
				
				return null;
			};
			
			this.setChannel = function(channel, value) {
				switch (channel) {
					case 'h':
						return this.setHSV(value, null, null);
						
					case 's':
						return this.setHSV(null, value, null);
						
					case 'v':
						return this.setHSV(null, null, value);

					case 'r':
						return this.setRGB(value, null, null);
						
					case 'g':
						return this.setRGB(null, value, null);
						
					case 'b':
						return this.setRGB(null, null, value);

					case 'a':
						return this.setAlpha(value);
				}
				
				return this;
			};

			this.setHSV = function(h, s, v) {
				spaces = {hsv: this.getHSV()};
				if (h !== null) {
					spaces.hsv.h = _clip(h);
				}
				if (s !== null)	{
					spaces.hsv.s = _clip(s);
				}
				if (v !== null)	{
					spaces.hsv.v = _clip(v);
				}
				this.set = true;

				return this;
			};

			this.setHSL = function(h, s, l) {
				spaces = {hsl: this.getHSL()};
				if (h !== null)	{
					spaces.hsl.h = _clip(h);
				}
				if (s !== null) {
					spaces.hsl.s = _clip(s);
				}
				if (l !== null) {
					spaces.hsl.l = _clip(l);
				}
				this.set = true;

				return this;
			};

			this.setLAB = function(l, a, b) {
				spaces = {lab: this.getLAB()};
				if (l !== null) {
					spaces.lab.l = _clip(l);
				}
				if (a !== null) {
					spaces.lab.a = _clip(a);
				}
				if (b !== null) {
					spaces.lab.b = _clip(b);
				}
				this.set = true;

				return this;
			};

			this.setCMYK = function(c, m, y, k) {
				spaces = {cmyk: this.getCMYK()};
				if (c !== null) {
					spaces.cmyk.c = _clip(c);
				}
				if (m !== null) {
					spaces.cmyk.m = _clip(m);
				}
				if (y !== null) {
					spaces.cmyk.y = _clip(y);
				}
				if (k !== null) {
					spaces.cmyk.k = _clip(k);
				}
				this.set = true;

				return this;
			};

			this.getRGB = function() {
				if (!spaces.rgb) {
					spaces.rgb	= spaces.lab ?	_xyz_to_rgb(_lab_to_xyz(spaces.lab))
								: spaces.hsv ?	_hsv_to_rgb(spaces.hsv)
								: spaces.hsl ?	_hsl_to_rgb(spaces.hsl)
								: spaces.cmyk ?	_cmy_to_rgb(_cmyk_to_cmy(spaces.cmyk))
								: {r: 0, g: 0, b: 0};
					spaces.rgb.r = _clip(spaces.rgb.r);
					spaces.rgb.g = _clip(spaces.rgb.g);
					spaces.rgb.b = _clip(spaces.rgb.b);
				}
				return $.extend({}, spaces.rgb);
			};

			this.getHSV = function() {
				if (!spaces.hsv) {
					spaces.hsv	= spaces.lab ? _rgb_to_hsv(this.getRGB())
								: spaces.rgb ?	_rgb_to_hsv(spaces.rgb)
								: spaces.hsl ?	_rgb_to_hsv(this.getRGB())
								: spaces.cmyk ?	_rgb_to_hsv(this.getRGB())
								: {h: 0, s: 0, v: 0};
					spaces.hsv.h = _clip(spaces.hsv.h);
					spaces.hsv.s = _clip(spaces.hsv.s);
					spaces.hsv.v = _clip(spaces.hsv.v);
				}
				return $.extend({}, spaces.hsv);
			};

			this.getHSL = function() {
				if (!spaces.hsl) {
					spaces.hsl	= spaces.rgb ?	_rgb_to_hsl(spaces.rgb)
								: spaces.hsv ?	_rgb_to_hsl(this.getRGB())
								: spaces.cmyk ?	_rgb_to_hsl(this.getRGB())
								: spaces.hsv ?	_rgb_to_hsl(this.getRGB())
								: {h: 0, s: 0, l: 0};
					spaces.hsl.h = _clip(spaces.hsl.h);
					spaces.hsl.s = _clip(spaces.hsl.s);
					spaces.hsl.l = _clip(spaces.hsl.l);
				}
				return $.extend({}, spaces.hsl);
			};

			this.getCMYK = function() {
				if (!spaces.cmyk) {
					spaces.cmyk	= spaces.rgb ?	_cmy_to_cmyk(_rgb_to_cmy(spaces.rgb))
								: spaces.hsv ?	_cmy_to_cmyk(_rgb_to_cmy(this.getRGB()))
								: spaces.hsl ?	_cmy_to_cmyk(_rgb_to_cmy(this.getRGB()))
								: spaces.lab ?	_cmy_to_cmyk(_rgb_to_cmy(this.getRGB()))
								: {c: 0, m: 0, y: 0, k: 1};
					spaces.cmyk.c = _clip(spaces.cmyk.c);
					spaces.cmyk.m = _clip(spaces.cmyk.m);
					spaces.cmyk.y = _clip(spaces.cmyk.y);
					spaces.cmyk.k = _clip(spaces.cmyk.k);
				}
				return $.extend({}, spaces.cmyk);
			};

			this.getLAB = function() {
				if (!spaces.lab) {
					spaces.lab	= spaces.rgb ?	_xyz_to_lab(_rgb_to_xyz(spaces.rgb))
								: spaces.hsv ?	_xyz_to_lab(_rgb_to_xyz(this.getRGB()))
								: spaces.hsl ?	_xyz_to_lab(_rgb_to_xyz(this.getRGB()))
								: spaces.cmyk ?	_xyz_to_lab(_rgb_to_xyz(this.getRGB()))
								: {l: 0, a: 0, b: 0};
					spaces.lab.l = _clip(spaces.lab.l);
					spaces.lab.a = _clip(spaces.lab.a);
					spaces.lab.b = _clip(spaces.lab.b);
				}
				return $.extend({}, spaces.lab);
			};

			this.getChannels = function() {
				return {
					r:	this.getRGB().r,
					g:	this.getRGB().g,
					b:	this.getRGB().b,
					a:	this.getAlpha(),
					h:	this.getHSV().h,
					s:	this.getHSV().s,
					v:	this.getHSV().v,
					c:	this.getCMYK().c,
					m:	this.getCMYK().m,
					y:	this.getCMYK().y,
					k:	this.getCMYK().k,
					L:	this.getLAB().l,
					A:	this.getLAB().a,
					B:	this.getLAB().b
				};
			};

			this.getSpaces = function() {
				return $.extend(true, {}, spaces);
			};

			this.distance = function(color) {
				var space	= 'lab',
					getter	= 'get'+space.toUpperCase(),
					a = this[getter](),
					b = color[getter](),
					distance = 0,
					channel;

				for (channel in a) {
					distance += Math.pow(a[channel] - b[channel], 2);
				}

				return distance;
			};

			this.equals = function(color) {
				if (color) {
					var a = this.getRGB(),
						b = color.getRGB();

					return this.set === color.set
						&& this.getAlpha() === color.getAlpha()
						&& a.r === b.r
						&& a.g === b.g
						&& a.b === b.b;
				}
				return false;
			};

			this.limit = function(steps) {
				steps -= 1;
				var rgb = this.getRGB();
				this.setRGB(
					Math.round(rgb.r * steps) / steps,
					Math.round(rgb.g * steps) / steps,
					Math.round(rgb.b * steps) / steps
				);
			};

			this.toHex = function() {
				var rgb = this.getRGB();
				return _hexify(rgb.r * 255) + _hexify(rgb.g * 255) + _hexify(rgb.b * 255);
			};

			this.toCSS = function() {
				return '#' + this.toHex();
			};

			this.copy = function() {
				var color = new $.colorpicker.Color(this.getSpaces(), this.getAlpha());
				color.set = this.set;
				return color;
			};

			// Construct
			if (args.length === 2) {
				spaces = args[0];
				this.setAlpha(args[1] === 0 ? 0 : args[1] || 1);
				this.set = true;
			}
			if (args.length > 2) {
				this.setRGB(args[0], args[1], args[2]);
				this.setAlpha(args[3] === 0 ? 0 : args[3] || 1);
				this.set = true;
			}
		};
	}();

	$.widget("vanderlee.colorpicker", {
		options: {
			alpha:				false,		// Show alpha controls and mode
			altAlpha:			true,		// change opacity of altField as well?
			altField:			'',			// selector for DOM elements which change background color on change.
			altOnChange:		true,		// true to update on each change, false to update only on close.
			altProperties:		'background-color',	// comma separated list of any of 'background-color', 'color', 'border-color', 'outline-color'
			autoOpen:			false,		// Open dialog automatically upon creation
			buttonClass:		null,		// If set, the button will get this/these classname(s).
			buttonColorize:		false,
			buttonImage:		'',
			buttonImageOnly:	false,
			buttonText:			null,		// Text on the button and/or title of button image.
			closeOnEscape:		true,		// Close the dialog when the escape key is pressed.
			closeOnOutside:		true,		// Close the dialog when clicking outside the dialog (not for inline)
			color:				'#00FF00',	// Initial color (for inline only)
			colorFormat:		'HEX',		// Format string for output color format
			disabled:			false,		// Disable or enable the colorpicker initially
			draggable:			true,		// Make popup dialog draggable if header is visible.
			containment:		null,		// Constrains dragging to within the bounds of the specified element or region.
			duration:			'fast',
			hideOn:				'button',	// 'focus', 'click', 'button', 'alt', 'all'
			hsv:				true,		// Show HSV controls and modes
			inline:				true,		// Show any divs as inline by default
			inlineFrame:		true,		// Show a border and background when inline.
			layout: {
				map:		[0, 0, 1, 5],	// Left, Top, Width, Height (in table cells).
				bar:		[1, 0, 1, 5],
				preview:	[2, 0, 1, 1],
				hsv:		[2, 1, 1, 1],
				rgb:		[2, 2, 1, 1],
				alpha:		[2, 3, 1, 1],
				hex:		[2, 4, 1, 1],
				lab:		[3, 1, 1, 1],
				cmyk:		[3, 2, 1, 2],
				swatches:	[4, 0, 1, 5]
			},
			limit:				'',			// Limit color "resolution": '', 'websafe', 'nibble', 'binary', 'name'
			modal:				false,		// Modal dialog?
			mode:				'h',		// Initial editing mode, h, s, v, r, g, b or a
			okOnEnter:			false,		// Close (with OK) when pressing the enter key
			parts:				'',			// leave empty for automatic selection
			part: {
				map:		{ size: 256 },
				bar:		{ size: 256 }
			},			// options per part
			position:			null,
			regional:			'',
			revert:				false,		// Revert color upon non
			rgb:				true,		// Show RGB controls and modes
			showAnim:			'fadeIn',
			showCancelButton:	true,
			showNoneButton:		false,
			showCloseButton:	true,
			showOn:				'focus click alt',		// 'focus', 'click', 'button', 'alt', 'all'
			showOptions:		{},
			swatches:			null,		// null for default or kv-object or names swatches set
			swatchesWidth:		84,			// width (in number of pixels) of swatches box.
			title:				null,

			cancel:             null,
            close:              null,
			init:				null,
            ok:                 null,
			open:               null,
			select:             null,
			stop:				null
		},
		
		_create: function () {
			var that = this,
				text;

			that.colorpicker_index = _colorpicker_index++;

			that.widgetEventPrefix = 'colorpicker';

			that.opened		= false;
			that.generated	= false;
			that.inline		= false;
			that.changed	= false;

			that.dialog		= null;
			that.button		= null;
			that.image		= null;
			that.overlay	= null;
			
			that.events = {
				window_resize:			null,
				document_keydown:		null,
				document_click_html:	null
			};

			that.mode		= that.options.mode;

			if (that.element.is('input') || that.options.inline === false) {
				// Initial color
				that._setColor(that.element.is('input') ? that.element.val() : that.options.color);
				that._callback('init');

				// showOn focus
				if (/\bfocus|all|both\b/.test(that.options.showOn)) {
					that.element.on('focus', function () {
						that.open();
					});
				}
				if (/\bfocus|all|both\b/.test(that.options.hideOn)) {
					that.element.on('focusout', function (e) {
						that.close();
					});
				}

				// showOn click
				if (/\bclick|all|both\b/.test(that.options.showOn)) {
					that.element.on('click', function (e) {						
						if (that.opened && /\bclick|all|both\b/.test(that.options.hideOn)) {
							that.close();
						} else {
							that.open();
						}
					});
				}

				// showOn button
				if (/\bbutton|all|both\b/.test(that.options.showOn)) {
					if (that.options.buttonImage !== '') {
						text = that.options.buttonText || that._getRegional('button');

						that.image = $('<img/>').attr({
							'src':		that.options.buttonImage,
							'alt':		text,
							'title':	text
						});
						if (that.options.buttonClass) {
							that.image.attr('class', that.options.buttonClass);
						}

						that._setImageBackground();
					}

					if (that.options.buttonImageOnly && that.image) {
						that.button = that.image;
					} else {
						that.button = $('<button type="button"></button>').html(that.image || that.options.buttonText).button();
						that.image = that.image ? $('img', that.button).first() : null;
					}
					that.button.insertAfter(that.element).click(function () {
						if (!that.options.disabled) {
							if (that.opened && /\bbutton|all|both\b/.test(that.options.hideOn)) {
								that.close();
							} else {
								that.open();
							}
						}
					});
				}

				// showOn alt
				if (/\balt|all|both\b/.test(that.options.showOn)) {					
					$(that.options.altField).on('click', function () {
						if (that.opened && /\balt|all|both\b/.test(that.options.hideOn)) {
							that.close();
						} else {
							that.open();
						}
					});
				}

				if (that.options.autoOpen) {
					that.open();
				}

			} else {
				that.inline = true;

				that._generate();
				that.opened = true;
			}

			// Disable Widget-style
			(that.element.is(':disabled') || that.options.disabled) && that.disable();

			return this;
		},

		_setOption: function(key, value) {
			switch (key) {
				case 'disabled':
					this[value ? 'disable' : 'enable']();
					break;

				case 'swatches':
					this.options.swatches = value;
					this.parts.swatches.init();
					break;
			}

			$.Widget.prototype._setOption.apply(this, arguments);
		},

		enable: function () {
			//$.Widget.prototype.enable.call(this);
			this.element && this.element.prop('disabled', false);
			this.button && this.button.prop('disabled', false);
			this.dialog && this.dialog.removeClass('ui-colorpicker-disabled');
			this.options.disabled = false;

			this.parts && $.each(this.parts, function (index, part) {
				part.disable && part.disable(false);
			});
		},
		
		disable: function () {
			//$.Widget.prototype.disable.call(this);
			this.element && this.element.prop('disabled', true);
			this.button && this.button.prop('disabled', true);
			this.dialog && this.dialog.addClass('ui-colorpicker-disabled');
			this.options.disabled = true;

			this.parts && $.each(this.parts, function (index, part) {
				part.disable && part.disable(true);
			});
		},

		_setImageBackground: function() {
			if (this.image && this.options.buttonColorize) {
				this.image.css('background-color', this.color.set? this._formatColor('RGBA', this.color) : '');
			}
		},

		/**
		 * If an alternate field is specified, set it according to the current color.
		 */
		_setAltField: function () {
			if (this.options.altOnChange && this.options.altField && this.options.altProperties) {
				var index,
					property,
					properties = this.options.altProperties.split(',');

				for (index = 0; index <= properties.length; ++index) {
					property = $.trim(properties[index]);
					switch (property) {
						case 'color':
						case 'fill':
						case 'stroke':
						case 'background-color':
						case 'backgroundColor':
						case 'outline-color':
						case 'border-color':
							$(this.options.altField).css(property, this.color.set? this.color.toCSS() : '');
							break;
					}
				}

				this.options.altAlpha && 
					$(this.options.altField).css('opacity', this.color.set? this.color.getAlpha() : '');
			}
		},

		_setColor: function(text) {
			this.color			= this._parseColor(text) || new $.colorpicker.Color();
			this.currentColor	= this.color.copy();

			this._setImageBackground();
			this._setAltField();
		},

		setColor: function(text) {
			this._setColor(text);
			this._change();
		},

		getColor: function(format) {
			return this._formatColor(format || this.options.colorFormat, this.color);
		},

		_generateInline: function() {
			var that = this;

			$(that.element).html(that.options.inlineFrame ? _container_inlineFrame : _container_inline);

			that.dialog = $('.ui-colorpicker', that.element);
		},

		_generatePopup: function() {
			var that = this;

			that.dialog = $(_container_popup).appendTo('body');

			// Close on clicking outside window and controls
			if (that.events.document_click_html === null) {
				$(document).on('touchstart click', 'html', that.events.document_click_html = function (event) {
					if (!that.opened || event.target === that.element[0] || that.overlay) {
						return;
					}

					// Check if clicked on any part of dialog
					if (that.dialog.is(event.target) || that.dialog.has(event.target).length > 0) {
						that.element.blur();	// inside window!
						return;
					}

					// Check if clicked on known external elements
					var p,
						parents = $(event.target).parents();
					// add the event.target in case of buttonImageOnly and closeOnOutside both are set to true
					parents.push(event.target);
					for (p = 0; p <= parents.length; ++p) {
						// button
						if (that.button !== null && parents[p] === that.button[0]) {
							return;
						}
						// showOn alt
						if (/\balt|all|both\b/.test(that.options.showOn) && $(that.options.altField).is(parents[p])) {
							return;
						}
					}

					// no closeOnOutside
					if (!that.options.closeOnOutside) {
						return;
					}

					that.close(that.options.revert);
				});
			}

			if (that.events.document_keydown === null) {
				$(document).on('keydown', that.events.document_keydown = function (event) {
					// close on ESC key
					if (that.opened && event.keyCode === 27 && that.options.closeOnEscape) {
						that.close(that.options.revert);
					}

					// OK on Enter key
					if (that.opened && event.keyCode === 13 && that.options.okOnEnter) {
						that.close();
					}
				});
			}

			// Close (with OK) on tab key in element
			that.element.keydown(function (event) {
				if (event.keyCode === 9) {
					that.close();
				}
			}).keyup(function (event) {
				var color = that._parseColor(that.element.val());
				if (color && !that.color.equals(color)) {
					that.color = color;
					that._change();
				}
			});
		},

		_generate: function () {
			var that = this,
				index,
				part,
				parts_list,
				layout_parts,
				table,
				classes;

			that._setColor(that.inline || !that.element.is('input') ? that.options.color : that.element.val());

			that[that.inline ? '_generateInline' : '_generatePopup']();

			// Determine the parts to include in this colorpicker
			if (typeof that.options.parts === 'string') {
				if ($.colorpicker.partslists[that.options.parts]) {
					parts_list = $.colorpicker.partslists[that.options.parts];
				} else {
					// automatic
					parts_list = $.colorpicker.partslists[that.inline ? 'inline' : 'popup'];
				}
			} else {
				parts_list = that.options.parts;
			}

			// Add any parts to the internal parts list
			that.parts = {};
			$.each(parts_list, function(index, part) {
				if ($.colorpicker.parts[part]) {
					that.parts[part] = new $.colorpicker.parts[part](that);
				}
			});

			if (!that.generated) {
				layout_parts = [];

				$.each(that.options.layout, function(part, pos) {
					if (that.parts[part]) {
						layout_parts.push({
							'part': part,
							'pos':  pos
						});
					}
				});

				table = $(_layoutTable(layout_parts, function(cell, x, y) {
					classes = ['ui-colorpicker-' + cell.part + '-container'];

					if (x > 0) {
						classes.push('ui-colorpicker-padding-left');
					}

					if (y > 0) {
						classes.push('ui-colorpicker-padding-top');
					}

					return '<td  class="' + classes.join(' ') + '"'
						+ (cell.pos[2] > 1 ? ' colspan="' + cell.pos[2] + '"' : '')
						+ (cell.pos[3] > 1 ? ' rowspan="' + cell.pos[3] + '"' : '')
						+ ' valign="top"></td>';
				})).appendTo(that.dialog);
				if (that.options.inlineFrame) {
					table.addClass('ui-dialog-content ui-widget-content');
				}

				that._initAllParts();
				that._updateAllParts();
				that.generated = true;
			}
		},

		_effectGeneric: function (element, show, slide, fade, callback) {
			var that = this;

			if ($.effects && $.effects[that.options.showAnim]) {
				element[show](that.options.showAnim, that.options.showOptions, that.options.duration, callback);
			} else {
				element[(that.options.showAnim === 'slideDown' ?
								slide
							:	(that.options.showAnim === 'fadeIn' ?
									fade
								:	show))]((that.options.showAnim ? that.options.duration : null), callback);
				if ($.isFunction(callback) && (!that.options.showAnim || !that.options.duration)) {
					callback();
				}
			}
		},

		_effectShow: function(element, callback) {
			this._effectGeneric(element, 'show', 'slideDown', 'fadeIn', callback);
		},

		_effectHide: function(element, callback) {
			this._effectGeneric(element, 'hide', 'slideUp', 'fadeOut', callback);
		},
				
		open: function() {
			var that = this,
				offset,
				bottom, right,
				height, width,
				x, y,
				zIndex,
				element,
				position;

			if (!that.opened) {
				that._generate();
				
				if (that.element.is(':hidden')) {
					element = $('<div/>').insertBefore(that.element);
				} else {
					element = that.element;
				}			
				
				if (that.element.is(':hidden')) {
					element.remove();
				}
				
				// Automatically find highest z-index.
				zIndex = 0;
				$(that.element[0]).parents().each(function() {
					var z = $(this).css('z-index');
					if ((typeof(z) === 'number' || typeof(z) === 'string') && z !== '' && !isNaN(z)) {
						if (z > zIndex) {
							zIndex = parseInt(z, 10);
							return false;
						}
					}
					else {
						$(this).siblings().each(function() {
							var z = $(this).css('z-index');
							if ((typeof(z) === 'number' || typeof(z) === 'string') && z !== '' && !isNaN(z)) {
								if (z > zIndex) {
									zIndex = parseInt(z, 10);
								}
							}
						});
					}
				});

				zIndex += 2;
				that.dialog.css('z-index', zIndex);
								
				if (that.options.modal) {
					that.overlay = $('<div class="ui-widget-overlay"></div>').appendTo('body').css('z-index', zIndex - 1);										

					if (that.events.window_resize !== null) {
						$(window).off('resize', that.events.window_resize);					
					}
					
					that.events.window_resize = function() {
						if (that.overlay) {
							that.overlay.width($(document).width());
							that.overlay.height($(document).height());					
						}
					},
															
					$(window).on('resize', that.events.window_resize);
					that.events.window_resize();			
				}

				that._effectShow(this.dialog);

				if (that.options.position) {
					position = $.extend({}, that.options.position);
					if (position.of === 'element') {
						position.of = element;
					}
				} else {
					position = {
						my:			'left top',
						at:			'left bottom',
						of:			element,
						collision:	'flip'
					};
				}
				that.dialog.position(position);
				
				that.opened = true;
				that._callback('open');

				// Without waiting for domready the width of the map is 0 and we
				// wind up with the cursor stuck in the upper left corner
				$(function() {
					that._repaintAllParts();
				});
			}
		},

		close: function (cancel) {
			var that = this;

			if (!that.opened) {
				return;
			}				
				
            if (cancel) {
				that.color = that.currentColor.copy();
                that._change();
                that._callback('cancel');
            } else {
				that.currentColor	= that.color.copy();
                that._callback('ok');
            }
			that.changed		= false;

			if (that.overlay) {
				$(window).off('resize', that.events.window_resize);					
				that.overlay.remove();
			}
			
			// tear down the interface
			that._effectHide(that.dialog, function () {
				that.dialog.remove();
				that.dialog		= null;
				that.generated	= false;

				that.opened		= false;
				that._callback('close');
			});
		},

		destroy: function() {
			var that = this;
			if (that.events.document_click_html !== null) {
				$(document).off('touchstart click', 'html', that.events.document_click_html);
			}
			
			if (that.events.document_keydown !== null) {
				$(document).off('keydown', that.events.document_keydown);
			}
			
			if (that.events.window_resize !== null) {
				$(window).off('resize', that.events.window_resize);					
			}			
			
			this.element.off();

			if (this.overlay) {
				this.overlay.remove();
			}
			
			if (this.dialog !== null) {
				this.dialog.remove();
			}
			
			if (this.image !== null) {
				this.image.remove();
			}

			if (this.button !== null) {
				this.button.remove();
			}
		},

		_callback: function (callback) {
			var that = this,
				data,
				lab;

			if (that.color.set) {
				data = {
					formatted: that._formatColor(that.options.colorFormat, that.color),
					colorPicker: that
				};

				data.hex	= that.color.toHex();
				data.css	= that.color.toCSS();
				data.a		= that.color.getAlpha();
				data.rgb	= that.color.getRGB();
				data.hsv	= that.color.getHSV();
				data.cmyk	= that.color.getCMYK();
				data.hsl	= that.color.getHSL();

				lab = that.color.getLAB();
				lab.a = (lab.a * 2) - 1;
				lab.b = (lab.b * 2) - 1;
				data.lab	= lab;

				return that._trigger(callback, null, data);
			} else {
				return that._trigger(callback, null, {
					formatted: '',
					colorPicker: that
				});
			}
		},

		_initAllParts: function () {
			$.each(this.parts, function (index, part) {
				if (part.init) {
					part.init();
				}
			});
		},

		_updateAllParts: function () {
			$.each(this.parts, function (index, part) {
				if (part.update) {
					part.update();
				}
			});
		},

		_repaintAllParts: function () {
			$.each(this.parts, function (index, part) {
				if (part.repaint) {
					part.repaint();
				}
			});
		},
		
		_change: function (stoppedChanging /* = true */) {
			// Limit color palette
			if (this.color.set && this.options.limit && $.colorpicker.limits[this.options.limit]) {
				$.colorpicker.limits[this.options.limit](this.color, this);
			}

			// Set changed if different from starting color
			this.changed = !this.color.equals(this.currentColor);

			// update input element content
			if (!this.inline) {
				if (!this.color.set) {
					if (this.element.val() !== '') {
						this.element.val('').change();
					}
				} else if (!this.color.equals(this._parseColor(this.element.val()))) {
					this.element.val(this._formatColor(this.options.colorFormat, this.color)).change();
				}

				this._setImageBackground();
			}

			// Set the alt field
			this._setAltField();

			// update color option
			this.options.color = this.color.set ? this.color.toCSS() : '';

			if (this.opened) {
				this._repaintAllParts();
			}

			// callbacks
			this._callback('select');

			if (typeof stoppedChanging === 'undefined' ? true : !!stoppedChanging) {
				this._callback('stop');
			}
		},

		// This will be deprecated by jQueryUI 1.9 widget
		_hoverable: function (e) {
			e.hover(function () {
				e.addClass("ui-state-hover");
			}, function () {
				e.removeClass("ui-state-hover");
			});
		},

		// This will be deprecated by jQueryUI 1.9 widget
		_focusable: function (e) {
			e.focus(function () {
				e.addClass("ui-state-focus");
			}).blur(function () {
				e.removeClass("ui-state-focus");
			});
		},

		_getRegional: function(name) {
			return $.colorpicker.regional[this.options.regional][name] !== undefined ?
				$.colorpicker.regional[this.options.regional][name] : $.colorpicker.regional[''][name];
        },

		_getSwatches: function() {
			if (typeof(this.options.swatches) === 'string') {
				return $.colorpicker.swatches[this.options.swatches];
			}

			if ($.isPlainObject(this.options.swatches)) {
				return this.options.swatches;
			}

			return $.colorpicker.swatches.html;
		},
		
		_eachSwatch: function (callback) {
			var currentSwatches = this._getSwatches(),
				name;
			$.each(currentSwatches, function (nameOrIndex, swatch) {
				name = $.isArray(currentSwatches) ? swatch.name : nameOrIndex;
				return callback(name, swatch);
			});
		},

		_getSwatch: function(name) {
			var swatch = false;

			this._eachSwatch(function(swatchName, current) {
				if (swatchName.toLowerCase() == name.toLowerCase()) {
					swatch = current;
					return false;
				}
			});

			return swatch;
        },
		
		_parseFormat: function(format, text) {
			var that = this,
				typeRegexps = {
					x:	function() {return '([0-9a-fA-F]{2})';}
				,	d:	function() {return '([12]?[0-9]{1,2})';}
				,	f:	function() {return '([0-9]*\\.?[0-9]*)';}
				,	p:	function() {return '([0-9]*\\.?[0-9]*)';}
				},
				typeConverters = {
					x:	function(v)	{return parseInt(v, 16) / 255.;}
				,	d:	function(v)	{return v / 255.;}
				,	f:	function(v)	{return v;}
				,	p:	function(v)	{return v * 0.01;}
				},
				setters = {
					r:	'setRGB'
				,	g:	'setRGB'
				,	b:	'setRGB'
				,	h:	'setHSV'
				,	s:	'setHSV'
				,	v:	'setHSV'
				,	c:	'setCMYK'
				,	m:	'setCMYK'
				,	y:	'setCMYK'
				,	k:	'setCMYK'
				,	L:	'setLAB'
				,	A:	'setLAB'
				,	B:	'setLAB'
				},
				setterChannels = {
					setRGB:		[ 'r', 'g', 'b']
				,	setHSV:		[ 'h', 's', 'v' ]
				,	setCMYK:	[ 'c', 'm', 'y', 'k' ]
				,	setLAB:		[ 'L', 'A', 'B' ]
				},
				channels = [],
				converters = [],						
				setter = null,
				color,
				pattern;

			// Construct pattern
			pattern = format.replace(/[()\\^$.|?*+[\]]/g, function(m) {
				return '\\'+m;
			});


			pattern = pattern.replace(/\\?[argbhsvcmykLAB][xdfp]/g, function(variable) {
				if (variable.match(/^\\/)) {
					return variable.slice(1);
				}

				var channel = variable.charAt(0),
					type = variable.charAt(1);

				channels.push(channel);
				converters.push(typeConverters[type]);
				if (setters[channel]) {
					setter = setters[channel];
				}

				return typeRegexps[type]();
			});

			if (setter) {
				var values = text.match(new RegExp(pattern));
				if (values) {
					var args = [],
						channelIndex;
					
					values.shift();
									
					$.each(setterChannels[setter], function(index, channel) {
						channelIndex = $.inArray(channel, channels);
						args[index] = converters[channelIndex](values[channelIndex]);
					});

					color = new $.colorpicker.Color();
					color[setter].apply(color, args);
				}
			}
			
			return color;
		},

        _parseColor: function(text) {
            var that = this,
				color;
		
			var formats = $.isArray(that.options.colorFormat)
					? that.options.colorFormat
					: [ that.options.colorFormat ];

			$.each(formats, function(index, format) {
				if ($.colorpicker.parsers[format]) {
					color = $.colorpicker.parsers[format](text, that);
				} else {
					color = that._parseFormat(format, text);
				}
			
				if (color) {
					return false;
				}
			});
			
			if (!color) {
				// fallback; check all registered parsers
				$.each($.colorpicker.parsers, function(name, parser) {
					color = parser(text, that);
					if (color) {
						return false;
					}
				});
			}

			if (color) {
				return color;
			}

			return false;
        },

		_exactName: function(color) {
			var name	= false;

			this._eachSwatch(function(n, swatch) {
				if (color.equals(new $.colorpicker.Color(swatch.r, swatch.g, swatch.b))) {
					name = n;
					return false;
				}
			});

			return name;
		},

		_closestName: function(color) {
			var rgb			= color.getRGB(),
				distance	= null,
				name		= false,
				d;

			this._eachSwatch(function(n, swatch) {
				d = color.distance(new $.colorpicker.Color(swatch.r, swatch.g, swatch.b));
				if (d < distance || distance === null) {
					name = n;
					if (d <= 1e-20) {	// effectively 0 by maximum rounding error
						return false;	// can't get much closer than 0
					}
					distance = d;	// safety net
				}
			});

			return name;
		},

		_formatColor: function (formats, color) {			
			var that		= this,
				text		= null,
				types		= {	'x':	function(v) {return _intToHex(v * 255);}
							,	'd':	function(v) {return Math.round(v * 255);}
							,	'f':	function(v) {return v;}
							,	'p':	function(v) {return v * 100.;}
							},
				channels	= color.getChannels();

			if (!$.isArray(formats)) {
				formats = [formats];
			}

			$.each(formats, function(index, format) {
				if ($.colorpicker.writers[format]) {
					text = $.colorpicker.writers[format](color, that);		
					return (text === false);
				} else {
					text = format.replace(/\\?[argbhsvcmykLAB][xdfp]/g, function(m) {
						if (m.match(/^\\/)) {
							return m.slice(1);
						}
						return types[m.charAt(1)](channels[m.charAt(0)]);
					});
					return false;
				}
			});
			
			return text;
		}
	});
	
	return $.vanderlee.colorpicker;
}));
;(function(e,t){'object'==typeof exports&&'undefined'!=typeof module?module.exports=t():'function'==typeof define&&define.amd?define(t):e.tippy=t()})(this,function(){'use strict';function t(e){return'[object Object]'==={}.toString.call(e)}function a(e){return[].slice.call(e)}function o(e){if(e instanceof Element||t(e))return[e];if(e instanceof NodeList)return a(e);if(Array.isArray(e))return e;try{return a(document.querySelectorAll(e))}catch(e){return[]}}function p(e){e.refObj=!0,e.attributes=e.attributes||{},e.setAttribute=function(t,i){e.attributes[t]=i},e.getAttribute=function(t){return e.attributes[t]},e.removeAttribute=function(t){delete e.attributes[t]},e.addEventListener=function(){},e.removeEventListener=function(){},e.classList={classNames:{},add:function(t){return e.classList.classNames[t]=!0},remove:function(t){return delete e.classList.classNames[t],!0},contains:function(t){return!!e.classList.classNames[t]}}}function r(e){for(var t=['','webkit'],a=e.charAt(0).toUpperCase()+e.slice(1),o=0;o<t.length;o++){var i=t[o],p=i?i+a:e;if('undefined'!=typeof document.body.style[p])return p}return null}function n(e,t,i){var a=document.createElement('div');a.setAttribute('class','tippy-popper'),a.setAttribute('role','tooltip'),a.setAttribute('id','tippy-'+e),a.style.zIndex=i.zIndex,a.style.maxWidth=i.maxWidth;var o=document.createElement('div');if(o.setAttribute('class','tippy-tooltip'),o.setAttribute('data-size',i.size),o.setAttribute('data-animation',i.animation),o.setAttribute('data-state','hidden'),i.theme.split(' ').forEach(function(e){o.classList.add(e+'-theme')}),i.arrow){var p=document.createElement('div');p.style[r('transform')]=i.arrowTransform,'round'===i.arrowType?(p.classList.add('tippy-roundarrow'),p.innerHTML='<svg viewBox="0 0 24 8" xmlns="http://www.w3.org/2000/svg"><path d="M3 8s2.021-.015 5.253-4.218C9.584 2.051 10.797 1.007 12 1c1.203-.007 2.416 1.035 3.761 2.782C19.012 8.005 21 8 21 8H3z"/></svg>'):p.classList.add('tippy-arrow'),o.appendChild(p)}if(i.animateFill){o.setAttribute('data-animatefill','');var n=document.createElement('div');n.setAttribute('data-state','hidden'),n.classList.add('tippy-backdrop'),o.appendChild(n)}i.inertia&&o.setAttribute('data-inertia',''),i.interactive&&o.setAttribute('data-interactive','');var s=document.createElement('div');s.setAttribute('class','tippy-content');var l=i.html;if(l){var d;l instanceof Element?(s.appendChild(l),d='#'+l.id||'tippy-html-template'):(s.innerHTML=document.querySelector(l).innerHTML,d=l),a.setAttribute('data-html',''),o.setAttribute('data-template-id',d),i.interactive&&a.setAttribute('tabindex','-1')}else s[i.allowTitleHTML?'innerHTML':'textContent']=t;return o.appendChild(s),a.appendChild(o),a}function s(e,t,i,a){var o=i.onTrigger,p=i.onMouseLeave,r=i.onBlur,n=i.onDelegateShow,s=i.onDelegateHide,l=[];if('manual'===e)return l;var d=function(e,i){t.addEventListener(e,i),l.push({event:e,handler:i})};return a.target?(Fe.supportsTouch&&a.touchHold&&(d('touchstart',n),d('touchend',s)),'mouseenter'===e&&(d('mouseover',n),d('mouseout',s)),'focus'===e&&(d('focusin',n),d('focusout',s)),'click'===e&&d('click',n)):(d(e,o),Fe.supportsTouch&&a.touchHold&&(d('touchstart',o),d('touchend',p)),'mouseenter'===e&&d('mouseleave',p),'focus'===e&&d(ze?'focusout':'blur',r)),l}function l(e,t){var i=Ke.reduce(function(i,a){var o=e.getAttribute('data-tippy-'+a.toLowerCase())||t[a];return'false'===o&&(o=!1),'true'===o&&(o=!0),isFinite(o)&&!isNaN(parseFloat(o))&&(o=parseFloat(o)),'target'!==a&&'string'==typeof o&&'['===o.trim().charAt(0)&&(o=JSON.parse(o)),i[a]=o,i},{});return Je({},t,i)}function d(e,t){return t.arrow&&(t.animateFill=!1),t.appendTo&&'function'==typeof t.appendTo&&(t.appendTo=t.appendTo()),'function'==typeof t.html&&(t.html=t.html(e)),t}function c(e){var t=function(t){return e.querySelector(t)};return{tooltip:t(qe.TOOLTIP),backdrop:t(qe.BACKDROP),content:t(qe.CONTENT),arrow:t(qe.ARROW)||t(qe.ROUND_ARROW)}}function m(e){var t=e.getAttribute('title');t&&e.setAttribute('data-original-title',t),e.removeAttribute('title')}function f(e){return e&&'[object Function]'==={}.toString.call(e)}function h(e,t){if(1!==e.nodeType)return[];var i=getComputedStyle(e,null);return t?i[t]:i}function u(e){return'HTML'===e.nodeName?e:e.parentNode||e.host}function y(e){if(!e)return document.body;switch(e.nodeName){case'HTML':case'BODY':return e.ownerDocument.body;case'#document':return e.body;}var t=h(e),i=t.overflow,a=t.overflowX,o=t.overflowY;return /(auto|scroll|overlay)/.test(i+o+a)?e:y(u(e))}function b(e){return 11===e?it:10===e?at:it||at}function g(e){if(!e)return document.documentElement;for(var t=b(10)?document.body:null,i=e.offsetParent;i===t&&e.nextElementSibling;)i=(e=e.nextElementSibling).offsetParent;var a=i&&i.nodeName;return a&&'BODY'!==a&&'HTML'!==a?-1!==['TD','TABLE'].indexOf(i.nodeName)&&'static'===h(i,'position')?g(i):i:e?e.ownerDocument.documentElement:document.documentElement}function x(e){var t=e.nodeName;return'BODY'!==t&&('HTML'===t||g(e.firstElementChild)===e)}function v(e){return null===e.parentNode?e:v(e.parentNode)}function w(e,t){if(!e||!e.nodeType||!t||!t.nodeType)return document.documentElement;var i=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,a=i?e:t,o=i?t:e,p=document.createRange();p.setStart(a,0),p.setEnd(o,0);var r=p.commonAncestorContainer;if(e!==r&&t!==r||a.contains(o))return x(r)?r:g(r);var n=v(e);return n.host?w(n.host,t):w(e,v(t).host)}function E(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:'top',i='top'===t?'scrollTop':'scrollLeft',a=e.nodeName;if('BODY'===a||'HTML'===a){var o=e.ownerDocument.documentElement,p=e.ownerDocument.scrollingElement||o;return p[i]}return e[i]}function T(e,t){var i=!!(2<arguments.length&&void 0!==arguments[2])&&arguments[2],a=E(t,'top'),o=E(t,'left'),p=i?-1:1;return e.top+=a*p,e.bottom+=a*p,e.left+=o*p,e.right+=o*p,e}function k(e,t){var i='x'===t?'Left':'Top',a='Left'==i?'Right':'Bottom';return parseFloat(e['border'+i+'Width'],10)+parseFloat(e['border'+a+'Width'],10)}function L(e,t,i,a){return Xe(t['offset'+e],t['scroll'+e],i['client'+e],i['offset'+e],i['scroll'+e],b(10)?i['offset'+e]+a['margin'+('Height'===e?'Top':'Left')]+a['margin'+('Height'===e?'Bottom':'Right')]:0)}function O(){var e=document.body,t=document.documentElement,i=b(10)&&getComputedStyle(t);return{height:L('Height',e,t,i),width:L('Width',e,t,i)}}function A(e){return nt({},e,{right:e.left+e.width,bottom:e.top+e.height})}function C(e){var t={};try{if(b(10)){t=e.getBoundingClientRect();var i=E(e,'top'),a=E(e,'left');t.top+=i,t.left+=a,t.bottom+=i,t.right+=a}else t=e.getBoundingClientRect()}catch(t){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},p='HTML'===e.nodeName?O():{},r=p.width||e.clientWidth||o.right-o.left,n=p.height||e.clientHeight||o.bottom-o.top,s=e.offsetWidth-r,l=e.offsetHeight-n;if(s||l){var d=h(e);s-=k(d,'x'),l-=k(d,'y'),o.width-=s,o.height-=l}return A(o)}function S(e,t){var i=!!(2<arguments.length&&void 0!==arguments[2])&&arguments[2],a=b(10),o='HTML'===t.nodeName,p=C(e),r=C(t),n=y(e),s=h(t),l=parseFloat(s.borderTopWidth,10),d=parseFloat(s.borderLeftWidth,10);i&&'HTML'===t.nodeName&&(r.top=Xe(r.top,0),r.left=Xe(r.left,0));var c=A({top:p.top-r.top-l,left:p.left-r.left-d,width:p.width,height:p.height});if(c.marginTop=0,c.marginLeft=0,!a&&o){var m=parseFloat(s.marginTop,10),f=parseFloat(s.marginLeft,10);c.top-=l-m,c.bottom-=l-m,c.left-=d-f,c.right-=d-f,c.marginTop=m,c.marginLeft=f}return(a&&!i?t.contains(n):t===n&&'BODY'!==n.nodeName)&&(c=T(c,t)),c}function P(e){var t=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1],i=e.ownerDocument.documentElement,a=S(e,i),o=Xe(i.clientWidth,window.innerWidth||0),p=Xe(i.clientHeight,window.innerHeight||0),r=t?0:E(i),n=t?0:E(i,'left'),s={top:r-a.top+a.marginTop,left:n-a.left+a.marginLeft,width:o,height:p};return A(s)}function D(e){var t=e.nodeName;return'BODY'!==t&&'HTML'!==t&&('fixed'===h(e,'position')||D(u(e)))}function I(e){if(!e||!e.parentElement||b())return document.documentElement;for(var t=e.parentElement;t&&'none'===h(t,'transform');)t=t.parentElement;return t||document.documentElement}function R(e,t,i,a){var o=!!(4<arguments.length&&void 0!==arguments[4])&&arguments[4],p={top:0,left:0},r=o?I(e):w(e,t);if('viewport'===a)p=P(r,o);else{var n;'scrollParent'===a?(n=y(u(t)),'BODY'===n.nodeName&&(n=e.ownerDocument.documentElement)):'window'===a?n=e.ownerDocument.documentElement:n=a;var s=S(n,r,o);if('HTML'===n.nodeName&&!D(r)){var l=O(),d=l.height,c=l.width;p.top+=s.top-s.marginTop,p.bottom=d+s.top,p.left+=s.left-s.marginLeft,p.right=c+s.left}else p=s}return p.left+=i,p.top+=i,p.right-=i,p.bottom-=i,p}function _(e){var t=e.width,i=e.height;return t*i}function N(e,t,i,a,o){var p=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf('auto'))return e;var r=R(i,a,p,o),n={top:{width:r.width,height:t.top-r.top},right:{width:r.right-t.right,height:r.height},bottom:{width:r.width,height:r.bottom-t.bottom},left:{width:t.left-r.left,height:r.height}},s=Object.keys(n).map(function(e){return nt({key:e},n[e],{area:_(n[e])})}).sort(function(e,t){return t.area-e.area}),l=s.filter(function(e){var t=e.width,a=e.height;return t>=i.clientWidth&&a>=i.clientHeight}),d=0<l.length?l[0].key:s[0].key,c=e.split('-')[1];return d+(c?'-'+c:'')}function H(e,t,i){var a=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,o=a?I(t):w(t,i);return S(i,o,a)}function M(e){var t=getComputedStyle(e),i=parseFloat(t.marginTop)+parseFloat(t.marginBottom),a=parseFloat(t.marginLeft)+parseFloat(t.marginRight),o={width:e.offsetWidth+a,height:e.offsetHeight+i};return o}function Y(e){var t={left:'right',right:'left',bottom:'top',top:'bottom'};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function B(e,t,i){i=i.split('-')[0];var a=M(e),o={width:a.width,height:a.height},p=-1!==['right','left'].indexOf(i),r=p?'top':'left',n=p?'left':'top',s=p?'height':'width',l=p?'width':'height';return o[r]=t[r]+t[s]/2-a[s]/2,o[n]=i===n?t[n]-a[l]:t[Y(n)],o}function W(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function X(e,t,i){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===i});var a=W(e,function(e){return e[t]===i});return e.indexOf(a)}function U(e,t,i){var a=void 0===i?e:e.slice(0,X(e,'name',i));return a.forEach(function(e){e['function']&&console.warn('`modifier.function` is deprecated, use `modifier.fn`!');var i=e['function']||e.fn;e.enabled&&f(i)&&(t.offsets.popper=A(t.offsets.popper),t.offsets.reference=A(t.offsets.reference),t=i(t,e))}),t}function z(e){for(var t=[!1,'ms','Webkit','Moz','O'],a=e.charAt(0).toUpperCase()+e.slice(1),o=0;o<t.length;o++){var i=t[o],p=i?''+i+a:e;if('undefined'!=typeof document.body.style[p])return p}return null}function F(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}},t=this.popper.style;t.top='',t.left='',t[z('transform')]='',e.offsets.reference=H(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=N(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=B(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?'fixed':'absolute',e=U(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function q(e,t){return e.some(function(e){var i=e.name,a=e.enabled;return a&&i===t})}function j(){return this.state.isDestroyed=!0,q(this.modifiers,'applyStyle')&&(this.popper.removeAttribute('x-placement'),this.popper.style.position='',this.popper.style.top='',this.popper.style.left='',this.popper.style.right='',this.popper.style.bottom='',this.popper.style.willChange='',this.popper.style[z('transform')]=''),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function K(e){var t=e.ownerDocument;return t?t.defaultView:window}function V(e,t,i,a){var o='BODY'===e.nodeName,p=o?e.ownerDocument.defaultView:e;p.addEventListener(t,i,{passive:!0}),o||V(y(p.parentNode),t,i,a),a.push(p)}function G(e,t,i,a){i.updateBound=a,K(e).addEventListener('resize',i.updateBound,{passive:!0});var o=y(e);return V(o,'scroll',i.updateBound,i.scrollParents),i.scrollElement=o,i.eventsEnabled=!0,i}function J(){this.state.eventsEnabled||(this.state=G(this.reference,this.options,this.state,this.scheduleUpdate))}function Q(e,t){return K(e).removeEventListener('resize',t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener('scroll',t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}function Z(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=Q(this.reference,this.state))}function $(e){return''!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function ee(e,t){Object.keys(t).forEach(function(i){var a='';-1!==['width','height','top','right','bottom','left'].indexOf(i)&&$(t[i])&&(a='px'),e.style[i]=t[i]+a})}function te(e,t){Object.keys(t).forEach(function(i){var a=t[i];!1===a?e.removeAttribute(i):e.setAttribute(i,t[i])})}function ie(e,t,i){var a=W(e,function(e){var i=e.name;return i===t}),o=!!a&&e.some(function(e){return e.name===i&&e.enabled&&e.order<a.order});if(!o){var p='`'+t+'`';console.warn('`'+i+'`'+' modifier is required by '+p+' modifier in order to work, be sure to include it before '+p+'!')}return o}function ae(e){return'end'===e?'start':'start'===e?'end':e}function oe(e){var t=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1],i=lt.indexOf(e),a=lt.slice(i+1).concat(lt.slice(0,i));return t?a.reverse():a}function pe(e,t,i,a){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),p=+o[1],r=o[2];if(!p)return e;if(0===r.indexOf('%')){var n;switch(r){case'%p':n=i;break;case'%':case'%r':default:n=a;}var s=A(n);return s[t]/100*p}if('vh'===r||'vw'===r){var l;return l='vh'===r?Xe(document.documentElement.clientHeight,window.innerHeight||0):Xe(document.documentElement.clientWidth,window.innerWidth||0),l/100*p}return p}function re(e,t,i,a){var o=[0,0],p=-1!==['right','left'].indexOf(a),r=e.split(/(\+|\-)/).map(function(e){return e.trim()}),n=r.indexOf(W(r,function(e){return-1!==e.search(/,|\s/)}));r[n]&&-1===r[n].indexOf(',')&&console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');var s=/\s*,\s*|\s+/,l=-1===n?[r]:[r.slice(0,n).concat([r[n].split(s)[0]]),[r[n].split(s)[1]].concat(r.slice(n+1))];return l=l.map(function(e,a){var o=(1===a?!p:p)?'height':'width',r=!1;return e.reduce(function(e,t){return''===e[e.length-1]&&-1!==['+','-'].indexOf(t)?(e[e.length-1]=t,r=!0,e):r?(e[e.length-1]+=t,r=!1,e):e.concat(t)},[]).map(function(e){return pe(e,o,t,i)})}),l.forEach(function(e,t){e.forEach(function(i,a){$(i)&&(o[t]+=i*('-'===e[a-1]?-1:1))})}),o}function ne(e,t){var i,a=t.offset,o=e.placement,p=e.offsets,r=p.popper,n=p.reference,s=o.split('-')[0];return i=$(+a)?[+a,0]:re(a,r,n,s),'left'===s?(r.top+=i[0],r.left-=i[1]):'right'===s?(r.top+=i[0],r.left+=i[1]):'top'===s?(r.left+=i[0],r.top-=i[1]):'bottom'===s&&(r.left+=i[0],r.top+=i[1]),e.popper=r,e}function se(e){void e.offsetHeight}function le(e,t,i){var a=e.popper,o=e.options,p=o.onCreate,r=o.onUpdate;o.onCreate=o.onUpdate=function(){se(a),t&&t(),r(),o.onCreate=p,o.onUpdate=r},i||e.scheduleUpdate()}function de(e){return e.getAttribute('x-placement').replace(/-.+/,'')}function ce(e,t,i){if(!t.getAttribute('x-placement'))return!0;var a=e.clientX,o=e.clientY,p=i.interactiveBorder,r=i.distance,n=t.getBoundingClientRect(),s=de(t),l=p+r,d={top:n.top-o>p,bottom:o-n.bottom>p,left:n.left-a>p,right:a-n.right>p};return'top'===s?d.top=n.top-o>l:'bottom'===s?d.bottom=o-n.bottom>l:'left'===s?d.left=n.left-a>l:'right'===s?d.right=a-n.right>l:void 0,d.top||d.bottom||d.left||d.right}function me(e,t,i,a){if(!t.length)return'';var o={scale:function(){return 1===t.length?''+t[0]:i?t[0]+', '+t[1]:t[1]+', '+t[0]}(),translate:function(){return 1===t.length?a?-t[0]+'px':t[0]+'px':i?a?t[0]+'px, '+-t[1]+'px':t[0]+'px, '+t[1]+'px':a?-t[1]+'px, '+t[0]+'px':t[1]+'px, '+t[0]+'px'}()};return o[e]}function fe(e,t){if(!e)return'';return t?e:{X:'Y',Y:'X'}[e]}function he(e,t,i){var a=de(e),o='top'===a||'bottom'===a,p='right'===a||'bottom'===a,n=function(e){var t=i.match(e);return t?t[1]:''},s=function(e){var t=i.match(e);return t?t[1].split(',').map(parseFloat):[]},l={translate:/translateX?Y?\(([^)]+)\)/,scale:/scaleX?Y?\(([^)]+)\)/},d={translate:{axis:n(/translate([XY])/),numbers:s(l.translate)},scale:{axis:n(/scale([XY])/),numbers:s(l.scale)}},c=i.replace(l.translate,'translate'+fe(d.translate.axis,o)+'('+me('translate',d.translate.numbers,o,p)+')').replace(l.scale,'scale'+fe(d.scale.axis,o)+'('+me('scale',d.scale.numbers,o,p)+')');t.style[r('transform')]=c}function ue(e){return-(e-je.distance)+'px'}function ye(e){requestAnimationFrame(function(){setTimeout(e,1)})}function be(t,i){var a=Element.prototype.closest||function(t){for(var i=this;i;){if(e.call(i,t))return i;i=i.parentElement}};return a.call(t,i)}function ge(e,t){return Array.isArray(e)?e[t]:e}function xe(e,t){e.forEach(function(e){e&&e.setAttribute('data-state',t)})}function ve(e,t){e.filter(Boolean).forEach(function(e){e.style[r('transitionDuration')]=t+'ms'})}function we(e){var t=window.scrollX||window.pageXOffset,i=window.scrollY||window.pageYOffset;e.focus(),scroll(t,i)}function Ee(){var e=this._(ht).lastTriggerEvent;return this.options.followCursor&&!Fe.usingTouch&&e&&'focus'!==e.type}function Te(e){var t=be(e.target,this.options.target);if(t&&!t._tippy){var i=t.getAttribute('title')||this.title;i&&(t.setAttribute('title',i),Me(t,Je({},this.options,{target:null})),ke.call(t._tippy,e))}}function ke(e){var t=this,i=this.options;if(Se.call(this),!this.state.visible){if(i.target)return void Te.call(this,e);if(this._(ht).isPreparingToShow=!0,i.wait)return void i.wait.call(this.popper,this.show.bind(this),e);if(Ee.call(this)){this._(ht).followCursorListener||Pe.call(this);var a=c(this.popper),o=a.arrow;o&&(o.style.margin='0'),document.addEventListener('mousemove',this._(ht).followCursorListener)}var p=ge(i.delay,0);p?this._(ht).showTimeout=setTimeout(function(){t.show()},p):this.show()}}function Le(){var e=this;if(Se.call(this),!!this.state.visible){this._(ht).isPreparingToShow=!1;var t=ge(this.options.delay,1);t?this._(ht).hideTimeout=setTimeout(function(){e.state.visible&&e.hide()},t):this.hide()}}function Oe(){var e=this;return{onTrigger:function(t){if(e.state.enabled){var i=Fe.supportsTouch&&Fe.usingTouch&&-1<['mouseenter','mouseover','focus'].indexOf(t.type);i&&e.options.touchHold||(e._(ht).lastTriggerEvent=t,'click'===t.type&&'persistent'!==e.options.hideOnClick&&e.state.visible?Le.call(e):ke.call(e,t),i&&Fe.iOS&&e.reference.click&&e.reference.click())}},onMouseLeave:function(t){if(!(-1<['mouseleave','mouseout'].indexOf(t.type)&&Fe.supportsTouch&&Fe.usingTouch&&e.options.touchHold)){if(e.options.interactive){var i=Le.bind(e),a=function t(a){var o=be(a.target,qe.REFERENCE),p=be(a.target,qe.POPPER)===e.popper,r=o===e.reference;p||r||ce(a,e.popper,e.options)&&(document.body.removeEventListener('mouseleave',i),document.removeEventListener('mousemove',t),Le.call(e,t))};return document.body.addEventListener('mouseleave',i),void document.addEventListener('mousemove',a)}Le.call(e)}},onBlur:function(t){if(!(t.target!==e.reference||Fe.usingTouch)){if(e.options.interactive){if(!t.relatedTarget)return;if(be(t.relatedTarget,qe.POPPER))return}Le.call(e)}},onDelegateShow:function(t){be(t.target,e.options.target)&&ke.call(e,t)},onDelegateHide:function(t){be(t.target,e.options.target)&&Le.call(e)}}}function Ae(){var e=this,t=this.popper,i=this.reference,a=this.options,o=c(t),p=o.tooltip,r=a.popperOptions,n='round'===a.arrowType?qe.ROUND_ARROW:qe.ARROW,s=p.querySelector(n),l=Je({placement:a.placement},r||{},{modifiers:Je({},r?r.modifiers:{},{arrow:Je({element:n},r&&r.modifiers?r.modifiers.arrow:{}),flip:Je({enabled:a.flip,padding:a.distance+5,behavior:a.flipBehavior},r&&r.modifiers?r.modifiers.flip:{}),offset:Je({offset:a.offset},r&&r.modifiers?r.modifiers.offset:{})}),onCreate:function(){p.style[de(t)]=ue(a.distance),s&&a.arrowTransform&&he(t,s,a.arrowTransform)},onUpdate:function(){var e=p.style;e.top='',e.bottom='',e.left='',e.right='',e[de(t)]=ue(a.distance),s&&a.arrowTransform&&he(t,s,a.arrowTransform)}});return Ie.call(this,{target:t,callback:function(){e.popperInstance.update()},options:{childList:!0,subtree:!0,characterData:!0}}),new ct(i,t,l)}function Ce(e){var t=this.options;if(this.popperInstance?(this.popperInstance.scheduleUpdate(),t.livePlacement&&!Ee.call(this)&&this.popperInstance.enableEventListeners()):(this.popperInstance=Ae.call(this),!t.livePlacement&&this.popperInstance.disableEventListeners()),!Ee.call(this)){var i=c(this.popper),a=i.arrow;a&&(a.style.margin=''),this.popperInstance.reference=this.reference}le(this.popperInstance,e,!0),t.appendTo.contains(this.popper)||t.appendTo.appendChild(this.popper)}function Se(){var e=this._(ht),t=e.showTimeout,i=e.hideTimeout;clearTimeout(t),clearTimeout(i)}function Pe(){var e=this;this._(ht).followCursorListener=function(t){var i=e._(ht).lastMouseMoveEvent=t,a=i.clientX,o=i.clientY;e.popperInstance&&(e.popperInstance.reference={getBoundingClientRect:function(){return{width:0,height:0,top:o,left:a,right:a,bottom:o}},clientWidth:0,clientHeight:0},e.popperInstance.scheduleUpdate())}}function De(){var e=this,t=function(){e.popper.style[r('transitionDuration')]=e.options.updateDuration+'ms'},i=function(){e.popper.style[r('transitionDuration')]=''};ye(function a(){e.popperInstance&&e.popperInstance.scheduleUpdate(),t(),e.state.visible?requestAnimationFrame(a):i()})}function Ie(e){var t=e.target,i=e.callback,a=e.options;if(window.MutationObserver){var o=new MutationObserver(i);o.observe(t,a),this._(ht).mutationObservers.push(o)}}function Re(e,t){if(!e)return t();var i=c(this.popper),a=i.tooltip,o=function(e,t){t&&a[e+'EventListener']('ontransitionend'in window?'transitionend':'webkitTransitionEnd',t)},p=function i(p){p.target===a&&(o('remove',i),t())};o('remove',this._(ht).transitionendListener),o('add',p),this._(ht).transitionendListener=p}function _e(e,t){return e.reduce(function(e,i){var a=bt,o=d(i,t.performance?t:l(i,t)),p=i.getAttribute('title');if(!p&&!o.target&&!o.html&&!o.dynamicTitle)return e;i.setAttribute(o.target?'data-tippy-delegate':'data-tippy',''),m(i);var r=n(a,p,o),f=new yt({id:a,reference:i,popper:r,options:o,title:p,popperInstance:null});o.createPopperInstanceOnInit&&(f.popperInstance=Ae.call(f),f.popperInstance.disableEventListeners());var h=Oe.call(f);return f.listeners=o.trigger.trim().split(' ').reduce(function(e,t){return e.concat(s(t,i,h,o))},[]),o.dynamicTitle&&Ie.call(f,{target:i,callback:function(){var e=c(r),t=e.content,a=i.getAttribute('title');a&&(t[o.allowTitleHTML?'innerHTML':'textContent']=f.title=a,m(i))},options:{attributes:!0}}),i._tippy=f,r._tippy=f,r._reference=i,e.push(f),bt++,e},[])}function Ne(e){var t=a(document.querySelectorAll(qe.POPPER));t.forEach(function(t){var i=t._tippy;if(i){var a=i.options;(!0===a.hideOnClick||-1<a.trigger.indexOf('focus'))&&(!e||t!==e.popper)&&i.hide()}})}function He(){var t=function(){Fe.usingTouch||(Fe.usingTouch=!0,Fe.iOS&&document.body.classList.add('tippy-touch'),Fe.dynamicInputDetection&&window.performance&&document.addEventListener('mousemove',i),Fe.onUserInputChange('touch'))},i=function(){var e;return function(){var t=performance.now();20>t-e&&(Fe.usingTouch=!1,document.removeEventListener('mousemove',i),!Fe.iOS&&document.body.classList.remove('tippy-touch'),Fe.onUserInputChange('mouse')),e=t}}();document.addEventListener('click',function(e){if(!(e.target instanceof Element))return Ne();var t=be(e.target,qe.REFERENCE),i=be(e.target,qe.POPPER);if(!(i&&i._reference._tippy.options.interactive)){if(t){var a=t._tippy.options;if(!a.multiple&&Fe.usingTouch||!a.multiple&&-1<a.trigger.indexOf('click'))return Ne(t._tippy);if(!0!==a.hideOnClick||-1<a.trigger.indexOf('click'))return}Ne()}}),document.addEventListener('touchstart',t),window.addEventListener('blur',function(){var t=document,i=t.activeElement;i&&i.blur&&e.call(i,qe.REFERENCE)&&i.blur()}),window.addEventListener('resize',function(){a(document.querySelectorAll(qe.POPPER)).forEach(function(e){var t=e._tippy;t.options.livePlacement||t.popperInstance.scheduleUpdate()})}),!Fe.supportsTouch&&(navigator.maxTouchPoints||navigator.msMaxTouchPoints)&&document.addEventListener('pointerdown',t)}function Me(e,i){return Fe.supported&&!gt&&(He(),gt=!0),t(e)&&p(e),i=Je({},je,i),{selector:e,options:i,tooltips:Fe.supported?_e(o(e),i):[],destroyAll:function(){this.tooltips.forEach(function(e){return e.destroy()}),this.tooltips=[]}}}var Ye=Math.min,Be=Math.round,We=Math.floor,Xe=Math.max,Ue='undefined'!=typeof window,ze=Ue&&/MSIE |Trident\//.test(navigator.userAgent),Fe={};Ue&&(Fe.supported='requestAnimationFrame'in window,Fe.supportsTouch='ontouchstart'in window,Fe.usingTouch=!1,Fe.dynamicInputDetection=!0,Fe.iOS=/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,Fe.onUserInputChange=function(){});for(var qe={POPPER:'.tippy-popper',TOOLTIP:'.tippy-tooltip',CONTENT:'.tippy-content',BACKDROP:'.tippy-backdrop',ARROW:'.tippy-arrow',ROUND_ARROW:'.tippy-roundarrow',REFERENCE:'[data-tippy]'},je={placement:'top',livePlacement:!0,trigger:'mouseenter focus',animation:'shift-away',html:!1,animateFill:!0,arrow:!1,delay:0,duration:[350,300],interactive:!1,interactiveBorder:2,theme:'dark',size:'regular',distance:10,offset:0,hideOnClick:!0,multiple:!1,followCursor:!1,inertia:!1,updateDuration:350,sticky:!1,appendTo:function(){return document.body},zIndex:9999,touchHold:!1,performance:!1,dynamicTitle:!1,flip:!0,flipBehavior:'flip',arrowType:'sharp',arrowTransform:'',maxWidth:'',target:null,allowTitleHTML:!0,popperOptions:{},createPopperInstanceOnInit:!1,onShow:function(){},onShown:function(){},onHide:function(){},onHidden:function(){}},Ke=Fe.supported&&Object.keys(je),Ve=function(e,t){if(!(e instanceof t))throw new TypeError('Cannot call a class as a function')},Ge=function(){function e(e,t){for(var a,o=0;o<t.length;o++)a=t[o],a.enumerable=a.enumerable||!1,a.configurable=!0,('value'in a)&&(a.writable=!0),Object.defineProperty(e,a.key,a)}return function(t,i,a){return i&&e(t.prototype,i),a&&e(t,a),t}}(),Je=Object.assign||function(e){for(var t,a=1;a<arguments.length;a++)for(var i in t=arguments[a],t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},Qe='undefined'!=typeof window&&'undefined'!=typeof document,Ze=['Edge','Trident','Firefox'],$e=0,et=0;et<Ze.length;et+=1)if(Qe&&0<=navigator.userAgent.indexOf(Ze[et])){$e=1;break}var i=Qe&&window.Promise,tt=i?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},$e))}},it=Qe&&!!(window.MSInputMethodContext&&document.documentMode),at=Qe&&/MSIE 10/.test(navigator.userAgent),ot=function(e,t){if(!(e instanceof t))throw new TypeError('Cannot call a class as a function')},pt=function(){function e(e,t){for(var a,o=0;o<t.length;o++)a=t[o],a.enumerable=a.enumerable||!1,a.configurable=!0,'value'in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}return function(t,i,a){return i&&e(t.prototype,i),a&&e(t,a),t}}(),rt=function(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e},nt=Object.assign||function(e){for(var t,a=1;a<arguments.length;a++)for(var i in t=arguments[a],t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},st=['auto-start','auto','auto-end','top-start','top','top-end','right-start','right','right-end','bottom-end','bottom','bottom-start','left-end','left','left-start'],lt=st.slice(3),dt={FLIP:'flip',CLOCKWISE:'clockwise',COUNTERCLOCKWISE:'counterclockwise'},ct=function(){function e(t,i){var a=this,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};ot(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(a.update)},this.update=tt(this.update.bind(this)),this.options=nt({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=i&&i.jquery?i[0]:i,this.options.modifiers={},Object.keys(nt({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){a.options.modifiers[t]=nt({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return nt({name:e},a.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&f(e.onLoad)&&e.onLoad(a.reference,a.popper,a.options,e,a.state)}),this.update();var p=this.options.eventsEnabled;p&&this.enableEventListeners(),this.state.eventsEnabled=p}return pt(e,[{key:'update',value:function(){return F.call(this)}},{key:'destroy',value:function(){return j.call(this)}},{key:'enableEventListeners',value:function(){return J.call(this)}},{key:'disableEventListeners',value:function(){return Z.call(this)}}]),e}();ct.Utils=('undefined'==typeof window?global:window).PopperUtils,ct.placements=st,ct.Defaults={placement:'bottom',positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,i=t.split('-')[0],a=t.split('-')[1];if(a){var o=e.offsets,p=o.reference,r=o.popper,n=-1!==['bottom','top'].indexOf(i),s=n?'left':'top',l=n?'width':'height',d={start:rt({},s,p[s]),end:rt({},s,p[s]+p[l]-r[l])};e.offsets.popper=nt({},r,d[a])}return e}},offset:{order:200,enabled:!0,fn:ne,offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var i=t.boundariesElement||g(e.instance.popper);e.instance.reference===i&&(i=g(i));var a=R(e.instance.popper,e.instance.reference,t.padding,i,e.positionFixed);t.boundaries=a;var o=t.priority,p=e.offsets.popper,r={primary:function(e){var i=p[e];return p[e]<a[e]&&!t.escapeWithReference&&(i=Xe(p[e],a[e])),rt({},e,i)},secondary:function(e){var i='right'===e?'left':'top',o=p[i];return p[e]>a[e]&&!t.escapeWithReference&&(o=Ye(p[i],a[e]-('right'===e?p.width:p.height))),rt({},i,o)}};return o.forEach(function(e){var t=-1===['left','top'].indexOf(e)?'secondary':'primary';p=nt({},p,r[t](e))}),e.offsets.popper=p,e},priority:['left','right','top','bottom'],padding:5,boundariesElement:'scrollParent'},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,i=t.popper,a=t.reference,o=e.placement.split('-')[0],p=We,r=-1!==['top','bottom'].indexOf(o),n=r?'right':'bottom',s=r?'left':'top',l=r?'width':'height';return i[n]<p(a[s])&&(e.offsets.popper[s]=p(a[s])-i[l]),i[s]>p(a[n])&&(e.offsets.popper[s]=p(a[n])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var i;if(!ie(e.instance.modifiers,'arrow','keepTogether'))return e;var a=t.element;if('string'==typeof a){if(a=e.instance.popper.querySelector(a),!a)return e;}else if(!e.instance.popper.contains(a))return console.warn('WARNING: `arrow.element` must be child of its popper element!'),e;var o=e.placement.split('-')[0],p=e.offsets,r=p.popper,n=p.reference,s=-1!==['left','right'].indexOf(o),l=s?'height':'width',d=s?'Top':'Left',c=d.toLowerCase(),m=s?'left':'top',f=s?'bottom':'right',u=M(a)[l];n[f]-u<r[c]&&(e.offsets.popper[c]-=r[c]-(n[f]-u)),n[c]+u>r[f]&&(e.offsets.popper[c]+=n[c]+u-r[f]),e.offsets.popper=A(e.offsets.popper);var y=n[c]+n[l]/2-u/2,b=h(e.instance.popper),g=parseFloat(b['margin'+d],10),x=parseFloat(b['border'+d+'Width'],10),v=y-e.offsets.popper[c]-g-x;return v=Xe(Ye(r[l]-u,v),0),e.arrowElement=a,e.offsets.arrow=(i={},rt(i,c,Be(v)),rt(i,m,''),i),e},element:'[x-arrow]'},flip:{order:600,enabled:!0,fn:function(e,t){if(q(e.instance.modifiers,'inner'))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var i=R(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),a=e.placement.split('-')[0],o=Y(a),p=e.placement.split('-')[1]||'',r=[];switch(t.behavior){case dt.FLIP:r=[a,o];break;case dt.CLOCKWISE:r=oe(a);break;case dt.COUNTERCLOCKWISE:r=oe(a,!0);break;default:r=t.behavior;}return r.forEach(function(n,s){if(a!==n||r.length===s+1)return e;a=e.placement.split('-')[0],o=Y(a);var l=e.offsets.popper,d=e.offsets.reference,c=We,m='left'===a&&c(l.right)>c(d.left)||'right'===a&&c(l.left)<c(d.right)||'top'===a&&c(l.bottom)>c(d.top)||'bottom'===a&&c(l.top)<c(d.bottom),f=c(l.left)<c(i.left),h=c(l.right)>c(i.right),u=c(l.top)<c(i.top),y=c(l.bottom)>c(i.bottom),b='left'===a&&f||'right'===a&&h||'top'===a&&u||'bottom'===a&&y,g=-1!==['top','bottom'].indexOf(a),x=!!t.flipVariations&&(g&&'start'===p&&f||g&&'end'===p&&h||!g&&'start'===p&&u||!g&&'end'===p&&y);(m||b||x)&&(e.flipped=!0,(m||b)&&(a=r[s+1]),x&&(p=ae(p)),e.placement=a+(p?'-'+p:''),e.offsets.popper=nt({},e.offsets.popper,B(e.instance.popper,e.offsets.reference,e.placement)),e=U(e.instance.modifiers,e,'flip'))}),e},behavior:'flip',padding:5,boundariesElement:'viewport'},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,i=t.split('-')[0],a=e.offsets,o=a.popper,p=a.reference,r=-1!==['left','right'].indexOf(i),n=-1===['top','left'].indexOf(i);return o[r?'left':'top']=p[i]-(n?o[r?'width':'height']:0),e.placement=Y(t),e.offsets.popper=A(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!ie(e.instance.modifiers,'hide','preventOverflow'))return e;var t=e.offsets.reference,i=W(e.instance.modifiers,function(e){return'preventOverflow'===e.name}).boundaries;if(t.bottom<i.top||t.left>i.right||t.top>i.bottom||t.right<i.left){if(!0===e.hide)return e;e.hide=!0,e.attributes['x-out-of-boundaries']=''}else{if(!1===e.hide)return e;e.hide=!1,e.attributes['x-out-of-boundaries']=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var i=t.x,a=t.y,o=e.offsets.popper,p=W(e.instance.modifiers,function(e){return'applyStyle'===e.name}).gpuAcceleration;void 0!==p&&console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');var r,n,s=void 0===p?t.gpuAcceleration:p,l=g(e.instance.popper),d=C(l),c={position:o.position},m={left:We(o.left),top:Be(o.top),bottom:Be(o.bottom),right:We(o.right)},f='bottom'===i?'top':'bottom',h='right'===a?'left':'right',u=z('transform');if(n='bottom'==f?-d.height+m.bottom:m.top,r='right'==h?-d.width+m.right:m.left,s&&u)c[u]='translate3d('+r+'px, '+n+'px, 0)',c[f]=0,c[h]=0,c.willChange='transform';else{var y='bottom'==f?-1:1,b='right'==h?-1:1;c[f]=n*y,c[h]=r*b,c.willChange=f+', '+h}var x={"x-placement":e.placement};return e.attributes=nt({},x,e.attributes),e.styles=nt({},c,e.styles),e.arrowStyles=nt({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:'bottom',y:'right'},applyStyle:{order:900,enabled:!0,fn:function(e){return ee(e.instance.popper,e.styles),te(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&ee(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,i,a,o){var p=H(o,t,e,i.positionFixed),r=N(i.placement,p,t,e,i.modifiers.flip.boundariesElement,i.modifiers.flip.padding);return t.setAttribute('x-placement',r),ee(t,{position:i.positionFixed?'fixed':'absolute'}),i},gpuAcceleration:void 0}}};var mt={};if(Ue){var ft=Element.prototype;mt=ft.matches||ft.matchesSelector||ft.webkitMatchesSelector||ft.mozMatchesSelector||ft.msMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),a=t.length;0<=--a&&t.item(a)!==this;);return-1<a}}var e=mt,ht={},ut=function(e){return function(t){return t===ht&&e}},yt=function(){function e(t){for(var i in Ve(this,e),t)this[i]=t[i];this.state={destroyed:!1,visible:!1,enabled:!0},this._=ut({mutationObservers:[]})}return Ge(e,[{key:'enable',value:function(){this.state.enabled=!0}},{key:'disable',value:function(){this.state.enabled=!1}},{key:'show',value:function(e){var t=this;if(!this.state.destroyed&&this.state.enabled){var i=this.popper,a=this.reference,o=this.options,p=c(i),n=p.tooltip,s=p.backdrop,l=p.content;return o.dynamicTitle&&!a.getAttribute('data-original-title')?void 0:a.refObj||document.documentElement.contains(a)?void(o.onShow.call(i,this),e=ge(void 0===e?o.duration:e,0),ve([i,n,s],0),i.style.visibility='visible',this.state.visible=!0,Ce.call(this,function(){if(t.state.visible){if(Ee.call(t)||t.popperInstance.scheduleUpdate(),Ee.call(t)){t.popperInstance.disableEventListeners();var p=ge(o.delay,0),d=t._(ht).lastTriggerEvent;d&&t._(ht).followCursorListener(p&&t._(ht).lastMouseMoveEvent?t._(ht).lastMouseMoveEvent:d)}ve([n,s,s?l:null],e),s&&getComputedStyle(s)[r('transform')],o.interactive&&a.classList.add('tippy-active'),o.sticky&&De.call(t),xe([n,s],'visible'),Re.call(t,e,function(){o.updateDuration||n.classList.add('tippy-notransition'),o.interactive&&we(i),a.setAttribute('aria-describedby','tippy-'+t.id),o.onShown.call(i,t)})}})):void this.destroy()}}},{key:'hide',value:function(e){var t=this;if(!this.state.destroyed&&this.state.enabled){var i=this.popper,a=this.reference,o=this.options,p=c(i),r=p.tooltip,n=p.backdrop,s=p.content;o.onHide.call(i,this),e=ge(void 0===e?o.duration:e,1),o.updateDuration||r.classList.remove('tippy-notransition'),o.interactive&&a.classList.remove('tippy-active'),i.style.visibility='hidden',this.state.visible=!1,ve([r,n,n?s:null],e),xe([r,n],'hidden'),o.interactive&&-1<o.trigger.indexOf('click')&&we(a),ye(function(){Re.call(t,e,function(){t.state.visible||!o.appendTo.contains(i)||(!t._(ht).isPreparingToShow&&(document.removeEventListener('mousemove',t._(ht).followCursorListener),t._(ht).lastMouseMoveEvent=null),a.removeAttribute('aria-describedby'),t.popperInstance.disableEventListeners(),o.appendTo.removeChild(i),o.onHidden.call(i,t))})})}}},{key:'destroy',value:function(){var e=this,t=!(0<arguments.length&&void 0!==arguments[0])||arguments[0];if(!this.state.destroyed){this.state.visible&&this.hide(0),this.listeners.forEach(function(t){e.reference.removeEventListener(t.event,t.handler)}),this.title&&this.reference.setAttribute('title',this.title),delete this.reference._tippy;['data-original-title','data-tippy','data-tippy-delegate'].forEach(function(t){e.reference.removeAttribute(t)}),this.options.target&&t&&a(this.reference.querySelectorAll(this.options.target)).forEach(function(e){return e._tippy&&e._tippy.destroy()}),this.popperInstance&&this.popperInstance.destroy(),this._(ht).mutationObservers.forEach(function(e){e.disconnect()}),this.state.destroyed=!0}}}]),e}(),bt=1,gt=!1;return Me.version='2.5.0',Me.browser=Fe,Me.defaults=je,Me.one=function(e,t){return Me(e,t).tooltips[0]},Me.disableAnimations=function(){je.updateDuration=je.duration=0,je.animateFill=!1},function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:'';if(Ue&&Fe.supported){var t=document.head||document.querySelector('head'),i=document.createElement('style');i.type='text/css',t.insertBefore(i,t.firstChild),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}('.tippy-touch{cursor:pointer!important}.tippy-notransition{transition:none!important}.tippy-popper{max-width:350px;perspective:700px;z-index:9999;outline:0;transition-timing-function:cubic-bezier(.165,.84,.44,1);pointer-events:none;line-height:1.4}.tippy-popper[data-html]{max-width:96%;max-width:calc(100% - 20px)}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-8px;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:7px solid #333;border-right:7px solid transparent;border-left:7px solid transparent;bottom:-7px;margin:0 6px;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{transform-origin:0 90%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{transform:scale(6) translate(-50%,25%);opacity:1}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{transform:scale(1) translate(-50%,25%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{opacity:1;transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{opacity:1;transform:translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;transform:translateY(0) rotateX(90deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{opacity:1;transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{opacity:1;transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{opacity:1;transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;transform:translateY(0) scale(0)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-8px;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:7px solid #333;border-right:7px solid transparent;border-left:7px solid transparent;top:-7px;margin:0 6px;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{transform-origin:0 -90%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{transform:scale(6) translate(-50%,-125%);opacity:1}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{transform:scale(1) translate(-50%,-125%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{opacity:1;transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{opacity:1;transform:translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;transform:translateY(0) rotateX(-90deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{opacity:1;transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{opacity:1;transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{opacity:1;transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;transform:translateY(0) scale(0)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-16px;transform-origin:33.33333333% 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:7px solid #333;border-top:7px solid transparent;border-bottom:7px solid transparent;right:-7px;margin:3px 0;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{transform-origin:100% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{transform:scale(6) translate(40%,-50%);opacity:1}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{transform:scale(1.5) translate(40%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{opacity:1;transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{opacity:1;transform:translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;transform:translateX(0) rotateY(-90deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{opacity:1;transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{opacity:1;transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{opacity:1;transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;transform:translateX(0) scale(0)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-16px;transform-origin:66.66666666% 50%}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:7px solid #333;border-top:7px solid transparent;border-bottom:7px solid transparent;left:-7px;margin:3px 0;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{transform-origin:-100% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{transform:scale(6) translate(-140%,-50%);opacity:1}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{transform:scale(1.5) translate(-140%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{opacity:1;transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{opacity:1;transform:translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;transform:translateX(0) rotateY(90deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{opacity:1;transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{opacity:1;transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{opacity:1;transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;transform:translateX(0) scale(0)}.tippy-tooltip{position:relative;color:#fff;border-radius:4px;font-size:.9rem;padding:.3rem .6rem;text-align:center;will-change:transform;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;background-color:#333}.tippy-tooltip[data-size=small]{padding:.2rem .4rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.4rem .8rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-animatefill] .tippy-content{transition:-webkit-clip-path cubic-bezier(.46,.1,.52,.98);transition:clip-path cubic-bezier(.46,.1,.52,.98);transition:clip-path cubic-bezier(.46,.1,.52,.98),-webkit-clip-path cubic-bezier(.46,.1,.52,.98)}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.53,2,.36,.85)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:24px;height:8px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:26%;left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}body:not(.tippy-touch) .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(100% 100% at 50% 50%);clip-path:ellipse(100% 100% at 50% 50%)}body:not(.tippy-touch) .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(5% 50% at 50% 50%);clip-path:ellipse(5% 50% at 50% 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=right] .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(135% 100% at 0 50%);clip-path:ellipse(135% 100% at 0 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=right] .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(40% 100% at 0 50%);clip-path:ellipse(40% 100% at 0 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=left] .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(135% 100% at 100% 50%);clip-path:ellipse(135% 100% at 100% 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=left] .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(40% 100% at 100% 50%);clip-path:ellipse(40% 100% at 100% 50%)}@media (max-width:360px){.tippy-popper{max-width:96%;max-width:calc(100% - 20px)}}'),Me});
;/*global $, starRatingPlugin, app, jQuery, CountlyHelpers, starView, store, countlyGlobal, countlyCommon, ClipboardJS, tippy, moment, countlyView, Handlebars, production, path1*/
window.starView = countlyView.extend({
    /**
     * this variable contains the infos that render view required.
     * @type {object}
     */
    initialize: function() {
        if (!production) {
            //For color picker, copy to clipboard feature and tooltip
            CountlyHelpers.loadJS("star-rating/javascripts/jquery.colorpicker.js");
            CountlyHelpers.loadJS("star-rating/javascripts/clipboard.min.js");
            CountlyHelpers.loadJS("star-rating/javascripts/tippy.all.min.js");
        }
    },
    templateData: {
        "page-title": jQuery.i18n.map["star.menu-title"],
        platform_version: null,
        rating: null,
        timeSeriesData: null
    },
    feedbackWidgetTableIsRendered: false,
    _tab: 'ratings',
    platform: '',
    version: '',
    rating: '',
    ratingFilter: {"comments": {'platform': "", "version": "", "rating": "", "widget": ""}, "ratings": {'platform': "", "version": "", "widget": ""}},
    localizeStars: ["star.one-star", "star.two-star", "star.three-star", "star.four-star", "star.five-star"],
    cache: {},
    step: 1,
    widgetTable: null,
    feedbackWidget: {
        _id: "",
        popup_header_text: jQuery.i18n.map['feedback.popup-header-text'],
        popup_comment_callout: jQuery.i18n.map['feedback.popup-comment-callout'],
        popup_email_callout: jQuery.i18n.map['feedback.popup-email-callout'],
        popup_button_callout: jQuery.i18n.map['feedback.popup-button-callout'],
        popup_thanks_message: jQuery.i18n.map['feedback.popup-thanks-message'],
        trigger_position: 'mright',
        trigger_bg_color: '#13B94D',
        trigger_font_color: '#ffffff',
        trigger_button_text: jQuery.i18n.map['feedback.trigger-button-text'],
        target_devices: {
            phone: false,
            desktop: false,
            tablet: false
        },
        //target_devices: [],
        target_pages: ["/"],
        target_page: 'selected',
        is_active: true,
        hide_sticker: false
    },
    currentModal: 'popup',
    cumulativeData: {},
    currentTab: 'cumulative',
    lineChartSelect: {
        star1: true,
        star2: true,
        star3: true,
        star4: true,
        star5: true
    },
    deviceNameParser: function(obj) {
        var n = [], key, z;
        for (key in obj) {
            if (obj[key]) {
                n.push(key);
            }
        }
        z = n.shift() || '';
        while (n.length > 1) {
            z += ', ' + n.shift();
        }
        if (n.length === 0) {
            return z;
        }
        return z + ' & ' + n.shift();
    },
    beforeRender: function() {
        var self = this;
        // will load template, platform and version, periodperiod's rating data
        return $.when($.get(countlyGlobal.path + '/star-rating/templates/star.html'), starRatingPlugin.requestPlatformVersion(), starRatingPlugin.requestRatingInPeriod(), starRatingPlugin.requesPeriod(), starRatingPlugin.requestFeedbackData(), starRatingPlugin.requestFeedbackWidgetsData()).done(function(result) {
            self.template = Handlebars.compile(result[0]);
            self.templateData.platform_version = starRatingPlugin.getPlatformVersion();

            self.templateData.rating = starRatingPlugin.getRatingInPeriod();
            self.templateData.widget = starRatingPlugin.getFeedbackWidgetsData();
        });
    },
    /**
     * This is for render platform dropdown select view.
     * @namespace starView
     * @method loadPlatformData
     */
    loadPlatformData: function() {
        $("#platform-list").html('<div data-value="All Platforms" class="platform-option item" data-localize="star.all-platforms">' + jQuery.i18n.map['star.all-platforms'] + '</div>');
        for (var platform in this.templateData.platform_version) {
            if (platform !== 'undefined') {
                $("#platform-list").append('<div data-value="' + platform + '" class="platform-option item" data-localize="">' + platform + '</div>');
            }
        }
        var self = this;
        $(".platform-option").on("click", function() {
            self.platform = $(this).data('value');
            if (!self.platform || self.platform === "All Platforms") {
                self.platform = "";
            }
            $("#ratings_version").clySelectSetSelection("", "");
            $("#ratings_version .text").html('<div class="placeholder" data-localize="feedback.select-version">' + jQuery.i18n.map['feedback.select-version'] + '</div>');
            self.loadVersionData();
        });
    },
    /**
     * This is for render platform dropdown select view.
     * @namespace starView
     * @method loadPlatformData
     */
    loadWidgetData: function() {
        $("#widget-list").html('<div data-value="All Widgets" class="widget-option item" data-localize="star.all-widgets">' + jQuery.i18n.map['star.all-widgets'] + '</div>');
        for (var i = 0; i < this.templateData.widget.length; i++) {
            $("#widget-list").append('<div data-value="' + this.templateData.widget[i]._id + '" class="widget-option item" data-localize="">' + this.templateData.widget[i].popup_header_text + '</div>');
        }
    },
    /**
     * This is for render rating dropdown select view.
     * @namespace starView
     * @method loadRatingData
     * @param {boolean} keepOpen - will it keep open?
     */
    resetFilterBox: function(keepOpen) {
        var values = this.ratingFilter[this._tab];

        if (!keepOpen) {
            $("#rating-selector").removeClass('active');
            $("#rating-selector-graph").removeClass('active');
            $("#star-rating-selector-form").hide();
        }

        if (this._tab === "ratings") {
            $('#star-rating-selector-form table tr').first().css('display', 'none');
        }
        else {
            $('#star-rating-selector-form table tr').first().css('display', 'table-row');
            if (values.rating === "") {
                $("#ratings_rating").clySelectSetSelection("", "");
                $("#ratings_rating .text").html('<div class="placeholder" data-localize="feedback.select-rating">' + jQuery.i18n.map['feedback.select-rating'] + '</div>');
            }
            else {
                $("#ratings_rating").clySelectSetSelection(values.rating, jQuery.i18n.map[this.localizeStars[parseInt(values.rating) - 1]]);
            }
        }

        if (values.platform === "") {
            $("#ratings_platform").clySelectSetSelection("", "");
            $("#ratings_platform .text").html('<div class="placeholder" data-localize="feedback.select-platform">' + jQuery.i18n.map['feedback.select-platform'] + '</div>');
        }
        else {
            $("#ratings_platform").clySelectSetSelection(values.platform, values.platform);
        }

        if (values.version === "") {
            $("#ratings_version").clySelectSetSelection("", "");
            $("#ratings_version .text").html('<div class="placeholder" data-localize="feedback.select-version">' + jQuery.i18n.map['feedback.select-version'] + '</div>');
        }
        else {
            $("#ratings_version").clySelectSetSelection(values.version, values.version.replace(/:/g, "."));
        }

        if (values.widget === "") {
            $("#ratings_widget").clySelectSetSelection("", "");
            $("#ratings_widget .text").html('<div class="placeholder" data-localize="feedback.select-widget">' + jQuery.i18n.map['feedback.select-widget'] + '</div>');
        }
        else {
            for (var i = 0; i < this.templateData.widget.length; i++) {
                if (this.templateData.widget[i]._id === values.widget) {
                    $("#ratings_widget").clySelectSetSelection(values.widget, this.templateData.widget[i].popup_header_text);
                }
            }
        }

    },
    addScriptsForFilter: function() {
        var self = this;
        $("#rating-selector").on("click", function() {
            if ($(this).hasClass('active')) {
                $(this).removeClass('active');
                $("#star-rating-selector-form").hide();
            }
            else {
                $(this).addClass('active');
                $("#star-rating-selector-form").show();
            }
        });

        $("#rating-selector-graph").on("click", function() {
            if ($(this).hasClass('active')) {
                $(this).removeClass('active');
                $("#star-rating-selector-form").hide();
            }
            else {
                $(this).addClass('active');
                $("#star-rating-selector-form").show();
            }
        });

        $("#remove-star-rating-filter").on("click", function() {
            if (self._tab === "comments") {
                self.ratingFilter.comments = {'platform': "", "version": "", "rating": "", "widget": ""};
                self.resetFilterBox(true);
                $("#rating-selector a").text(jQuery.i18n.map['star.all-ratings']);
                $.when(starRatingPlugin.requestFeedbackData(self.ratingFilter.comments)).done(function() {
                    self.updateViews();
                });
            }
            else {
                self.ratingFilter.ratings = {'platform': "", "version": "", "widget": ""};
                self.resetFilterBox(true);
                $("#rating-selector-graph a").text(jQuery.i18n.map['star.all-ratings']);
                self.refresh();
            }
        });

        $("#apply-star-rating-filter ").on("click", function() {
            $("#rating-selector").removeClass('active');
            $("#rating-selector-graph").removeClass('active');
            $("#star-rating-selector-form").hide();
            var selectText = [];

            self.ratingFilter[self._tab] = {'platform': "", "version": "", "widget": ""};
            var rating = $("#ratings_rating").clySelectGetSelection();
            var version = $("#ratings_version").clySelectGetSelection();
            var platform = $("#ratings_platform").clySelectGetSelection();
            var widget = $("#ratings_widget").clySelectGetSelection();

            var have_filter = false;
            //rating
            if (self._tab === "comments") {
                if (rating && rating !== "All Ratings" && rating !== "") {
                    selectText.push($("#ratings_rating").find(".select-inner .text").html());
                    self.ratingFilter[self._tab].rating = rating;
                    have_filter = true;
                }
                else {
                    selectText.push(jQuery.i18n.map['star.all-ratings']);
                    self.ratingFilter[self._tab].rating = "";
                }
            }
            //platform
            if (platform && platform !== "All Platforms" && platform !== "") {
                selectText.push($("#ratings_platform").find(".select-inner .text").html());
                self.ratingFilter[self._tab].platform = platform;
                have_filter = true;
            }
            else {
                selectText.push(jQuery.i18n.map['star.all-platforms']);
            }

            //version
            if (version && version !== "All Versions" && version !== "") {
                selectText.push(jQuery.i18n.map['version_history.version'] + " " + $("#ratings_version").find(".select-inner .text").html());
                self.ratingFilter[self._tab].version = version;
                have_filter = true;
            }
            else {
                selectText.push(jQuery.i18n.map['star.all-app-versions']);
            }

            //widget
            if (widget && widget !== "All Widgets" && widget !== "") {
                self.ratingFilter[self._tab].widget = widget;
                selectText.push($("#ratings_widget").find(".select-inner .text").html());
                have_filter = true;
            }
            else {
                selectText.push(jQuery.i18n.map['star.all-widgets']);
            }

            if (self._tab === "comments") {
                if (have_filter) {
                    $("#rating-selector a").text(selectText.join(", "));
                }
                else {
                    $("#rating-selector a").text(jQuery.i18n.map['star.all-ratings']);
                }

                $.when(starRatingPlugin.requestFeedbackData(self.ratingFilter.comments)).done(function() {
                    self.updateViews();
                });
            }
            else {
                if (have_filter) {
                    $("#rating-selector-graph a").text(selectText.join(", "));
                }
                else {
                    $("#rating-selector-graph a").text(jQuery.i18n.map['star.all-ratings']);
                }
                self.refresh();
            }
        });
    },
    loadRatingData: function() {
        this.templateData.rating_options = [{
            "val": 1,
            "title": jQuery.i18n.map['star.one-star']
        }, {
            "val": 2,
            "title": jQuery.i18n.map['star.two-star']
        }, {
            "val": 3,
            "title": jQuery.i18n.map['star.three-star']
        }, {
            "val": 4,
            "title": jQuery.i18n.map['star.four-star']
        }, {
            "val": 5,
            "title": jQuery.i18n.map['star.five-star']
        }];
        this.templateData.rating_options.reverse().forEach(function(rating) {
            $("#rating-list").append('<div data-value="' + rating.val + '" class="rating-option item" data-localize="">' + rating.title + '</div>');
        });
        $("#rating-list").prepend('<div data-value="All Ratings" class="rating-option item" data-localize="star.all-ratings">' + jQuery.i18n.map['star.all-ratings'] + '</div>');
    },
    /**
     * This is for render version dropdown select view.
     * @namespace starView
     * @method loadVersionData
     */
    loadVersionData: function() {
        var versioinList = [];
        var curPlatform = this.platform;
        if (!curPlatform || curPlatform === '') {
            for (var platform in this.templateData.platform_version) {
                var list = this.templateData.platform_version[platform];
                for (var i = 0; i < list.length; i++) {
                    if (versioinList.indexOf(list[i]) === -1) {
                        versioinList.push(list[i]);
                    }
                }
            }
        }
        else {
            if (this.templateData.platform_version[curPlatform]) {
                versioinList = this.templateData.platform_version[curPlatform];
            }
        }
        //sort versionList
        versioinList.sort(function(a, b) {
            var aparts = a.split(":");
            var bparts = b.split(":");
            for (var p = 0; p < aparts.length; p++) {

                if (bparts[p]) {
                    if (parseInt(aparts[p]) < parseInt(bparts[p])) {
                        return -1;
                    }
                    else if (parseInt(aparts[p]) > parseInt(bparts[p])) {
                        return 1;
                    }
                }
                else {
                    return -1;
                }
            }
            return 0;
        });
        $("#version-list").html('<div data-value="All Versions" class="version-option item" data-localize="star.all-app-versions">' + jQuery.i18n.map['star.all-app-versions'] + '</div>');
        for (var versionIndex = 0; versionIndex < versioinList.length; versionIndex++) {
            if (versioinList[versionIndex] === 'undefined') {
                var versionShow = versioinList[versionIndex].replace(/:/g, ".");
                $("#version-list").append('<div data-value="' + versioinList[versionIndex] + '" class="version-option item" data-localize="">' + versionShow + '</div>');
            }
        }
    },
    /**
     * This is update chart and table base on starView.currentTab's value.
     * @namespace starView
     * @method updateViews
     * @param {boolean} isRefresh - is it refresh?
     */
    updateViews: function(isRefresh) {
        var self = this;
        self.templateData.platform_version = starRatingPlugin.getPlatformVersion();
        self.templateData.rating = starRatingPlugin.getRatingInPeriod();
        self.calCumulativeData();
        self.calTimeSeriesData();
        self.renderCommentsTable(true);
        self.renderFeedbacksTable(true);
        if (self.currentTab === 'cumulative') {
            self.renderCumulativeChart();
            self.renderCumulativeTable(isRefresh);
            $('#tableTwo_wrapper').css("display", "none");
            $('#tableOne_wrapper').css("display", "block");
            $('#big-numbers-container').css("display", "none");
        }
        if (self.currentTab === 'time-series') {
            self.renderTimeSeriesTable(isRefresh);
            self.renderTimeSeriesChart();
            $('#tableOne_wrapper').css("display", "none");
            $('#tableTwo_wrapper').css("display", "block");
            $('#big-numbers-container').css("display", "block");
        }
    },
    /**
     * This is for regex detection of the document is match currently platform and version selected or not
     *
     * @namespace starView
     * @method matchPlatformVersion
     * @param {string} documentName, format is '{platform}**{version}**{rating}'(like "IOS**2.3**4")
     * @return {boolean} matchResult
     */
    matchPlatformVersion: function(documentName) {
        var regexString = '';
        if (this.ratingFilter.ratings.platform === '') {
            regexString += '(\\w+)(\\*\\*)';
        }
        else {
            regexString += this.ratingFilter.ratings.platform.toString().toUpperCase() + '(\\*\\*)';
        }
        if (this.ratingFilter.ratings.version === '') {
            regexString += '(\\w+)(\\S*)(\\w*)(\\*\\*)[1-5]';
        }
        else {
            regexString += this.ratingFilter.ratings.version.toString() + '(\\*\\*)[1-5]';
        }
        if (this.ratingFilter.ratings.widget !== '') {
            regexString += '(\\*\\*)' + this.ratingFilter.ratings.widget.toString();
        }
        return (new RegExp(regexString, 'i')).test(documentName);
    },
    /**
     * This is for return date info like "2016.09.01" in period as array.
     * For chart and table rendering.
     * @namespace starView
     * @method getPeriodArray
     * @return {Array} periodArray.
     */
    getPeriodArray: function() {
        var periodArray = [];
        var periodObject = countlyCommon.getPeriodObj();
        if (parseInt(periodObject.numberOfDays) === 1) {
            periodArray = [periodObject.activePeriod];
        }
        else if (countlyCommon.getPeriod() === 'month') {
            periodArray = starRatingPlugin.getPeriod().currentPeriodArr;
        }
        else if (periodObject.currentPeriodArr === undefined) {
            periodArray = [];
            for (var i = periodObject.periodMin; i <= periodObject.periodMax; i++) {
                periodArray.push(periodObject.activePeriod + '.' + i);
            }
        }
        else {
            periodArray = periodObject.currentPeriodArr;
        }
        return periodArray;
    },
    getFeedbackData: function() {
        return starRatingPlugin.getFeedbackData();
    },
    getFeedbackWidgetsData: function() {
        return starRatingPlugin.getFeedbackWidgetsData();
    },
    /**
     * This is for cumulative view data calc
     * call before "renderCumulativeTable" and  "renderCumulativeChart"
     * @namespace starView
     * @method calCumulativeData
     */
    calCumulativeData: function() {
        this.cumulativeData = [{
            count: 0,
            percent: 0
        }, {
            count: 0,
            percent: 0
        }, {
            count: 0,
            percent: 0
        }, {
            count: 0,
            percent: 0
        }, {
            count: 0,
            percent: 0
        }];
        var ratingArray = [];
        var result = this.templateData.rating;
        var periodArray = this.getPeriodArray();
        for (var i = 0; i < periodArray.length; i++) {
            var dateArray = periodArray[i].split('.');
            var year = dateArray[0];
            var month = dateArray[1];
            var day = dateArray[2];
            if (result[year] && result[year][month] && result[year][month][day]) {
                for (var rating in result[year][month][day]) {
                    if (this.matchPlatformVersion(rating)) {
                        var rank = (rating.split("**"))[2];
                        this.cumulativeData[rank - 1].count += result[year][month][day][rating].c;
                        var times = result[year][month][day][rating].c;
                        while (times--) {
                            ratingArray.push(parseInt(rank));
                        }
                    }
                }
            }
        }
        var sum = 0,
            middle = 0;
        this.cumulativeData.forEach(function(star) {
            sum += star.count;
        });
        this.cumulativeData.forEach(function(star) {
            var tmpPercent = (sum === 0) ? 0 : ((star.count / sum) * 100).toFixed(1);
            star.percent = "<div class='percent-bar' style='width:" + (2 * tmpPercent) + "px;'></div>" + tmpPercent + "%";
        });
        $("#total-rating").html(sum);
        ratingArray.sort();
        if (sum === 0) {
            middle = 0;
        }
        else if (sum % 2 === 1) {
            middle = ratingArray[Math.round(sum / 2) - 1];
        }
        else {
            middle = (ratingArray[sum / 2 - 1] + ratingArray[sum / 2]) / 2;
        }
        middle = (middle * 1.0).toFixed(2);
        $("#median-rating").html(middle);
    },
    renderCumulativeTable: function() {
        var data = [];
        for (var i = 0; i < 5; i++) {
            data.push({
                rating: this.iconGenerator(i + 1, false),
                count: this.cumulativeData[i].count,
                percentage: this.cumulativeData[i].percent
            });
        }
        var columnsDefine = [{
            "mData": "rating",
            sType: "string",
            "sTitle": jQuery.i18n.map["star.rating"]
        }, {
            "mData": "count",
            "sType": "numeric",
            "sTitle": jQuery.i18n.map["star.number-of-ratings"],
            "mRender": function(d) {
                return countlyCommon.formatNumber(d);
            }
        }, {
            "mData": "percentage",
            sType: "percent",
            "sTitle": jQuery.i18n.map["star.percentage"]
        }];
        var tableData = {
            "aaData": data,
            "aoColumns": columnsDefine
        };
        $('#tableOne').dataTable($.extend({}, $.fn.dataTable.defaults, tableData));
    },
    renderCumulativeChart: function() {
        var self = this;
        var da = {
            "dp": [{
                "data": [
                    [-1, null],
                    [0, 0],
                    [1, 0],
                    [2, 0],
                    [3, 0],
                    [4, 0],
                    [5, null]
                ]
            }],
            "ticks": [
                [-1, ""],
                [0, this.iconGenerator(1)],
                [1, this.iconGenerator(2)],
                [2, this.iconGenerator(3)],
                [3, this.iconGenerator(4)],
                [4, this.iconGenerator(5)],
                [5, ""]
            ]
        };
        for (var i = 1; i <= 5; i++) {
            da.dp[0].data[i][1] = this.cumulativeData[i - 1].count;
        }
        if (self._tab === 'ratings') {
            countlyCommon.drawGraph(da, "#dashboard-graph", "bar", {
                colors: ["#56a5ec"]
            });
        }
    },
    iconGenerator: function(times) {
        var result = '';
        var starName = '';
        switch (times) {
        case 1:
            starName = jQuery.i18n.map["star.one-star"];
            break;
        case 2:
            starName = jQuery.i18n.map["star.two-star"];
            break;
        case 3:
            starName = jQuery.i18n.map["star.three-star"];
            break;
        case 4:
            starName = jQuery.i18n.map["star.four-star"];
            break;
        case 5:
            starName = jQuery.i18n.map["star.five-star"];
            break;
        }
        // there is no localization for these strings for now
        var rating_strings = ["Very dissatisfied", "Somewhat dissatisfied", "Neither satisfied nor dissatisfied", "Somewhat satisfied", "Very satisfied"];
        var typeName = '<a style="font-size: 1px; display:none;">' + starName + '</a>';
        if (times && times > 0) {
            result += '<span><img class="little-feedback-icon" src="./star-rating/images/star-rating/' + (times - 1) + '_color.svg"></span><span class="star-rating-icon-title">' + rating_strings[times - 1] + '</span>';
        }
        result += typeName;
        return result;
    },
    /**
     * This is for TimeSeries view data calc
     * call before "renderTimeSeriesTable" and  "renderTimeSeriesChart"
     * @namespace starView
     * @method calCumulativeData
     * @return {object} - returns time series data
     */
    calTimeSeriesData: function() {
        var result = this.templateData.rating;
        var periodArray = this.getPeriodArray();
        this.templateData.timeSeriesData = [];
        var currentYear = (new Date()).getFullYear();
        var dateFormat = 'MMM, YYYY';
        if (periodArray.length > 0 && (moment(periodArray[0], "YYYY.M.D").isoWeekYear() === currentYear)) {
            dateFormat = 'D MMM';
        }
        var rows = {};
        var seriesChartList = []; //GroupByDate
        for (var i = 0; i < periodArray.length; i++) {
            var dateArray = periodArray[i].split('.');
            var year = dateArray[0];
            var month = dateArray[1];
            var day = dateArray[2];
            var seriesChart = {
                'star1': 0,
                'star2': 0,
                'star3': 0,
                'star4': 0,
                'star5': 0
            };
            var LocalDateDisplayName = moment(periodArray[i], "YYYY.M.D").format(dateFormat);
            if (!rows[LocalDateDisplayName]) {
                rows[LocalDateDisplayName] = {
                    'date': LocalDateDisplayName,
                    'star1': 0,
                    'star2': 0,
                    'star3': 0,
                    'star4': 0,
                    'star5': 0
                };
            }
            if (result[year] && result[year][month] && result[year][month][day]) {
                for (var rating in result[year][month][day]) {
                    if (this.matchPlatformVersion(rating)) {
                        var rank = (rating.split("**"))[2];
                        rows[LocalDateDisplayName]["star" + rank] += result[year][month][day][rating].c;
                        seriesChart["star" + rank] += result[year][month][day][rating].c;
                    }
                }
            }
            seriesChartList.push(seriesChart);
        }
        this.templateData.seriesChartList = seriesChartList;
        for (var dateDisplayName in rows) {
            this.templateData.timeSeriesData.push(rows[dateDisplayName]);
        }
        return this.templateData.timeSeriesData;
    },
    renderTimeSeriesTable: function(isRefresh) {
        if (isRefresh) {
            CountlyHelpers.refreshTable($('#tableTwo').dataTable(), this.templateData.timeSeriesData);
        }
        else {
            var columnsDefine = [{
                "mData": "date",
                "sType": "customDate",
                "sTitle": jQuery.i18n.map["star.date"]
            }, {
                "mData": "star1",
                sType: "numeric",
                "sTitle": this.iconGenerator(1, true),
                "mRender": function(d) {
                    return countlyCommon.formatNumber(d);
                }
            }, {
                "mData": "star2",
                sType: "numeric",
                "sTitle": this.iconGenerator(2, true),
                "mRender": function(d) {
                    return countlyCommon.formatNumber(d);
                }
            }, {
                "mData": "star3",
                sType: "numeric",
                "sTitle": this.iconGenerator(3, true),
                "mRender": function(d) {
                    return countlyCommon.formatNumber(d);
                }
            }, {
                "mData": "star4",
                sType: "numeric",
                "sTitle": this.iconGenerator(4, true),
                "mRender": function(d) {
                    return countlyCommon.formatNumber(d);
                }
            }, {
                "mData": "star5",
                sType: "numeric",
                "sTitle": this.iconGenerator(5, true),
                "mRender": function(d) {
                    return countlyCommon.formatNumber(d);
                }
            }, ];
            $('#tableTwo').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": this.templateData.timeSeriesData,
                "aoColumns": columnsDefine
            }));
            $('#tableTwo').dataTable().fnSort([
                [0, 'desc']
            ]);
            $('#tableTwo').stickyTableHeaders();
        }
    },
    renderTimeSeriesChart: function() {
        var self = this;
        var timeSeriesData = this.templateData.timeSeriesData;
        var seriesChartList = this.templateData.seriesChartList;
        var graphData = [{
            "data": [],
            "label": jQuery.i18n.map["star.one-star"],
            "color": "#52A3EF"
        }, {
            "data": [],
            "label": jQuery.i18n.map["star.two-star"],
            "color": "#FF8700"
        }, {
            "data": [],
            "label": jQuery.i18n.map["star.three-star"],
            "color": "#0EC1B9"
        }, {
            "data": [],
            "label": jQuery.i18n.map["star.four-star"],
            "color": "#ad41d5"
        }, {
            "data": [],
            "label": jQuery.i18n.map["star.five-star"],
            "color": "#d63b3b"
        }];
        var period = countlyCommon.getPeriod();
        var bucket = null;
        var overrideBucket = false;
        var chartData = seriesChartList;
        if (period === 'yesterday' || period === 'hour' || countlyCommon.getPeriodObj().numberOfDays === 1) {
            bucket = 'daily';
            overrideBucket = true;
        }
        if (period === 'month') {
            bucket = null;
            chartData = timeSeriesData;
        }
        for (var i = 0; i < chartData.length; i++) {
            graphData[0].data.push([i, chartData[i].star1]);
            graphData[1].data.push([i, chartData[i].star2]);
            graphData[2].data.push([i, chartData[i].star3]);
            graphData[3].data.push([i, chartData[i].star4]);
            graphData[4].data.push([i, chartData[i].star5]);
        }
        var renderData = [];
        for (var key in this.lineChartSelect) {
            if (this.lineChartSelect[key]) {
                renderData.push(graphData[parseInt(key.substring(4)) - 1]);
            }
        }
        if (self._tab === 'ratings') {
            return countlyCommon.drawTimeGraph(renderData, "#dashboard-graph", bucket, overrideBucket);
        }
    },
    renderCommentsTable: function(isRefresh) {
        this.templateData.commentsData = this.getFeedbackData();
        if (isRefresh) {
            CountlyHelpers.refreshTable($('#tableThree').dataTable(), this.templateData.commentsData);
        }
        else {
            var columnsDefine = [{
                "mData": "rating",
                sType: "numeric",
                "sTitle": jQuery.i18n.map["star.rating"],
                "mRender": function(d, type) {
                    if (type === "display") {
                        var ratings = ["<span class='in-table-smiley-wrapper'><img src='/star-rating/images/star-rating/1_color.svg' class='table-detail-rating-img'></span><span class='in-table-smiley-text-wrapper'>Very dissatisfied</span>", "<span class='in-table-smiley-wrapper'><img src='/star-rating/images/star-rating/2_color.svg' class='table-detail-rating-img'></span><span class='in-table-smiley-text-wrapper'>Somewhat dissatisfied</span>", "<span class='in-table-smiley-wrapper'><img src='/star-rating/images/star-rating/3_color.svg' class='table-detail-rating-img'></span><span class='in-table-smiley-text-wrapper'>Neither satisfied nor dissatisfied</span>", "<span class='in-table-smiley-wrapper'><img src='/star-rating/images/star-rating/3_color.svg' class='table-detail-rating-img'></span><span class='in-table-smiley-text-wrapper'>Somewhat satisfied</span>", "<span class='in-table-smiley-wrapper'><img src='/images/star-rating/4_color.svg' class='table-detail-rating-img'></span><span class='in-table-smiley-text-wrapper'>Very satisfied</span>"];
                        return ratings[d - 1];
                    }
                    return d;
                }
            }, {
                "mData": function(row) {
                    if (row.comment) {
                        return row.comment;
                    }
                    else {
                        return "-";
                    }
                },
                sType: "string",
                "sTitle": jQuery.i18n.map["feedback.comment"]
            }, {
                "mData": function(row) {
                    if (row.email) {
                        return row.email;
                    }
                    else {
                        return "-";
                    }
                },
                sType: "string",
                "sTitle": jQuery.i18n.map["management-users.email"]
            }, {
                "mData": "ts",
                sType: "numeric",
                "sTitle": jQuery.i18n.map["common.time"],
                "mRender": function(d, type) {
                    if (type === "display") {
                        return countlyCommon.formatTimeAgo(d || 0);
                    }
                    return d;
                }
            }];
            $('#tableThree').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": this.templateData.commentsData,
                "aaSorting": [[ 3, "desc" ]],
                "aoColumns": columnsDefine
            }));
        }

    },
    renderFeedbacksTable: function(isRefresh) {
        var self = this;
        this.templateData.widgetsData = this.getFeedbackWidgetsData();
        if (isRefresh) {
            starRatingPlugin.requestFeedbackWidgetsData().then(function(json) {
                CountlyHelpers.refreshTable(self.widgetTable, json);
            });
        }
        else {
            var columnsDefine = [{
                "mData": function(row) {
                    return row.popup_header_text + '<br><span class="feedback-widget-id">(Widget ID: ' + row._id + ')</span>';
                },
                sType: "string",
                "sTitle": jQuery.i18n.map["report-manager.name"]
            }, {
                "mData": function(row) {
                    if (!(countlyGlobal.member.admin_of && (countlyGlobal.member.admin_of.indexOf(countlyCommon.ACTIVE_APP_ID) !== -1)) && !(countlyGlobal.member.global_admin)) {
                        return (row.is_active) ? 'Active' : 'Deactive';
                    }
                    else {
                        var input = '<div class="on-off-switch">';
                        if (row.is_active === 'true') {
                            input += '<input type="checkbox" id="widget-status-' + row._id + '"" class="on-off-switch-checkbox" checked>';
                        }
                        else {
                            input += '<input type="checkbox" id="widget-status-' + row._id + '"" class="on-off-switch-checkbox">';
                        }
                        input += '<label class="on-off-switch-label  widget-edit-status" data-id="' + row._id + '" for="plugin-' + row._id + '"></label>';
                        input += '<span class="text">' + jQuery.i18n.map["common.enable"] + '<span>';
                        return input;
                    }
                },
                "sType": "string",
                "sTitle": jQuery.i18n.map["common.status"],
                "bSortable": false
            }, {
                "mData": function(row) {
                    switch (row.trigger_position) {
                    case 'mleft':
                        return jQuery.i18n.map['feedback.middle-left'];
                    case 'mright':
                        return jQuery.i18n.map['feedback.middle-right'];
                    case 'bleft':
                        return jQuery.i18n.map['feedback.bottom-left'];
                    case 'bright':
                        return jQuery.i18n.map['feedback.bottom-left'];
                    default:
                        return jQuery.i18n.map['feedback.middle-right'];
                    }
                },
                sType: "string",
                "sTitle": jQuery.i18n.map["common.location"]
            }, {
                "mData": function(row) {
                    var target_pages = "";
                    if (typeof row.target_pages === "string") {
                        try {
                            row.target_pages = JSON.parse(row.target_pages);
                        }
                        catch (jsonParseError) {
                            row.target_pages = ["/"];
                        }
                    }
                    row.target_pages.forEach(function(page) {
                        if (row.target_pages.indexOf(page) < 5) {
                            target_pages += "<div class='feedback-widget-target-page-item'>" + page + "</div>";
                        }
                        else if (row.target_pages.indexOf(page) === 5) {
                            target_pages += "<div class='feedback-widget-target-page-item'>And " + (row.target_pages.length - 5) + " more...</div>";
                        }
                    });
                    return target_pages.trim();
                },
                sType: "string",
                "sTitle": jQuery.i18n.map["feedback.target-pages"]
            }, {
                "mData": function(row) {
                    var td = {};
                    if (typeof row.target_devices === "string") {
                        try {
                            td = JSON.parse(row.target_devices);
                        }
                        catch (jsonParseError) {
                            td = {phone: true, desktop: true, tablet: true};
                        }
                    }
                    else {
                        td = row.target_devices;
                    }

                    return self.deviceNameParser(td);
                    /*
                    if (atLeastOneDevice) return deviceText;
                    else return "No device selected.";
                    */
                },
                sType: "string",
                "sTitle": jQuery.i18n.map["feedback.target-devices"],
                "sWidth": "20%",
                "sClass": "feedback_target_device_field"
            }];
            columnsDefine.push({
                "mData": function(row) {
                    if (!(countlyGlobal.member.admin_of && (countlyGlobal.member.admin_of.indexOf(countlyCommon.ACTIVE_APP_ID) !== -1)) && !(countlyGlobal.member.global_admin)) {
                        return '';
                    }
                    else {
                        return "<div class='feedback-options-item options-item'>"
                        + "<div class='edit' data-id='" + row._id + "'></div>"
                        + "<div class='edit-menu' id='" + row._id + "'>"
                        + "<div data-clipboard-text='" + row._id + "' class='copy-widget-id item'" + " data-id='" + row._id + "'" + ">" + jQuery.i18n.map["common.copy-id"] + "</div>"
                        + "<div class='show-instructions item' data-id='" + row._id + "'" + ">" + jQuery.i18n.map["feedback.show-instructions"] + "</div>"
                        + "<div class='edit-widget item'" + " data-id='" + row._id + "'" + ">" + jQuery.i18n.map["feedback.edit"] + "</div>"
                        + "<div class='delete-widget item'" + " data-id='" + row._id + "'" + ">" + jQuery.i18n.map["feedback.delete"] + "</div>"
                        + "</div>"
                         + "</div>";
                    }
                },
                "bSortable": false,
            });
            this.widgetTable = $('#tableFour').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": this.templateData.widgetsData,
                "aoColumns": columnsDefine
            }));
        }
    },
    renderFeedbackDrawer: function() {
        var tabs = [];
        var counter = 0;
        for (var key in $('.feedback-preview-body')) {
            if (counter < 3) {
                tabs.push($('.feedback-preview-body')[key]);
                counter++;
            }
        }

        tabs.forEach(function(el) {
            $(el).css({
                "display": "none"
            });
        });
        if (this.step === 3) {
            $('#countly-feedback-next-step').text(jQuery.i18n.map['feedback.complete']);
            $('#countly-feedback-back-step').css({
                "display": "block"
            });
            $('#feedback-preview-step-1').css({
                "display": "block"
            });
            $('#feedback-preview-step-2').css({
                "display": "block"
            });
            $('#completed-1').css({
                "display": "inline-block"
            });
            $('#completed-2').css({
                "display": "inline-block"
            });
            $('#not-completed-1').css({
                "display": "none"
            });
            $('#not-completed-2').css({
                "display": "none"
            });
            $('.feedback-preview-footer').css({
                "display": "block"
            });
            $('.feedback-preview-title').text(jQuery.i18n.map['feedback.preview']);
        }
        else if (this.step === 2) {
            tippy('.show-tooltip', {
                'theme': 'custom',
                zIndex: 11000,
                arrowType: 'sharp',
                arrow: 'down',
                animation: false
            });
            $('#countly-feedback-next-step').text(jQuery.i18n.map['feedback.next-step']);
            $('#countly-feedback-back-step').css({
                "display": "block"
            });
            $('#completed-1').css({
                "display": "inline-block"
            });
            $('#not-completed-1').css({
                "display": "none"
            });
            $('#completed-2').css({
                "display": "none"
            });
            $('#not-completed-2').css({
                "display": "inline-block"
            });
            $('#feedback-preview-step-2').css({
                "display": "block"
            });
            $('.feedback-preview-title').text(jQuery.i18n.map['feedback.trigger-button-preview']);
            $('.feedback-preview-footer').css({
                "display": "none"
            });
        }
        else if (this.step === 1) {
            $('#countly-feedback-next-step').text(jQuery.i18n.map['feedback.next-step']);
            $('#countly-feedback-back-step').css({
                "display": "none"
            });
            $('#completed-1').css({
                "display": "none"
            });
            $('#not-completed-1').css({
                "display": "inline-block"
            });
            $('#completed-2').css({
                "display": "none"
            });
            $('#not-completed-2').css({
                "display": "inline-block"
            });
            $('#feedback-preview-step-1').css({
                "display": "block"
            });
            $('.feedback-preview-title').text(jQuery.i18n.map['feedback.popup-preview']);
            $('.feedback-preview-footer').css({
                "display": "block"
            });
        }
        var stepViews = [];
        counter = 0;
        for (var step in $('.feedback-create-step-view')) {
            if (counter < 3) {
                stepViews.push($('.feedback-create-step-view')[step]);
                counter++;
            }
        }
        stepViews.forEach(function(el) {
            $(el).css({
                "display": "none"
            });
        });
        var headerSlices = [];
        counter = 0;
        for (var slice in $('.feedback-create-side-header-slice')) {
            if (counter < 3) {
                headerSlices.push($('.feedback-create-side-header-slice')[slice]);
                counter++;
            }
        }
        headerSlices.forEach(function(el) {
            $(el).removeClass('feedback-active-step');
        });
        $('#feedback-step' + this.step + '-title').addClass('feedback-active-step');
        $('#feedback-create-step-' + this.step).css({
            "display": "block"
        });
    },
    renderCommon: function(isRefresh) {
        var self = this;
        new ClipboardJS('.copy-widget-id');
        new ClipboardJS('.feedback-copy-code');
        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            this.ratingFilter = {"comments": {'platform': "", "version": "", "rating": "", "widget": ""}, "ratings": {'platform': "", "version": "", "widget": ""}};
            self.renderCommentsTable();
            self.addScriptsForFilter(); //add filter scripts
            if (!self.feedbackWidgetTableIsRendered) {
                self.renderFeedbacksTable();
            }

            self.renderTabView(self._tab);
            $('.feedback-copy-code').click(function() {
                CountlyHelpers.notify({
                    type: 'green',
                    title: 'Success',
                    delay: 3000,
                    message: jQuery.i18n.map['feedback.code-copied']
                });
            });
            // load widget row edit menu
            $("body").off("click", ".options-item .edit").on("click", ".options-item .edit", function() {
                var id = $(this).data('id');
                $('.edit-menu').splice(0, $('.edit-menu').length).forEach(function(menu) {
                    if (id !== menu.id) {
                        if (menu.style.display === "block") {
                            menu.style.display = "none";
                        }
                    }
                    else {
                        if (menu.style.display === "block") {
                            menu.style.display = "none";
                        }
                        else {
                            menu.style.display = "block";
                        }
                    }
                });
                event.stopPropagation();
            });
            $('body').off("click", ".options-item .show-instructions").on("click", ".options-item .show-instructions", function() {
                $('#overlay').fadeIn();
                $('#widgets-array').html($(this).data('id'));
                $('.feedback-copy-code').attr("data-clipboard-text", "Countly.q.push(['enable_feedback',{'widgets':['" + $(this).data('id') + "']}]);");
                $('.feedback-modal').css({
                    "display": "block"
                });
                var id = $(this).data('id');
                $('.edit-menu').splice(0, $('.edit-menu').length).forEach(function(menu) {
                    if (id !== menu.id) {
                        if (menu.style.display === "block") {
                            menu.style.display = "none";
                        }
                    }
                    else {
                        if (menu.style.display === "block") {
                            menu.style.display = "none";
                        }
                        else {
                            menu.style.display = "block";
                        }
                    }
                });
            });
            // close when pressed esc
            document.onkeydown = function(evt) {
                evt = evt || window.event;
                var isEscape = false;
                if ("key" in evt) {
                    isEscape = (evt.key === "Escape" || evt.key === "Esc");
                }
                else {
                    isEscape = (evt.keyCode === 27);
                }
                if (isEscape) {
                    $(".cly-drawer").removeClass("open editing");
                    $("#create-feedback-widget-drawer").addClass("open");
                    $(".cly-drawer").removeClass("open");
                    $("#save-widget").removeClass("disabled");
                    $('.feedback-modal').css({
                        "display": "none"
                    });
                    self.step = 1;
                    self.renderFeedbackDrawer();
                }
            };
            //activate colorpicker
            $('.colorpicker').colorpicker({
                parts: ['hex', 'map', 'bar', 'rgb', 'alpha', 'footer'],
                showOn: 'both',
                alpha: true,
                altAlpha: false,
                hsv: false,
                buttonColorize: true,
                showNoneButton: true,
                colorFormat: 'HEX',
                select: function(event, color) {
                    if ($('#feedback-font-color').val() === '') {
                        self.feedbackWidget.trigger_font_color = '#FFFFFF';
                    }
                    if ($('#feedback-button-color').val() === '') {
                        self.feedbackWidget.trigger_font_color = '#13B94D';
                    }
                    self.feedbackWidget.trigger_font_color = $('#feedback-font-color').val();
                    self.feedbackWidget.trigger_bg_color = $('#feedback-button-color').val();
                    if (self.feedbackWidget.trigger_bg_color.length > 6) {
                        $("#feedback_color_preview_1").css({
                            "background-color": self.feedbackWidget.trigger_bg_color
                        });
                        $('#feedback-button-color').val(self.feedbackWidget.trigger_bg_color);
                    }
                    else {
                        $('#feedback-button-color').val('#' + self.feedbackWidget.trigger_bg_color);
                        $("#feedback_color_preview_1").css({
                            "background-color": '#' + self.feedbackWidget.trigger_bg_color
                        });
                    }
                    if (self.feedbackWidget.trigger_font_color.length > 6) {
                        $("#feedback_color_preview_2").css({
                            "background-color": self.feedbackWidget.trigger_font_color
                        });
                        $('#feedback-font-color').val(self.feedbackWidget.trigger_font_color);
                    }
                    else {
                        $("#feedback_color_preview_2").css({
                            "background-color": '#' + self.feedbackWidget.trigger_font_color
                        });
                        $('#feedback-font-color').val('#' + self.feedbackWidget.trigger_font_color);
                    }
                    $('#feedback-sticker-on-window').css({
                        "background-color": "#" + self.feedbackWidget.trigger_bg_color,
                        "color": "#" + self.feedbackWidget.trigger_font_color
                    });
                    path1.style.fill = '#' + self.feedbackWidget.trigger_font_color;
                    var id = $(this).attr("id");
                    $('.sliderbg').css('background-color', color.css);
                    var a = color.a;
                    $(".rangeslider").slider('value', 100 - Math.round(a * 100));
                    var rgba = "rgba(" + Math.round(color.rgb.r * 256) + "," + Math.round(color.rgb.g * 256) + "," + Math.round(color.rgb.b * 256) + "," + color.a + ")";
                    self.updateConfig(id, {
                        hex: color.hex,
                        alpha: "" + a,
                        rgba: rgba
                    });
                },
                // eslint-disable-next-line
                open: function(event, data) {
                    var vv = $($(this).parent()).find('.my_alpha').val();
                    if (vv === undefined || vv === null || vv === '') {
                        vv = "1";
                    }
                    vv = Math.round(parseFloat(vv) * 100);
                    if (vv !== 100) {
                        $('.alphainput').val(vv);
                        $('.alphainput2').val(vv);
                        $('.alphainput').trigger("change");
                    }
                    $('.sliderbg').css('background-color', $(this).val());
                    // eslint-disable-next-line
                    var rslider = $('.rangeslider').slider({
                        orientation: "vertical",
                        value: 100 - vv,
                        min: 0,
                        max: 100,
                        // eslint-disable-next-line
                        slide: function(event, ui) {
                            var alpha = 100 - ui.value;
                            $('.alphainput2').val(alpha);
                            $('.alphainput').val(alpha);
                            $('.alphainput').trigger("change");
                        }
                    });
                    $('.alphainput2').on('change', function(alphainputEvent) {
                        var val = $(alphainputEvent.target).val();
                        $('.alphainput').val(val);
                        $('.alphainput').trigger("change");
                    });
                    $('.alphainput2').on('keyup', function(alphainput2Event) {
                        var val = $(alphainput2Event.target).val();
                        $('.alphainput').val(val);
                        $('.alphainput').trigger("change");
                    });
                }
            });
            $('.feedback-modal-closer').click(function() {
                $('#overlay').fadeOut();
                $('.feedback-modal').css({
                    "display": "none"
                });
            });
            // permission controls
            if (countlyGlobal.member.global_admin) {
                $('#create-feedback-widget-button').css({
                    "display": "block"
                });
                $('.options-item').css({
                    "display": "block"
                });
            }
            else if (countlyGlobal.member.admin_of && (countlyGlobal.member.admin_of.indexOf(countlyCommon.ACTIVE_APP_ID) !== -1)) {
                $('.options-item').css({
                    "display": "block"
                });
                $('#create-feedback-widget-button').css({
                    "display": "block"
                });
            }
            else {
                $('.on-off-switch-checkbox').attr('disabled', 'disabled');
                $('#create-feedback-widget-button').css({
                    "display": "none"
                });
            }
            //add platform && version && rating selector
            self.loadPlatformData();
            self.loadVersionData();
            self.loadRatingData();
            self.loadWidgetData();
            self.getFeedbackData();
            self.getFeedbackWidgetsData();

            var height = window.innerHeight;
            $('.feedback-create-side').css({
                "height": height
            });
            $('.feedback-preview-side').css({
                "height": height - 68
            });
            // when window size resized
            $(window).resize(function() {
                var resizedHeight = window.innerHeight;
                $('.feedback-create-side').css({
                    "height": resizedHeight
                });
                $('.feedback-preview-side').css({
                    "height": resizedHeight - 68
                });
            });
            $("#graph-select-container").find(".big-numbers").removeClass("active");
            $("#" + self.currentTab).addClass("active");
            // modal changer default border thing...
            // I know this is not best way
            $('#thanks-modal').css({
                "border-left": "1px solid #2eb52b"
            });
            //tab select
            $(".widget-content .inner").click(function() {
                $(".big-numbers").removeClass("active");
                $(".big-numbers .select").removeClass("selected");
                $(this).parent(".big-numbers").addClass("active");
                $(this).find('.select').addClass("selected");
                self.currentTab = $(this).parent(".big-numbers").attr('id');
                self.updateViews();
            });
            $('body').find("tbody").off("click", ".widget-edit-status").on("click", ".widget-edit-status", function() {
                var id = $(this).data('id');
                starRatingPlugin.requestSingleWidget($(this).data('id'), function(widget) {
                    self.feedbackWidget = widget;
                    if ($('#widget-status-' + id).attr('checked') === 'checked') {
                        $('#widget-status-' + id).removeAttr('checked');
                        self.feedbackWidget.is_active = false;
                    }
                    else {
                        $('#widget-status-' + id).attr('checked', 'checked');
                        self.feedbackWidget.is_active = true;
                    }

                    self.feedbackWidget.target_pages = JSON.stringify(self.feedbackWidget.target_pages);
                    if (typeof self.feedbackWidget.target_devices === "object") {
                        self.feedbackWidget.target_devices = JSON.stringify(self.feedbackWidget.target_devices);
                    }
                    starRatingPlugin.editFeedbackWidget(self.feedbackWidget, function(result, status) {
                        if (status === 200) {
                            $(".cly-drawer").removeClass("open");
                            var feedebackResult = self.feedbackWidget.is_active ? 'enabled' : 'disabled';
                            CountlyHelpers.notify({
                                type: 'green',
                                delay: 3000,
                                title: jQuery.i18n.map['feedback.successfully-updated'],
                                message: jQuery.i18n.map['feedback.widget-' + feedebackResult + '-successfully']
                            });
                            if ($('#feedback-page-selector').val().length > 0) {
                                self.feedbackWidget.target_pages = JSON.parse(self.feedbackWidget.target_pages);
                            }
                            if (typeof self.feedbackWidget.target_devices === "object") {
                                self.feedbackWidget.target_devices = JSON.parse(self.feedbackWidget.target_devices);
                            }
                        }
                        else {
                            CountlyHelpers.notify({
                                type: 'red',
                                title: jQuery.i18n.map['feedback.somethings-went-wrong'],
                                delay: 3000,
                                message: jQuery.i18n.map['feedback.update-fail-message']
                            });
                            if ($('#feedback-page-selector').val().length > 0) {
                                self.feedbackWidget.target_pages = JSON.parse(self.feedbackWidget.target_pages);
                            }
                            if (typeof self.feedbackWidget.target_devices === "object") {
                                self.feedbackWidget.target_devices = JSON.parse(self.feedbackWidget.target_devices);
                            }
                        }
                    });
                });
            });

            // jQuery selectize handler for projection input
            $('#feedback-page-selector').selectize({
                persist: true,
                maxItems: null,
                valueField: 'key',
                labelField: 'key',
                searchField: ['key'],
                options: self.feedbackWidget.target_pages,
                render: {
                    item: function(item) {
                        return '<div>' + item.key + '</div>';
                    },
                    option: function(item) {
                        var label = item.key;
                        return '<div>' + '<span class="label">' + label + '</span>' + '</div>';
                    }
                },
                createFilter: function() {
                    return true;
                },
                create: function(input) {
                    var isExist = false;
                    if (typeof self.feedbackWidget.target_pages === "string") {
                        JSON.parse(self.feedbackWidget.target_pages).forEach(function(p) {
                            if (p === input) {
                                isExist = true;
                            }
                        });
                        if (!isExist) {
                            JSON.parse(self.feedbackWidget.target_pages).push(input);
                        }
                        return {
                            "key": input
                        };
                    }
                    else {
                        self.feedbackWidget.target_pages.forEach(function(p) {
                            if (p === input) {
                                isExist = true;
                            }
                        });
                        if (!isExist) {
                            self.feedbackWidget.target_pages.push(input);
                        }
                        return {
                            "key": input
                        };
                    }
                }
            });

            $('body').off("click", ".delete-widget").on("click", ".delete-widget", function() {
                $('.edit-menu').css({
                    "display": "none"
                });
                var targetId = $(this).data('id');
                CountlyHelpers.confirm(jQuery.i18n.map["feedback.delete-a-widget-description"], "popStyleGreen", function(result) {
                    if (result) {
                        starRatingPlugin.removeFeedbackWidget(targetId, $('#popupCheckbox').attr('checked'), function(response, xhrStatus) {
                            if (xhrStatus === 200) {
                                CountlyHelpers.notify({
                                    type: 'green',
                                    delay: 3000,
                                    message: 'Feedback widget removed successfully.'
                                });
                                self.renderFeedbacksTable(true);
                            }
                            else {
                                CountlyHelpers.notify({
                                    type: 'red',
                                    delay: 3000,
                                    message: 'Feedback widget couldn\'t removed.'
                                });
                            }
                        });
                    }
                    if (!result) {
                        return true;
                    }
                }, [jQuery.i18n.map["common.no-dont-delete"], jQuery.i18n.map["feedback.yes-delete-widget"]], {title: jQuery.i18n.map["feedback.delete-a-widget"], image: "delete-an-app"});
            });
            $('body').off("click", ".copy-widget-id").on("click", ".copy-widget-id", function() {
                $('.edit-menu').css({
                    "display": "none"
                });
                CountlyHelpers.notify({
                    type: 'green',
                    title: 'Success',
                    delay: 3000,
                    message: jQuery.i18n.map['feedback.widget-id-copied']
                });
            });
            $(".check").click(function() {
                var classes = $(this).attr('class');
                var id = $(this).attr('id');
                var count = 0;
                for (var keyName in self.lineChartSelect) {
                    if (self.lineChartSelect[keyName]) {
                        count++;
                    }
                }
                if (classes.indexOf('selected') >= 0) {
                    if (count === 1) {
                        return;
                    }
                    $(this).removeClass("selected");
                }
                else {
                    $(this).addClass("selected");
                }
                self.lineChartSelect[id] = !self.lineChartSelect[id];
                self.updateViews();
            });
            $('#all-pages').on('click', function() {
                $(this).addClass('selected');
                $('#selected-pages').removeClass('selected');
                $('.feedback-page-selectors').css({
                    "display": "none"
                });
                self.feedbackWidget.target_page = 'all';
            });
            $('#selected-pages').on('click', function() {
                $(this).addClass('selected');
                $('#all-pages').removeClass('selected');
                $('.feedback-page-selectors').css({
                    "display": "block"
                });
                self.feedbackWidget.target_page = 'selected';
                self.feedbackWidget.target_pages.forEach(function(target_page) {
                    $('#feedback-page-selector')[0].selectize.addOption({
                        "key": target_page
                    });
                    $('#feedback-page-selector')[0].selectize.addItem(target_page);
                });
            });
            $('body').off("click", ".star-rating-tab-item").on("click", ".star-rating-tab-item", function() {
                var tabs = [];
                var counter = 0;
                for (var key in $('.star-rating-tab-item')) {
                    if (counter < 3) {
                        tabs.push($('.star-rating-tab-item')[key]);
                        counter++;
                    }
                }
                tabs.forEach(function(el) {
                    $(el).removeClass('star-rating-tab-item-active');
                });
                $(this).addClass('star-rating-tab-item-active');
                self._tab = $(this).data('target');
                if (self._tab === "ratings" || self._tab === "comments") {
                    $("#" + $(this).data('target') + " .widget-header").first().append($("#date-selector"));
                    $("#" + self._tab + " .filter-selector-wrapper").first().append($("#star-rating-selector-form"));
                    self.resetFilterBox();
                }
                app.noHistory('#/analytics/star-rating/' + $(this).data('target'));
                $('.feedback-fields').css({"display": "none"});
                $('#' + $(this).data('target')).css({"display": "block"});
                if ($(this).data('target') === 'ratings') {
                    self.updateViews();
                }
            });
            $('.position-box').on('click', function() {
                var boxes = [];
                var counter = 0;
                for (var key in $('.position-box')) {
                    if (counter < 4) {
                        boxes.push($('.position-box')[key]);
                        counter++;
                    }
                }
                boxes.forEach(function(el) {
                    $(el).removeClass('active-position-box');
                });
                $(this).addClass('active-position-box');
                switch ($(this).data('pos')) {
                case 'mleft':
                    $('#feedback-sticker-on-window').removeClass('bleft');
                    $('#feedback-sticker-on-window').removeClass('bright');
                    $('#feedback-sticker-on-window').removeClass('mright');
                    $('#feedback-sticker-on-window').addClass('mleft');
                    $('#feedback-sticker-on-window').css({
                        "border-top-left-radius": "0px",
                        "border-top-right-radius": "2px",
                        "border-bottom-left-radius": "0px",
                        "border-bottom-right-radius": "2px"
                    });
                    self.feedbackWidget.trigger_position = 'mleft';
                    break;
                case 'mright':
                    $('#feedback-sticker-on-window').removeClass('bleft');
                    $('#feedback-sticker-on-window').removeClass('mleft');
                    $('#feedback-sticker-on-window').removeClass('bright');
                    $('#feedback-sticker-on-window').addClass('mright');
                    $('#feedback-sticker-on-window').css({
                        "border-top-left-radius": "2px",
                        "border-top-right-radius": "0px",
                        "border-bottom-left-radius": "2px",
                        "border-bottom-right-radius": "0px"
                    });
                    self.feedbackWidget.trigger_position = 'mright';
                    break;
                case 'bleft':
                    $('#feedback-sticker-on-window').removeClass('bright');
                    $('#feedback-sticker-on-window').removeClass('mleft');
                    $('#feedback-sticker-on-window').removeClass('mright');
                    $('#feedback-sticker-on-window').addClass('bleft');
                    self.feedbackWidget.trigger_position = 'bleft';
                    $('#feedback-sticker-on-window').css({
                        "border-top-left-radius": "2px",
                        "border-top-right-radius": "2px",
                        "border-bottom-left-radius": "0px",
                        "border-bottom-right-radius": "0px"
                    });
                    break;
                case 'bright':
                    $('#feedback-sticker-on-window').removeClass('bleft');
                    $('#feedback-sticker-on-window').removeClass('mleft');
                    $('#feedback-sticker-on-window').removeClass('mright');
                    $('#feedback-sticker-on-window').addClass('bright');
                    self.feedbackWidget.trigger_position = 'bright';
                    $('#feedback-sticker-on-window').css({
                        "border-top-left-radius": "2px",
                        "border-top-right-radius": "2px",
                        "border-bottom-left-radius": "0px",
                        "border-bottom-right-radius": "0px"
                    });
                    break;
                default:
                    $('#feedback-sticker-on-window').removeClass('bleft');
                    $('#feedback-sticker-on-window').removeClass('mleft');
                    $('#feedback-sticker-on-window').removeClass('bright');
                    $('#feedback-sticker-on-window').addClass('mright');
                    self.feedbackWidget.trigger_position = 'mright';
                    $('#feedback-sticker-on-window').css({
                        "border-top-left-radius": "2px",
                        "border-top-right-radius": "0px",
                        "border-bottom-left-radius": "2px",
                        "border-bottom-right-radius": "0px"
                    });
                    break;
                }
            });
            $("#create-feedback-widget-button").on("click", function() {
                store.set('drawer-type', 'create');
                $('#feedback-drawer-title').html(jQuery.i18n.map['feedback.add-widget']);
                self.feedbackWidget._id = "";
                self.feedbackWidget.popup_header_text = jQuery.i18n.map["feedback.popup-header-text"];
                self.feedbackWidget.popup_comment_callout = jQuery.i18n.map["feedback.popup-comment-callout"];
                self.feedbackWidget.popup_email_callout = jQuery.i18n.map["feedback.popup-email-callout"];
                self.feedbackWidget.popup_button_callout = jQuery.i18n.map["feedback.popup-button-callout"];
                self.feedbackWidget.popup_thanks_message = jQuery.i18n.map["feedback.popup-thanks-message"];
                self.feedbackWidget.trigger_position = 'mright';
                self.feedbackWidget.trigger_bg_color = '#13B94D';
                self.feedbackWidget.trigger_font_color = '#FFFFFF';
                self.feedbackWidget.trigger_button_text = jQuery.i18n.map["feedback.trigger-button-text"];
                self.feedbackWidget.target_devices = {
                    phone: true,
                    desktop: true,
                    tablet: true
                };
                //self.feedbackWidget.target_devices = ["phone", "desktop", "tablet"];
                self.feedbackWidget.target_pages = ["/"];
                self.feedbackWidget.target_page = 'selected';
                self.feedbackWidget.is_active = false;
                // set as empty
                $('#feedback-popup-header-text').val('');
                $('#feedback-popup-comment-text').val('');
                $('#feedback-popup-email-text').val('');
                $('#feedback-popup-button-text').val('');
                $('#feedback-popup-thanks-text').val('');
                $('#counter-for-feedback-popup-header-text').html((($('#feedback-popup-header-text').val().length < 10) ? '0' + $('#feedback-popup-header-text').val().length : $('#feedback-popup-header-text').val().length) + '/45');
                $('#counter-for-feedback-popup-comment-text').html((($('#feedback-popup-comment-text').val().length < 10) ? '0' + $('#feedback-popup-comment-text').val().length : $('#feedback-popup-comment-text').val().length) + '/25');
                $('#counter-for-feedback-popup-email-text').html((($('#feedback-popup-email-text').val().length < 10) ? '0' + $('#feedback-popup-email-text').val().length : $('#feedback-popup-email-text').val().length) + '/35');
                $('#counter-for-feedback-popup-button-text').html((($('#feedback-popup-button-text').val().length < 10) ? '0' + $('#feedback-popup-button-text').val().length : $('#feedback-popup-button-text').val().length) + '/35');
                $('#counter-for-feedback-popup-thanks-text').html((($('#feedback-popup-thanks-text').val().length < 10) ? '0' + $('#feedback-popup-thanks-text').val().length : $('#feedback-popup-thanks-text').val().length) + '/45');
                $('#question-area').html(self.feedbackWidget.popup_header_text);
                $('#countly-feedback-comment-title').html(self.feedbackWidget.popup_comment_callout);
                $('#countly-feedback-email-title').html(self.feedbackWidget.popup_email_callout);
                $('#feedback-submit-button').html(self.feedbackWidget.popup_button_callout);
                $('.success-emotions-area > #question-area').html(self.feedbackWidget.popup_thanks_message);
                $('#feedback-create-step-1').css({
                    "display": "block"
                });
                $(".cly-drawer").removeClass("open editing");
                $("#create-feedback-widget-drawer").addClass("open");
                $(".cly-drawer").find(".close").off("click").on("click", function() {
                    $(this).parents(".cly-drawer").removeClass("open");
                    $("#save-widget").removeClass("disabled");
                    self.step = 1;
                    self.renderFeedbackDrawer();
                });
                $('#feedback-sticker-on-window').css({
                    "background-color": self.feedbackWidget.trigger_bg_color,
                    "color": self.feedbackWidget.trigger_font_color
                });
                $('#feedback_color_preview_1').css({
                    "background-color": self.feedbackWidget.trigger_bg_color
                });
                $('#feedback_color_preview_2').css({
                    "background-color": self.feedbackWidget.trigger_font_color
                });
                $('#feedback-button-color').val(self.feedbackWidget.trigger_bg_color);
                $('#feedback-font-color').val(self.feedbackWidget.trigger_font_color);
                $("#save-widget").off("click").on("click", function() {
                    if ($(this).hasClass("disabled")) {
                        return;
                    }
                    $("#save-widget").addClass("disabled");
                });
                var boxes = [];
                var counter = 0;
                for (var key in $('.device-box')) {
                    if (counter < 3) {
                        boxes.push($('.device-box')[key]);
                        counter++;
                    }
                }
                boxes.forEach(function(el) {
                    $(el).removeClass('active-position-box');
                    if (self.feedbackWidget.target_devices[$(el).data('target')]) {
                        $('#' + $(el).data('target') + '-device-checked').css({"opacity": 1});
                        $(el).addClass('active-position-box');
                    }
                });
                $("#save-widget").addClass('disabled');
            });
            $("body").on("click", ".edit-widget", function() {
                // set drawer type as edit
                $('.edit-menu').css({
                    "display": "none"
                });
                store.set('drawer-type', 'edit');
                $('#feedback-drawer-title').html(jQuery.i18n.map['feedback.edit-widget']);
                // get current widget data from server
                starRatingPlugin.requestSingleWidget($(this).data('id'), function(widget) {
                    self.feedbackWidget = widget;
                    // fill the form inputs
                    $('#feedback-popup-header-text').val(self.feedbackWidget.popup_header_text);
                    $('#feedback-popup-comment-text').val(self.feedbackWidget.popup_comment_callout);
                    $('#feedback-popup-email-text').val(self.feedbackWidget.popup_email_callout);
                    $('#feedback-popup-button-text').val(self.feedbackWidget.popup_button_callout);
                    $('#feedback-popup-thanks-text').val(self.feedbackWidget.popup_thanks_message);
                    // render preview with values of current  widget
                    $('#question-area').html(self.feedbackWidget.popup_header_text);
                    $('#countly-feedback-comment-title').html(self.feedbackWidget.popup_comment_callout);
                    $('#countly-feedback-email-title').html(self.feedbackWidget.popup_email_callout);
                    $('#feedback-submit-button').html(self.feedbackWidget.popup_button_callout);
                    $('.success-emotions-area > #question-area').html(self.feedbackWidget.popup_thanks_message);
                    // set active position for feedback sticker
                    var boxes = [];
                    var counter = 0;
                    for (var key in $('.position-box')) {
                        if (counter < 4) {
                            boxes.push($('.position-box')[key]);
                            counter++;
                        }
                    }
                    boxes.forEach(function(el) {
                        if ($(el).data('pos') === self.feedbackWidget.trigger_position) {
                            $(el).addClass('active-position-box');
                        }
                        else {
                            $(el).removeClass('active-position-box');
                        }
                    });
                    // apply current color values to preview feedback sticker
                    $('#counter-for-feedback-popup-header-text').html($('#feedback-popup-header-text').val().length + '/45');
                    $('#counter-for-feedback-popup-comment-text').html($('#feedback-popup-comment-text').val().length + '/25');
                    $('#counter-for-feedback-popup-email-text').html($('#feedback-popup-email-text').val().length + '/35');
                    $('#counter-for-feedback-popup-button-text').html($('#feedback-popup-button-text').val().length + '/35');
                    $('#counter-for-feedback-popup-thanks-text').html($('#feedback-popup-thanks-text').val().length + '/45');
                    // for f9f9f9 value cases
                    if (self.feedbackWidget.trigger_bg_color.length === 6) {
                        $("#feedback_color_preview_1").css({
                            "background-color": '#' + self.feedbackWidget.trigger_bg_color
                        });
                        $('#feedback-button-color').val('#' + self.feedbackWidget.trigger_bg_color);
                    }
                    // for #f9f9f9 value cases
                    else {
                        $("#feedback_color_preview_1").css({
                            "background-color": self.feedbackWidget.trigger_bg_color
                        });
                        $('#feedback-button-color').val(self.feedbackWidget.trigger_bg_color);
                    }
                    if (self.feedbackWidget.trigger_font_color.length === 6) {
                        $("#feedback_color_preview_2").css({
                            "background-color": '#' + self.feedbackWidget.trigger_font_color
                        });
                        $('#feedback-font-color').val('#' + self.feedbackWidget.trigger_font_color);
                    }
                    else {
                        $("#feedback_color_preview_2").css({
                            "background-color": self.feedbackWidget.trigger_font_color
                        });
                        $('#feedback-font-color').val(self.feedbackWidget.trigger_font_color);
                    }
                    // remove existing position class/or classes
                    $('#feedback-sticker-on-window').removeClass('mleft');
                    $('#feedback-sticker-on-window').removeClass('mright');
                    $('#feedback-sticker-on-window').removeClass('bleft');
                    $('#feedback-sticker-on-window').removeClass('bright');
                    $('#feedback-sticker-on-window').addClass(self.feedbackWidget.trigger_position);

                    $('#feedback-sticker-on-window').html();

                    if (self.feedbackWidget.trigger_bg_color.length > 6) {
                        $('#feedback-sticker-on-window').css({
                            "background-color": self.feedbackWidget.trigger_bg_color
                        });
                    }
                    else {
                        $('#feedback-sticker-on-window').css({
                            "background-color": '#' + self.feedbackWidget.trigger_bg_color
                        });
                    }
                    if (self.feedbackWidget.trigger_font_color.length > 6) {
                        $('#feedback-sticker-on-window').css({
                            "color": self.feedbackWidget.trigger_font_color
                        });
                        path1.style.fill = self.feedbackWidget.trigger_font_color;
                    }
                    else {
                        $('#feedback-sticker-on-window').css({
                            "color": '#' + self.feedbackWidget.trigger_font_color
                        });
                        path1.style.fill = '#' + self.feedbackWidget.trigger_font_color;
                    }
                    // set feedback color values to input
                    $('#feedback-callout-text').val(self.feedbackWidget.trigger_button_text);
                    // set active target device/devices
                    var positionBoxes = [];
                    var positionBoxCounter = 0;
                    for (var box in $('.device-box')) {
                        if (positionBoxCounter < 3) {
                            positionBoxes.push($('.device-box')[box]);
                            positionBoxCounter++;
                        }
                    }
                    positionBoxes.forEach(function(el) {
                        $(el).removeClass('active-position-box');
                        if (self.feedbackWidget.target_devices[$(el).data('target')]) {
                            $('#' + $(el).data('target') + '-device-checked').css({"opacity": 1});
                            $(el).addClass('active-position-box');
                        }
                    });
                    // set target page selector
                    if (self.feedbackWidget.target_page === "all") {
                        $('#all-pages').addClass('selected');
                        $('#selected-pages').removeClass('selected');
                        $('.feedback-page-selectors').css({
                            "display": "none"
                        });
                    }
                    else {
                        $('#selected-pages').addClass('selected');
                        $('#all-pages').removeClass('selected');
                        $('.feedback-page-selectors').css({
                            "display": "block"
                        });
                        var target_pages;
                        // add selected pages into selectize input
                        if (typeof self.feedbackWidget.target_pages === "string") {
                            target_pages = JSON.parse(self.feedbackWidget.target_pages);
                        }
                        else {
                            target_pages = self.feedbackWidget.target_pages;
                        }
                        target_pages.forEach(function(p) {
                            $('#feedback-page-selector')[0].selectize.addOption({
                                "key": p
                            });
                            $('#feedback-page-selector')[0].selectize.addItem(p);
                        });
                    }
                    // set is widget active currently?
                    if (self.feedbackWidget.is_active) {
                        $('#set-feedback-checkbox').removeClass('fa-square-o');
                        $('#set-feedback-checkbox').addClass('fa-check-square');
                    }
                    else {
                        $('#set-feedback-checkbox').removeClass('fa-check-square');
                        $('#set-feedback-checkbox').addClass('fa-square-o');
                    }
                    // set is widget show sticker currently?
                    if (self.feedbackWidget.hide_sticker) {
                        $('#set-feedback-invisible-checkbox').removeClass('fa-square-o');
                        $('#set-feedback-invisible-checkbox').addClass('fa-check-square');
                    }
                    else {
                        $('#set-feedback-invisible-checkbox').removeClass('fa-check-square');
                        $('#set-feedback-invisible-checkbox').addClass('fa-square-o');
                    }
                });
                $('#feedback-create-step-1').css({
                    "display": "block"
                });
                $(".cly-drawer").removeClass("open editing");
                $("#create-feedback-widget-drawer").addClass("open");
                $(".cly-drawer").find(".close").off("click").on("click", function() {
                    $(this).parents(".cly-drawer").removeClass("open");
                    $("#save-widget").removeClass("disabled");
                    self.step = 1;
                    self.renderFeedbackDrawer();
                });
                $("#save-widget").off("click").on("click", function() {
                    if ($(this).hasClass("disabled")) {
                        return;
                    }
                    $("#save-widget").addClass("disabled");
                });
                $("#save-widget").addClass('disabled');
            });
            $('.device-box').on('click', function() {
                // toggle value
                self.feedbackWidget.target_devices[$(this).data('target')] = !self.feedbackWidget.target_devices[$(this).data('target')];
                // check toggled value
                if (self.feedbackWidget.target_devices[$(this).data('target')]) {
                    $(this).addClass('active-position-box');
                    $('#' + $(this).data('target') + '-device-checked').css({
                        opacity: 1
                    });
                }
                else {
                    $('#' + $(this).data('target') + '-device-checked').css({
                        opacity: 0
                    });
                    $(this).removeClass('active-position-box');
                }

                // if toggled value is false
                if (!self.feedbackWidget.target_devices[$(this).data('target')]) {
                    var atLeastOneDevice = false;
                    var targets = [];
                    for (var key in self.feedbackWidget.target_devices) {
                        targets.push(self.feedbackWidget.target_devices[key]);
                    }
                    targets.forEach(function(val) {
                        if (val) {
                            atLeastOneDevice = true;
                        }
                    });
                    if (!atLeastOneDevice) {
                        $('#countly-feedback-next-step').css({"display": "none"});
                        CountlyHelpers.notify({
                            type: 'error',
                            delay: 3000,
                            title: 'Please select device',
                            message: 'At least one device should selected.'
                        });
                    }
                }
                else {
                    $('#countly-feedback-next-step').css({"display": "block"});
                }
            });

            $('#countly-feedback-set-feedback-active').on('click', function() {
                if ($('#countly-feedback-set-feedback-active').data('state') === 1) {
                    $('#set-feedback-checkbox').removeClass('fa-check-square');
                    $('#set-feedback-checkbox').addClass('fa-square-o');
                    $('#countly-feedback-set-feedback-active').data('state', 0);
                    self.feedbackWidget.is_active = false;
                }
                else {
                    $('#set-feedback-checkbox').addClass('fa-check-square');
                    $('#set-feedback-checkbox').removeClass('fa-square-o');
                    $('#countly-feedback-set-feedback-active').data('state', 1);
                    self.feedbackWidget.is_active = true;
                }
            });
            $('#countly-feedback-set-sticker-invisible').on('click', function() {
                if ($('#countly-feedback-set-sticker-invisible').data('state') === 1) {
                    $('#set-feedback-invisible-checkbox').removeClass('fa-check-square');
                    $('#set-feedback-invisible-checkbox').addClass('fa-square-o');
                    $('#countly-feedback-set-sticker-invisible').data('state', 0);
                    self.feedbackWidget.showSticker = false;
                }
                else {
                    $('#set-feedback-invisible-checkbox').addClass('fa-check-square');
                    $('#set-feedback-invisible-checkbox').removeClass('fa-square-o');
                    $('#countly-feedback-set-sticker-invisible').data('state', 1);
                    self.feedbackWidget.showSticker = true;
                }
            });
            $('.feedback-create-side-header-slice').on('click', function() {
                if (store.get('drawer-type') === 'create') {
                    if ((parseInt($(this).data('step')) - parseInt(self.step)) === 1) {
                        self.step = $(this).data('step');
                        self.renderFeedbackDrawer();
                    }
                }
                else {
                    self.step = $(this).data('step');
                    self.renderFeedbackDrawer();
                }
            });
            $('#countly-feedback-back-step').on('click', function() {
                self.step = parseInt(self.step) - 1;
                self.renderFeedbackDrawer();
            });
            $('#countly-feedback-next-step').on('click', function() {
                self.step = parseInt(self.step) + 1;
                if (self.step === 4) {
                    if (store.get('drawer-type') === 'edit') {
                        if ($('#feedback-page-selector').val().split(",").length > 0) {
                            self.feedbackWidget.target_pages = JSON.stringify($('#feedback-page-selector').val().split(","));
                        }
                        else {
                            self.feedbackWidget.target_pages = JSON.stringify(self.feedbackWidget.target_pages);
                        }
                        if (typeof self.feedbackWidget.target_devices === "object") {
                            self.feedbackWidget.target_devices = JSON.stringify(self.feedbackWidget.target_devices);
                        }
                        starRatingPlugin.editFeedbackWidget(self.feedbackWidget, function(result, status) {
                            if (status === 200) {
                                $(".cly-drawer").removeClass("open");
                                CountlyHelpers.notify({
                                    type: 'green',
                                    delay: 3000,
                                    title: jQuery.i18n.map['feedback.successfully-updated'],
                                    message: jQuery.i18n.map['feedback.successfully-updated-message']
                                });
                                if ($('#feedback-page-selector').val().length > 0) {
                                    self.feedbackWidget.target_pages = JSON.parse(self.feedbackWidget.target_pages);
                                }
                                if (typeof self.feedbackWidget.target_devices === "object") {
                                    self.feedbackWidget.target_devices = JSON.parse(self.feedbackWidget.target_devices);
                                }
                                self.renderFeedbacksTable(true);
                            }
                            else {
                                CountlyHelpers.notify({
                                    type: 'red',
                                    delay: 3000,
                                    title: jQuery.i18n.map['feedback.somethings-went-wrong'],
                                    message: jQuery.i18n.map['feedback.update-fail-message']
                                });
                                self.feedbackWidget.target_devices = JSON.parse(self.feedbackWidget.target_devices);
                                if ($('#feedback-page-selector').val().length > 0) {
                                    self.feedback.target_pages = JSON.parse(self.feedback.target_pages);
                                }
                            }
                        });
                        self.step = 1;
                        self.renderFeedbackDrawer();
                    }
                    else {
                        $('#overlay').fadeIn();
                        $('.feedback-modal').css({
                            "display": "block"
                        });
                        if ($('#feedback-page-selector').val().length > 0) {
                            self.feedbackWidget.target_pages = JSON.stringify($('#feedback-page-selector').val().split(","));
                        }
                        else {
                            self.feedbackWidget.target_pages = JSON.stringify(self.feedbackWidget.target_pages);
                        }
                        if (typeof self.feedbackWidget.target_devices === "object") {
                            self.feedbackWidget.target_devices = JSON.stringify(self.feedbackWidget.target_devices);
                        }
                        starRatingPlugin.createFeedbackWidget(self.feedbackWidget, function(result, status) {
                            if (status === 201) {
                                $(".cly-drawer").removeClass("open");
                                $('#widgets-array').html(result.result.split(" ")[3]);
                                $('.feedback-copy-code').attr("data-clipboard-text", "Countly.q.push(['enable_feedback',{'widgets':['" + result.result.split(" ")[3] + "']}]);");
                                CountlyHelpers.notify({
                                    type: 'green',
                                    delay: 3000,
                                    title: jQuery.i18n.map['feedback.successfully-created'],
                                    message: jQuery.i18n.map['feedback.successfully-created-message']
                                });
                                if ($('#feedback-page-selector').val().length > 0) {
                                    self.feedbackWidget.target_pages = JSON.parse(self.feedbackWidget.target_pages);
                                }
                                if (typeof self.feedbackWidget.target_devices === "object") {
                                    self.feedbackWidget.target_devices = JSON.parse(self.feedbackWidget.target_devices);
                                }
                                self.renderFeedbacksTable(true);
                            }
                            else {
                                CountlyHelpers.notify({
                                    type: 'red',
                                    delay: 3000,
                                    title: jQuery.i18n.map['feedback.somethings-went-wrong'],
                                    message: jQuery.i18n.map['feedback.create-fail-message']
                                });
                                if ($('#feedback-page-selector').val().length > 0) {
                                    self.feedbackWidget.target_pages = JSON.parse(self.feedbackWidget.target_pages);
                                }
                                else {
                                    self.feedbackWidget.target_pages = JSON.parse(self.feedbackWidget.target_pages);
                                }
                                if (typeof self.feedbackWidget.target_devices === "object") {
                                    self.feedbackWidget.target_pages = JSON.parse(self.feedbackWidget.target_pages);
                                }
                            }
                        });
                        self.step = 1;
                        self.renderFeedbackDrawer();
                    }
                }
                self.renderFeedbackDrawer();
            });
            $('#feedback-popup-header-text').on('keyup', function() {
                self.feedbackModalToggle('popup');
                if ($(this).val().length > 46) {
                    $(this).val($(this).val().substr(0, 45));
                    $('#counter-for-' + $(this).attr('id')).html('45/45');
                    $(this).addClass('feedback-input-validation-error');
                    $('#countly-feedback-next-step').attr('disabled', 'disabled');
                }
                else {
                    $('#counter-for-' + $(this).attr('id')).html($(this).val().length + '/' + 45);
                    $(this).removeClass('feedback-input-validation-error');
                    $('#countly-feedback-next-step').removeAttr('disabled');
                    if ($(this).val() === '') {
                        self.feedbackWidget.popup_header_text = jQuery.i18n.map['feedback.popup-header-text'];
                        $('#question-area').html(self.feedbackWidget.popup_header_text);
                    }
                    else {
                        self.feedbackWidget.popup_header_text = $(this).val();
                        $('#question-area').html($(this).val());
                    }
                }
            });
            $('#feedback-trigger-text').on('keyup', function() {
                if ($(this).val().length > 20) {
                    $(this).val($(this).val().substr(0, 20));
                    $('#counter-for-' + $(this).attr('id')).html('20/20');
                    $(this).addClass('feedback-input-validation-error');
                    $('#countly-feedback-next-step').attr('disabled', 'disabled');
                }
                else {
                    $('#counter-for-' + $(this).attr('id')).html($(this).val().length + '/' + 20);
                    $(this).removeClass('feedback-input-validation-error');
                    $('#countly-feedback-next-step').removeAttr('disabled');
                    if ($(this).val() === '') {
                        self.feedbackWidget.trigger_button_text = jQuery.i18n.map['feedback.trigger-button-text'];
                        $('#feedback-sticker-on-window').html('<svg id="feedback-sticker-svg" aria-hidden="true" data-prefix="far" data-icon="grin" class="svg-inline--fa fa-grin fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512"><path id="path1" fill="white" d="M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm0 448c-110.3 0-200-89.7-200-200S137.7 56 248 56s200 89.7 200 200-89.7 200-200 200zm105.6-151.4c-25.9 8.3-64.4 13.1-105.6 13.1s-79.6-4.8-105.6-13.1c-9.9-3.1-19.4 5.4-17.7 15.3 7.9 47.1 71.3 80 123.3 80s115.3-32.9 123.3-80c1.6-9.8-7.7-18.4-17.7-15.3zM168 240c17.7 0 32-14.3 32-32s-14.3-32-32-32-32 14.3-32 32 14.3 32 32 32zm160 0c17.7 0 32-14.3 32-32s-14.3-32-32-32-32 14.3-32 32 14.3 32 32 32z"></path></svg> ' + self.feedbackWidget.trigger_button_text);
                    }
                    else {
                        self.feedbackWidget.trigger_button_text = $(this).val();
                        $('#feedback-sticker-on-window').html('<svg id="feedback-sticker-svg" aria-hidden="true" data-prefix="far" data-icon="grin" class="svg-inline--fa fa-grin fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512"><path id="path1" fill="white" d="M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm0 448c-110.3 0-200-89.7-200-200S137.7 56 248 56s200 89.7 200 200-89.7 200-200 200zm105.6-151.4c-25.9 8.3-64.4 13.1-105.6 13.1s-79.6-4.8-105.6-13.1c-9.9-3.1-19.4 5.4-17.7 15.3 7.9 47.1 71.3 80 123.3 80s115.3-32.9 123.3-80c1.6-9.8-7.7-18.4-17.7-15.3zM168 240c17.7 0 32-14.3 32-32s-14.3-32-32-32-32 14.3-32 32 14.3 32 32 32zm160 0c17.7 0 32-14.3 32-32s-14.3-32-32-32-32 14.3-32 32 14.3 32 32 32z"></path></svg> ' + self.feedbackWidget.trigger_button_text);
                    }
                }
            });
            $('#feedback-popup-comment-text').on('keyup', function() {
                self.feedbackModalToggle('popup');
                if ($(this).val().length > 25) {
                    $(this).val($(this).val().substr(0, 25));
                    $('#counter-for-' + $(this).attr('id')).html('25/25');
                    $(this).addClass('feedback-input-validation-error');
                    $('#countly-feedback-next-step').attr('disabled', 'disabled');
                }
                else {
                    $('#counter-for-' + $(this).attr('id')).html($(this).val().length + '/' + 25);
                    $('#feedback-create-step-1 > div:nth-child(2) > label').html(jQuery.i18n.map['feedback.popup-comment-callout']);
                    $(this).removeClass('feedback-input-validation-error');
                    $('#countly-feedback-next-step').removeAttr('disabled');
                    if ($(this).val() === '') {
                        $('#countly-feedback-comment-title').html(jQuery.i18n.map['feedback.popup-comment-callout']);
                        self.feedbackWidget.popup_comment_callout = jQuery.i18n.map['feedback.popup-comment-callout'];
                    }
                    else {
                        $('#countly-feedback-comment-title').html($(this).val());
                        self.feedbackWidget.popup_comment_callout = $(this).val();
                    }
                }
            });
            $('#feedback-popup-email-text').on('keyup', function() {
                self.feedbackModalToggle('popup');
                $('#counter-for-' + $(this).attr('id')).css({
                    "display": "block"
                });
                if ($(this).val().length > 35) {
                    $(this).val($(this).val().substr(0, 35));
                    $('#counter-for-' + $(this).attr('id')).html('35/35');
                    $(this).addClass('feedback-input-validation-error');
                    $('#countly-feedback-next-step').attr('disabled', 'disabled');
                }
                else {
                    $('#counter-for-' + $(this).attr('id')).html($(this).val().length + '/' + 35);
                    $(this).removeClass('feedback-input-validation-error');
                    $('#countly-feedback-next-step').removeAttr('disabled');
                    if ($(this).val() === '') {
                        $('#countly-feedback-email-title').html(jQuery.i18n.map['feedback.popup-email-callout']);
                        self.feedbackWidget.popup_email_callout = jQuery.i18n.map['feedback.popup-email-callout'];
                    }
                    else {
                        $('#countly-feedback-email-title').html($(this).val());
                        self.feedbackWidget.popup_email_callout = $(this).val();
                    }
                }
            });
            $('#feedback-popup-button-text').on('keyup', function() {
                self.feedbackModalToggle('popup');
                if ($(this).val().length > 35) {
                    $(this).val($(this).val().substr(0, 35));
                    $('#counter-for-' + $(this).attr('id')).html('35/35');
                    $(this).addClass('feedback-input-validation-error');
                    $('#countly-feedback-next-step').attr('disabled', 'disabled');
                }
                else {
                    $('#counter-for-' + $(this).attr('id')).html($(this).val().length + '/' + 35);
                    $(this).removeClass('feedback-input-validation-error');
                    $('#countly-feedback-next-step').removeAttr('disabled');
                    if ($(this).val() === '') {
                        $('#feedback-submit-button').html(jQuery.i18n.map['feedback.popup-button-callout']);
                        self.feedbackWidget.popup_button_callout = jQuery.i18n.map['feedback.popup-button-callout'];
                    }
                    else {
                        self.feedbackWidget.popup_button_callout = $(this).val();
                        $('#feedback-submit-button').html($(this).val());
                    }
                }
            });
            $('.text-input-in-counter').on('focus', function() {
                $('#counter-for-' + $(this).attr('id')).css({
                    "display": "block"
                });
            });
            $('.text-input-in-counter').on('focusout', function() {
                $('#counter-for-' + $(this).attr('id')).css({
                    "display": "none"
                });
            });
            $('#feedback-popup-thanks-text').on('keyup', function() {
                self.feedbackModalToggle('success');
                if ($(this).val().length > 45) {
                    $(this).val($(this).val().substr(0, 45));
                    $('#counter-for-' + $(this).attr('id')).html('45/45');
                    $(this).addClass('feedback-input-validation-error');
                    $('#countly-feedback-next-step').attr('disabled', 'disabled');
                }
                else {
                    $('#counter-for-' + $(this).attr('id')).html($(this).val().length + '/' + 45);
                    $('#countly-feedback-next-step').removeAttr('disabled');
                    $(this).removeClass('feedback-input-validation-error');
                    if ($(this).val() === '') {
                        $('.success-emotions-area > #question-area').html(jQuery.i18n.map['feedback.popup-thanks-message']);
                        self.feedbackWidget.popup_thanks_message = jQuery.i18n.map['feedback.popup-thanks-message'];
                    }
                    else {
                        $('.success-emotions-area > #question-area').html($(this).val());
                        self.feedbackWidget.popup_thanks_message = $(this).val();
                    }
                }
            });
            $('#popup-modal').on('click', function() {
                self.feedbackModalToggle('popup');
            });
            $('#thanks-modal').on('click', function() {
                self.feedbackModalToggle('success');
                $('#thanks-modal').css({
                    "border-left": "1px solid #2eb52b"
                });
            });
            $('#set-feedback-active').on('change', function() {
                self.feedbackWidget.is_active = ($(this).attr('checked')) ? true : false;
            });
        }
        if (self._tab === 'ratings') {
            this.updateViews();
        }
    },
    feedbackModalToggle: function(which) {
        if (this.currentModal !== which) {
            this.currentModal = which;
            if (which === 'popup') {
                $('.feedback-back').css({
                    'transform': 'rotateY(180deg)'
                });
                $('.feedback-front').css({
                    'transform': 'rotateY(0deg)'
                });
                $('#thanks-modal').removeClass('feedback-modal-active-right');
                $('#popup-modal').addClass('feedback-modal-active-left');
            }
            else {
                $('.feedback-front').css({
                    'transform': 'rotateY(180deg)'
                });
                $('.feedback-back').css({
                    'transform': 'rotateY(0deg)'
                });
                $('#thanks-modal').addClass('feedback-modal-active-right');
                $('#popup-modal').removeClass('feedback-modal-active-left');
            }
        }
    },
    refresh: function() {
        var self = this;
        $.when(starRatingPlugin.requestPlatformVersion(true), starRatingPlugin.requestRatingInPeriod(true, self.ratingFilter.rating), starRatingPlugin.requestFeedbackData(self.ratingFilter.comments)).done(function() {
            self.updateViews(true);
            self.loadPlatformData();
            self.loadVersionData();
        });
    },
    updateConfig: function(id, value) {
        this.cache[id] = value;
        $("#configs-apply-changes").removeClass("configs-changes");
        if (JSON.stringify(this.configsData) !== JSON.stringify(this.cache)) {
            $("#configs-apply-changes").addClass("configs-changes");
        }
        if ($("#configs-apply-changes").hasClass("configs-changes")) {
            $("#configs-apply-changes").show();
        }
        else if (!$("#configs-apply-changes").hasClass("settings-changes")) {
            $("#configs-apply-changes").hide();
        }
    },
    renderTabView: function(target) {
        var self = this;
        //window.location.hash = '/' + countlyCommon.ACTIVE_APP_ID + '/analytics/star-rating/' + target;
        var tabItems = [];
        var counter = 0;
        for (var key in $('.star-rating-tab-item')) {
            if (counter < 3) {
                tabItems.push($('.star-rating-tab-item')[key]);
                counter++;
            }
        }
        tabItems.forEach(function(el) {
            $(el).removeClass('star-rating-tab-item-active');
        });
        $('#' + target + '-tab').addClass('star-rating-tab-item-active');
        $('.feedback-fields').css({"display": "none"});
        $('#' + target).css({"display": "block"});

        if (self._tab === "ratings" || self._tab === "comments") {
            $("#" + self._tab + " .widget-header").first().append($("#date-selector"));
            $("#" + self._tab + " .filter-selector-wrapper").first().append($("#star-rating-selector-form"));
            self.resetFilterBox();
        }
    }
});
//register views
app.starView = new starView();
app.route("/analytics/star-rating", 'star', function() {
    this.starView._tab = 'ratings';
    this.renderWhenReady(this.starView);
});
app.route("/analytics/star-rating/:tab", 'star', function(tab) {
    if (tab.length === 0) {
        this.starView._tab = 'ratings';
    }
    else {
        this.starView._tab = tab;
    }
    this.renderWhenReady(this.starView);
});
$(document).ready(function() {
    var menu = '<a href="#/analytics/star-rating" class="item">' + '<div class="logo-icon fa fa-globe"></div>' + '<div class="text" data-localize="star.menu-title"></div>' + '</a>';
    $('#web-type #engagement-submenu').append(menu);
    $('#mobile-type #engagement-submenu').append(menu);
});;/*global
    countlyGlobal,
    countlyCommon,
    jQuery
 */
(function(countlySlippingPlugin, $) {
    var _data = {};
    /**
     * This is for initializing model
     * @return {func} ajax func to request data and store in _data
    */
    countlySlippingPlugin.initialize = function() {

        //returning promise
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o/slipping",
            data: {
                api_key: countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID,
                method: 'slipping'
            },
            success: function(json) {
                _data = json;
            }
        });
    };

    countlySlippingPlugin.getData = function() {
        return _data;
    };

}(window.countlySlippingPlugin = window.countlySlippingPlugin || {}, jQuery));;/*global 
    countlyGlobal,
    countlyView,
    countlyCommon,
    jQuery,
    app,
    countlySlippingPlugin,
    slippingView,
    $,
 */
window.slippingView = countlyView.extend({
    beforeRender: function() {
        return $.when(countlySlippingPlugin.initialize()).then(function() {});
    },
    /**
   * This is for rendering chart and table.
   * especially, in the table, if server contains "users" plugin,
   * will show a column enable to show users list by clicking the button.
   * @namespace countlySlippingPlugin
   * @method initialize
   * @param {}
   * @return {func} ajax func to request data and store in _data
   */

    renderCommon: function(isRefresh) {
        var slippingData = countlySlippingPlugin.getData();
        var slippingChartData = {
            "chartDP": {
                "dp": [{
                    "data": [
                        [-1, null]
                    ]
                }],
                "ticks": [
                    [-1, ""]
                ]
            }
        };

        window.slippingDataOnClick = function(timeStamp) {
            var data = {
                "ls": {"$lt": timeStamp}
            };
            window.location.hash = '/users/query/' + JSON.stringify(data);
        };

        for (var i = 0; i < slippingData.length; i++) {
            var item = slippingData[i],
                index = i;

            slippingChartData.chartDP.dp[0].data.push([index, item.count]);
            slippingChartData.chartDP.ticks.push([index, item.period + ' days']);
            item.percentage = "<div style='width:90%;  box-sizing:border-box;'><div class='percent-bar' style='width:" + (item.percentage) + "%;'></div><span style='margin-right:-70px;'>" + item.percentage + "%</span></div>";
            if (countlyGlobal.plugins.indexOf("users") >= 0) {
                if (item.count > 0) {
                    item.userList = "<a class='extable-link table-link green'  href='#/users/query/" + JSON.stringify({ "ls": {"$lt": item.timeStamp}}) + "'   target='_blank'>" +
                "<i class='material-icons'>open_in_new</i></a>" +
                '<a class="table-link green external"   data-localize="userdata.list" onclick="slippingDataOnClick(' + item.timeStamp + ')">View User List</a> ' ;
                }
                else {
                    item.userList = '<span style="float: right;float: right;margin-right: 23px;">' + jQuery.i18n.map['slipping.no-user'] + '</span>';
                }
            }
        }

        slippingChartData.chartDP.dp[0].data.push([slippingData.length, null]);

        this.templateData = {
            "page-title": jQuery.i18n.map["slipping.title"],
            "graph-description": jQuery.i18n.map["slipping.graph-description"],
            "font-logo-class": "fa-sign-out",
            "chart-helper": "durations.chart",
            "table-helper": "durations.table"
        };

        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            countlyCommon.drawGraph(slippingChartData.chartDP, "#dashboard-graph", "bar");

            var columnsDefine = [
                { "mData": "period", sType: "numeric", "sTitle": jQuery.i18n.map["slipping.period"], "sWidth": "20%" },
                {
                    "mData": "count",
                    "sType": "numeric",
                    "sWidth": "20%",
                    "sTitle": jQuery.i18n.map["slipping.count"],
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    }
                },
                { "mData": "percentage", sType: "string", "sTitle": jQuery.i18n.map["slipping.percentage"] },
            ];

            if (countlyGlobal.plugins.indexOf("users") >= 0) {
                columnsDefine.push(
                    { "mData": "userList", sType: "string", "bSortable": false, "sTitle": '' }
                );
            }

            this.dtable = $('#dataTableOne').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": slippingData,
                "aoColumns": columnsDefine
            }));

            $("#date-selector").hide();
            $(".dataTables_length").remove();
        }
    }
});

//register views
app.slippingView = new slippingView();

app.route("/analytics/slipping-away", 'browser', function() {
    this.renderWhenReady(this.slippingView);
});

$(document).ready(function() {
    var menu = '<a href="#/analytics/slipping-away" class="item">' +
    '<div class="logo-icon fa fa-globe"></div>' +
    '<div class="text" data-localize="slipping.title"></div>' +
    '</a>';

    $('#web-type #engagement-submenu').append(menu);
    $('#mobile-type #engagement-submenu').append(menu);
});;/*global countlyCommon, countlyGlobal, countlyEvent, jQuery, _*/
(function(countlyEventCompare, $) {
    //Private Properties
    // eslint-disable-next-line
    var _periodObj = {},
        _dbOb = {},
        _activeAppKey = 0,
        _initialized = false,
        _period = null,
        _events = [];

    //Public Methods
    countlyEventCompare.initialize = function(forEvents) {
        if (_initialized &&
            _period === countlyCommon.getPeriodForAjax() &&
            _activeAppKey === countlyCommon.ACTIVE_APP_KEY &&
            _.isEqual(_events, forEvents)) {
            return this.refresh();
        }

        if (!forEvents || forEvents.length === 0) {
            return true;
        }

        _period = countlyCommon.getPeriodForAjax();

        if (!countlyCommon.DEBUG) {
            _activeAppKey = countlyCommon.ACTIVE_APP_KEY;
            _initialized = true;
            _events = _.clone(forEvents);

            return $.when(
                $.ajax({
                    type: "GET",
                    url: countlyCommon.API_PARTS.data.r + "/compare/events",
                    data: {
                        "api_key": countlyGlobal.member.api_key,
                        "app_id": countlyCommon.ACTIVE_APP_ID,
                        "period": _period,
                        "events": JSON.stringify(forEvents)
                    },
                    dataType: "jsonp",
                    success: function(json) {
                        _dbOb = json;
                    }
                })
            ).then(function() {
                return true;
            });
        }
        else {
            _dbOb = {"2012": {}};
            return true;
        }
    };

    countlyEventCompare.refresh = function() {
        _periodObj = countlyCommon.periodObj;

        if (!countlyCommon.DEBUG) {

            if (_activeAppKey !== countlyCommon.ACTIVE_APP_KEY) {
                _activeAppKey = countlyCommon.ACTIVE_APP_KEY;
                return this.initialize();
            }

            if (!_initialized) {
                return this.initialize();
            }

            return $.when(
                $.ajax({
                    type: "GET",
                    url: countlyCommon.API_PARTS.data.r + "/compare/events",
                    data: {
                        "api_key": countlyGlobal.member.api_key,
                        "app_id": countlyCommon.ACTIVE_APP_ID,
                        "action": "refresh",
                        "events": JSON.stringify(_events)
                    },
                    dataType: "jsonp",
                    success: function(json) {
                        var events = _.keys(json);

                        for (var i = 0; i < events.length; i++) {
                            countlyCommon.extendDbObj(_dbOb[events[i]], json[events[i]]);
                        }
                    }
                })
            ).then(function() {
                return true;
            });
        }
        else {
            _dbOb = {"2012": {}};

            return true;
        }
    };

    countlyEventCompare.reset = function() {
        _periodObj = {};
        _dbOb = {};
        _activeAppKey = 0;
        _initialized = false;
        _period = null;
        _events = [];
    };

    countlyEventCompare.getChartData = function(forEvent, metric) {
        var chartData = [
                { data: [], label: forEvent, color: '#DDDDDD', mode: "ghost" },
                { data: [], label: forEvent, color: '#333933' }
            ],
            dataProps = [
                {
                    name: "p" + metric,
                    func: function(dataObj) {
                        return dataObj[metric];
                    },
                    period: "previous"
                },
                { name: metric}
            ];

        return countlyCommon.extractChartData(_dbOb[forEvent], countlyEventCompare.clearObject, chartData, dataProps);
    };

    countlyEventCompare.getTableData = function() {

        var tableData = [];

        for (var i = 0; i < _events.length; i++) {
            var props = countlyEventCompare.getProperties(),
                tableRow = {
                    "id": _events[i],
                    "name": countlyEvent.getEventLongName(_events[i])
                };

            for (var prop in props) {
                var data = countlyEventCompare.getChartData(_events[i], prop, props[prop]),
                    tmpPropVals = _.pluck(data.chartData, prop);

                if (tmpPropVals.length) {
                    tableRow[prop] = _.reduce(tmpPropVals, function(memo, num) {
                        return memo + num;
                    }, 0);
                }
            }

            tableData.push(tableRow);
        }

        return tableData;
    };

    countlyEventCompare.clearObject = function(obj) {
        if (obj) {
            if (!obj.c) {
                obj.c = 0;
            }
            if (!obj.s) {
                obj.s = 0;
            }
            if (!obj.dur) {
                obj.dur = 0;
            }
        }
        else {
            obj = {"c": 0, "s": 0, "dur": 0};
        }

        return obj;
    };

    countlyEventCompare.getProperties = function() {
        return {
            "c": jQuery.i18n.map["events.count"],
            "s": jQuery.i18n.map["events.sum"],
            "dur": jQuery.i18n.map["events.dur"]
        };
    };

})(window.countlyEventCompare = window.countlyEventCompare || {}, jQuery);


(function(countlyAppCompare, $) {

    //Private Properties
    var _appData = {},
        _sessions = {},
        _period = null;

    //Public Methods
    countlyAppCompare.initialize = function(forApps) {
        if (!forApps || forApps.length === 0) {
            return true;
        }

        _period = countlyCommon.getPeriodForAjax();

        return $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r + "/compare/apps",
            data: {
                "api_key": countlyGlobal.member.api_key,
                "apps": JSON.stringify(forApps),
                "period": _period
            },
            dataType: "jsonp",
            success: function(json) {

                _appData.all = {};
                _appData.all.id = "all";
                _appData.all.name = jQuery.i18n.map["compare.apps.all-apps"] || "All apps";
                _appData.all.sessions = {total: 0, trend: 0};
                _appData.all.users = {total: 0, trend: 0};
                _appData.all.newusers = {total: 0, trend: 0};
                _appData.all.duration = {total: 0, trend: 0};
                _appData.all.avgduration = {total: 0, trend: 0};
                _sessions.all = {};

                for (var i = 0; i < json.length; i++) {
                    var appID = json[i].id;
                    _appData[appID] = json[i];
                    _appData[appID].duration.total = 0;
                    _appData[appID].avgduration.total = 0;
                    _sessions[appID] = {};

                    for (var metric in json[i].charts) {
                        var key = "draw-" + metric;
                        _sessions[appID][key] = {
                            data: json[i].charts[metric]
                        };

                        for (var j = 0, l = json[i].charts[metric].length; j < l; j++) {

                            if (!_sessions.all[key]) {
                                _sessions.all[key] = {};
                                _sessions.all[key].data = [];
                            }
                            if (!_sessions.all[key].data[j]) {
                                _sessions.all[key].data[j] = [0, 0];
                            }
                            _sessions.all[key].data[j][0] = _sessions[appID][key].data[j][0];
                            _sessions.all[key].data[j][1] += parseFloat(_sessions[appID][key].data[j][1]);
                            if (key === "draw-total-time-spent") {
                                _appData.all.duration.total += parseFloat(_sessions[appID][key].data[j][1]);
                                _appData[appID].duration.total += parseFloat(_sessions[appID][key].data[j][1]);
                            }
                        }
                    }

                    _appData.all.sessions.total += _appData[appID].sessions.total;
                    _appData.all.users.total += _appData[appID].users.total;
                    _appData.all.newusers.total += _appData[appID].newusers.total;
                    _appData.all.sessions.trend += fromShortNumber(_appData[appID].sessions.change);
                    _appData.all.users.trend += fromShortNumber(_appData[appID].users.change);
                    _appData.all.newusers.trend += fromShortNumber(_appData[appID].newusers.change);
                    _appData.all.duration.trend += fromShortNumber(_appData[appID].duration.change);
                    _appData.all.avgduration.trend += fromShortNumber(_appData[appID].avgduration.change);
                    _appData[appID].avgduration.total = (_appData[appID].sessions.total === 0) ? 0 : _appData[appID].duration.total / _appData[appID].sessions.total;
                }

                for (var current in _appData.all) {
                    if (_appData.all[current].trend < 0) {
                        _appData.all[current].trend = "d";
                    }
                    else {
                        _appData.all[current].trend = "u";
                    }
                }

                _appData.all.avgduration.total = (_appData.all.sessions.total === 0) ? 0 : _appData.all.duration.total / _appData.all.sessions.total;
            }
        });
    };

    countlyAppCompare.refresh = function() {
        return true;
    };

    countlyAppCompare.reset = function() {
        _appData = {};
        _sessions = {};
    };

    countlyAppCompare.getChartData = function(forApp, metric) {
        if (_sessions[forApp] && _sessions[forApp][metric] && _sessions[forApp][metric].data) {
            return {
                chartDP: [[], {
                    data: _sessions[forApp][metric].data,
                    label: countlyGlobal.apps[forApp].name
                }]
            };
        }
        else {
            return {
                chartDP: [[], []]
            };
        }
    };

    countlyAppCompare.getTableData = function() {
        var data = [];

        for (var i in _appData) {
            data.push(_appData[i]);
        }

        return data;
    };

    countlyAppCompare.getProperties = function() {
        return {
            "draw-total-sessions": jQuery.i18n.map["common.total-sessions"],
            "draw-total-users": jQuery.i18n.map["compare.apps.total-unique"],
            "draw-new-users": jQuery.i18n.map["compare.apps.new-unique"],
            "draw-total-time-spent": jQuery.i18n.map["dashboard.time-spent"],
            "draw-time-spent": jQuery.i18n.map["dashboard.avg-time-spent"]
        };
    };

    var fromShortNumber = function(str) {
        if (str === "NA" || str === "∞") {
            return 0;
        }
        else {
            str = str.slice(0, -1);
            var rate = 1;
            if (str.slice(-1) === "K") {
                str = str.slice(0, -1);
                rate = 1000;
            }
            else if (str.slice(-1) === "M") {
                str = str.slice(0, -1);
                rate = 1000000;
            }
            return parseFloat(str) * rate;
        }
    };

}(window.countlyAppCompare = window.countlyAppCompare || {}, jQuery));;/*global $, jQuery, countlyCommon, countlyView, CountlyHelpers, countlyGlobal, app, _, Handlebars, CompareView, countlyEventCompare, countlyAppCompare, countlyEvent*/
window.CompareView = countlyView.extend({
    selectedMetric: null,
    selectedAlt: null,
    alternatives: [],
    selectedAlts: [],
    alternativeIDs: {},
    lastAlternativeID: 0,
    viewHelper: null,
    setHelper: function(inViewHelper) {
        this.selectedMetric = null;
        this.selectedAlt = null;
        this.alternatives = [];
        this.selectedAlts = [];
        this.alternativeIDs = {};
        this.lastAlternativeID = 0;

        inViewHelper.model.reset();
        this.viewHelper = inViewHelper;
        this.selectedMetric = this.viewHelper.defaultMetric;
    },
    beforeRender: function() {
        var self = this;

        return $.when(
            $.get(countlyGlobal.path + '/compare/templates/compare.html', function(src) {
                self.template = Handlebars.compile(src);
            }),
            self.viewHelper.model.initialize(),
            self.viewHelper.beforeRender()
        ).then(function() {});
    },
    renderCommon: function(isRefresh) {
        var self = this;
        var props = self.viewHelper.model.getProperties();
        var metrics = [];

        for (var i in props) {
            metrics.push({
                "title": props[i],
                "id": "metric-" + i
            });
        }

        this.templateData = {
            "page-title": self.viewHelper.title,
            "max-alternatives": self.viewHelper.maxAlternatives,
            "back-link": self.viewHelper.backLink,
            "multi-select-text": jQuery.i18n.prop("compare.limit", self.viewHelper.maxAlternatives, self.viewHelper.compareText),
            "metrics": metrics,
            "alternatives": self.viewHelper.getAlternatives()
        };

        if (!isRefresh) {
            if (self.viewHelper && self.viewHelper.onRender) {
                self.viewHelper.onRender();
            }

            self.el.html(this.template(this.templateData));

            this.dtable = $('.d-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": self.viewHelper.model.getTableData(),
                "fnRowCallback": function(nRow, aData) {
                    if (!self.alternativeIDs[aData.id]) {
                        self.alternativeIDs[aData.id] = "alt-" + self.lastAlternativeID;
                        self.lastAlternativeID++;
                    }

                    $(nRow).attr("id", self.alternativeIDs[aData.id]);
                    $(nRow).data("id", aData.id);
                },
                "aoColumns": self.viewHelper.getTableColumns()
            }));

            $(".d-table").stickyTableHeaders();

            $('.views-table tbody').on("click", "tr", function() {
                var row = $(this);

                self.selectedAlt = row.data("id");

                if (_.contains(self.selectedAlts, self.selectedAlt)) {
                    var index = self.selectedAlts.indexOf(self.selectedAlt);
                    self.selectedAlts.splice(index, 1);
                    row.find(".color").css("background-color", "transparent");
                }
                else if (self.selectedAlts.length < countlyCommon.GRAPH_COLORS.length) {
                    self.selectedAlts.push(self.selectedAlt);
                }

                if (self.selectedAlts.length === 0) {
                    $("#empty-graph").show();
                }
                else {
                    $("#empty-graph").hide();
                }

                self.drawGraph();
            });

            $("#metric-" + this.selectedMetric).parents(".big-numbers").addClass("active");

            $(".big-numbers .inner").click(function() {
                $(".big-numbers").removeClass("active");
                $(".big-numbers .select").removeClass("selected");
                $(this).parent(".big-numbers").addClass("active");
                $(this).find('.select').addClass("selected");

                var elID = $(this).find('.select').attr("id").replace("metric-", "");

                if (self.selectedMetric === elID) {
                    return true;
                }

                self.selectedMetric = elID;
                self.drawGraph();
            });

            $("#compare-button").on("click", function() {
                if ($(this).hasClass("disabled")) {
                    return;
                }

                $(this).addClass("disabled");

                var forAlternatives = $("#alternative-selector").data("value");

                self.alternatives = forAlternatives;
                self.selectedAlts = forAlternatives;

                $.when(self.viewHelper.model.initialize(forAlternatives)).then(function() {
                    CountlyHelpers.refreshTable(self.dtable, self.viewHelper.model.getTableData());
                    self.drawGraph();
                });
            });

            $("#alternative-selector").on("cly-multi-select-change", function() {
                var selected = $("#alternative-selector").data("value");

                if (selected.length > 0) {
                    $("#compare-button").removeClass("disabled");
                }
                else {
                    $("#compare-button").addClass("disabled");
                }
            });

            $("#alternative-selector").trigger("click");
            this.drawGraph();
        }
    },
    drawGraph: function() {
        var dp = [];

        for (var i = 0; i < this.selectedAlts.length; i++) {
            var color = countlyCommon.GRAPH_COLORS[i];
            var data = this.viewHelper.model.getChartData(this.selectedAlts[i], this.selectedMetric).chartDP;

            if (data) {
                data[1].color = color;

                $("#" + this.alternativeIDs[this.selectedAlts[i]] + " .color").css("background-color", color);

                if (this.selectedAlts.length === 1 && !_.isEmpty(data[0])) {
                    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
                    data[0].color = "rgba(" + parseInt(result[1], 16) + "," + parseInt(result[2], 16) + "," + parseInt(result[3], 16) + ",0.5" + ")";

                    dp.push(data[0]);
                }

                if (data && data[1]) {
                    dp.push(data[1]);
                }
            }
        }

        if (this.selectedAlts.length === 0) {
            $("#empty-graph").show();
        }
        else {
            $("#empty-graph").hide();
        }

        countlyCommon.drawTimeGraph(dp, "#dashboard-graph");
    },
    refresh: function() {
        var self = this;

        $.when(self.viewHelper.model.refresh()).then(function() {
            if (app.activeView !== self) {
                return false;
            }

            CountlyHelpers.refreshTable(self.dtable, self.viewHelper.model.getTableData());
            self.drawGraph();
        });
    },
    dateChanged: function() {
        var self = this;
        if (this.viewHelper.initOnDateChange) {
            var forAlternatives = $("#alternative-selector").data("value");

            $.when(self.viewHelper.model.initialize(forAlternatives)).then(function() {
                CountlyHelpers.refreshTable(self.dtable, self.viewHelper.model.getTableData());
                self.drawGraph();
            });
        }
        else {
            this.refresh();
        }
    },
    destroy: function() {
        if (this.viewHelper && this.viewHelper.onDestroy) {
            this.viewHelper.onDestroy();
        }
    }
});

app.compareView = new CompareView();

/* Compare for the events view */
app.addPageScript("/analytics/events", function() {
    $("#event-nav-head").after(
        "<a href='#/analytics/events/compare'>" +
            "<div id='compare-events' class='event-container'>" +
                "<div class='icon'></div>" +
                "<div class='name'>" + jQuery.i18n.map["compare.button"] + "</div>" +
            "</div>" +
        "</a>"
    );
});

var compareEventsViewHelper = {
    title: jQuery.i18n.map["compare.events.title"],
    model: countlyEventCompare,
    defaultMetric: "c",
    backLink: {
        href: "#/analytics/events",
        text: jQuery.i18n.map["compare.events.back"]
    },
    compareText: jQuery.i18n.map["compare.events.limit"],
    maxAlternatives: 10,
    beforeRender: function() {

    },
    getTableColumns: function() {
        return [
            {
                "mData": function(row, type) {

                    if (type === "display") {
                        return "<div class='color'></div><span class='name'>" + row.name + "</span>";
                    }
                    else {
                        return row.name;
                    }

                },
                sType: "string",
                "sTitle": jQuery.i18n.map["compare.events.table"],
                "sClass": "break",
                "sWidth": "40%"
            },
            {
                "mData": "c",
                sType: "formatted-num",
                "mRender": function(d) {
                    return countlyCommon.formatNumber(d);
                },
                "sTitle": jQuery.i18n.map["events.count"]
            },
            {
                "mData": "s",
                sType: "formatted-num",
                "mRender": function(d) {
                    return countlyCommon.formatNumber(d);
                },
                "sTitle": jQuery.i18n.map["events.sum"]
            },
            {
                "mData": "dur",
                sType: "formatted-num",
                "mRender": function(d) {
                    return countlyCommon.formatNumber(d);
                },
                "sTitle": jQuery.i18n.map["events.dur"]
            }
        ];
    },
    getAlternatives: function() {
        var events = countlyEvent.getEvents(),
            keys = _.pluck(events, "key"),
            names = _.pluck(events, "name");

        var toReturn = {};

        for (var i = 0; i < keys.length; i++) {
            toReturn[keys[i]] = names[i] || keys[i];
        }

        return toReturn;
    }
};

app.route("/analytics/events/compare", 'views', function() {
    this.compareView.setHelper(compareEventsViewHelper);
    this.renderWhenReady(this.compareView);
});
/* End of compare for the events view */

/* Compare applications */
$(document).ready(function() {
    $("#app-navigation").find(".menu").prepend(
        "<a href='#/compare'>" +
            "<div id='compare-apps' class='action'>" +
                "<div class='icon'></div>" +
                "<span>" + jQuery.i18n.map["compare.button"] + "</span>" +
            "</div>" +
        "</a>"
    );
});

var compareAppsViewHelper = {
    title: jQuery.i18n.map["compare.apps.title"],
    model: countlyAppCompare,
    defaultMetric: "draw-total-sessions",
    compareText: jQuery.i18n.map["compare.apps.limit"],
    maxAlternatives: 10,
    initOnDateChange: true,
    getTableColumns: function() {
        /**
        * This great method returns empty string because of some reason
        * @returns {string} returns empty string
        **/
        function getTrendIcon() {
            // We are returning empty for the trend icon
            return '';
        }

        return [
            {
                "mData": function(row, type) {
                    if (type === "display") {
                        return "<div class='color'></div><span class='name'>" + row.name + "</span>";
                    }
                    else {
                        return row.name;
                    }
                },
                "sType": "string",
                "sTitle": jQuery.i18n.map["compare.apps.app-name"],
                "sClass": "break"
            },
            {
                "mData": function(row, type) {
                    if (type === "display") {
                        return getTrendIcon(row.sessions.trend) + row.sessions.total;
                    }
                    else {
                        return row.sessions.total;
                    }
                },
                "sType": "numeric",
                "sTitle": jQuery.i18n.map["common.total-sessions"]
            },
            {
                "mData": function(row, type) {
                    if (type === "display") {
                        return getTrendIcon(row.users.trend) + row.users.total;
                    }
                    else {
                        return row.users.total;
                    }
                },
                "sType": "numeric",
                "sTitle": jQuery.i18n.map["compare.apps.total-unique"]
            },
            {
                "mData": function(row, type) {
                    if (type === "display") {
                        return getTrendIcon(row.newusers.trend) + row.newusers.total;
                    }
                    else {
                        return row.newusers.total;
                    }
                },
                "sType": "numeric",
                "sTitle": jQuery.i18n.map["compare.apps.new-unique"]
            },
            {
                "mData": function(row, type) {
                    if (type === "display") {
                        return getTrendIcon(row.duration.trend) + countlyCommon.timeString(row.duration.total);
                    }
                    else {
                        return row.duration.total;
                    }
                },
                "sType": "numeric",
                "sTitle": jQuery.i18n.map["dashboard.time-spent"]
            },
            {
                "mData": function(row, type) {
                    if (type === "display") {
                        return getTrendIcon(row.avgduration.trend) + countlyCommon.timeString(row.avgduration.total);
                    }
                    else {
                        return row.avgduration.total;
                    }
                },
                "sType": "numeric",
                "sTitle": jQuery.i18n.map["dashboard.avg-time-spent"]
            }
        ];
    },
    getAlternatives: function() {
        var apps = countlyGlobal.apps,
            ids = _.pluck(apps, "_id"),
            names = _.pluck(apps, "name");

        var toReturn = {};

        for (var i = 0; i < ids.length; i++) {
            toReturn[ids[i]] = names[i] || ids[i];
        }

        return toReturn;
    },
    beforeRender: function() {
        $("body").addClass("compare-apps-view");
        $("#sidebar").addClass("hidden");
        $("#app-navigation").removeClass("active");
        $("#hide-sidebar-button").hide();
    },
    onRender: function() {
        $("#content-container").addClass("cover-left");

        $(".app-navigate").on("click", function() {
            var appId = $(this).data("id");

            if (countlyCommon.ACTIVE_APP_ID === appId) {
                app.navigate("/", true);
            }
        });

        $("#app-navigation").on("click", ".item", function() {
            if ($("body").hasClass("compare-apps-view")) {
                app.navigate("#/", true);
            }
        });
    },
    onDestroy: function() {
        $("body").removeClass("compare-apps-view");
        $("#sidebar").removeClass("hidden");
        $("#content-container").removeClass("cover-left");
        $("#app-navigation").addClass("active");
        $("#hide-sidebar-button").show();
    }
};

app.route("/compare", 'views', function() {
    this.compareView.setHelper(compareAppsViewHelper);
    this.renderWhenReady(this.compareView);
});
/* End of compare applications */;/*global jQuery, countlyCommon, moment, countlyGlobal*/

(function(countlyDataPoints, $) {
    //Private Properties
    var _dataPointsObj = {},
        _periods = [],
        _selectedPeriod = "";

    //Public Methods
    countlyDataPoints.initialize = function() {
        return $.when(
            $.ajax({
                type: "GET",
                url: countlyCommon.API_PARTS.data.r + "/server-stats/data-points",
                data: {
                    "api_key": countlyGlobal.member.api_key
                },
                dataType: "jsonp",
                success: function(json) {
                    countlyDataPoints.reset();

                    _dataPointsObj = json;

                    if (_dataPointsObj["all-apps"]) {
                        for (var period in _dataPointsObj["all-apps"]) {
                            _selectedPeriod = period;

                            _periods.push({
                                period: period,
                                text: moment(period, "YYYY-M").format("MMM YYYY")
                            });
                        }
                    }
                }
            })
        ).then(function() {
            return true;
        });
    };

    countlyDataPoints.refresh = function() {
        return true;
    };

    countlyDataPoints.reset = function() {
        _dataPointsObj = {};
        _periods = [];
        _selectedPeriod = "";
    };

    countlyDataPoints.getTableData = function() {
        var tableData = [];

        for (var app in _dataPointsObj) {
            var periodData = _dataPointsObj[app][_selectedPeriod];

            tableData.push({
                "app-name": getAppName(app),
                "sessions": periodData.sessions,
                "events": periodData.events,
                "data-points": periodData["data-points"]
            });
        }

        return tableData;
    };

    countlyDataPoints.getPeriods = function() {
        for (var i = 0; i < _periods.length; i++) {
            _periods[i].selected = (_periods[i].period === _selectedPeriod);
        }

        return _periods;
    };

    countlyDataPoints.setPeriod = function(period) {
        _selectedPeriod = period;
    };

    /**
    * Returns a human readable name given application id.
    * @param {string} appId - Application Id
    * @returns {string} Returns a readable name
    **/
    function getAppName(appId) {
        if (appId === "all-apps") {
            return jQuery.i18n.map["compare.apps.all-apps"] || "All apps";
        }
        else if (countlyGlobal.apps[appId]) {
            return countlyGlobal.apps[appId].name;
        }
        else {
            return "Deleted app";
        }
    }

})(window.countlyDataPoints = window.countlyDataPoints || {}, jQuery);;/*global $, jQuery, app, countlyView, countlyCommon, countlyGlobal, Handlebars, CountlyHelpers, DataPointsView, countlyDataPoints*/

window.DataPointsView = countlyView.extend({
    beforeRender: function() {
        var self = this;

        return $.when($.get(countlyGlobal.path + '/server-stats/templates/data-points.html', function(src) {
            self.template = Handlebars.compile(src);
        }), countlyDataPoints.initialize()).then(function() {});
    },
    renderCommon: function(isRefresh) {
        var self = this;

        this.templateData = {
            "page-title": jQuery.i18n.map["server-stats.data-points"],
            "periods": countlyDataPoints.getPeriods()
        };

        if (!isRefresh) {
            self.el.html(this.template(this.templateData));

            self.dtable = $('.d-table').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "aaData": countlyDataPoints.getTableData(),
                "aoColumns": [
                    { "mData": "app-name", "sType": "string", "sTitle": jQuery.i18n.map["compare.apps.app-name"] || "App Name", "sClass": "break" },
                    {
                        "mData": "sessions",
                        "sType": "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["sidebar.analytics.sessions"]
                    },
                    {
                        "mData": "events",
                        "sType": "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["sidebar.events"]
                    },
                    {
                        "mData": "data-points",
                        "sType": "formatted-num",
                        "mRender": function(d) {
                            return countlyCommon.formatNumber(d);
                        },
                        "sTitle": jQuery.i18n.map["server-stats.data-points"]
                    }
                ]
            }));

            $(".d-table").stickyTableHeaders();

            $("#data-points-period").on("click", ".button", function() {
                var period = $(this).data("period");
                countlyDataPoints.setPeriod(period);

                CountlyHelpers.refreshTable(self.dtable, countlyDataPoints.getTableData());

                $("#data-points-period").find(".button").removeClass("active");
                $(this).addClass("active");
            });
        }
    },
    refresh: function() {
        return true;
    }
});

app.dataPointsView = new DataPointsView();

app.route("/manage/data-points", '', function() {
    this.renderWhenReady(this.dataPointsView);
});

$(document).ready(function() {
    if (countlyGlobal.member.global_admin) {
        var menu = '<a href="#/manage/data-points" class="item">' +
            '<div class="text" data-localize="server-stats.data-points"></div>' +
            '</a>';

        if ($('#management-submenu .help-toggle').length) {
            $('#management-submenu .help-toggle').before(menu);
        }
        else {
            $('#management-submenu').append(menu);
        }
    }
});;/*global store, countlyCommon, countlyGlobal, $, jQuery*/
(function(countlyDBviewer) {

    //Private Properties
    var _data = {},
        _collections = {},
        _document = {};

    //Public Methods
    countlyDBviewer.initialize = function(app_id) {


        if (typeof app_id === "object") {
            app_id = app_id._id;
        }

        var data = { api_key: countlyGlobal.member.api_key};


        if (app_id && app_id !== "all") {
            data.app_id = app_id;
        }

        if ((app_id === "all" && store.get('dbviewer_selected_app')) && store.get('dbviewer_selected_app') !== "all") {
            data.app_id = store.get('dbviewer_selected_app')._id;
        }

        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o/db",
            data: data,
            success: function(json) {
                _data = json;
                for (var i = 0; i < _data.length; i++) {
                    if (_data[i].collections) {
                        var list = [];
                        for (var j in _data[i].collections) {
                            list.push(j);
                        }
                        list.sort(function(a, b) {
                            if (a < b) {
                                return -1;
                            }
                            if (a > b) {
                                return 1;
                            }
                            return 0;
                        });
                        _data[i].list = list;
                    }
                }
            }
        });
    };

    countlyDBviewer.loadCollections = function(db, collection, page, filter, limit, sort, projection, isSort) {
        limit = limit || 20;
        var skip = (page - 1) * limit;
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + '/o/db/',
            data: {
                dbs: db,
                collection: collection,
                filter: filter || "{}",
                limit: limit,
                sort: (isSort) ? (typeof sort === "string") ? sort : JSON.stringify(sort) : "{}",
                projection: (typeof projection === "string") ? projection : JSON.stringify(projection),
                skip: skip,
                api_key: countlyGlobal.member.api_key
            },
            success: function(json) {
                _collections = json;
            }
        });
    };

    countlyDBviewer.loadDocument = function(db, collection, id) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o/db",
            data: {
                dbs: db,
                collection: collection,
                document: id,
                api_key: countlyGlobal.member.api_key
            },
            success: function(json) {
                _document = json;
            }
        });
    };

    countlyDBviewer.getData = function() {
        return _data;
    };

    countlyDBviewer.getCollections = function() {
        return _collections;
    };

    countlyDBviewer.getDocument = function() {
        return _document;
    };

}(window.countlyDBviewer = window.countlyDBviewer || {}, jQuery));;/**
 * jQuery json-viewer
 * @author: Alexandre Bodelot <alexandre.bodelot@gmail.com>
 */
(function($){

  /**
   * Check if arg is either an array with at least 1 element, or a dict with at least 1 key
   * @return boolean
   */
  function isCollapsable(arg) {
    return arg instanceof Object && Object.keys(arg).length > 0;
  }

  /**
   * Check if a string represents a valid url
   * @return boolean
   */
  function isUrl(string) {
     var regexp = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
     return regexp.test(string);
  }

  /**
   * Transform a json object into html representation
   * @return string
   */
  function json2html(json, options) {
    var html = '';
    if (typeof json === 'string') {
      /* Escape tags */
      json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      if (isUrl(json))
        html += '<a href="' + json + '" class="json-string">' + json + '</a>';
      else
        html += '<span class="json-string">"' + json + '"</span>';
    }
    else if (typeof json === 'number') {
      html += '<span class="json-literal">' + json + '</span>';
    }
    else if (typeof json === 'boolean') {
      html += '<span class="json-literal">' + json + '</span>';
    }
    else if (json === null) {
      html += '<span class="json-literal">null</span>';
    }
    else if (json instanceof Array) {
      if (json.length > 0) {
        html += '[<ol class="json-array">';
        for (var i = 0; i < json.length; ++i) {
          html += '<li>';
          /* Add toggle button if item is collapsable */
          if (isCollapsable(json[i])) {
            html += '<a href class="json-toggle"></a>';
          }
          html += json2html(json[i], options);
          /* Add comma if item is not last */
          if (i < json.length - 1) {
            html += ',';
          }
          html += '</li>';
        }
        html += '</ol>]';
      }
      else {
        html += '[]';
      }
    }
    else if (typeof json === 'object') {
      var key_count = Object.keys(json).length;
      if (key_count > 0) {
        html += '{<ul class="json-dict">';
        for (var key in json) {
          if (json.hasOwnProperty(key)) {
            html += '<li>';
            var keyRepr = options.withQuotes ?
              '<span class="json-string">"' + key + '"</span>' : key;
            /* Add toggle button if item is collapsable */
            if (isCollapsable(json[key])) {
              html += '<a href class="json-toggle">' + keyRepr + '</a>';
            }
            else {
              html += keyRepr;
            }
            html += ': ' + json2html(json[key], options);
            /* Add comma if item is not last */
            if (--key_count > 0)
              html += ',';
            html += '</li>';
          }
        }
        html += '</ul>}';
      }
      else {
        html += '{}';
      }
    }
    return html;
  }

  /**
   * jQuery plugin method
   * @param json: a javascript object
   * @param options: an optional options hash
   */
  $.fn.jsonViewer = function(json, options) {
    options = options || {};

    /* jQuery chaining */
    return this.each(function() {

      /* Transform to HTML */
      var html = json2html(json, options);
      if (isCollapsable(json))
        html = '<a href class="json-toggle"></a>' + html;

      /* Insert HTML in target DOM element */
      $(this).html(html);

      /* Bind click on toggle buttons */
      $(this).off('click');
      $(this).on('click', 'a.json-toggle', function() {
        var target = $(this).toggleClass('collapsed').siblings('ul.json-dict, ol.json-array');
        target.toggle();
        if (target.is(':visible')) {
          target.siblings('.json-placeholder').remove();
        }
        else {
          var count = target.children('li').length;
          var placeholder = count + (count > 1 ? ' items' : ' item');
          target.after('<a href class="json-placeholder">' + placeholder + '</a>');
        }
        return false;
      });

      /* Simulate click on toggle button when placeholder is clicked */
      $(this).on('click', 'a.json-placeholder', function() {
        $(this).siblings('a.json-toggle').click();
        return false;
      });

      if (options.collapsed == true) {
        /* Trigger click to collapse all nodes */
        $(this).find('a.json-toggle').click();
      }
    });
  };
})(jQuery);
;/*globals define, module, require, document*/
(function (root, factory) {
    "use strict";
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module !== 'undefined' && module.exports) {
		module.exports = factory();
    } else {
        root.JsonHuman = factory();
    }
}(this, function () {
    "use strict";

    function makePrefixer(prefix) {
        return function (name) {
            return prefix + "-" + name;
        };
    }

    function isArray(obj) {
        return toString.call(obj) === '[object Array]';
    }

    function sn(tagName, className, data) {
        var result = document.createElement(tagName);

        result.className = className;
        result.appendChild(document.createTextNode("" + data));

        return result;
    }

    function scn(tagName, className, child) {
        var result = document.createElement(tagName),
            i, len;

        result.className = className;

        if (isArray(child)) {
            for (i = 0, len = child.length; i < len; i += 1) {
                result.appendChild(child[i]);
            }
        } else {
            result.appendChild(child);
        }

        return result;
    }

    var toString = Object.prototype.toString,
        prefixer = makePrefixer("jh"),
        p = prefixer,
        ARRAY = 1,
        BOOL = 2,
        INT = 3,
        FLOAT = 4,
        STRING = 5,
        OBJECT = 6,
        FUNCTION = 7,
        UNK = 99,

        STRING_CLASS_NAME = p("type-string"),
        INT_CLASS_NAME = p("type-int") + " " + p("type-number"),
        FLOAT_CLASS_NAME = p("type-float") + " " + p("type-number"),

        OBJECT_CLASS_NAME = p("type-object"),

        OBJ_KEY_CLASS_NAME = p("key") + " " + p("object-key"),
        OBJ_VAL_CLASS_NAME = p("value") + " " + p("object-value"),

        OBJ_EMPTY_CLASS = {"class": p("type-object") + " " + p("empty")},

        FUNCTION_CLASS_NAME = p("type-function"),
        BOOL_CLASS = {"class": p("type-bool")},
        STRING_EMPTY_CLASS = {"class": p("type-string") + " " + p("empty")},

        ARRAY_KEY_CLASS_NAME = p("key") + " " + p("array-key"),
        ARRAY_VAL_CLASS_NAME = p("value") + " " + p("array-value"),

        ARRAY_CLASS_NAME = p("type-array"),
        ARRAY_EMPTY_CLASS = {"class": p("type-array") + " " + p("empty")},

        UNKNOWN_CLASS_NAME = p("type-unk"),

        EMPTY_STRING = sn("span", STRING_EMPTY_CLASS, "(Empty Text)"),
        EMPTY_OBJECT = sn("span", OBJ_EMPTY_CLASS, "(Empty Object)"),
        EMPTY_ARRAY = sn("span", ARRAY_EMPTY_CLASS, "(Empty List)"),

        TRUE = sn("span", BOOL_CLASS, "true"),
        FALSE = sn("span", BOOL_CLASS, "false");

    function getType(obj) {
        var type = typeof obj;

        switch (type) {
        case "boolean":
            return BOOL;
        case "string":
            return STRING;
        case "number":
            return (obj % 1 === 0) ? INT : FLOAT;
        case "function":
            return FUNCTION;
        default:
            if (isArray(obj)) {
                return ARRAY;
            } else if (obj === Object(obj)) {
                return OBJECT;
            } else {
                return UNK;
            }
        }
    }

    function _format(data) {
        var result, container, key, keyNode, valNode, len, childs, tr,
            isEmpty = true,
            accum = [],
            type = getType(data);

        switch (type) {
        case BOOL:
            result = data ? TRUE : FALSE;
            break;
        case STRING:
            if (data === "") {
                result = EMPTY_STRING;
            } else {
                result = sn("span", STRING_CLASS_NAME, data);
            }
            break;
        case INT:
            result = sn("span", INT_CLASS_NAME, data);
            break;
        case FLOAT:
            result = sn("span", FLOAT_CLASS_NAME, data);
            break;
        case OBJECT:
            childs = [];
            for (key in data) {
                isEmpty = false;

                keyNode = sn("th", OBJ_KEY_CLASS_NAME, key);
                valNode = scn("td", OBJ_VAL_CLASS_NAME, _format(data[key]));

                tr = document.createElement("tr");
                tr.appendChild(keyNode);
                tr.appendChild(valNode);

                childs.push(tr);
            }

            if (isEmpty) {
                result = EMPTY_OBJECT;
            } else {
                result = scn("table", OBJECT_CLASS_NAME, childs);
            }
            break;
        case FUNCTION:
            result = sn("span", FUNCTION_CLASS_NAME, data);
            break;
        case ARRAY:
            if (data.length > 0) {
                childs = [];
                for (key = 0, len = data.length; key < len; key += 1) {
                    keyNode = sn("th", ARRAY_KEY_CLASS_NAME, key);
                    valNode = scn("td", ARRAY_VAL_CLASS_NAME, _format(data[key]));

                    tr = document.createElement("tr");
                    tr.appendChild(keyNode);
                    tr.appendChild(valNode);

                    childs.push(tr);
                }

                result = scn("table", ARRAY_CLASS_NAME, childs);
            } else {
                result = EMPTY_ARRAY;
            }
            break;
        default:
            result = sn("span", UNKNOWN_CLASS_NAME, data);
            break;
        }

        return result;
    }

    function format(data, options) {
        options = options || {};
        var result;

        result = _format(data);
        result.className = result.className + " " + prefixer("root");

        return result;
    }

    return {
        format: format
    };
}));;var jsonlite;
(function (jsonlite) {
    function parse(source, jsonObjectFormat) {
        if (typeof jsonObjectFormat === "undefined") { jsonObjectFormat = true; }
        var object_start = jsonObjectFormat ? '{' : '(';
        var object_end = jsonObjectFormat ? '}' : ')';
        var pair_seperator = jsonObjectFormat ? ':' : '=';
        var at = 0;
        var ch = ' ';
        var escapee = {
            '"': '"',
            '\\': '\\',
            '/': '/',
            b: '\b',
            f: '\f',
            n: '\n',
            r: '\r',
            t: '\t'
        };
        var text = source;
        var result = readValue();
        skipWhitespace();
        if(ch) {
            raiseError("Syntax error");
        }
        return result;
        function raiseError(m) {
            throw {
                name: 'SyntaxError',
                message: m,
                at: at,
                text: text
            };
        }
        function next(c) {
            if(c && c !== ch) {
                raiseError("Expected '" + c + "' instead of '" + ch + "'");
            }
            ch = text.charAt(at);
            at += 1;
            return ch;
        }
        function readString() {
            var s = '';
            if(ch === '"') {
                while(next()) {
                    if(ch === '"') {
                        next();
                        return s;
                    }
                    if(ch === '\\') {
                        next();
                        if(ch === 'u') {
                            var uffff = 0;
                            for(var i = 0; i < 4; i += 1) {
                                var hex = parseInt(next(), 16);
                                if(!isFinite(hex)) {
                                    break;
                                }
                                uffff = uffff * 16 + hex;
                            }
                            s += String.fromCharCode(uffff);
                        } else if(typeof escapee[ch] === 'string') {
                            s += escapee[ch];
                        } else {
                            break;
                        }
                    } else {
                        s += ch;
                    }
                }
            }
            raiseError("Bad string");
        }
        function skipWhitespace() {
            while(ch && ch <= ' ') {
                next();
            }
        }
        function readWord() {
            var s = '';
            while(allowedInWord()) {
                s += ch;
                next();
            }
            if(s === "true") {
                return true;
            }
            if(s === "false") {
                return false;
            }
            if(s === "null") {
                return null;
            }
            if(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/.test(s)) {
                return parseFloat(s);
            }
            return s;
        }
        function readArray() {
            var array = [];
            if(ch === '[') {
                next('[');
                skipWhitespace();
                if(ch === ']') {
                    next(']');
                    return array;
                }
                while(ch) {
                    array.push(readValue());
                    skipWhitespace();
                    if(ch === ']') {
                        next(']');
                        return array;
                    }
                    next(',');
                    skipWhitespace();
                }
            }
            raiseError("Bad array");
        }
        function readObject() {
            var o = {
            };
            if(ch === object_start) {
                next(object_start);
                skipWhitespace();
                if(ch === object_end) {
                    next(object_end);
                    return o;
                }
                while(ch) {
                    var key = ch === '"' ? readString() : readWord();
                    if(typeof key !== 'string') {
                        raiseError('Bad object key: ' + key);
                    }
                    skipWhitespace();
                    next(pair_seperator);
                    if(Object.hasOwnProperty.call(o, key)) {
                        raiseError('Duplicate key: "' + key + '"');
                    }
                    o[key] = readValue();
                    skipWhitespace();
                    if(ch === object_end) {
                        next(object_end);
                        return o;
                    }
                    next(',');
                    skipWhitespace();
                }
            }
            raiseError("Bad object");
        }
        function readValue() {
            skipWhitespace();
            switch(ch) {
                case object_start:
                    return readObject();
                case '[':
                    return readArray();
                case '"':
                    return readString();
                default:
                    return readWord();
            }
        }
        function allowedInWord() {
            switch(ch) {
                case '"':
                case '\\':
                case '\t':
                case '\n':
                case '\r':
                case ',':
                case '[':
                case ']':
                case object_start:
                case object_end:
                case pair_seperator:
                    return false;
            }
            return ch > ' ';
        }
    }
    jsonlite.parse = parse;
})(jsonlite || (jsonlite = {}));;/*! selectize.js - v0.12.4 | https://github.com/selectize/selectize.js | Apache License (v2) */
!function(a,b){"function"==typeof define&&define.amd?define("sifter",b):"object"==typeof exports?module.exports=b():a.Sifter=b()}(this,function(){var a=function(a,b){this.items=a,this.settings=b||{diacritics:!0}};a.prototype.tokenize=function(a){if(a=e(String(a||"").toLowerCase()),!a||!a.length)return[];var b,c,d,g,i=[],j=a.split(/ +/);for(b=0,c=j.length;b<c;b++){if(d=f(j[b]),this.settings.diacritics)for(g in h)h.hasOwnProperty(g)&&(d=d.replace(new RegExp(g,"g"),h[g]));i.push({string:j[b],regex:new RegExp(d,"i")})}return i},a.prototype.iterator=function(a,b){var c;c=g(a)?Array.prototype.forEach||function(a){for(var b=0,c=this.length;b<c;b++)a(this[b],b,this)}:function(a){for(var b in this)this.hasOwnProperty(b)&&a(this[b],b,this)},c.apply(a,[b])},a.prototype.getScoreFunction=function(a,b){var c,e,f,g,h;c=this,a=c.prepareSearch(a,b),f=a.tokens,e=a.options.fields,g=f.length,h=a.options.nesting;var i=function(a,b){var c,d;return a?(a=String(a||""),d=a.search(b.regex),d===-1?0:(c=b.string.length/a.length,0===d&&(c+=.5),c)):0},j=function(){var a=e.length;return a?1===a?function(a,b){return i(d(b,e[0],h),a)}:function(b,c){for(var f=0,g=0;f<a;f++)g+=i(d(c,e[f],h),b);return g/a}:function(){return 0}}();return g?1===g?function(a){return j(f[0],a)}:"and"===a.options.conjunction?function(a){for(var b,c=0,d=0;c<g;c++){if(b=j(f[c],a),b<=0)return 0;d+=b}return d/g}:function(a){for(var b=0,c=0;b<g;b++)c+=j(f[b],a);return c/g}:function(){return 0}},a.prototype.getSortFunction=function(a,c){var e,f,g,h,i,j,k,l,m,n,o;if(g=this,a=g.prepareSearch(a,c),o=!a.query&&c.sort_empty||c.sort,m=function(a,b){return"$score"===a?b.score:d(g.items[b.id],a,c.nesting)},i=[],o)for(e=0,f=o.length;e<f;e++)(a.query||"$score"!==o[e].field)&&i.push(o[e]);if(a.query){for(n=!0,e=0,f=i.length;e<f;e++)if("$score"===i[e].field){n=!1;break}n&&i.unshift({field:"$score",direction:"desc"})}else for(e=0,f=i.length;e<f;e++)if("$score"===i[e].field){i.splice(e,1);break}for(l=[],e=0,f=i.length;e<f;e++)l.push("desc"===i[e].direction?-1:1);return j=i.length,j?1===j?(h=i[0].field,k=l[0],function(a,c){return k*b(m(h,a),m(h,c))}):function(a,c){var d,e,f;for(d=0;d<j;d++)if(f=i[d].field,e=l[d]*b(m(f,a),m(f,c)))return e;return 0}:null},a.prototype.prepareSearch=function(a,b){if("object"==typeof a)return a;b=c({},b);var d=b.fields,e=b.sort,f=b.sort_empty;return d&&!g(d)&&(b.fields=[d]),e&&!g(e)&&(b.sort=[e]),f&&!g(f)&&(b.sort_empty=[f]),{options:b,query:String(a||"").toLowerCase(),tokens:this.tokenize(a),total:0,items:[]}},a.prototype.search=function(a,b){var c,d,e,f,g=this;return d=this.prepareSearch(a,b),b=d.options,a=d.query,f=b.score||g.getScoreFunction(d),a.length?g.iterator(g.items,function(a,e){c=f(a),(b.filter===!1||c>0)&&d.items.push({score:c,id:e})}):g.iterator(g.items,function(a,b){d.items.push({score:1,id:b})}),e=g.getSortFunction(d,b),e&&d.items.sort(e),d.total=d.items.length,"number"==typeof b.limit&&(d.items=d.items.slice(0,b.limit)),d};var b=function(a,b){return"number"==typeof a&&"number"==typeof b?a>b?1:a<b?-1:0:(a=i(String(a||"")),b=i(String(b||"")),a>b?1:b>a?-1:0)},c=function(a,b){var c,d,e,f;for(c=1,d=arguments.length;c<d;c++)if(f=arguments[c])for(e in f)f.hasOwnProperty(e)&&(a[e]=f[e]);return a},d=function(a,b,c){if(a&&b){if(!c)return a[b];for(var d=b.split(".");d.length&&(a=a[d.shift()]););return a}},e=function(a){return(a+"").replace(/^\s+|\s+$|/g,"")},f=function(a){return(a+"").replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")},g=Array.isArray||"undefined"!=typeof $&&$.isArray||function(a){return"[object Array]"===Object.prototype.toString.call(a)},h={a:"[aḀḁĂăÂâǍǎȺⱥȦȧẠạÄäÀàÁáĀāÃãÅåąĄÃąĄ]",b:"[b␢βΒB฿𐌁ᛒ]",c:"[cĆćĈĉČčĊċC̄c̄ÇçḈḉȻȼƇƈɕᴄＣｃ]",d:"[dĎďḊḋḐḑḌḍḒḓḎḏĐđD̦d̦ƉɖƊɗƋƌᵭᶁᶑȡᴅＤｄð]",e:"[eÉéÈèÊêḘḙĚěĔĕẼẽḚḛẺẻĖėËëĒēȨȩĘęᶒɆɇȄȅẾếỀềỄễỂểḜḝḖḗḔḕȆȇẸẹỆệⱸᴇＥｅɘǝƏƐε]",f:"[fƑƒḞḟ]",g:"[gɢ₲ǤǥĜĝĞğĢģƓɠĠġ]",h:"[hĤĥĦħḨḩẖẖḤḥḢḣɦʰǶƕ]",i:"[iÍíÌìĬĭÎîǏǐÏïḮḯĨĩĮįĪīỈỉȈȉȊȋỊịḬḭƗɨɨ̆ᵻᶖİiIıɪＩｉ]",j:"[jȷĴĵɈɉʝɟʲ]",k:"[kƘƙꝀꝁḰḱǨǩḲḳḴḵκϰ₭]",l:"[lŁłĽľĻļĹĺḶḷḸḹḼḽḺḻĿŀȽƚⱠⱡⱢɫɬᶅɭȴʟＬｌ]",n:"[nŃńǸǹŇňÑñṄṅŅņṆṇṊṋṈṉN̈n̈ƝɲȠƞᵰᶇɳȵɴＮｎŊŋ]",o:"[oØøÖöÓóÒòÔôǑǒŐőŎŏȮȯỌọƟɵƠơỎỏŌōÕõǪǫȌȍՕօ]",p:"[pṔṕṖṗⱣᵽƤƥᵱ]",q:"[qꝖꝗʠɊɋꝘꝙq̃]",r:"[rŔŕɌɍŘřŖŗṘṙȐȑȒȓṚṛⱤɽ]",s:"[sŚśṠṡṢṣꞨꞩŜŝŠšŞşȘșS̈s̈]",t:"[tŤťṪṫŢţṬṭƮʈȚțṰṱṮṯƬƭ]",u:"[uŬŭɄʉỤụÜüÚúÙùÛûǓǔŰűŬŭƯưỦủŪūŨũŲųȔȕ∪]",v:"[vṼṽṾṿƲʋꝞꝟⱱʋ]",w:"[wẂẃẀẁŴŵẄẅẆẇẈẉ]",x:"[xẌẍẊẋχ]",y:"[yÝýỲỳŶŷŸÿỸỹẎẏỴỵɎɏƳƴ]",z:"[zŹźẐẑŽžŻżẒẓẔẕƵƶ]"},i=function(){var a,b,c,d,e="",f={};for(c in h)if(h.hasOwnProperty(c))for(d=h[c].substring(2,h[c].length-1),e+=d,a=0,b=d.length;a<b;a++)f[d.charAt(a)]=c;var g=new RegExp("["+e+"]","g");return function(a){return a.replace(g,function(a){return f[a]}).toLowerCase()}}();return a}),function(a,b){"function"==typeof define&&define.amd?define("microplugin",b):"object"==typeof exports?module.exports=b():a.MicroPlugin=b()}(this,function(){var a={};a.mixin=function(a){a.plugins={},a.prototype.initializePlugins=function(a){var c,d,e,f=this,g=[];if(f.plugins={names:[],settings:{},requested:{},loaded:{}},b.isArray(a))for(c=0,d=a.length;c<d;c++)"string"==typeof a[c]?g.push(a[c]):(f.plugins.settings[a[c].name]=a[c].options,g.push(a[c].name));else if(a)for(e in a)a.hasOwnProperty(e)&&(f.plugins.settings[e]=a[e],g.push(e));for(;g.length;)f.require(g.shift())},a.prototype.loadPlugin=function(b){var c=this,d=c.plugins,e=a.plugins[b];if(!a.plugins.hasOwnProperty(b))throw new Error('Unable to find "'+b+'" plugin');d.requested[b]=!0,d.loaded[b]=e.fn.apply(c,[c.plugins.settings[b]||{}]),d.names.push(b)},a.prototype.require=function(a){var b=this,c=b.plugins;if(!b.plugins.loaded.hasOwnProperty(a)){if(c.requested[a])throw new Error('Plugin has circular dependency ("'+a+'")');b.loadPlugin(a)}return c.loaded[a]},a.define=function(b,c){a.plugins[b]={name:b,fn:c}}};var b={isArray:Array.isArray||function(a){return"[object Array]"===Object.prototype.toString.call(a)}};return a}),function(a,b){"function"==typeof define&&define.amd?define("selectize",["jquery","sifter","microplugin"],b):"object"==typeof exports?module.exports=b(require("jquery"),require("sifter"),require("microplugin")):a.Selectize=b(a.jQuery,a.Sifter,a.MicroPlugin)}(this,function(a,b,c){"use strict";var d=function(a,b){if("string"!=typeof b||b.length){var c="string"==typeof b?new RegExp(b,"i"):b,d=function(a){var b=0;if(3===a.nodeType){var e=a.data.search(c);if(e>=0&&a.data.length>0){var f=a.data.match(c),g=document.createElement("span");g.className="highlight";var h=a.splitText(e),i=(h.splitText(f[0].length),h.cloneNode(!0));g.appendChild(i),h.parentNode.replaceChild(g,h),b=1}}else if(1===a.nodeType&&a.childNodes&&!/(script|style)/i.test(a.tagName))for(var j=0;j<a.childNodes.length;++j)j+=d(a.childNodes[j]);return b};return a.each(function(){d(this)})}};a.fn.removeHighlight=function(){return this.find("span.highlight").each(function(){this.parentNode.firstChild.nodeName;var a=this.parentNode;a.replaceChild(this.firstChild,this),a.normalize()}).end()};var e=function(){};e.prototype={on:function(a,b){this._events=this._events||{},this._events[a]=this._events[a]||[],this._events[a].push(b)},off:function(a,b){var c=arguments.length;return 0===c?delete this._events:1===c?delete this._events[a]:(this._events=this._events||{},void(a in this._events!=!1&&this._events[a].splice(this._events[a].indexOf(b),1)))},trigger:function(a){if(this._events=this._events||{},a in this._events!=!1)for(var b=0;b<this._events[a].length;b++)this._events[a][b].apply(this,Array.prototype.slice.call(arguments,1))}},e.mixin=function(a){for(var b=["on","off","trigger"],c=0;c<b.length;c++)a.prototype[b[c]]=e.prototype[b[c]]};var f=/Mac/.test(navigator.userAgent),g=65,h=13,i=27,j=37,k=38,l=80,m=39,n=40,o=78,p=8,q=46,r=16,s=f?91:17,t=f?18:17,u=9,v=1,w=2,x=!/android/i.test(window.navigator.userAgent)&&!!document.createElement("input").validity,y=function(a){return"undefined"!=typeof a},z=function(a){return"undefined"==typeof a||null===a?null:"boolean"==typeof a?a?"1":"0":a+""},A=function(a){return(a+"").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},B={};B.before=function(a,b,c){var d=a[b];a[b]=function(){return c.apply(a,arguments),d.apply(a,arguments)}},B.after=function(a,b,c){var d=a[b];a[b]=function(){var b=d.apply(a,arguments);return c.apply(a,arguments),b}};var C=function(a){var b=!1;return function(){b||(b=!0,a.apply(this,arguments))}},D=function(a,b){var c;return function(){var d=this,e=arguments;window.clearTimeout(c),c=window.setTimeout(function(){a.apply(d,e)},b)}},E=function(a,b,c){var d,e=a.trigger,f={};a.trigger=function(){var c=arguments[0];return b.indexOf(c)===-1?e.apply(a,arguments):void(f[c]=arguments)},c.apply(a,[]),a.trigger=e;for(d in f)f.hasOwnProperty(d)&&e.apply(a,f[d])},F=function(a,b,c,d){a.on(b,c,function(b){for(var c=b.target;c&&c.parentNode!==a[0];)c=c.parentNode;return b.currentTarget=c,d.apply(this,[b])})},G=function(a){var b={};if("selectionStart"in a)b.start=a.selectionStart,b.length=a.selectionEnd-b.start;else if(document.selection){a.focus();var c=document.selection.createRange(),d=document.selection.createRange().text.length;c.moveStart("character",-a.value.length),b.start=c.text.length-d,b.length=d}return b},H=function(a,b,c){var d,e,f={};if(c)for(d=0,e=c.length;d<e;d++)f[c[d]]=a.css(c[d]);else f=a.css();b.css(f)},I=function(b,c){if(!b)return 0;var d=a("<test>").css({position:"absolute",top:-99999,left:-99999,width:"auto",padding:0,whiteSpace:"pre"}).text(b).appendTo("body");H(c,d,["letterSpacing","fontSize","fontFamily","fontWeight","textTransform"]);var e=d.width();return d.remove(),e},J=function(a){var b=null,c=function(c,d){var e,f,g,h,i,j,k,l;c=c||window.event||{},d=d||{},c.metaKey||c.altKey||(d.force||a.data("grow")!==!1)&&(e=a.val(),c.type&&"keydown"===c.type.toLowerCase()&&(f=c.keyCode,g=f>=97&&f<=122||f>=65&&f<=90||f>=48&&f<=57||32===f,f===q||f===p?(l=G(a[0]),l.length?e=e.substring(0,l.start)+e.substring(l.start+l.length):f===p&&l.start?e=e.substring(0,l.start-1)+e.substring(l.start+1):f===q&&"undefined"!=typeof l.start&&(e=e.substring(0,l.start)+e.substring(l.start+1))):g&&(j=c.shiftKey,k=String.fromCharCode(c.keyCode),k=j?k.toUpperCase():k.toLowerCase(),e+=k)),h=a.attr("placeholder"),!e&&h&&(e=h),i=I(e,a)+4,i!==b&&(b=i,a.width(i),a.triggerHandler("resize")))};a.on("keydown keyup update blur",c),c()},K=function(a){var b=document.createElement("div");return b.appendChild(a.cloneNode(!0)),b.innerHTML},L=function(a,b){b||(b={});var c="Selectize";console.error(c+": "+a),b.explanation&&(console.group&&console.group(),console.error(b.explanation),console.group&&console.groupEnd())},M=function(c,d){var e,f,g,h,i=this;h=c[0],h.selectize=i;var j=window.getComputedStyle&&window.getComputedStyle(h,null);if(g=j?j.getPropertyValue("direction"):h.currentStyle&&h.currentStyle.direction,g=g||c.parents("[dir]:first").attr("dir")||"",a.extend(i,{order:0,settings:d,$input:c,tabIndex:c.attr("tabindex")||"",tagType:"select"===h.tagName.toLowerCase()?v:w,rtl:/rtl/i.test(g),eventNS:".selectize"+ ++M.count,highlightedValue:null,isOpen:!1,isDisabled:!1,isRequired:c.is("[required]"),isInvalid:!1,isLocked:!1,isFocused:!1,isInputHidden:!1,isSetup:!1,isShiftDown:!1,isCmdDown:!1,isCtrlDown:!1,ignoreFocus:!1,ignoreBlur:!1,ignoreHover:!1,hasOptions:!1,currentResults:null,lastValue:"",caretPos:0,loading:0,loadedSearches:{},$activeOption:null,$activeItems:[],optgroups:{},options:{},userOptions:{},items:[],renderCache:{},onSearchChange:null===d.loadThrottle?i.onSearchChange:D(i.onSearchChange,d.loadThrottle)}),i.sifter=new b(this.options,{diacritics:d.diacritics}),i.settings.options){for(e=0,f=i.settings.options.length;e<f;e++)i.registerOption(i.settings.options[e]);delete i.settings.options}if(i.settings.optgroups){for(e=0,f=i.settings.optgroups.length;e<f;e++)i.registerOptionGroup(i.settings.optgroups[e]);delete i.settings.optgroups}i.settings.mode=i.settings.mode||(1===i.settings.maxItems?"single":"multi"),"boolean"!=typeof i.settings.hideSelected&&(i.settings.hideSelected="multi"===i.settings.mode),i.initializePlugins(i.settings.plugins),i.setupCallbacks(),i.setupTemplates(),i.setup()};return e.mixin(M),"undefined"!=typeof c?c.mixin(M):L("Dependency MicroPlugin is missing",{explanation:'Make sure you either: (1) are using the "standalone" version of Selectize, or (2) require MicroPlugin before you load Selectize.'}),a.extend(M.prototype,{setup:function(){var b,c,d,e,g,h,i,j,k,l,m=this,n=m.settings,o=m.eventNS,p=a(window),q=a(document),u=m.$input;if(i=m.settings.mode,j=u.attr("class")||"",b=a("<div>").addClass(n.wrapperClass).addClass(j).addClass(i),c=a("<div>").addClass(n.inputClass).addClass("items").appendTo(b),d=a('<input type="text" autocomplete="off" />').appendTo(c).attr("tabindex",u.is(":disabled")?"-1":m.tabIndex),h=a(n.dropdownParent||b),e=a("<div>").addClass(n.dropdownClass).addClass(i).hide().appendTo(h),g=a("<div>").addClass(n.dropdownContentClass).appendTo(e),(l=u.attr("id"))&&(d.attr("id",l+"-selectized"),a("label[for='"+l+"']").attr("for",l+"-selectized")),m.settings.copyClassesToDropdown&&e.addClass(j),b.css({width:u[0].style.width}),m.plugins.names.length&&(k="plugin-"+m.plugins.names.join(" plugin-"),b.addClass(k),e.addClass(k)),(null===n.maxItems||n.maxItems>1)&&m.tagType===v&&u.attr("multiple","multiple"),m.settings.placeholder&&d.attr("placeholder",n.placeholder),!m.settings.splitOn&&m.settings.delimiter){var w=m.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&");m.settings.splitOn=new RegExp("\\s*"+w+"+\\s*")}u.attr("autocorrect")&&d.attr("autocorrect",u.attr("autocorrect")),u.attr("autocapitalize")&&d.attr("autocapitalize",u.attr("autocapitalize")),m.$wrapper=b,m.$control=c,m.$control_input=d,m.$dropdown=e,m.$dropdown_content=g,e.on("mouseenter","[data-selectable]",function(){return m.onOptionHover.apply(m,arguments)}),e.on("mousedown click","[data-selectable]",function(){return m.onOptionSelect.apply(m,arguments)}),F(c,"mousedown","*:not(input)",function(){return m.onItemSelect.apply(m,arguments)}),J(d),c.on({mousedown:function(){return m.onMouseDown.apply(m,arguments)},click:function(){return m.onClick.apply(m,arguments)}}),d.on({mousedown:function(a){a.stopPropagation()},keydown:function(){return m.onKeyDown.apply(m,arguments)},keyup:function(){return m.onKeyUp.apply(m,arguments)},keypress:function(){return m.onKeyPress.apply(m,arguments)},resize:function(){m.positionDropdown.apply(m,[])},blur:function(){return m.onBlur.apply(m,arguments)},focus:function(){return m.ignoreBlur=!1,m.onFocus.apply(m,arguments)},paste:function(){return m.onPaste.apply(m,arguments)}}),q.on("keydown"+o,function(a){m.isCmdDown=a[f?"metaKey":"ctrlKey"],m.isCtrlDown=a[f?"altKey":"ctrlKey"],m.isShiftDown=a.shiftKey}),q.on("keyup"+o,function(a){a.keyCode===t&&(m.isCtrlDown=!1),a.keyCode===r&&(m.isShiftDown=!1),a.keyCode===s&&(m.isCmdDown=!1)}),q.on("mousedown"+o,function(a){if(m.isFocused){if(a.target===m.$dropdown[0]||a.target.parentNode===m.$dropdown[0])return!1;m.$control.has(a.target).length||a.target===m.$control[0]||m.blur(a.target)}}),p.on(["scroll"+o,"resize"+o].join(" "),function(){m.isOpen&&m.positionDropdown.apply(m,arguments)}),p.on("mousemove"+o,function(){m.ignoreHover=!1}),this.revertSettings={$children:u.children().detach(),tabindex:u.attr("tabindex")},u.attr("tabindex",-1).hide().after(m.$wrapper),a.isArray(n.items)&&(m.setValue(n.items),delete n.items),x&&u.on("invalid"+o,function(a){a.preventDefault(),m.isInvalid=!0,m.refreshState()}),m.updateOriginalInput(),m.refreshItems(),m.refreshState(),m.updatePlaceholder(),m.isSetup=!0,u.is(":disabled")&&m.disable(),m.on("change",this.onChange),u.data("selectize",m),u.addClass("selectized"),m.trigger("initialize"),n.preload===!0&&m.onSearchChange("")},setupTemplates:function(){var b=this,c=b.settings.labelField,d=b.settings.optgroupLabelField,e={optgroup:function(a){return'<div class="optgroup">'+a.html+"</div>"},optgroup_header:function(a,b){return'<div class="optgroup-header">'+b(a[d])+"</div>"},option:function(a,b){return'<div class="option">'+b(a[c])+"</div>"},item:function(a,b){return'<div class="item">'+b(a[c])+"</div>"},option_create:function(a,b){return'<div class="create">Add <strong>'+b(a.input)+"</strong>&hellip;</div>"}};b.settings.render=a.extend({},e,b.settings.render)},setupCallbacks:function(){var a,b,c={initialize:"onInitialize",change:"onChange",item_add:"onItemAdd",item_remove:"onItemRemove",clear:"onClear",option_add:"onOptionAdd",option_remove:"onOptionRemove",option_clear:"onOptionClear",optgroup_add:"onOptionGroupAdd",optgroup_remove:"onOptionGroupRemove",optgroup_clear:"onOptionGroupClear",dropdown_open:"onDropdownOpen",dropdown_close:"onDropdownClose",type:"onType",load:"onLoad",focus:"onFocus",blur:"onBlur"};for(a in c)c.hasOwnProperty(a)&&(b=this.settings[c[a]],b&&this.on(a,b))},onClick:function(a){var b=this;b.isFocused||(b.focus(),a.preventDefault())},onMouseDown:function(b){var c=this,d=b.isDefaultPrevented();a(b.target);if(c.isFocused){if(b.target!==c.$control_input[0])return"single"===c.settings.mode?c.isOpen?c.close():c.open():d||c.setActiveItem(null),!1}else d||window.setTimeout(function(){c.focus()},0)},onChange:function(){this.$input.trigger("change")},onPaste:function(b){var c=this;return c.isFull()||c.isInputHidden||c.isLocked?void b.preventDefault():void(c.settings.splitOn&&setTimeout(function(){var b=c.$control_input.val();if(b.match(c.settings.splitOn))for(var d=a.trim(b).split(c.settings.splitOn),e=0,f=d.length;e<f;e++)c.createItem(d[e])},0))},onKeyPress:function(a){if(this.isLocked)return a&&a.preventDefault();var b=String.fromCharCode(a.keyCode||a.which);return this.settings.create&&"multi"===this.settings.mode&&b===this.settings.delimiter?(this.createItem(),a.preventDefault(),!1):void 0},onKeyDown:function(a){var b=(a.target===this.$control_input[0],this);if(b.isLocked)return void(a.keyCode!==u&&a.preventDefault());switch(a.keyCode){case g:if(b.isCmdDown)return void b.selectAll();break;case i:return void(b.isOpen&&(a.preventDefault(),a.stopPropagation(),b.close()));case o:if(!a.ctrlKey||a.altKey)break;case n:if(!b.isOpen&&b.hasOptions)b.open();else if(b.$activeOption){b.ignoreHover=!0;var c=b.getAdjacentOption(b.$activeOption,1);c.length&&b.setActiveOption(c,!0,!0)}return void a.preventDefault();case l:if(!a.ctrlKey||a.altKey)break;case k:if(b.$activeOption){b.ignoreHover=!0;var d=b.getAdjacentOption(b.$activeOption,-1);d.length&&b.setActiveOption(d,!0,!0)}return void a.preventDefault();case h:return void(b.isOpen&&b.$activeOption&&(b.onOptionSelect({currentTarget:b.$activeOption}),a.preventDefault()));case j:return void b.advanceSelection(-1,a);case m:return void b.advanceSelection(1,a);case u:return b.settings.selectOnTab&&b.isOpen&&b.$activeOption&&(b.onOptionSelect({currentTarget:b.$activeOption}),b.isFull()||a.preventDefault()),void(b.settings.create&&b.createItem()&&a.preventDefault());case p:case q:return void b.deleteSelection(a)}return!b.isFull()&&!b.isInputHidden||(f?a.metaKey:a.ctrlKey)?void 0:void a.preventDefault()},onKeyUp:function(a){var b=this;if(b.isLocked)return a&&a.preventDefault();var c=b.$control_input.val()||"";b.lastValue!==c&&(b.lastValue=c,b.onSearchChange(c),b.refreshOptions(),b.trigger("type",c))},onSearchChange:function(a){var b=this,c=b.settings.load;c&&(b.loadedSearches.hasOwnProperty(a)||(b.loadedSearches[a]=!0,b.load(function(d){c.apply(b,[a,d])})))},onFocus:function(a){var b=this,c=b.isFocused;return b.isDisabled?(b.blur(),a&&a.preventDefault(),!1):void(b.ignoreFocus||(b.isFocused=!0,"focus"===b.settings.preload&&b.onSearchChange(""),c||b.trigger("focus"),b.$activeItems.length||(b.showInput(),b.setActiveItem(null),b.refreshOptions(!!b.settings.openOnFocus)),b.refreshState()))},onBlur:function(a,b){var c=this;if(c.isFocused&&(c.isFocused=!1,!c.ignoreFocus)){if(!c.ignoreBlur&&document.activeElement===c.$dropdown_content[0])return c.ignoreBlur=!0,void c.onFocus(a);var d=function(){c.close(),c.setTextboxValue(""),c.setActiveItem(null),c.setActiveOption(null),c.setCaret(c.items.length),c.refreshState(),b&&b.focus&&b.focus(),c.ignoreFocus=!1,c.trigger("blur")};c.ignoreFocus=!0,c.settings.create&&c.settings.createOnBlur?c.createItem(null,!1,d):d()}},onOptionHover:function(a){this.ignoreHover||this.setActiveOption(a.currentTarget,!1)},onOptionSelect:function(b){var c,d,e=this;b.preventDefault&&(b.preventDefault(),b.stopPropagation()),d=a(b.currentTarget),d.hasClass("create")?e.createItem(null,function(){e.settings.closeAfterSelect&&e.close()}):(c=d.attr("data-value"),"undefined"!=typeof c&&(e.lastQuery=null,e.setTextboxValue(""),e.addItem(c),e.settings.closeAfterSelect?e.close():!e.settings.hideSelected&&b.type&&/mouse/.test(b.type)&&e.setActiveOption(e.getOption(c))))},onItemSelect:function(a){var b=this;b.isLocked||"multi"===b.settings.mode&&(a.preventDefault(),b.setActiveItem(a.currentTarget,a))},load:function(a){var b=this,c=b.$wrapper.addClass(b.settings.loadingClass);b.loading++,a.apply(b,[function(a){b.loading=Math.max(b.loading-1,0),a&&a.length&&(b.addOption(a),b.refreshOptions(b.isFocused&&!b.isInputHidden)),b.loading||c.removeClass(b.settings.loadingClass),b.trigger("load",a)}])},setTextboxValue:function(a){var b=this.$control_input,c=b.val()!==a;c&&(b.val(a).triggerHandler("update"),this.lastValue=a)},getValue:function(){return this.tagType===v&&this.$input.attr("multiple")?this.items:this.items.join(this.settings.delimiter)},setValue:function(a,b){var c=b?[]:["change"];E(this,c,function(){this.clear(b),this.addItems(a,b)})},setActiveItem:function(b,c){var d,e,f,g,h,i,j,k,l=this;if("single"!==l.settings.mode){if(b=a(b),!b.length)return a(l.$activeItems).removeClass("active"),l.$activeItems=[],void(l.isFocused&&l.showInput());if(d=c&&c.type.toLowerCase(),"mousedown"===d&&l.isShiftDown&&l.$activeItems.length){for(k=l.$control.children(".active:last"),g=Array.prototype.indexOf.apply(l.$control[0].childNodes,[k[0]]),h=Array.prototype.indexOf.apply(l.$control[0].childNodes,[b[0]]),g>h&&(j=g,g=h,h=j),e=g;e<=h;e++)i=l.$control[0].childNodes[e],l.$activeItems.indexOf(i)===-1&&(a(i).addClass("active"),l.$activeItems.push(i));c.preventDefault()}else"mousedown"===d&&l.isCtrlDown||"keydown"===d&&this.isShiftDown?b.hasClass("active")?(f=l.$activeItems.indexOf(b[0]),l.$activeItems.splice(f,1),b.removeClass("active")):l.$activeItems.push(b.addClass("active")[0]):(a(l.$activeItems).removeClass("active"),l.$activeItems=[b.addClass("active")[0]]);l.hideInput(),this.isFocused||l.focus()}},setActiveOption:function(b,c,d){var e,f,g,h,i,j=this;j.$activeOption&&j.$activeOption.removeClass("active"),j.$activeOption=null,b=a(b),b.length&&(j.$activeOption=b.addClass("active"),!c&&y(c)||(e=j.$dropdown_content.height(),f=j.$activeOption.outerHeight(!0),c=j.$dropdown_content.scrollTop()||0,g=j.$activeOption.offset().top-j.$dropdown_content.offset().top+c,h=g,i=g-e+f,g+f>e+c?j.$dropdown_content.stop().animate({scrollTop:i},d?j.settings.scrollDuration:0):g<c&&j.$dropdown_content.stop().animate({scrollTop:h},d?j.settings.scrollDuration:0)))},selectAll:function(){var a=this;"single"!==a.settings.mode&&(a.$activeItems=Array.prototype.slice.apply(a.$control.children(":not(input)").addClass("active")),a.$activeItems.length&&(a.hideInput(),a.close()),a.focus())},hideInput:function(){var a=this;a.setTextboxValue(""),a.$control_input.css({opacity:0,position:"absolute",left:a.rtl?1e4:-1e4}),a.isInputHidden=!0},showInput:function(){this.$control_input.css({opacity:1,position:"relative",left:0}),this.isInputHidden=!1},focus:function(){var a=this;a.isDisabled||(a.ignoreFocus=!0,a.$control_input[0].focus(),window.setTimeout(function(){a.ignoreFocus=!1,a.onFocus()},0))},blur:function(a){this.$control_input[0].blur(),this.onBlur(null,a)},getScoreFunction:function(a){return this.sifter.getScoreFunction(a,this.getSearchOptions())},getSearchOptions:function(){var a=this.settings,b=a.sortField;return"string"==typeof b&&(b=[{field:b}]),{fields:a.searchField,conjunction:a.searchConjunction,sort:b}},search:function(b){var c,d,e,f=this,g=f.settings,h=this.getSearchOptions();if(g.score&&(e=f.settings.score.apply(this,[b]),"function"!=typeof e))throw new Error('Selectize "score" setting must be a function that returns a function');if(b!==f.lastQuery?(f.lastQuery=b,d=f.sifter.search(b,a.extend(h,{score:e})),f.currentResults=d):d=a.extend(!0,{},f.currentResults),g.hideSelected)for(c=d.items.length-1;c>=0;c--)f.items.indexOf(z(d.items[c].id))!==-1&&d.items.splice(c,1);return d},refreshOptions:function(b){var c,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;"undefined"==typeof b&&(b=!0);var t=this,u=a.trim(t.$control_input.val()),v=t.search(u),w=t.$dropdown_content,x=t.$activeOption&&z(t.$activeOption.attr("data-value"));for(g=v.items.length,"number"==typeof t.settings.maxOptions&&(g=Math.min(g,t.settings.maxOptions)),h={},i=[],c=0;c<g;c++)for(j=t.options[v.items[c].id],k=t.render("option",j),l=j[t.settings.optgroupField]||"",m=a.isArray(l)?l:[l],e=0,f=m&&m.length;e<f;e++)l=m[e],t.optgroups.hasOwnProperty(l)||(l=""),h.hasOwnProperty(l)||(h[l]=document.createDocumentFragment(),i.push(l)),h[l].appendChild(k);for(this.settings.lockOptgroupOrder&&i.sort(function(a,b){var c=t.optgroups[a].$order||0,d=t.optgroups[b].$order||0;return c-d}),n=document.createDocumentFragment(),c=0,g=i.length;c<g;c++)l=i[c],t.optgroups.hasOwnProperty(l)&&h[l].childNodes.length?(o=document.createDocumentFragment(),o.appendChild(t.render("optgroup_header",t.optgroups[l])),o.appendChild(h[l]),n.appendChild(t.render("optgroup",a.extend({},t.optgroups[l],{html:K(o),dom:o})))):n.appendChild(h[l]);if(w.html(n),t.settings.highlight&&v.query.length&&v.tokens.length)for(w.removeHighlight(),c=0,g=v.tokens.length;c<g;c++)d(w,v.tokens[c].regex);if(!t.settings.hideSelected)for(c=0,g=t.items.length;c<g;c++)t.getOption(t.items[c]).addClass("selected");p=t.canCreate(u),p&&(w.prepend(t.render("option_create",{input:u})),s=a(w[0].childNodes[0])),t.hasOptions=v.items.length>0||p,t.hasOptions?(v.items.length>0?(r=x&&t.getOption(x),r&&r.length?q=r:"single"===t.settings.mode&&t.items.length&&(q=t.getOption(t.items[0])),q&&q.length||(q=s&&!t.settings.addPrecedence?t.getAdjacentOption(s,1):w.find("[data-selectable]:first"))):q=s,t.setActiveOption(q),b&&!t.isOpen&&t.open()):(t.setActiveOption(null),b&&t.isOpen&&t.close())},addOption:function(b){var c,d,e,f=this;if(a.isArray(b))for(c=0,d=b.length;c<d;c++)f.addOption(b[c]);else(e=f.registerOption(b))&&(f.userOptions[e]=!0,f.lastQuery=null,f.trigger("option_add",e,b))},registerOption:function(a){var b=z(a[this.settings.valueField]);return"undefined"!=typeof b&&null!==b&&!this.options.hasOwnProperty(b)&&(a.$order=a.$order||++this.order,this.options[b]=a,b)},registerOptionGroup:function(a){var b=z(a[this.settings.optgroupValueField]);return!!b&&(a.$order=a.$order||++this.order,this.optgroups[b]=a,b)},addOptionGroup:function(a,b){b[this.settings.optgroupValueField]=a,(a=this.registerOptionGroup(b))&&this.trigger("optgroup_add",a,b)},removeOptionGroup:function(a){this.optgroups.hasOwnProperty(a)&&(delete this.optgroups[a],this.renderCache={},this.trigger("optgroup_remove",a))},clearOptionGroups:function(){this.optgroups={},this.renderCache={},this.trigger("optgroup_clear")},updateOption:function(b,c){var d,e,f,g,h,i,j,k=this;if(b=z(b),f=z(c[k.settings.valueField]),null!==b&&k.options.hasOwnProperty(b)){if("string"!=typeof f)throw new Error("Value must be set in option data");j=k.options[b].$order,f!==b&&(delete k.options[b],g=k.items.indexOf(b),g!==-1&&k.items.splice(g,1,f)),c.$order=c.$order||j,k.options[f]=c,h=k.renderCache.item,i=k.renderCache.option,h&&(delete h[b],delete h[f]),i&&(delete i[b],delete i[f]),k.items.indexOf(f)!==-1&&(d=k.getItem(b),e=a(k.render("item",c)),d.hasClass("active")&&e.addClass("active"),d.replaceWith(e)),k.lastQuery=null,k.isOpen&&k.refreshOptions(!1)}},removeOption:function(a,b){var c=this;a=z(a);var d=c.renderCache.item,e=c.renderCache.option;d&&delete d[a],e&&delete e[a],delete c.userOptions[a],delete c.options[a],c.lastQuery=null,c.trigger("option_remove",a),c.removeItem(a,b)},clearOptions:function(){var a=this;a.loadedSearches={},a.userOptions={},a.renderCache={},a.options=a.sifter.items={},a.lastQuery=null,a.trigger("option_clear"),a.clear()},getOption:function(a){return this.getElementWithValue(a,this.$dropdown_content.find("[data-selectable]"))},getAdjacentOption:function(b,c){var d=this.$dropdown.find("[data-selectable]"),e=d.index(b)+c;return e>=0&&e<d.length?d.eq(e):a()},getElementWithValue:function(b,c){if(b=z(b),"undefined"!=typeof b&&null!==b)for(var d=0,e=c.length;d<e;d++)if(c[d].getAttribute("data-value")===b)return a(c[d]);return a()},getItem:function(a){return this.getElementWithValue(a,this.$control.children())},addItems:function(b,c){for(var d=a.isArray(b)?b:[b],e=0,f=d.length;e<f;e++)this.isPending=e<f-1,this.addItem(d[e],c)},addItem:function(b,c){var d=c?[]:["change"];E(this,d,function(){var d,e,f,g,h,i=this,j=i.settings.mode;return b=z(b),i.items.indexOf(b)!==-1?void("single"===j&&i.close()):void(i.options.hasOwnProperty(b)&&("single"===j&&i.clear(c),"multi"===j&&i.isFull()||(d=a(i.render("item",i.options[b])),h=i.isFull(),i.items.splice(i.caretPos,0,b),i.insertAtCaret(d),(!i.isPending||!h&&i.isFull())&&i.refreshState(),i.isSetup&&(f=i.$dropdown_content.find("[data-selectable]"),i.isPending||(e=i.getOption(b),g=i.getAdjacentOption(e,1).attr("data-value"),i.refreshOptions(i.isFocused&&"single"!==j),g&&i.setActiveOption(i.getOption(g))),!f.length||i.isFull()?i.close():i.positionDropdown(),i.updatePlaceholder(),i.trigger("item_add",b,d),i.updateOriginalInput({silent:c})))))})},removeItem:function(b,c){var d,e,f,g=this;d=b instanceof a?b:g.getItem(b),b=z(d.attr("data-value")),e=g.items.indexOf(b),e!==-1&&(d.remove(),d.hasClass("active")&&(f=g.$activeItems.indexOf(d[0]),g.$activeItems.splice(f,1)),g.items.splice(e,1),g.lastQuery=null,!g.settings.persist&&g.userOptions.hasOwnProperty(b)&&g.removeOption(b,c),e<g.caretPos&&g.setCaret(g.caretPos-1),g.refreshState(),g.updatePlaceholder(),g.updateOriginalInput({silent:c}),g.positionDropdown(),g.trigger("item_remove",b,d))},createItem:function(b,c){var d=this,e=d.caretPos;b=b||a.trim(d.$control_input.val()||"");var f=arguments[arguments.length-1];if("function"!=typeof f&&(f=function(){}),"boolean"!=typeof c&&(c=!0),!d.canCreate(b))return f(),!1;d.lock();var g="function"==typeof d.settings.create?this.settings.create:function(a){var b={};return b[d.settings.labelField]=a,b[d.settings.valueField]=a,b},h=C(function(a){if(d.unlock(),!a||"object"!=typeof a)return f();var b=z(a[d.settings.valueField]);return"string"!=typeof b?f():(d.setTextboxValue(""),d.addOption(a),d.setCaret(e),d.addItem(b),d.refreshOptions(c&&"single"!==d.settings.mode),void f(a))}),i=g.apply(this,[b,h]);return"undefined"!=typeof i&&h(i),!0},refreshItems:function(){this.lastQuery=null,this.isSetup&&this.addItem(this.items),this.refreshState(),this.updateOriginalInput()},refreshState:function(){this.refreshValidityState(),this.refreshClasses()},refreshValidityState:function(){if(!this.isRequired)return!1;var a=!this.items.length;this.isInvalid=a,this.$control_input.prop("required",a),this.$input.prop("required",!a)},refreshClasses:function(){var b=this,c=b.isFull(),d=b.isLocked;b.$wrapper.toggleClass("rtl",b.rtl),b.$control.toggleClass("focus",b.isFocused).toggleClass("disabled",b.isDisabled).toggleClass("required",b.isRequired).toggleClass("invalid",b.isInvalid).toggleClass("locked",d).toggleClass("full",c).toggleClass("not-full",!c).toggleClass("input-active",b.isFocused&&!b.isInputHidden).toggleClass("dropdown-active",b.isOpen).toggleClass("has-options",!a.isEmptyObject(b.options)).toggleClass("has-items",b.items.length>0),b.$control_input.data("grow",!c&&!d)},isFull:function(){return null!==this.settings.maxItems&&this.items.length>=this.settings.maxItems},updateOriginalInput:function(a){var b,c,d,e,f=this;if(a=a||{},f.tagType===v){for(d=[],b=0,c=f.items.length;b<c;b++)e=f.options[f.items[b]][f.settings.labelField]||"",d.push('<option value="'+A(f.items[b])+'" selected="selected">'+A(e)+"</option>");d.length||this.$input.attr("multiple")||d.push('<option value="" selected="selected"></option>'),
f.$input.html(d.join(""))}else f.$input.val(f.getValue()),f.$input.attr("value",f.$input.val());f.isSetup&&(a.silent||f.trigger("change",f.$input.val()))},updatePlaceholder:function(){if(this.settings.placeholder){var a=this.$control_input;this.items.length?a.removeAttr("placeholder"):a.attr("placeholder",this.settings.placeholder),a.triggerHandler("update",{force:!0})}},open:function(){var a=this;a.isLocked||a.isOpen||"multi"===a.settings.mode&&a.isFull()||(a.focus(),a.isOpen=!0,a.refreshState(),a.$dropdown.css({visibility:"hidden",display:"block"}),a.positionDropdown(),a.$dropdown.css({visibility:"visible"}),a.trigger("dropdown_open",a.$dropdown))},close:function(){var a=this,b=a.isOpen;"single"===a.settings.mode&&a.items.length&&(a.hideInput(),a.$control_input.blur()),a.isOpen=!1,a.$dropdown.hide(),a.setActiveOption(null),a.refreshState(),b&&a.trigger("dropdown_close",a.$dropdown)},positionDropdown:function(){var a=this.$control,b="body"===this.settings.dropdownParent?a.offset():a.position();b.top+=a.outerHeight(!0),this.$dropdown.css({width:a.outerWidth(),top:b.top,left:b.left})},clear:function(a){var b=this;b.items.length&&(b.$control.children(":not(input)").remove(),b.items=[],b.lastQuery=null,b.setCaret(0),b.setActiveItem(null),b.updatePlaceholder(),b.updateOriginalInput({silent:a}),b.refreshState(),b.showInput(),b.trigger("clear"))},insertAtCaret:function(b){var c=Math.min(this.caretPos,this.items.length);0===c?this.$control.prepend(b):a(this.$control[0].childNodes[c]).before(b),this.setCaret(c+1)},deleteSelection:function(b){var c,d,e,f,g,h,i,j,k,l=this;if(e=b&&b.keyCode===p?-1:1,f=G(l.$control_input[0]),l.$activeOption&&!l.settings.hideSelected&&(i=l.getAdjacentOption(l.$activeOption,-1).attr("data-value")),g=[],l.$activeItems.length){for(k=l.$control.children(".active:"+(e>0?"last":"first")),h=l.$control.children(":not(input)").index(k),e>0&&h++,c=0,d=l.$activeItems.length;c<d;c++)g.push(a(l.$activeItems[c]).attr("data-value"));b&&(b.preventDefault(),b.stopPropagation())}else(l.isFocused||"single"===l.settings.mode)&&l.items.length&&(e<0&&0===f.start&&0===f.length?g.push(l.items[l.caretPos-1]):e>0&&f.start===l.$control_input.val().length&&g.push(l.items[l.caretPos]));if(!g.length||"function"==typeof l.settings.onDelete&&l.settings.onDelete.apply(l,[g])===!1)return!1;for("undefined"!=typeof h&&l.setCaret(h);g.length;)l.removeItem(g.pop());return l.showInput(),l.positionDropdown(),l.refreshOptions(!0),i&&(j=l.getOption(i),j.length&&l.setActiveOption(j)),!0},advanceSelection:function(a,b){var c,d,e,f,g,h,i=this;0!==a&&(i.rtl&&(a*=-1),c=a>0?"last":"first",d=G(i.$control_input[0]),i.isFocused&&!i.isInputHidden?(f=i.$control_input.val().length,g=a<0?0===d.start&&0===d.length:d.start===f,g&&!f&&i.advanceCaret(a,b)):(h=i.$control.children(".active:"+c),h.length&&(e=i.$control.children(":not(input)").index(h),i.setActiveItem(null),i.setCaret(a>0?e+1:e))))},advanceCaret:function(a,b){var c,d,e=this;0!==a&&(c=a>0?"next":"prev",e.isShiftDown?(d=e.$control_input[c](),d.length&&(e.hideInput(),e.setActiveItem(d),b&&b.preventDefault())):e.setCaret(e.caretPos+a))},setCaret:function(b){var c=this;if(b="single"===c.settings.mode?c.items.length:Math.max(0,Math.min(c.items.length,b)),!c.isPending){var d,e,f,g;for(f=c.$control.children(":not(input)"),d=0,e=f.length;d<e;d++)g=a(f[d]).detach(),d<b?c.$control_input.before(g):c.$control.append(g)}c.caretPos=b},lock:function(){this.close(),this.isLocked=!0,this.refreshState()},unlock:function(){this.isLocked=!1,this.refreshState()},disable:function(){var a=this;a.$input.prop("disabled",!0),a.$control_input.prop("disabled",!0).prop("tabindex",-1),a.isDisabled=!0,a.lock()},enable:function(){var a=this;a.$input.prop("disabled",!1),a.$control_input.prop("disabled",!1).prop("tabindex",a.tabIndex),a.isDisabled=!1,a.unlock()},destroy:function(){var b=this,c=b.eventNS,d=b.revertSettings;b.trigger("destroy"),b.off(),b.$wrapper.remove(),b.$dropdown.remove(),b.$input.html("").append(d.$children).removeAttr("tabindex").removeClass("selectized").attr({tabindex:d.tabindex}).show(),b.$control_input.removeData("grow"),b.$input.removeData("selectize"),a(window).off(c),a(document).off(c),a(document.body).off(c),delete b.$input[0].selectize},render:function(b,c){var d,e,f="",g=!1,h=this;return"option"!==b&&"item"!==b||(d=z(c[h.settings.valueField]),g=!!d),g&&(y(h.renderCache[b])||(h.renderCache[b]={}),h.renderCache[b].hasOwnProperty(d))?h.renderCache[b][d]:(f=a(h.settings.render[b].apply(this,[c,A])),"option"===b||"option_create"===b?f.attr("data-selectable",""):"optgroup"===b&&(e=c[h.settings.optgroupValueField]||"",f.attr("data-group",e)),"option"!==b&&"item"!==b||f.attr("data-value",d||""),g&&(h.renderCache[b][d]=f[0]),f[0])},clearCache:function(a){var b=this;"undefined"==typeof a?b.renderCache={}:delete b.renderCache[a]},canCreate:function(a){var b=this;if(!b.settings.create)return!1;var c=b.settings.createFilter;return a.length&&("function"!=typeof c||c.apply(b,[a]))&&("string"!=typeof c||new RegExp(c).test(a))&&(!(c instanceof RegExp)||c.test(a))}}),M.count=0,M.defaults={options:[],optgroups:[],plugins:[],delimiter:",",splitOn:null,persist:!0,diacritics:!0,create:!1,createOnBlur:!1,createFilter:null,highlight:!0,openOnFocus:!0,maxOptions:1e3,maxItems:null,hideSelected:null,addPrecedence:!1,selectOnTab:!1,preload:!1,allowEmptyOption:!1,closeAfterSelect:!1,scrollDuration:60,loadThrottle:300,loadingClass:"loading",dataAttr:"data-data",optgroupField:"optgroup",valueField:"value",labelField:"text",optgroupLabelField:"label",optgroupValueField:"value",lockOptgroupOrder:!1,sortField:"$order",searchField:["text"],searchConjunction:"and",mode:null,wrapperClass:"selectize-control",inputClass:"selectize-input",dropdownClass:"selectize-dropdown",dropdownContentClass:"selectize-dropdown-content",dropdownParent:null,copyClassesToDropdown:!0,render:{}},a.fn.selectize=function(b){var c=a.fn.selectize.defaults,d=a.extend({},c,b),e=d.dataAttr,f=d.labelField,g=d.valueField,h=d.optgroupField,i=d.optgroupLabelField,j=d.optgroupValueField,k=function(b,c){var h,i,j,k,l=b.attr(e);if(l)for(c.options=JSON.parse(l),h=0,i=c.options.length;h<i;h++)c.items.push(c.options[h][g]);else{var m=a.trim(b.val()||"");if(!d.allowEmptyOption&&!m.length)return;for(j=m.split(d.delimiter),h=0,i=j.length;h<i;h++)k={},k[f]=j[h],k[g]=j[h],c.options.push(k);c.items=j}},l=function(b,c){var k,l,m,n,o=c.options,p={},q=function(a){var b=e&&a.attr(e);return"string"==typeof b&&b.length?JSON.parse(b):null},r=function(b,e){b=a(b);var i=z(b.val());if(i||d.allowEmptyOption)if(p.hasOwnProperty(i)){if(e){var j=p[i][h];j?a.isArray(j)?j.push(e):p[i][h]=[j,e]:p[i][h]=e}}else{var k=q(b)||{};k[f]=k[f]||b.text(),k[g]=k[g]||i,k[h]=k[h]||e,p[i]=k,o.push(k),b.is(":selected")&&c.items.push(i)}},s=function(b){var d,e,f,g,h;for(b=a(b),f=b.attr("label"),f&&(g=q(b)||{},g[i]=f,g[j]=f,c.optgroups.push(g)),h=a("option",b),d=0,e=h.length;d<e;d++)r(h[d],f)};for(c.maxItems=b.attr("multiple")?null:1,n=b.children(),k=0,l=n.length;k<l;k++)m=n[k].tagName.toLowerCase(),"optgroup"===m?s(n[k]):"option"===m&&r(n[k])};return this.each(function(){if(!this.selectize){var e,f=a(this),g=this.tagName.toLowerCase(),h=f.attr("placeholder")||f.attr("data-placeholder");h||d.allowEmptyOption||(h=f.children('option[value=""]').text());var i={placeholder:h,options:[],optgroups:[],items:[]};"select"===g?l(f,i):k(f,i),e=new M(f,a.extend(!0,{},c,i,b))}})},a.fn.selectize.defaults=M.defaults,a.fn.selectize.support={validity:x},M.define("drag_drop",function(b){if(!a.fn.sortable)throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');if("multi"===this.settings.mode){var c=this;c.lock=function(){var a=c.lock;return function(){var b=c.$control.data("sortable");return b&&b.disable(),a.apply(c,arguments)}}(),c.unlock=function(){var a=c.unlock;return function(){var b=c.$control.data("sortable");return b&&b.enable(),a.apply(c,arguments)}}(),c.setup=function(){var b=c.setup;return function(){b.apply(this,arguments);var d=c.$control.sortable({items:"[data-value]",forcePlaceholderSize:!0,disabled:c.isLocked,start:function(a,b){b.placeholder.css("width",b.helper.css("width")),d.css({overflow:"visible"})},stop:function(){d.css({overflow:"hidden"});var b=c.$activeItems?c.$activeItems.slice():null,e=[];d.children("[data-value]").each(function(){e.push(a(this).attr("data-value"))}),c.setValue(e),c.setActiveItem(b)}})}}()}}),M.define("dropdown_header",function(b){var c=this;b=a.extend({title:"Untitled",headerClass:"selectize-dropdown-header",titleRowClass:"selectize-dropdown-header-title",labelClass:"selectize-dropdown-header-label",closeClass:"selectize-dropdown-header-close",html:function(a){return'<div class="'+a.headerClass+'"><div class="'+a.titleRowClass+'"><span class="'+a.labelClass+'">'+a.title+'</span><a href="javascript:void(0)" class="'+a.closeClass+'">&times;</a></div></div>'}},b),c.setup=function(){var d=c.setup;return function(){d.apply(c,arguments),c.$dropdown_header=a(b.html(b)),c.$dropdown.prepend(c.$dropdown_header)}}()}),M.define("optgroup_columns",function(b){var c=this;b=a.extend({equalizeWidth:!0,equalizeHeight:!0},b),this.getAdjacentOption=function(b,c){var d=b.closest("[data-group]").find("[data-selectable]"),e=d.index(b)+c;return e>=0&&e<d.length?d.eq(e):a()},this.onKeyDown=function(){var a=c.onKeyDown;return function(b){var d,e,f,g;return!this.isOpen||b.keyCode!==j&&b.keyCode!==m?a.apply(this,arguments):(c.ignoreHover=!0,g=this.$activeOption.closest("[data-group]"),d=g.find("[data-selectable]").index(this.$activeOption),g=b.keyCode===j?g.prev("[data-group]"):g.next("[data-group]"),f=g.find("[data-selectable]"),e=f.eq(Math.min(f.length-1,d)),void(e.length&&this.setActiveOption(e)))}}();var d=function(){var a,b=d.width,c=document;return"undefined"==typeof b&&(a=c.createElement("div"),a.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',a=a.firstChild,c.body.appendChild(a),b=d.width=a.offsetWidth-a.clientWidth,c.body.removeChild(a)),b},e=function(){var e,f,g,h,i,j,k;if(k=a("[data-group]",c.$dropdown_content),f=k.length,f&&c.$dropdown_content.width()){if(b.equalizeHeight){for(g=0,e=0;e<f;e++)g=Math.max(g,k.eq(e).height());k.css({height:g})}b.equalizeWidth&&(j=c.$dropdown_content.innerWidth()-d(),h=Math.round(j/f),k.css({width:h}),f>1&&(i=j-h*(f-1),k.eq(f-1).css({width:i})))}};(b.equalizeHeight||b.equalizeWidth)&&(B.after(this,"positionDropdown",e),B.after(this,"refreshOptions",e))}),M.define("remove_button",function(b){b=a.extend({label:"&times;",title:"Remove",className:"remove",append:!0},b);var c=function(b,c){c.className="remove-single";var d=b,e='<a href="javascript:void(0)" class="'+c.className+'" tabindex="-1" title="'+A(c.title)+'">'+c.label+"</a>",f=function(a,b){return a+b};b.setup=function(){var g=d.setup;return function(){if(c.append){var h=a(d.$input.context).attr("id"),i=(a("#"+h),d.settings.render.item);d.settings.render.item=function(a){return f(i.apply(b,arguments),e)}}g.apply(b,arguments),b.$control.on("click","."+c.className,function(a){a.preventDefault(),d.isLocked||d.clear()})}}()},d=function(b,c){var d=b,e='<a href="javascript:void(0)" class="'+c.className+'" tabindex="-1" title="'+A(c.title)+'">'+c.label+"</a>",f=function(a,b){var c=a.search(/(<\/[^>]+>\s*)$/);return a.substring(0,c)+b+a.substring(c)};b.setup=function(){var g=d.setup;return function(){if(c.append){var h=d.settings.render.item;d.settings.render.item=function(a){return f(h.apply(b,arguments),e)}}g.apply(b,arguments),b.$control.on("click","."+c.className,function(b){if(b.preventDefault(),!d.isLocked){var c=a(b.currentTarget).parent();d.setActiveItem(c),d.deleteSelection()&&d.setCaret(d.items.length)}})}}()};return"single"===this.settings.mode?void c(this,b):void d(this,b)}),M.define("restore_on_backspace",function(a){var b=this;a.text=a.text||function(a){return a[this.settings.labelField]},this.onKeyDown=function(){var c=b.onKeyDown;return function(b){var d,e;return b.keyCode===p&&""===this.$control_input.val()&&!this.$activeItems.length&&(d=this.caretPos-1,d>=0&&d<this.items.length)?(e=this.options[this.items[d]],this.deleteSelection(b)&&(this.setTextboxValue(a.text.apply(this,[e])),this.refreshOptions(!0)),void b.preventDefault()):c.apply(this,arguments)}}()}),M});;/*global store, countlyView, $, countlyGlobal, production, Handlebars, jQuery, app, CountlyHelpers, Backbone, DBViewerView, CountlyDrop, countlyDBviewer*/
window.DBViewerView = countlyView.extend({
    initialize: function() {
        this.dbviewer_selected_app = "all";
        this.filter = (store.get("countly_collectionfilter")) ? store.get("countly_collectionfilter") : "{}";
        this.limit = (store.get("countly_limitfilter")) ? store.get("countly_limitfilter") : 20;
        this.selected_projection = (store.get('dbviewer_projection_values') ? store.get('dbviewer_projection_values') : "");
    },
    beforeRender: function() {
        if (this.template) {
            return $.when(countlyDBviewer.initialize(this.dbviewer_selected_app)).then(function() { });
        }
        else {
            var self = this;
            return $.when($.get(countlyGlobal.path + '/dbviewer/templates/dbviewer.html', function(src) {
                self.template = Handlebars.compile(src);
            }), countlyDBviewer.initialize(self.dbviewer_selected_app)).then(function() { });
        }
    },
    renderCommon: function() {
        var self = this;
        this.templateData = {
            "page-title": jQuery.i18n.map["dbviewer.title"],
            "back": jQuery.i18n.map["dbviewer.back"]
        };
        if (this.document) {
            this.renderDocument();
        }
        else if (this.collection) {
            this.page = this.page || 1;
            this.renderCollections();
        }
        else if (this.db) {
            this.renderDb();
        }
        else {
            this.renderMain();
        }

        var prepareSwitch = function() {
            // clear app-list
            $('#app-list').html("");
            // prepend "all apps" link to list
            $('#app-list').prepend('<div data-value="all" class="app-option item" data-localize=""><span class="app-title-in-dropdown">' + $.i18n.map["common.all"] + '</span></div>');
            // append list items
            for (var key in countlyGlobal.apps) {
                $('#app-list').append('<div data-value="' + countlyGlobal.apps[key]._id + '" class="app-option item" data-localize=""><span class="app-title-in-dropdown">' + countlyGlobal.apps[key].name + '</span></div>');
            }
            // set height 
            if ($('#dbviewer').height() < (window.innerHeight - 150)) {
                $('#dbviewer').css({"height": (window.innerHeight - 150) + "px"});
                $('#accordion > div').css({"height": (window.innerHeight - 150) + "px"});
            }

            if (store.get('dbviewer_selected_app')) {
                $('#app-selector').html(store.get('dbviewer_selected_app').name);
            }
            else {
                $('#app-selector').html((self.dbviewer_selected_app === "all") ? $.i18n.map["common.all"] : self.dbviewer_selected_app.name);
            }

        };

        // wait until render completed
        setTimeout(function() {
            prepareSwitch();
            // handle app select event
            $("body").off("click", ".app-option").on("click", ".app-option", function() {
                self.dbviewer_selected_app = "all";
                store.remove('dbviewer_selected_app');
                for (var key in countlyGlobal.apps) {
                    if (countlyGlobal.apps[key]._id === $(this).data('value')) {
                        self.dbviewer_selected_app = countlyGlobal.apps[key];
                        store.set('dbviewer_selected_app', self.dbviewer_selected_app);
                    }
                }
                prepareSwitch();
                countlyDBviewer.initialize(self.dbviewer_selected_app._id)
                    .then(function() {
                        var filteredData = countlyDBviewer.getData();
                        filteredData.forEach(function(db) {
                            $('.dbviewer-collection-list-' + db.name).css({"height": (window.innerHeight - 150) + "px"});
                            var filteredCollectionListKeys = Object.keys(filteredData[0].collections);
                            var filteredCollectionListValues = Object.values(filteredData[0].collections);

                            filteredCollectionListValues.sort(function(a, b) {
                                if (a < b) {
                                    return -1;
                                }
                                if (a > b) {
                                    return 1;
                                }
                                return 0;
                            });

                            filteredCollectionListKeys.sort(function(a, b) {
                                if (a < b) {
                                    return -1;
                                }
                                if (a > b) {
                                    return 1;
                                }
                                return 0;
                            });

                            $('.dbviewer-collection-list-' + db.name).html("");
                            filteredCollectionListValues.forEach(function(collection, index) {
                                $('.dbviewer-collection-list-' + db.name).append('<li class="searchable"><a class="dbviewer-link-in-collection-list" href="#/manage/db/' + db.name + '/' + collection + '">' + filteredCollectionListKeys[index] + '</a></li>');
                            });
                        });
                    });
            });
        }, 300);

        // handle when input value changed
        $('.dbviewer-collection-filter-input').on("change paste keyup", function() {
            self.renderSearchResults($(this));
        });
    },
    refresh: function() { },
    renderMain: function() {
        var self = this;
        var dbs = countlyDBviewer.getData();
        this.templateData.dbs = dbs;
        $(this.el).html(this.template(this.templateData));
        this.accordion();
        // handle when input value changed
        $('.dbviewer-collection-filter-input').on("change paste keyup", function() {
            self.renderSearchResults($(this));
        });
    },
    renderDb: function() {
        var dbs = countlyDBviewer.getData();
        this.templateData.dbs = dbs;
        this.templateData.db = this.db;
        $(this.el).html(this.template(this.templateData));
        this.accordion();
    },
    renderSearchResults: function(el) {
        var searchText = new RegExp(el.val().toLowerCase().replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')),
            searchInside = el.parent().next().find(".searchable");
        searchInside.filter(function() {
            return !(searchText.test($(this).text().toLowerCase()));
        }).css('display', 'none');
        searchInside.filter(function() {
            return searchText.test($(this).text().toLowerCase());
        }).css('display', 'block');
    },
    renderCollections: function() {
        var self = this;
        // r we have cache query properties for this collection?
        // if collection properties is exist load them from localStorage
        if ((store.get('dbviewer_current_collection') && store.get('dbviewer_current_collection') === self.collection)) {
            // prepare projection values if it's exist on localStorage
            if (store.get('dbviewer_projection_values')) {
                self.projection = {};
                try {
                    self.selected_projection.split(",").forEach(function(p) {
                        self.projection[p] = 1;
                    });
                    self.projection = JSON.stringify(self.projection);
                }
                catch (isEmpty) {
                    self.projection = "{}";
                }
            }
            // set empty object as default if not exist on localStorage
            else {
                self.projection = "{}";
            }
            // prepare sort values if it's exist on localStorage
            if (store.get('dbviewer_sort_value') && store.get('dbviewer_sort_show')) {
                self.sort = {};
                self.sort[store.get('dbviewer_sort_value')] = parseInt(store.get('dbviewer_sort_type'));
                self.sort = JSON.stringify(self.sort);
                self.isSort = true;
            }
            // set empty object as default if not exist on localStorage
            else {
                self.sort = "{}";
            }
        }
        // set empty object both properties if different collection which on render progress 
        else {
            self.projection = "{}";
            self.sort = "{}";
        }

        $.when(countlyDBviewer.loadCollections(this.db, this.collection, this.page, this.filter, this.limit, this.sort, this.projection, this.isSort)).then(function() {
            var dbs = countlyDBviewer.getData();
            var data = countlyDBviewer.getCollections();
            // sorting option is active?
            self.isSort = true;
            self.templateData.dbs = dbs;
            self.templateData.db = self.db;
            self.templateData.collection = self.collection;
            self.templateData.placeholder = { "_id": "some_id" };
            self.templateData.data = data;
            self.templateData.prev = Math.max(1, data.curPage - 1);
            self.templateData.next = Math.min(data.pages, data.curPage + 1);
            self.templateData.start = Math.max(1, data.curPage - 5);
            self.templateData.end = Math.min(data.pages, data.curPage + 5);

            $(self.el).html(self.template(self.templateData));
            //trigger for render localizations manually
            app.localize();
            self.accordion();
            if (store.get('dbviewer_selected_app') === "all") {
                $('#app-selector').html($.i18n.map["common.all"]);
            }
            else {
                $('#app-selector').html((self.dbviewer_selected_app === "all") ? $.i18n.map["common.all"] : self.dbviewer_selected_app.name);
            }

            if (self.filter !== "{}") {
                $(".dbviewer-collection-filter").val(self.filter);
            }

            /*
			Set dbviewer configurations variables
			by the state of current collection
			is that same collection before refresh? or not?
			*/
            if (!(store.get('dbviewer_current_collection') && store.get('dbviewer_current_collection') === self.collection)) {
                self.selected_projection = {};
                self.sort = {};
                store.set('dbviewer_current_collection', self.collection);
                store.set('dbviewer_projection_show', false);
                store.set('dbviewer_sort_show', false);
                store.remove('dbviewer_sort_value');
                store.remove('dbviewer_projection_values');
                store.remove('countly_collectionoptions');
            }
            else {
                // projection area is open?
                if (store.get('dbviewer_projection_show')) {
                    $('.dbviewer-return-checkbox').removeClass('fa-square-o').addClass('fa-check-square');
                    $("#dbviewer-projection-area").css({ "display": "block" });
                }
                // sort option is active?
                if (store.get('dbviewer_sort_show') && self.isSort) {
                    $('.dbviewer-sort-checkbox').removeClass('fa-square-o').addClass('fa-check-square');
                    $("#dbviewer-sort-area").css({ "display": "block" });
                }
                // configure div states dynamically
                $('.dbviewer-filter-area').css({ "display": "block" });
                $('.dbviewer-filter-hide').css({ "display": "inline-block" });
                $('.dbviewer-filter-show').css({ "display": "none" });
                $('.dbviewer-filter-status').css({ "display": "block" });
            }

            // define qstring for export
            var qstring = {
                api_key: countlyGlobal.member.api_key,
                db: self.db,
                collection: self.collection,
                query: self.filter,
                sort: self.isSort ? self.sort : {},
                projection: self.projection
            };
            // export dropdown configuration
            new CountlyDrop({
                target: document.querySelector('#dbviewer-export-button'),
                content: CountlyHelpers.export(data.total, qstring).removeClass("dialog")[0],
                position: 'bottom right',
                remove: true,
                openOn: 'click'
            });
            // options array for sorting & projection inputs
            var options = [];
            // if options are exist and rendering in same collection 
            // load options from localStorage
            if ((store.get('dbviewer_current_collection') && store.get('dbviewer_current_collection') === self.collection) && store.get('countly_collectionoptions')) {
                options = JSON.parse(store.get('countly_collectionoptions'));
            }
            // generate new options array
            else {
                // try to convert array properties of current collection
                try {
                    Object.keys(data.collections[1]).forEach(function(d) {
                        options.push({ "key": d });
                    });
                    store.set('countly_collectionoptions', JSON.stringify(options));
                    self.isSort = true;
                }
                catch (NoData) {
                    // if there is no result for current query
                    // hide sorting options
                    // and set isSort option as false
                    $('#dbviewer-sort-area').css({ "display": "none" });
                    $('#dbviewer-show-sort-wrapper').css({ "display": "none" });
                    self.isSort = false;
                }
            }

            // jQuery selectize handler for projection input
            $('#dbviewer-projection').selectize({
                persist: true,
                maxItems: null,
                valueField: 'key',
                labelField: 'key',
                searchField: ['key'],
                options: options,
                render: {
                    item: function(item) {
                        return '<div>' +
							item.key +
							'</div>';
                    },
                    option: function(item) {
                        var label = item.key;
                        return '<div>' +
							'<span class="label">' + label + '</span>' +
							'</div>';
                    }
                },
                createFilter: function() {
                    return true;
                },
                create: function(input) {
                    return {
                        "key": input
                    };
                }
            });
            // render sort options
            options.forEach(function(o) {
                $('.dbviewer-sort-options-list').append('<div data-value="' + o.key + '" class="dbviewer-sort-param-selector item sort-field-select-item">' + o.key + '</div>');
            });
            // set first value as default
            if (store.get('dbviewer_sort_value') === null || store.get('dbviewer_sort_value') === undefined) {
                if (options.length > 0) {
                    store.set('dbviewer_sort_value', options[0].key);
                    store.set('dbviewer_sort_type', 1);
                    $('.dbviewer-default-sort-param').append('<div class="text">' + options[0].key + '</div>');
                }
            }
            else {
                $('.dbviewer-default-sort-param').append('<div class="text">' + store.get('dbviewer_sort_value') + '</div>');
            }

            // on click handler for select field changer
            $('.sort-field-select-item').on('click', function() {
                self.sort = {};
                self.sort[$(this).data('value')] = store.get('dbviewer_sort_type');
                store.set('dbviewer_sort_value', $(this).data('value'));
            });

            // fill inputs with projection and sort values if in the same collection 
            if (store.get('dbviewer_current_collection') && store.get('dbviewer_current_collection') === self.collection) {
                if (typeof self.selected_projection !== "object" && self.selected_projection !== "") {
                    self.selected_projection.split(",").forEach(function(tag) {
                        $('#dbviewer-projection')[0].selectize.addOption({ "key": tag });
                        $('#dbviewer-projection')[0].selectize.addItem(tag);
                    });
                }
                if (store.get('dbviewer_sort_value')) {
                    $('#dbviewer-sort_param').val(store.get('dbviewer_sort_value')).change();
                    $('#dbviewer-sort_type').val(store.get('dbviewer_sort_type')).change();
                }
            }

            // collection name filter at the left side
            // also called as collection search
            $(".dbviewer-collection-filter").on("change paste keyup", function() {
                var jsonlint = false;
                try {
                    var o = window.jsonlite.parse($(this).val());
                    jsonlint = o && typeof o === 'object';
                }
                catch (e) {
                    jsonlint = false;
                }
                // show and hide json status indicator by conditions
                if (jsonlint || ($(this).val() === "" && !jsonlint)) {
                    if (!($(this).val() === "")) {
                        $(this).val(JSON.stringify(o));
                    }
                    $('.dbviewer-correct-json').css({ "display": 'block' });
                    $('.dbviewer-incorrect-json').css({ "display": 'none' });
                    $("#dbviewer-collection-filter").css({ 'padding': '3px', 'border': '1px solid #2FA732', 'background-color': '#2FA732', 'color': 'white' });
                }
                else {
                    $('.dbviewer-correct-json').css({ "display": 'none' });
                    $('.dbviewer-incorrect-json').css({ "display": 'block' });
                    $("#dbviewer-collection-filter").css({ 'padding': '3px', 'border': '1px solid #D63E40', 'background-color': '#D63E40', 'color': 'white' });
                }
            });

            /*
				Event Listeners
			*/
            $('.dbviewer-filter-show').on('click', function() {
                $('.dbviewer-filter-area').css({ "display": "block" });
                $('.dbviewer-filter-hide').css({ "display": "inline-block" });
                $('.dbviewer-filter-show').css({ "display": "none" });
            });

            $('.dbviewer-filter-hide').on('click', function() {
                $('.dbviewer-filter-area').css({ "display": "none" });
                $('.dbviewer-filter-hide').css({ "display": "none" });
                $('.dbviewer-filter-show').css({ "display": "inline-block" });
            });

            // decide which button is active?
            // and set it active
            if (store.get('dbviewer_sort_type') !== null) {
                if (store.get('dbviewer_sort_type') === -1) {
                    $('#dbviewer-sort-descend').addClass('dbviewer-sort-active');
                    $('#dbviewer-sort-ascend').removeClass('dbviewer-sort-active');
                }
                else {
                    $('#dbviewer-sort-ascend').addClass('dbviewer-sort-active');
                    $('#dbviewer-sort-descend').removeClass('dbviewer-sort-active');
                }
            }

            // on click handlers for sort type changer
            // asc
            $('#dbviewer-sort-ascend').on('click', function() {
                self.sort[store.get('dbviewer_sort_value')] = 1;
                store.set('dbviewer_sort_type', 1);
                $('#dbviewer-sort-descend').removeClass('dbviewer-sort-active');
                $(this).addClass('dbviewer-sort-active');
                $('#dbviewer-sort-descend').css({"border-left": "0px"});
                $('#dbviewer-sort-ascend').css({"border-right": "1px solid #2eb52b"});
            });
            // on click handlers for sort type changer
            // desc
            $('#dbviewer-sort-descend').on('click', function() {
                self.sort[store.get('dbviewer_sort_value')] = -1;
                store.set('dbviewer_sort_type', -1);
                $('#dbviewer-sort-ascend').removeClass('dbviewer-sort-active');
                $(this).addClass('dbviewer-sort-active');
                $('#dbviewer-sort-ascend').css({"border-right": "0px"});
                $('#dbviewer-sort-descend').css({"border-left": "1px solid #2eb52b"});
            });

            $('#dbviewer-show-projection').change(function() {
                if (!store.get('dbviewer_projection_show')) {
                    $("#dbviewer-projection-area").css({ "display": "block" });
                    store.set('dbviewer_projection_show', true);
                    $('.dbviewer-return-checkbox').removeClass('fa-square-o').addClass('fa-check-square');
                }
                else {
                    $("#dbviewer-projection-area").css({ "display": "none" });
                    store.set('dbviewer_projection_show', false);
                    $('.dbviewer-return-checkbox').removeClass('fa-check-square').addClass('fa-square-o');
                }
            });

            $('#dbviewer-show-sort').change(function() {
                if (!store.get('dbviewer_sort_show')) {
                    $("#dbviewer-sort-area").css({ "display": "block" });
                    $('.dbviewer-sort-checkbox').removeClass('fa-square-o').addClass('fa-check-square');
                    store.set('dbviewer_sort_show', true);
                    self.isSort = true;
                }
                else {
                    $("#dbviewer-sort-area").css({ "display": "none" });
                    $('.dbviewer-sort-checkbox').addClass('fa-square-o').removeClass('fa-check-square');
                    store.set('dbviewer_sort_show', false);
                    self.isSort = false;
                }
            });

            // when the filter button fired
            $("#dbviewer-apply-filter-button").on('click', function() {
                $('.dbviewer-filter-status').css({ "display": "block" });
                // prepare projection by input values
                var projection = {};
                if (store.get('dbviewer_projection_show') && $('#dbviewer-projection').val() !== "") {
                    store.set('dbviewer_projection_values', $('#dbviewer-projection').val());
                    self.selected_projection = $('#dbviewer-projection').val();
                    $('#dbviewer-projection').val().split(",").forEach(function(p) {
                        projection[p] = 1;
                    });
                }
                else {
                    self.selected_projection = {};
                    self.projection = {};
                    store.remove('dbviewer_projection_values');
                }
                // prepare filter by input values
                var filter = $(".dbviewer-collection-filter").val() === "" ? JSON.stringify({}) : $(".dbviewer-collection-filter").val();
                // prepare sort by input values
                self.filter = filter;
                self.projection = projection;
                // save into localstorage current parameters
                store.set("countly_collectionfilter", self.filter);
                // go go go!
                if (Backbone.history.fragment === "/manage/db/" + self.db + "/" + self.collection) {
                    self.renderCollections();
                }
                else {
                    app.navigate("#/manage/db/" + self.db + "/" + self.collection, true);
                }
            });

            $(".result-limit").val(self.limit);
            $(".result-limit").change(function() {
                self.limit = this.value;
                store.set("countly_limitfilter", self.limit);
                window.location.reload(true);
            });
            // handle when input value changed
            $('.dbviewer-collection-filter-input').on("change paste keyup", function() {
                self.renderSearchResults($(this));
            });
            $('.dbviewer-gray-area').css({ "display": "block" });
            $('.dbviewer-back-button').css({ "display": "block" });
            $('.dbviewer-documents-area').css({ "border-right": "1px solid #DBDBDB", "border-left": "1px solid #DBDBDB", "border-bottom": "1px solid #DBDBDB" });
        });

    },
    renderDocument: function() {
        var self = this;
        $.when(countlyDBviewer.loadDocument(this.db, this.collection, this.document)).then(function() {
            var dbs = countlyDBviewer.getData();
            var data = countlyDBviewer.getDocument();
            self.templateData.dbs = dbs;
            self.templateData.db = self.db;
            self.templateData.collection = self.collection;
            self.templateData.document = self.document;
            self.templateData.data = data;
            self.templateData.page = self.page || 1;
            $(self.el).html(self.template(self.templateData));
            $('.dbviewer-doc-back-button').css({ "display": "block" });
            $('#json-renderer').jsonViewer(data);
            self.accordion();
        });
    },
    accordion: function() {
        var self = this;
        $("#accordion").accordion({
            collapsible: true,
            active: (self.db === "countly_drill") ? 1 : 0
        });
        $("#accordion a").removeClass("selected");
        $("#accordion a[href='#" + Backbone.history.fragment + "']").addClass("selected");
    }
});

//register views
app.dbviewerView = new DBViewerView();

app.route('/manage/db', 'db', function() {
    this.dbviewerView.db = null;
    this.dbviewerView.collection = null;
    this.dbviewerView.document = null;
    this.dbviewerView.page = null;
    this.renderWhenReady(this.dbviewerView);
});

app.route('/manage/db/:dbs', 'dbs', function(db) {
    this.dbviewerView.db = db;
    this.dbviewerView.collection = null;
    this.dbviewerView.document = null;
    this.dbviewerView.page = null;
    this.renderWhenReady(this.dbviewerView);
});

app.route('/manage/db/:dbs/:collection', 'dbs', function(db, collection) {
    this.dbviewerView.db = db;
    this.dbviewerView.collection = collection;
    this.dbviewerView.document = null;
    this.dbviewerView.page = null;
    if (store.get("countly_collection") !== collection) {
        store.set("countly_collectionfilter", "{}");
        store.set("countly_collection", collection);
        this.dbviewerView.filter = "{}";
    }
    this.renderWhenReady(this.dbviewerView);
});

app.route('/manage/db/:dbs/:collection/*document', 'dbs', function(db, collection, document) {
    this.dbviewerView.db = db;
    this.dbviewerView.collection = collection;
    this.dbviewerView.document = document;
    this.renderWhenReady(this.dbviewerView);
});

app.route('/manage/db/:dbs/:collection/page/:page', 'dbs', function(db, collection, page) {
    this.dbviewerView.db = db;
    this.dbviewerView.collection = collection;
    this.dbviewerView.document = null;
    this.dbviewerView.page = parseInt(page);
    if (store.get("countly_collection") !== collection) {
        store.set("countly_collectionfilter", "{}");
        this.dbviewerView.filter = "{}";
        store.set("countly_collection", collection);
    }
    this.renderWhenReady(this.dbviewerView);
});

$(document).ready(function() {
    if (!production) {
        CountlyHelpers.loadJS("dbviewer/javascripts/json.human.js");
        CountlyHelpers.loadJS("dbviewer/javascripts/jquery.json-viewer.js");
    }
    var menu = '<a href="#/manage/db" class="item">' +
		'<div class="logo-icon fa fa-database"></div>' +
		'<div class="text" data-localize="dbviewer.title"></div>' +
		'</a>';
    if ($('#management-submenu .help-toggle').length) {
        $('#management-submenu .help-toggle').before(menu);
    }
});;/*global countlyCommon, countlyGlobal, jQuery*/
(function(countlyAssistant, $, undefined) {

    //Private Properties
    var _data = {};
    countlyAssistant.initialize = function(isRefresh) {
        if (countlyCommon.ACTIVE_APP_ID === 0) {
            //no app id available, most likely a new server without a app created
            _data = {
                id: 0,
                isMobile: false,
                notifications: [],
                notifs_saved_global: [],
                notifs_saved_private: []
            };

            return;
        }
        else {
            return $.ajax({
                type: "GET",
                url: countlyCommon.API_URL + "/o/assistant",
                data: {
                    api_key: countlyGlobal.member.api_key,
                    app_id: countlyCommon.ACTIVE_APP_ID,
                    display_loader: !isRefresh,
                    "preventRequestAbort": true
                },
                success: function(json) {
                    _data = json;
                }
            });
        }
    };

    countlyAssistant.getData = function() {
        return _data;
    };

    var plugins = {};

    //countlyAssistant.addPlugin("crashes", "new_crash", function(){//do something})
    countlyAssistant.addPlugin = function(plugin, type, func) {
        if (!plugins[plugin]) {
            plugins[plugin] = {};
        }
        plugins[plugin][type] = func;
    };



    var timeSince = function(date) {

        var seconds = Math.floor((new Date() - date) / 1000);
        var interval = Math.floor(seconds / 31536000);

        if (interval > 1) {
            return interval + " years ago";
        }
        interval = Math.floor(seconds / 2592000);
        if (interval > 1) {
            return interval + " months ago";
        }
        interval = Math.floor(seconds / 86400);
        if (interval > 1) {
            return interval + " days ago";
        }
        interval = Math.floor(seconds / 3600);
        if (interval > 1) {
            return interval + " hours ago";
        }
        interval = Math.floor(seconds / 60);
        if (interval > 1) {
            return interval + " minutes ago";
        }
        return "now";
        //return Math.floor(seconds) + " seconds";
    };

    /**
     * @param {Array} givenData fields to be checked
     * @return {integer} the amount of fields changed
     * Sanatizes the given notification data array. Replaces "null" and "undefined" with "0"
     * Returns the amount of fields replaced
     * todo test this
     */
    var sanitizeDataArray = function(givenData) {
        var changes = 0;
        for (var a = 0 ; a < givenData.length; a++) {
            if (givenData[a] === null) {
                givenData[a] = 0;
                changes++;
            }
            else if (givenData[a] === undefined) {
                givenData[a] = 0;
                changes++;
            }
        }
        return changes;
    };

    var pnBase = "assistant-base";
    var pnBaseGeneral = "assistant-base-general";
    var pnStarRating = "star-rating";

    var fixData = function(given_data) {
        var the_notifs = [given_data.notifications, given_data.notifs_saved_private, given_data.notifs_saved_global];

        for (var b = 0 ; b < the_notifs.length ; b++) {
            //pre parse all dates for performance
            for (var c = 0 ; c < the_notifs[b].length ; c++) {
                the_notifs[b][c].createdDateUTC = Math.round(Date.parse(the_notifs[b][c].created_date) / 1000);
            }

            //set the notification lists to be from newer to older
            the_notifs[b].sort(function(x, y) {
                return y.createdDateUTC - x.createdDateUTC;
            });

            for (var a = 0; a < the_notifs[b].length; a++) {
                var obj = the_notifs[b][a];

                //check if a plugin provids it's own formating for it's notifications
                if (plugins[obj.plugin_name] && plugins[obj.plugin_name][obj.notif_type]) {
                    var styling_info = plugins[obj.plugin_name][obj.notif_type](obj);

                    obj.title = styling_info.title;
                    obj.msg = styling_info.msg;
                    obj.icon_styling_class = styling_info.icon_class;
                }
                else { //use the default style
                    //prepare notification message
                    var messageArr = obj.data.slice();//create copy of data
                    var replacedAmount = sanitizeDataArray(messageArr);
                    if (replacedAmount > (messageArr.length / 2)) {
                        //more than half of data fields are not valid
                        //todo should output log warning
                        the_notifs[b].splice(a, 1);
                        a--;
                        continue;
                    }

                    messageArr.unshift(obj.i18n_id + ".message");//put the message in front of the data
                    obj.msg = jQuery.i18n.prop.apply(null, messageArr);//insert fields where needed

                    //create a table for a few specific tickets
                    {
                        var twoColumnTable = function(data, ratioLeft, ratioRight) {
                            ratioLeft = ratioLeft || "30%";
                            ratioRight = ratioRight || "70%";

                            var ret = '<div class="sTable">';

                            for (var index = 0 ; index < data.length ; index++) {
                                ret += '<div class="sTableRow' + ((index > 0) ? ' sTableRowTopBorder' : '') + '">' +
                                            '<div style="width:' + ratioLeft + ';" class="sTableCell center-children"><div class="inner"><strong>' + data[index].l + '</strong></div></div>' +
                                            '<div style="width:' + ratioRight + ';" class="sTableCell left-align">' + data[index].r + '</div>' +
                                        '</div>';
                            }

                            ret += '</div><br>';
                            return ret;
                        };

                        //web referrals
                        if (obj.plugin_name === "assistant-base" && (obj.notif_type === "2" && obj.notif_subtype === "8")) {
                            var dataToPassWebReferrals = [];
                            dataToPassWebReferrals.push({l: obj.data[0], r: obj.data[1] + ' visitors, ' + obj.data[2] + ' visits'});
                            dataToPassWebReferrals.push({l: obj.data[3], r: obj.data[4] + ' visitors, ' + obj.data[5] + ' visits'});
                            dataToPassWebReferrals.push({l: obj.data[6], r: obj.data[7] + ' visitors, ' + obj.data[8] + ' visits'});
                            var tableContent_8 = twoColumnTable(dataToPassWebReferrals);

                            obj.msg = tableContent_8 + obj.msg;
                        }

                        //app sources
                        if (obj.plugin_name === "assistant-base" && (obj.notif_type === "2" && obj.notif_subtype === "7")) {

                            var dataToPassAppSources = [];
                            dataToPassAppSources.push({l: obj.data[0], r: obj.data[1] + " installs"});
                            dataToPassAppSources.push({l: obj.data[2], r: obj.data[3] + " installs"});
                            dataToPassAppSources.push({l: obj.data[4], r: obj.data[5] + " installs"});
                            var tableContent_7 = twoColumnTable(dataToPassAppSources);

                            obj.msg = tableContent_7 + obj.msg;
                        }

                        //session duration
                        if (obj.plugin_name === "assistant-base" && (obj.notif_type === "2" && obj.notif_subtype === "5" ||
                            obj.notif_type === "2" && obj.notif_subtype === "6")) {

                            var dataToPassSessionDuration = [];
                            dataToPassSessionDuration.push({l: obj.data[0] + ' minutes ' + obj.data[1] + ' seconds', r: 'this week'});
                            dataToPassSessionDuration.push({l: obj.data[2] + ' minutes ' + obj.data[3] + ' seconds', r: 'previous week'});
                            var tableContent_56 = twoColumnTable(dataToPassSessionDuration, "40%", "60%");

                            obj.msg = tableContent_56 + obj.msg;
                        }

                        //active users
                        if (obj.plugin_name === "assistant-base" && (obj.notif_type === "2" && obj.notif_subtype === "1" ||
                            obj.notif_type === "2" && obj.notif_subtype === "2" ||
                            obj.notif_type === "2" && obj.notif_subtype === "3" ||
                            obj.notif_type === "2" && obj.notif_subtype === "4")) {

                            var dataToPassActiveUsers = [];
                            dataToPassActiveUsers.push({l: obj.data[0], r: "users this week"});
                            dataToPassActiveUsers.push({l: obj.data[1], r: "users previous week"});
                            var tableContent_1234 = twoColumnTable(dataToPassActiveUsers);

                            obj.msg = tableContent_1234 + obj.msg;
                        }

                        //page view metrics
                        if (obj.plugin_name === "assistant-base" && (obj.notif_type === "2" && obj.notif_subtype === "9")) {
                            var createSingleTable = function(headerText, metricURL, metricCount, metricNames) {
                                return '' +
                                    '<div class="rTable">' +
                                        '<div class="rTableHeading">' +
                                            '<div class="rTableHead rUppercase">' + headerText + '</div>' +
                                        '</div>' +
                                        '<div class="rTableRow">' +
                                            '<div class="rTableCell">' + metricURL + '</div>' +
                                        '</div>' +
                                        '<div class="rTableRow">' +
                                            '<div class="rTableCell">' + '<div class="rMetricCount"><strong>' + metricCount + '</strong></div>' + '<div class="rMetricName rUppercase"> ' + metricNames + '</div>' + '</div>' +
                                        '</div>' +
                                    '</div>';
                            };

                            var tableContent_9 = "";

                            tableContent_9 += createSingleTable("Most visited page", obj.data[0], obj.data[1], "visits");
                            tableContent_9 += createSingleTable("Most popular page entry", obj.data[2], obj.data[3], "entries");
                            tableContent_9 += createSingleTable("People exited most from", obj.data[4], obj.data[5], "exits");
                            tableContent_9 += createSingleTable("Most bounces in", obj.data[6], obj.data[7], "bounces");
                            tableContent_9 += createSingleTable("Most time spent in", obj.data[8], obj.data[9], "minutes");

                            obj.msg = tableContent_9;// + obj.msg;
                        }
                    }

                    //todo is this a security risk?
                    obj.msg = countlyCommon.decode(obj.msg);//decode given urls

                    //prepare notification title
                    var titleArr = obj.data.slice();//create copy of data
                    titleArr.unshift(obj.i18n_id + ".title");//put the title in front of the data
                    obj.title = jQuery.i18n.prop.apply(null, titleArr);//insert fields where needed


                    //set icon styling
                    if (obj.notif_type === "1") { //quick tips
                        obj.icon_styling_class = "assistant_icon_quicktips";
                    }
                    else if (obj.notif_type === "2") { //insight
                        obj.icon_styling_class = "assistant_icon_insight";
                    }
                    else if (obj.notif_type === "3") { //announcments
                        obj.icon_styling_class = "assistant_icon_announcments";
                    }
                    else { //default
                        obj.icon_styling_class = "assistant_icon_regular";
                    }

                    //set icon path

                    if (obj.plugin_name === "assistant-base" && obj.notif_type === "1" && obj.notif_subtype === "2") {
                        obj.icon_path = "./assistant/images/push.svg";
                    }
                    else if (obj.plugin_name === pnBase && obj.notif_type === "2" && obj.notif_subtype === "1") {
                        obj.icon_path = "./assistant/images/activity_increase.svg";
                    }
                    else if (obj.plugin_name === pnBase && obj.notif_type === "2" && obj.notif_subtype === "2") {
                        obj.icon_path = "./assistant/images/activity_decrease.svg";
                    }
                    else if (obj.plugin_name === pnBase && obj.notif_type === "2" && obj.notif_subtype === "3") {
                        obj.icon_path = "./assistant/images/activity_increase.svg";
                    }
                    else if (obj.plugin_name === pnBase && obj.notif_type === "2" && obj.notif_subtype === "4") {
                        obj.icon_path = "./assistant/images/activity_decrease.svg";
                    }
                    else if (obj.plugin_name === pnBase && obj.notif_type === "2" && obj.notif_subtype === "5") {
                        obj.icon_path = "./assistant/images/activity_increase.svg";
                    }
                    else if (obj.plugin_name === pnBase && obj.notif_type === "2" && obj.notif_subtype === "6") {
                        obj.icon_path = "./assistant/images/activity_decrease.svg";
                    }
                    else if (obj.plugin_name === pnBaseGeneral && obj.notif_type === "3" && obj.notif_subtype === "2") {
                        obj.icon_path = "./assistant/images/ios.svg";
                    }
                    else if (obj.plugin_name === pnBaseGeneral && obj.notif_type === "3" && obj.notif_subtype === "3") {
                        obj.icon_path = "./assistant/images/android.svg";
                    }
                    else if (obj.plugin_name === pnStarRating && obj.notif_type === "1" && obj.notif_subtype === "1") {
                        obj.icon_path = "./assistant/images/star_rating.svg";
                    }
                    else if (obj.notif_type === "1") { //quick tips
                        obj.icon_path = "./assistant/images/tip.svg";
                    }
                    else if (obj.notif_type === "2") { //insight
                        obj.icon_path = "./assistant/images/generic_1.png";
                    }
                    else if (obj.notif_type === "3") { //announcments
                        obj.icon_path = "./assistant/images/announcement.svg";
                    }
                    else { //default
                        obj.icon_path = "./assistant/images/generic_2.png";
                    }
                }
                obj.timeSince = timeSince(new Date(obj.created_date));
            }
        }

        return given_data;
    };

    countlyAssistant.getDataForApp = function(app_id) {
        for (var a = 0 ; a < _data.length ; a++) {
            if (_data[a].id === app_id) {
                return fixData(_data[a]);
            }
        }
        return [];//todo fix this
    };

    countlyAssistant.changeNotification = function(notif_id, is_private, save_it) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/i/assistant/" + (is_private ? "private" : "global"),
            data: {
                api_key: countlyGlobal.member.api_key,
                save: save_it,
                notif: notif_id
            },
            success: function() {
            }
        });
    };

    /**
     * This is used if another plugin other than the Assistant wants to create notificaitons from the frontend.
     * Create a notification from another plugin
     *
     * @param {object} contentData - the data that is to be inserted into the internationalized string. Data is given as an array.
     *
     * @param {String} ownerName - the name of this notifications creator/owner. Used when deciding how to render notification.
     *
     * @param {integer} notifType - used for grouping and filtering notifications
     *
     * @param {integer} notifSubType - used for specifying the id of a notification for a specific owner
     *
     * @param {String} i18nId - the internationalization id for the localization entries
     *
     * @param {String} notifAppId - the app ID for which application this notification will be assigned
     *
     * @param {integer} notificationVersion - notification version in case of data format changes
     *
     * @param {String} targetUserApiKey - it notification should target a specific user, set this field to it's api key
     *
     * @param {function} callback - returns "true"/"false" in case request succeeds or fails. In case of failure, it return received message.
     *
     * @return {jqXHR} ajax promise
     *
     * @example
     *
     *  countlyAssistant.createNotification([12,34,56,78], "frontTest", 4, 2, "assistant.test-notification", "57cd5afb85e945640bc4eec9", 1, function (callbackResult, errorMessage) {
            if(callbackResult){
                //notification creation succeeded
            } else {
                //notification creation failed, check errorMessage
            }
        });
     *
     */
    countlyAssistant.createNotification = function(contentData, ownerName, notifType, notifSubType, i18nId, notifAppId, notificationVersion, targetUserApiKey, callback) {
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/i/assistant/create_external",
            data: {
                api_key: countlyGlobal.member.api_key,
                notif_data: JSON.stringify(contentData),
                owner_name: ownerName,
                notif_type: notifType,
                notif_subtype: notifSubType,
                i18n_id: i18nId,
                notif_app_id: notifAppId,
                notif_version: notificationVersion,
                target_user_api_key: targetUserApiKey
            },
            success: function() {
                //call succeeded
                if (callback) {
                    callback(true);
                }
            },
            error: function(result) {
                //call failed
                if (callback) {
                    callback(false, result);
                }
            }
        });
    };
}(window.countlyAssistant = window.countlyAssistant || {}, jQuery));;/*global countlyCommon, countlyGlobal, countlyAssistant, Handlebars, store, Countly, CountlyHelpers, AssistantView, app, $, jQuery*/
window.AssistantView = {
    initialize: function(isRefresh) {
        if ($("#top-bar").find("#assistant-menu").length === 0) {
            var assistantMenu =
                '<div id="assistant-menu" class="dropdown icon" style="display: block">' +
                    '<div id="notification-icon" class="empty-state">' +
                        '<i class="ion-android-notifications"></i>' +
                    '</div>' +
                    '<div class="menu right" style="width: 400px; min-height:500px;"></div>' +
                '</div>';

            $("#top-bar").find(".right-menu").prepend(assistantMenu);
        }

        var self = this;
        if (this.template) {
            return $.when(countlyAssistant.initialize(isRefresh)).then(function() {
                self.renderCommon(false);
            });
        }
        else {
            return $.when($.get(countlyGlobal.path + '/assistant/templates/panel.html', function(src) {
                self.template = Handlebars.compile(src);
            }), countlyAssistant.initialize()).then(function() {
                self.renderCommon(false);
            });
        }
    },
    renderCommon: function(isRefresh) {
        var notificationButtonID = "#notification-icon";
        var data = countlyAssistant.getDataForApp(countlyCommon.ACTIVE_APP_ID);

        if (data.notifications === null || typeof data.notifications === "undefined") {
            //if this is null, assume that everything else is also
            //todo fix the circumstances that cause these cases
            data.notifications = [];
            data.notifs_saved_private = [];
            data.notifs_saved_global = [];
        }

        this.templateData = {
            "page-title": jQuery.i18n.map["assistant.title"],
            all_notifs: data.notifications,
            saved_private: data.notifs_saved_private,
            saved_global: data.notifs_saved_global,
            icon_styling_class: 'assistant_icon_regular'
        };

        //-- related to assistant notification button
        //check if notification notification should be shown
        var arrLen = data.notifications.length;
        this.earliestDataTimestamp = 0;
        for (var i = 0; i < arrLen; i++) {
            var cd = data.notifications[i].createdDateUTC;
            if (this.earliestDataTimestamp < cd) {
                this.earliestDataTimestamp = cd;
            }
        }

        var earliestViewedTimestamp = store.get("earliestViewedNotificationTimestamp") || 0.0;

        //change assistant icon
        if (earliestViewedTimestamp < this.earliestDataTimestamp) {
            //add alerting icon
            $(notificationButtonID).addClass("unread");
        }
        else {
            //remove alerting icon
            $(notificationButtonID).removeClass("unread");
        }

        var self = this;
        $("#assistant-menu").on("click", function() {
            $(notificationButtonID).removeClass("unread");
            store.set("earliestViewedNotificationTimestamp", self.earliestDataTimestamp);
        });
        //----

        var changeNotification = function(id, is_private, is_save, parent) {
            if (typeof Countly !== "undefined") {
                var nAction = is_save ? "save" : "unsave";
                var nKey = is_private ? "assistant-change-status-private" : "assistant-change-status-global";
                var sendObj = ['add_event', {
                    "key": nKey,
                    "count": 1,
                    "segmentation": {
                        "action": nAction
                    }
                }];
                Countly.q.push(sendObj);
            }

            $.when(countlyAssistant.changeNotification(id, is_private, is_save)).then(function() {
                //if (true || successData.result === "Success") { //todo finish this

                var refresh_stuff = function() {
                    $.when(countlyAssistant.initialize()).then(function() {
                        self.renderCommon();
                        app.localize();

                    });
                };

                if (!is_save) {
                    parent.slideUp(function() {
                        refresh_stuff();
                    });
                }
                else {
                    parent.fadeTo(500, 0.2, function() {
                        parent.fadeTo(500, 1, function() {
                            refresh_stuff();
                        });
                    });
                }
                //}
                //else {
                //CountlyHelpers.alert(successData.result, "red");
                //}
            }).fail(function(failData) {
                CountlyHelpers.alert(failData, "red");
            });
        };

        if (!isRefresh) {
            var topBarElem = $("#top-bar").find("#assistant-menu .menu");
            topBarElem.html(this.template(this.templateData));
            topBarElem.css("height", $(window).height() * 0.8);

            $("#assistant-tabs").tabs({
                selected: store.get("assistant_tab") || 0,
                show: function(event, ui) {
                    var lastTabIndex = store.get("assistant_tab");
                    store.set("assistant_tab", ui.index);

                    var tabName = ["all", "saved-private", "saved-global"][ui.index];
                    if (lastTabIndex !== ui.index) {
                        //if the user has clicked on a different tab and this is not just from a refresh
                        if (typeof Countly !== "undefined") {
                            Countly.q.push(['add_event', {
                                "key": "assistant-click-tab",
                                "count": 1,
                                "segmentation": {
                                    "tab_name": tabName
                                }
                            }]);
                        }
                    }
                }
            });

            $(".btn-save-global").on("click", function() {
                var id = $(this).data("id");//notification id
                var parent = $(this).parents(".assistant_notif");
                changeNotification(id, false, true, parent);
            });

            $(".btn-save-private").on("click", function() {
                var id = $(this).data("id");//notification id
                var parent = $(this).parents(".assistant_notif");
                //CountlyHelpers.alert(7, "green");
                changeNotification(id, true, true, parent);
            });

            $(".btn-unsave-global").on("click", function() {
                var id = $(this).data("id");//notification id
                var parent = $(this).parents(".assistant_notif");

                // Add force-clicked class to the menu to keep it open
                // until confirmation dialog closes
                $("#assistant-menu").addClass("force-clicked");

                CountlyHelpers.confirm(jQuery.i18n.map["assistant.confirm-unsave-global"], "red", function(result) {
                    setTimeout(function() {
                        var $asstMenu = $("#assistant-menu");

                        // Remove force-clicked class and add regular clicked class
                        $asstMenu.removeClass("force-clicked");
                        $asstMenu.addClass("clicked");
                    }, 1000);

                    if (!result) {
                        return true;
                    }
                    changeNotification(id, false, false, parent);
                });
            });

            $(".btn-unsave-private").on("click", function() {
                var id = $(this).data("id");//notification id
                var parent = $(this).parents(".assistant_notif");

                // Add force-clicked class to the menu to keep it open
                // until confirmation dialog closes
                $("#assistant-menu").addClass("force-clicked");

                CountlyHelpers.confirm(jQuery.i18n.map["assistant.confirm-unsave-private"], "red", function(result) {
                    setTimeout(function() {
                        var $asstMenu = $("#assistant-menu");

                        // Remove force-clicked class and add regular clicked class
                        $asstMenu.removeClass("force-clicked");
                        $asstMenu.addClass("clicked");
                    }, 1000);

                    if (!result) {
                        return true;
                    }
                    changeNotification(id, true, false, parent);
                });
            });
        }

        app.localize($("#assistant_container"));

        // Prevent clicks inside the container from closing the popup
        $("#assistant_container").on("click", function(e) {
            e.stopPropagation();
        });
    }
};

//register views

$(document).ready(function() {
    app.localize($("#assistant_container"));

    AssistantView.initialize();

    setInterval(function() {
        // Don't refresh if the assistant popup is open
        if (!$("#assistant-menu").hasClass("clicked")) {
            AssistantView.initialize(true);
        }
    }, 60000);

    app.addAppSwitchCallback(function() {
        if (app._isFirstLoad !== true) {
            AssistantView.initialize();
        }
    });

    $(document).on("/i/apps/reset", function() {
        AssistantView.initialize();
    });

    $(window).on("resize", function() {
        $("#top-bar").find("#assistant-menu .menu").css("height", $(window).height() * 0.8);
    });
});;/*global countlyGlobal,countlyCommon,countlyEvent,d3,jQuery */
(function(timesOfDayPlugin, $) {

    var _todData = {};
    var _eventsList = {};

    timesOfDayPlugin.initialize = function() {

    };

    timesOfDayPlugin.fetchTodData = function(todType, date_range) {

        var data = {
            "api_key": countlyGlobal.member.api_key,
            "app_id": countlyCommon.ACTIVE_APP_ID,
            "tod_type": todType,
            "method": "times-of-day"
        };

        if (date_range) {
            data.date_range = date_range;
        }

        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o",
            data: data,
            success: function(json) {
                _todData = json;
            }
        });
    };

    timesOfDayPlugin.fetchAllEvents = function() {
        return $.when(countlyEvent.initialize(true)).then(function() {
            _eventsList = countlyEvent.getEvents().map(function(data) {
                return data.key;
            });
        });
    };

    timesOfDayPlugin.getTodData = function() {
        return _todData;
    };

    timesOfDayPlugin.getEventsList = function() {
        return _eventsList;
    };

    timesOfDayPlugin.loadTimesOfDay = function(timesOfDayData, event) {
        var chartAreaWidth = $('#chart').width() - 50;
        chartAreaWidth = chartAreaWidth > 972 ? 972 : chartAreaWidth;
        var chartAreaHeight = chartAreaWidth * 0.35;
        var margin = { top: 20, right: 10, bottom: 10, left: 10 };
        var width = chartAreaWidth - margin.left - margin.right;
        var height = chartAreaHeight - margin.top - margin.bottom;
        var padding = 3;
        var xLabelHeight = 30;
        var yLabelWidth = 80;
        var borderWidth = 1;
        var duration = 0;

        event = event.toLowerCase();
        if (event !== "sessions") {
            event = event + "(s)";
        }

        var chart = d3.select('#chart').append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

        var border = chart.append('rect')
            .attr('id', 'tod-chart-area')
            .attr('x', yLabelWidth)
            .attr('y', xLabelHeight)
            .style('fill-opacity', 0)
            .style('stroke', '#D0D0D0')
            .style('stroke-width', borderWidth)
            .style('shape-rendering', 'crispEdges');

        loadPunchCard(timesOfDayData);

        /**
         * Load d3 punch chard
         * @param {object} punchCardData | Chart data
         */
        function loadPunchCard(punchCardData) {

            var labelsX = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"];
            var labelMapping = {
                "0": jQuery.i18n.map['times-of-day.sunday'],
                "1": jQuery.i18n.map['times-of-day.monday'],
                "2": jQuery.i18n.map['times-of-day.tuesday'],
                "3": jQuery.i18n.map['times-of-day.wednesday'],
                "4": jQuery.i18n.map['times-of-day.thursday'],
                "5": jQuery.i18n.map['times-of-day.friday'],
                "6": jQuery.i18n.map['times-of-day.saturday']
            };

            var averages = [];
            var reducer = function(c, acc, current, y) {
                return acc + punchCardData[y][c];
            };
            for (var c = 0; c <= 23; c++) {
                var total = [0, 1, 2, 3, 4, 5, 6].reduce(reducer.bind(this, c), 0);
                averages.push(total / 7);
            }

            var data = [];
            for (var i = 0; i < punchCardData.length; i++) {
                data.push({
                    label: labelMapping[i],
                    day: i,
                    values: punchCardData[i],
                    averages: averages
                });
            }

            var sunday = data[0];
            data = data.splice(1, 7);
            data.push(sunday);

            update(data, labelsX);

            $('#mouseOverRectEvent').tooltipster({
                animationDuration: 0,
                delay: 100,
                theme: 'tooltipster-borderless',
                trigger: 'custom',
                triggerOpen: {
                    mouseenter: true,
                    touchstart: true
                },
                triggerClose: {
                    mouseleave: true,
                    touchleave: true
                },
                interactive: true,
                contentAsHTML: true
            });

        }

        /**
         * Update chart
         * @param {object} data | Data object
         * @param {string} labelsX | X label
         */
        function update(data, labelsX) {
            var allValues = Array.prototype.concat.apply([], data.map(function(d) {
                return d.values;
            }));
            var maxWidth = d3.max(data.map(function(d) {
                return d.values.length;
            }));
            var maxR = d3.min([(width - yLabelWidth) / maxWidth, (height - xLabelHeight) / data.length]) / 2;

            var r = function(d) {
                if (d === 0) {
                    return 0;
                }

                var f = d3.scale.sqrt()
                    .domain([d3.min(allValues), d3.max(allValues)])
                    .rangeRound([2, maxR - padding]);

                return f(d);
            };

            var c = d3.scale.linear()
                .domain([d3.min(allValues), d3.max(allValues)])
                .rangeRound([0, 100]);

            var rows = chart.selectAll('.row')
                .data(data, function(d) {
                    return d.label;
                });

            rows.enter().append('g')
                .attr('class', 'row')
                .style('fill', '#000000')
                .style('fill-opacity', 1);

            rows.exit()
                .transition()
                .duration(duration)
                .style('fill-opacity', 0)
                .remove();

            rows.transition()
                .duration(duration)
                .attr('transform', function(d, i) {
                    return 'translate(' + yLabelWidth + ',' + (maxR * i * 2 + maxR + xLabelHeight) + ')';
                });

            var dots = rows.selectAll('circle')
                .data(function(d) {
                    return d.values;
                });

            dots.enter().append('circle')
                .attr('cy', 0)
                .attr('r', 0)
                .text(function(d) {
                    return d;
                });

            dots.exit()
                .transition()
                .duration(duration)
                .attr('r', 0)
                .remove();

            dots.transition()
                .duration(duration)
                .attr('r', function(d) {
                    return r(d);
                })
                .attr('cx', function(d, i) {
                    return i * maxR * 2 + maxR;
                })
                .style('fill', function(d) {
                    return 'rgba(57, 150, 249, ' + c(d) / 100 + ')';
                }
                );

            var dotLabels = rows.selectAll('.dot-label')
                .data(function(d) {
                    return d.values;
                });


            var defs = chart.append("defs");
            var filter = defs.append("filter")
                .attr("id", "dropshadow");
            filter.append("feGaussianBlur")
                .attr("in", "SourceAlpha")
                .attr("stdDeviation", 2)
                .attr("result", "blur");

            filter.append("feOffset")
                .attr("in", "blur")
                .attr("dx", 0)
                .attr("dy", 0)
                .attr("result", "offsetBlur");

            filter.append("feFlood")
                .attr("in", "offsetBlur")
                .attr("flood-color", "#3d3d3d")
                .attr("flood-opacity", "0.4")
                .attr("result", "offsetColor");
            filter.append("feComposite")
                .attr("in", "offsetColor")
                .attr("in2", "offsetBlur")
                .attr("operator", "in")
                .attr("result", "offsetBlur");

            var feMerge = filter.append("feMerge");

            feMerge.append("feMergeNode")
                .attr("in", "offsetBlur");
            feMerge.append("feMergeNode")
                .attr("in", "SourceGraphic");


            var dotLabelEnter = dotLabels.enter().append('g')
                .data(function(d) {
                    return d.values.map(function(x, i) {
                        return { day: d.day, value: x, label: d.label, average: d.averages[i] };
                    });
                })
                .attr('class', function() {
                    return 'dot-label';
                });

            dotLabelEnter.append('rect').style('opacity', 0);

            dotLabels.exit().remove();

            dotLabels
                .attr('transform', function(d, i) {
                    return 'translate(' + (i * maxR * 2) + ',' + (-maxR) + ')';
                })
                .select('text')
                .text(function(d) {
                    return d;
                })
                .attr('y', maxR + 5)
                .attr('x', maxR);

            dotLabels
                .select('rect')
                .attr('x', 1)
                .attr('width', maxR * 2 - 1)
                .attr('height', maxR * 2 - 1);


            var xLabels = chart.selectAll('.xLabel')
                .data([].concat(labelsX, ["0"]));

            xLabels.enter().append('text')
                .attr('y', xLabelHeight)
                .attr('transform', 'translate(0,-6)')
                .attr('class', 'tod-xlabel')
                .style('text-anchor', 'middle')
                .style('fill', '#777777')
                .style('fill-opacity', 0);

            xLabels.exit()
                .transition()
                .duration(duration)
                .style('fill-opacity', 0)
                .remove();

            xLabels.transition()
                .text(function(d) {
                    return d;
                })
                .duration(duration)
                .attr('x', function(d, i) {
                    return maxR * i * 2 + yLabelWidth;
                })
                .style('fill-opacity', 1);

            var yLabels = chart.selectAll('.yLabel')
                .data(data, function(d) {
                    return d.label;
                });

            yLabels.enter().append('text')
                .text(function(d) {
                    return d.label;
                })
                .attr('x', yLabelWidth)
                .attr('class', 'tod-ylabel')
                .style('text-anchor', 'end')
                .style('fill-opacity', 0);

            yLabels.exit()
                .transition()
                .duration(duration)
                .style('fill-opacity', 0)
                .remove();

            yLabels.transition()
                .duration(duration)
                .attr('y', function(d, i) {
                    return maxR * i * 2 + maxR + xLabelHeight;
                })
                .attr('transform', 'translate(-15,' + maxR / 2.5 + ')')
                .style('fill', '#777777')
                .style('fill-opacity', 1);

            var vert = chart.selectAll('.vert')
                .data(labelsX);

            vert.enter().append('line')
                .attr('class', 'vert')
                .attr('y1', xLabelHeight + borderWidth / 2)
                .attr('stroke', '#D0D0D0')
                .attr('stroke-width', 1)
                .style('shape-rendering', 'crispEdges')
                .style('stroke-opacity', 0);

            vert.exit()
                .transition()
                .duration(duration)
                .style('stroke-opacity', 0)
                .remove();

            vert.transition()
                .duration(duration)
                .attr('x1', function(d, i) {
                    return maxR * i * 2 + yLabelWidth;
                })
                .attr('x2', function(d, i) {
                    return maxR * i * 2 + yLabelWidth;
                })
                .attr('y2', maxR * 2 * data.length + xLabelHeight - borderWidth / 2)
                .style('stroke-opacity', function(d, i) {
                    return i ? 1 : 0;
                });

            var horiz = chart.selectAll('.horiz').
                data(data, function(d) {
                    return d.label;
                });

            horiz.enter().append('line')
                .attr('class', 'horiz')
                .attr('x1', yLabelWidth + borderWidth / 2)
                .attr('stroke', '#D0D0D0')
                .attr('stroke-width', 1)
                .style('shape-rendering', 'crispEdges')
                .style('stroke-opacity', 0);

            horiz.exit()
                .transition()
                .duration(duration)
                .style('stroke-opacity', 0)
                .remove();

            horiz.transition()
                .duration(duration)
                .attr('x2', maxR * 2 * labelsX.length + yLabelWidth - borderWidth / 2)
                .attr('y1', function(d, i) {
                    return i * maxR * 2 + xLabelHeight;
                })
                .attr('y2', function(d, i) {
                    return i * maxR * 2 + xLabelHeight;
                })
                .style('stroke-opacity', function(d, i) {
                    return i ? 1 : 0;
                });

            border.transition()
                .duration(duration)
                .attr('width', maxR * 2 * labelsX.length)
                .attr('height', maxR * 2 * data.length);


            var boxSize = maxR * 2;
            var hoverBoxSize = boxSize * 1.1;
            var mouseOver = chart.append('g');

            var mouseOverRect = mouseOver
                .append('rect')
                .style('fill-opacity', 0)
                .style('fill', '#FFF')
                .attr("filter", "url(#dropshadow)")
                .attr('width', hoverBoxSize)
                .attr('height', hoverBoxSize);
            var mouseOverCircle = mouseOver.append('circle').style('fill', 'rgba(0,0,0,0)').attr('r', 16);
            var mouseOverText = mouseOver.append('text')
                .style('font-size', '14px')
                .style('display', 'block')
                .style('fill', '#353535')
                .attr('width', hoverBoxSize)
                .attr('height', hoverBoxSize);

            var mouseOverRectEvent = mouseOver.append('rect').style('fill-opacity', 0).style('cursor', 'pointer').attr('width', hoverBoxSize)
                .attr('height', hoverBoxSize).attr('id', 'mouseOverRectEvent');

            mouseOverRectEvent.on('mouseout', function() {
                d3.select(this).style('fill-opacity', 0);
                mouseOverRect.style('fill-opacity', 0);
                mouseOverText.style('fill-opacity', 0);
            });

            dotLabelEnter.on('mouseover', function(d, i) {
                var selection = d3.select(this);
                var rectPosition = selection.node().getBoundingClientRect();
                var svgPosition = d3.select('#tod-chart-area').node().getBoundingClientRect();

                var topPositionOrigin = xLabelHeight + rectPosition.top - svgPosition.top - ((hoverBoxSize - boxSize) / 2);
                // var leftPositionOrigin = rectPosition.left - svgPosition.left - ((hoverBoxSize - boxSize) / 2);
                var leftPositionOrigin = yLabelWidth + (rectPosition.left - svgPosition.left) - ((hoverBoxSize - boxSize) / 2);
                mouseOver.attr('transform', 'translate(' + leftPositionOrigin + ',' + topPositionOrigin + ')');
                mouseOverRect
                    .style('fill-opacity', 1);

                mouseOverCircle
                    .attr('cx', hoverBoxSize / 2)
                    .attr('cy', hoverBoxSize / 2)
                    .attr('r', r(d.value))
                    .style('fill', 'rgba(57, 150, 249, ' + c(d.value) / 100 * 0.5 + ')');

                mouseOverText
                    .text(countlyCommon.getShortNumber(d.value))
                    .style('fill-opacity', 1)
                    .attr('y', function() {
                        var textHeight = d3.select(this).node().getBoundingClientRect().height;
                        return ((boxSize - textHeight) / 2) + 15;
                    })
                    .attr('x', function() {
                        var textWidth = d3.select(this).node().getBoundingClientRect().width;
                        return (hoverBoxSize - textWidth) / 2;
                    });


                var startHourText = (i < 10 ? "0" + i : i) + ":00";
                var endHour = i + 1 > 23 ? 0 : i + 1;
                var endHourText = (endHour < 10 ? "0" + endHour : endHour) + ":00";
                var percentage = ((d.value - d.average) * 100) / d.average;

                var contentText = jQuery.i18n.prop('times-of-day.tooltip-1', countlyCommon.formatNumber(d.value), event, d.label, startHourText, endHourText) + "<br/>";
                contentText += d.value > 0 ? jQuery.i18n.prop('times-of-day.tooltip-' + (percentage > 0 ? "more" : "less") + '-than', Math.abs(percentage.toFixed(0))) : "";
                $('#mouseOverRectEvent').tooltipster('content', contentText);
            });
        }
    };
}(window.timesOfDayPlugin = window.timesOfDayPlugin || {}, jQuery));;/*global $,countlyView,countlyGlobal,Handlebars,timesOfDayPlugin,jQuery,countlyCommon,app,moment,todview,countlyDashboards */
window.todview = countlyView.extend({

    initialize: function() {
    },

    beforeRender: function() {
        var self = this;
        self.tod_type = "[CLY]_session";
        self.date_range = this.getDateRange('current');
        if (!this.timesOfDayData || !this.template) {
            return $.when($.get(countlyGlobal.path + '/times-of-day/templates/timesofday.html', function(src) {
                self.template = Handlebars.compile(src);
            }), timesOfDayPlugin.fetchAllEvents(), timesOfDayPlugin.fetchTodData(self.tod_type, self.date_range)).then(function() {
                self.timesOfDayData = timesOfDayPlugin.getTodData();
                self.eventsList = timesOfDayPlugin.getEventsList();
            });
        }


    },

    loadSessionEventData: function() {
        $("#event-session-list").html('<div data-value="[CLY]_session" class="es-option item" data-localize="times-of-day.sessions">' + jQuery.i18n.map['times-of-day.sessions'] + '</div>');
        $("#event-session-list").append('<div class="group">' + jQuery.i18n.map['times-of-day.events'] + '</div>');
        var events = this.eventsList || [];
        for (var i = 0; i < events.length; i++) {
            $("#event-session-list").append('<div data-value="' + events[i] + '" class="es-option item" data-localize="">' + events[i] + '</div>');
        }

        var self = this;
        $(".es-option").on("click", function() {
            var value = $(this).data("value");
            self.tod_type = value;
            $.when(
                timesOfDayPlugin.fetchTodData(value, self.date_range),
                timesOfDayPlugin.fetchAllEvents()
            ).done(function() {
                self.timesOfDayData = timesOfDayPlugin.getTodData();
                self.eventsList = timesOfDayPlugin.getEventsList();
                self.updateView();
            });
        });
    },

    getDateRange: function(period) {
        var d;
        switch (period) {
        case "current":
            d = moment();
            return d.year() + ":" + (d.month() + 1);
        case "previous":
            d = moment().add(-1, "M");
            return d.year() + ":" + (d.month() + 1);
        case "last_3":
            var response = [];
            for (var i = 0; i < 3; i++) {
                d = moment().add(-1 * i, "M");
                response.push(d.year() + ":" + (d.month() + 1));
            }
            return response.join(',');
        default:
            return;
        }
    },

    renderCommon: function(isRefresh) {
        this.templateData = {
            "page-title": jQuery.i18n.map["times-of-day.plugin-title"]
        };

        if (!isRefresh) {
            $(this.el).html(this.template(this.templateData));
            this.updateView();

            var self = this;

            $('.ds').on('click', function() {
                var id = $(this).attr('id');

                $('.ds').removeClass('active').removeClass('selected');
                $(this).addClass('active').addClass('selected');

                switch (id) {
                case "ds_this":
                    self.date_range = self.getDateRange('current');
                    break;
                case "ds_previous":
                    self.date_range = self.getDateRange('previous');
                    break;
                case "ds_last_3":
                    self.date_range = self.getDateRange('last_3');
                    break;
                default:
                    self.date_range = self.getDateRange();
                    break;
                }

                $.when(
                    timesOfDayPlugin.fetchTodData(self.tod_type, self.date_range),
                    timesOfDayPlugin.fetchAllEvents()
                ).done(function() {
                    self.timesOfDayData = timesOfDayPlugin.getTodData();
                    self.eventsList = timesOfDayPlugin.getEventsList();
                    self.updateView();
                });
            });
        }
    },

    updateView: function() {
        $('#chart').empty();
        this.loadSessionEventData();
        this.loadTimesOfDay();
        this.loadTimeOfDayTable();
    },

    loadTimesOfDay: function() {
        timesOfDayPlugin.loadTimesOfDay(this.timesOfDayData, this.tod_type === "[CLY]_session" ? jQuery.i18n.map['times-of-day.sessions'] : this.tod_type);
    },

    loadTimeOfDayTable: function() {
        var self = this;
        var tableData = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23].map(function(h) {
            return {
                hour: h,
                sunday: self.timesOfDayData[0][h],
                monday: self.timesOfDayData[1][h],
                tuesday: self.timesOfDayData[2][h],
                wednesday: self.timesOfDayData[3][h],
                thursday: self.timesOfDayData[4][h],
                friday: self.timesOfDayData[5][h],
                saturday: self.timesOfDayData[6][h],
            };
        });

        this.dtable = $('#dataTableOne').dataTable($.extend({}, $.fn.dataTable.defaults, {
            "aaData": tableData,
            "fnRowCallback": function() {},
            "aoColumns": [
                {
                    "mData": "hour",
                    "mRender": function(hour) {
                        var nextHour = hour + 1 > 23 ? 0 : hour + 1;
                        return (hour < 10 ? "0" + hour : hour) + ":00 - " + (nextHour < 10 ? "0" + nextHour : nextHour) + ":00";
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map['times-of-day.hours']
                },
                {
                    "mData": "monday",
                    "sType": "numeric",
                    "sTitle": jQuery.i18n.map['times-of-day.monday'],
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    }
                },
                {
                    "mData": "tuesday",
                    "sType": "numeric",
                    "sTitle": jQuery.i18n.map['times-of-day.tuesday'],
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    }
                },
                {
                    "mData": "wednesday",
                    "sType": "numeric",
                    "sTitle": jQuery.i18n.map['times-of-day.wednesday'],
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    }
                },
                {
                    "mData": "thursday",
                    "sType": "numeric",
                    "sTitle": jQuery.i18n.map['times-of-day.thursday'],
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    }
                },
                {
                    "mData": "friday",
                    "sType": "numeric",
                    "sTitle": jQuery.i18n.map['times-of-day.friday'],
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    }
                },
                {
                    "mData": "saturday",
                    "sType": "numeric",
                    "sTitle": jQuery.i18n.map['times-of-day.saturday'],
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    }
                },
                {
                    "mData": "sunday",
                    "sType": "numeric",
                    "sTitle": jQuery.i18n.map['times-of-day.sunday'],
                    "mRender": function(d) {
                        return countlyCommon.formatNumber(d);
                    }
                }
            ]
        }));

        this.dtable.stickyTableHeaders();
        this.dtable.fnSort([[0, 'asc']]);
    },
    refresh: function() {
    },
});

app.todview = new todview();

app.route('/analytics/times-of-day', 'times-of-day', function() {
    this.renderWhenReady(this.todview);
});

app.addPageScript("/custom#", function() {
    addWidgetType();
    addSettingsSection();

    /**
     * Adding widget type
     */
    function addWidgetType() {
        var todWidget = '<div data-widget-type="times-of-day" class="opt cly-grid-5">' +
                            '    <div class="inner">' +
                            '        <span class="icon timesofday"></span>' + jQuery.i18n.prop("times-of-day.times") +
                            '    </div>' +
                            '</div>';

        $("#widget-drawer .details #widget-types .opts").append(todWidget);
    }

    /**
     * Adding settings section
     */
    function addSettingsSection() {
        var setting = '<div id="widget-section-single-tod" class="settings section">' +
                        '    <div class="label">' + jQuery.i18n.prop("times-of-day.period") + '</div>' +
                        '    <div id="single-tod-dropdown" class="cly-select" style="width: 100%; box-sizing: border-box;">' +
                        '        <div class="select-inner">' +
                        '            <div class="text-container">' +
                        '                <div class="text">' +
                        '                    <div class="default-text">' + jQuery.i18n.prop("times-of-day.select") + '</div>' +
                        '                </div>' +
                        '            </div>' +
                        '            <div class="right combo"></div>' +
                        '        </div>' +
                        '        <div class="select-items square" style="width: 100%;"></div>' +
                        '    </div>' +
                        '</div>';

        var barColors = '<div id="tod-widget-section-bar-color" class="settings section" style="margin-bottom: 55px;">' +
                        '    <div class="label">' + jQuery.i18n.prop("dashboards.bar-color") + '</div>' +
                        '    <div id="tod-bar-colors" class="colors">' +
                        '        <div data-color="1" class="color alt1 selected"></div>' +
                        '        <div data-color="2" class="color alt2"></div>' +
                        '        <div data-color="3" class="color alt3"></div>' +
                        '        <div data-color="4" class="color alt4"></div>' +
                        '    </div>' +
                        '</div>';

        $(setting).insertAfter(".cly-drawer .details .settings:last");
        $(barColors).insertAfter(".cly-drawer .details .settings:last");

    }

    $("#tod-bar-colors").off("click").on("click", ".color", function() {
        $("#tod-bar-colors").find(".color").removeClass("selected");
        $(this).addClass("selected");

        $("#widget-drawer").trigger("cly-widget-section-complete");
    });

    $("#single-tod-dropdown").on("cly-select-change", function() {
        $("#widget-drawer").trigger("cly-widget-section-complete");
    });
});

$(document).ready(function() {
    var menu = '<a href="#/analytics/times-of-day" class="item" ">' +
        '<div class="logo fa fa-plugin" style="background-image:none; font-size:24px; text-align:center; width:35px; margin-left:14px; line-height:42px;"></div>' +
        '<div class="text" data-localize="times-of-day.plugin-title"></div>' +
        '</a>';

    $('.sidebar-menu #engagement-submenu').append(menu);

    initializeTimesOfDayWidget();
});

/**
 * Initialize times of day widget.
 */
function initializeTimesOfDayWidget() {

    if (countlyGlobal.plugins.indexOf("dashboards") < 0) {
        return;
    }

    var todWidgetTemplate;
    var periods = [
        {
            name: jQuery.i18n.map['times-of-day.all-time'],
            value: "all"
        },
        {
            name: jQuery.i18n.map['times-of-day.this-month'],
            value: "current"
        },
        {
            name: jQuery.i18n.map['times-of-day.previous-month'],
            value: "previous"
        },
        {
            name: jQuery.i18n.map['times-of-day.last-3-months'],
            value: "last_3"
        }
    ];

    $.when(
        $.get(countlyGlobal.path + '/times-of-day/templates/widget.html', function(src) {
            todWidgetTemplate = Handlebars.compile(src);
        })
    ).then(function() {

        var widgetOptions = {
            init: initWidgetSections,
            settings: widgetSettings,
            placeholder: addPlaceholder,
            create: createWidgetView,
            reset: resetWidget,
            set: setWidget,
            refresh: refreshWidget
        };

        app.addWidgetCallbacks("times-of-day", widgetOptions);
    });

    /**
     * Initialize widget section.
     */
    function initWidgetSections() {
        var selWidgetType = $("#widget-types").find(".opt.selected").data("widget-type");

        if (selWidgetType !== "times-of-day") {
            return;
        }

        $("#single-tod-dropdown").clySelectSetItems(periods);

        var dataType = $("#data-types").find(".opt.selected").data("data-type");

        $("#widget-drawer .details #data-types").parent(".section").show();
        $("#data-types").find(".opt[data-data-type=push]").addClass("disabled");
        $("#data-types").find(".opt[data-data-type=crash]").addClass("disabled");
        $("#widget-section-single-app").show();
        $("#tod-widget-section-bar-color").show();
        $("#widget-section-single-tod").show();
        if (dataType === "event") {
            $("#widget-section-single-event").show();
        }
    }

    /**
     * Get Widget settings
     * @returns {object} | Settings object
     */
    function widgetSettings() {
        var $singleAppDrop = $("#single-app-dropdown"),
            $singleEventDrop = $("#single-event-dropdown"),
            dataType = $("#data-types").find(".opt.selected").data("data-type"),
            $barColors = $("#tod-bar-colors"),
            $singleTodDrop = $("#single-tod-dropdown");

        var selectedApp = $singleAppDrop.clySelectGetSelection(),
            selectedEvent = $singleEventDrop.clySelectGetSelection(),
            barColor = $barColors.find(".color.selected").data("color"),
            selectedTodPeriod = $singleTodDrop.clySelectGetSelection();

        var settings = {
            apps: (selectedApp) ? [ selectedApp ] : [],
            data_type: dataType,
            bar_color: barColor,
            period: selectedTodPeriod
        };

        if (dataType === "event") {
            settings.events = (selectedEvent) ? [ selectedEvent ] : [];
        }

        return settings;
    }

    /**
     * Adding placeholder
     * @param {object} dimensions | Dimension object
     */
    function addPlaceholder(dimensions) {
        dimensions.min_height = 3;
        dimensions.min_width = 4;
        dimensions.width = 4;
        dimensions.height = 3;
    }

    /**
     * Create widget view
     * @param {object} widgetData | Widget data
     */
    function createWidgetView(widgetData) {
        var placeHolder = widgetData.placeholder;

        formatData(widgetData);
        render();

        /**
         * Render function
         */
        function render() {
            var title = widgetData.title,
                app = widgetData.apps,
                data = widgetData.formattedData,
                period = widgetData.period;

            var appName = countlyGlobal.apps[app[0]].name,
                appId = app[0];

            var $widget = $(todWidgetTemplate({
                title: title,
                app: {
                    id: appId,
                    name: appName
                },
                data: data
            }));

            placeHolder.find("#loader").fadeOut();
            placeHolder.find(".cly-widget").html($widget.html());

            if (!title) {
                var periodName = periods.filter(function(obj) {
                    return obj.value === period;
                });
                var esTypeName = widgetData.data_type === "session" ? jQuery.i18n.map['times-of-day.sessions'] : widgetData.events[0].split("***")[1];
                var widgetTitle = "Times of day: " + esTypeName + " (" + periodName[0].name + ")";
                placeHolder.find(".title").text(widgetTitle);
            }

            addTooltip(placeHolder);

            $(".crcl").on({
                mouseenter: function() {
                    $(".crcl").removeClass("hover");
                    $(this).addClass("hover");
                },
                mouseleave: function() {
                    $(".crcl").removeClass("hover");
                }
            });

            placeHolder.find(".timesofday").off("resize").on("resize", function() {
                if (placeHolder.find(".timesofday").width() >= 690) {
                    placeHolder.find(".timesofday table th:nth-child(2n+1)").css({ "visibility": "visible"});
                }
                else {
                    placeHolder.find(".timesofday table th:nth-child(2n+1)").css({ "visibility": "hidden"});
                }
            });
        }
    }

    /**
     * Format widget data
     * @param {object} widgetData | Widget data
     */
    function formatData(widgetData) {
        var data = widgetData.dashData.data;

        var labelsX = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"];
        var labelsY = [
            {
                dispLabel: jQuery.i18n.map['times-of-day.sunday'].slice(0, 2),
                label: jQuery.i18n.map['times-of-day.sunday'],
                data: []
            },
            {
                dispLabel: jQuery.i18n.map['times-of-day.monday'].slice(0, 2),
                label: jQuery.i18n.map['times-of-day.monday'],
                data: []
            },
            {
                dispLabel: jQuery.i18n.map['times-of-day.tuesday'].slice(0, 2),
                label: jQuery.i18n.map['times-of-day.tuesday'],
                data: []
            },
            {
                dispLabel: jQuery.i18n.map['times-of-day.wednesday'].slice(0, 2),
                label: jQuery.i18n.map['times-of-day.wednesday'],
                data: []
            },
            {
                dispLabel: jQuery.i18n.map['times-of-day.thursday'].slice(0, 2),
                label: jQuery.i18n.map['times-of-day.thursday'],
                data: []
            },
            {
                dispLabel: jQuery.i18n.map['times-of-day.friday'].slice(0, 2),
                label: jQuery.i18n.map['times-of-day.friday'],
                data: []
            },
            {
                dispLabel: jQuery.i18n.map['times-of-day.saturday'].slice(0, 2),
                label: jQuery.i18n.map['times-of-day.saturday'],
                data: []
            },
        ];

        var barColors = ["rgba(111, 163, 239, 1)", "rgba(85, 189, 185, 1)", "rgba(239, 136, 0, 1)", "rgba(174, 131, 210, 1)"];

        var color = barColors[widgetData.bar_color - 1 || 0];
        var maxDataValue = Math.max.apply(null, ([].concat.apply([], data))) || 1;
        var defaultColor = "rgba(255, 255, 255, .07)";
        var maxRadius = 30;
        var minRadius = 7;

        var averages = [];
        var reducer = function(c, acc, current, y) {
            return acc + data[y][c];
        };

        for (var c = 0; c <= 23; c++) {
            var total = [0, 1, 2, 3, 4, 5, 6].reduce(reducer.bind(this, c), 0);
            averages.push(total / 7);
        }

        for (var i = 0; i < data.length; i++) {
            for (var j = 0; j < data[i].length; j++) {
                var fill = parseFloat((data[i][j] / maxDataValue).toFixed(2));
                var radius = ((maxRadius - minRadius) * fill) + minRadius;
                var setColor = defaultColor;
                if (radius > minRadius) {
                    setColor = color.slice(0, (color.length - 2)) + fill + ")";
                }

                var startHourText = (j < 10 ? "0" + j : j) + ":00";
                var endHour = j + 1 > 23 ? 0 : j + 1;
                var endHourText = (endHour < 10 ? "0" + endHour : endHour) + ":00";

                var percentage = ((data[i][j] - averages[j]) * 100) / averages[j];

                var obj = {
                    color: setColor,
                    radius: radius,
                    count: data[i][j],
                    averagePercentage: percentage.toFixed(0),
                    startHour: startHourText,
                    endHour: endHourText
                };
                labelsY[i].data.push(obj);
            }
        }

        var sunday = labelsY[0];
        labelsY = labelsY.splice(1, 7);
        labelsY.push(sunday);

        var formattedData = {
            labelsX: labelsX,
            labelsY: labelsY,
            type: widgetData.data_type === "session" ? jQuery.i18n.map['times-of-day.sessions'] : widgetData.events[0].split("***")[1]
        };

        widgetData.formattedData = formattedData;
    }

    /**
     * Reset current widget
     */
    function resetWidget() {
        var $singleEventDrop = $("#single-event-dropdown"),
            $sinleTopDrop = $("#single-tod-dropdown");

        $singleEventDrop.clySelectSetSelection("", jQuery.i18n.prop("dashboards.select-event-single"));
        $sinleTopDrop.clySelectSetSelection("", jQuery.i18n.prop("times-of-day.select"));

        $("#tod-bar-colors").find(".color").removeClass("selected");
        $("#tod-bar-colors").find(".color[data-color=1]").addClass("selected");
    }

    /**
     * Set current widget
     * @param {object} widgetData | Widget data
     */
    function setWidget(widgetData) {
        var apps = widgetData.apps;
        var dataType = widgetData.data_type;
        var events = widgetData.events;
        var barColor = widgetData.bar_color;
        var period = widgetData.period;

        var $singleAppDrop = $("#single-app-dropdown");
        var $singleEventDrop = $("#single-event-dropdown");
        var $dataTypes = $("#data-types");
        var $barColors = $("#tod-bar-colors");
        var $singleTodDrop = $("#single-tod-dropdown");

        $singleAppDrop.clySelectSetSelection(apps[0], countlyGlobal.apps[apps[0]].name);

        $dataTypes.find(".opt").removeClass("selected");
        $dataTypes.find(".opt[data-data-type=" + dataType + "]").addClass("selected");

        if (events) {
            var eventNames = {},
                deferreds = [];

            for (var i = 0; i < events.length; i++) {
                deferreds.push(countlyDashboards.getEventNameDfd(events[i], eventNames));
            }

            $.when.apply(null, deferreds).done(function() {
                $singleEventDrop.clySelectSetSelection(events[0], eventNames[events[0]]);
            });
        }

        if (barColor) {
            $barColors.find(".color").removeClass("selected");
            $barColors.find(".color[data-color=" + barColor + "]").addClass("selected");
        }

        if (period) {
            var periodName = periods.filter(function(obj) {
                return obj.value === period;
            });

            $singleTodDrop.clySelectSetSelection(period, periodName[0].name);
        }
    }

    /**
     * Refresh current widget
     * @param {object} widgetEl | Dome element
     * @param {object} widgetData | Widget data
     */
    function refreshWidget(widgetEl, widgetData) {
        formatData(widgetData);
        var data = widgetData.formattedData;

        var $widget = $(todWidgetTemplate({
            title: "",
            app: {
                id: "",
                name: ""
            },
            data: data
        }));

        widgetEl.find("table").replaceWith($widget.find("table"));
        addTooltip(widgetEl);
    }

    /**
     * Add tooltip to widget
     * @param {object} placeHolder | placeholder lib object
     */
    function addTooltip(placeHolder) {
        placeHolder.find('.timesofday-body-cell .crcl circle').tooltipster({
            animation: "fade",
            animationDuration: 50,
            delay: 100,
            theme: 'tooltipster-borderless',
            trigger: 'custom',
            triggerOpen: {
                mouseenter: true,
                touchstart: true
            },
            triggerClose: {
                mouseleave: true,
                touchleave: true
            },
            interactive: true,
            contentAsHTML: true,
            functionInit: function(instance, helper) {
                instance.content(getTooltipText($(helper.origin).parents(placeHolder.find(".timesofday-body-cell"))));
            }
        });

        /**
         * Get tooltip text of element
         * @param {object} jqueryEl | Dom element
         * @returns {string} | Tooltip
         */
        function getTooltipText(jqueryEl) {
            var count = jqueryEl.parents("td").data("count");
            var startHour = jqueryEl.parents("td").data("starthour");
            var endHour = jqueryEl.parents("td").data("endhour");
            var percentage = jqueryEl.parents("td").data("averagepercentage");
            var label = jqueryEl.parents("tr").data("label");
            var type = jqueryEl.parents(".timesofday").find("table").data("es-type");

            var tooltipStr = "<div id='tod-tip'>";

            type = type.toLowerCase();
            if (type !== "sessions") {
                type = type + "(s)";
            }
            tooltipStr += jQuery.i18n.prop('times-of-day.tooltip-1', countlyCommon.formatNumber(count), type, label, startHour, endHour) + "<br/>";
            tooltipStr += count > 0 ? jQuery.i18n.prop('times-of-day.tooltip-' + (percentage > 0 ? "more" : "less") + '-than', Math.abs(percentage)) : "";

            tooltipStr += "</div>";

            return tooltipStr;
        }
    }
};/*globals CountlyHelpers,jQuery,countlyCommon,countlyGlobal,countlyTaskManager */
(function(countlyConsentManager, $) {

    CountlyHelpers.createMetricModel(countlyConsentManager, {name: "consents", estOverrideMetric: "consents"}, jQuery);

    countlyConsentManager.clearObject = function(obj) {
        if (obj) {
            if (!obj.i) {
                obj.i = 0;
            }
            if (!obj.o) {
                obj.o = 0;
            }
            if (!obj.e) {
                obj.e = 0;
            }
            if (!obj.p) {
                obj.p = 0;
            }
        }
        else {
            obj = {"i": 0, "o": 0, "e": 0, "p": 0};
        }

        return obj;
    };

    countlyConsentManager.getConsentDP = function(segment) {

        var chartData = [
                { data: [], label: jQuery.i18n.map["consent.opt-i"] },
                { data: [], label: jQuery.i18n.map["consent.opt-o"] }
            ],
            dataProps = [
                { name: "i" },
                { name: "o" }
            ];

        return countlyCommon.extractChartData(countlyConsentManager.getDb(), countlyConsentManager.clearObject, chartData, dataProps, segment);
    };

    countlyConsentManager.getExportDP = function() {

        var chartData = [
                { data: [], label: jQuery.i18n.map["consent.userdata-exports"], color: '#DDDDDD', mode: "ghost" },
                { data: [], label: jQuery.i18n.map["consent.userdata-exports"] }
            ],
            dataProps = [
                {
                    name: "pe",
                    func: function(dataObj) {
                        return dataObj.e;
                    },
                    period: "previous"
                },
                { name: "e" }
            ];

        return countlyCommon.extractChartData(countlyConsentManager.getDb(), countlyConsentManager.clearObject, chartData, dataProps);
    };

    countlyConsentManager.getPurgeDP = function() {

        var chartData = [
                { data: [], label: jQuery.i18n.map["consent.userdata-purges"], color: '#DDDDDD', mode: "ghost" },
                { data: [], label: jQuery.i18n.map["consent.userdata-purges"] }
            ],
            dataProps = [
                {
                    name: "pp",
                    func: function(dataObj) {
                        return dataObj.p;
                    },
                    period: "previous"
                },
                { name: "p" }
            ];

        return countlyCommon.extractChartData(countlyConsentManager.getDb(), countlyConsentManager.clearObject, chartData, dataProps);
    };


    countlyConsentManager.getBigNumbersData = function(segment) {
        return countlyCommon.getDashboardData(countlyConsentManager.getDb(), ["i", "o"], [], {}, countlyConsentManager.clearObject, segment);
    };

    countlyConsentManager.getEPData = function() {
        return countlyCommon.getDashboardData(countlyConsentManager.getDb(), ["e", "p"], [], {}, countlyConsentManager.clearObject);
    };

    countlyConsentManager.common = function(data, path, callback) {
        data.app_id = countlyCommon.ACTIVE_APP_ID;
        data.api_key = countlyGlobal.member.api_key;
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r + '/consent/' + path,
            data: data,
            dataType: "json",
            success: function(json) {
                if (callback) {
                    callback(json);
                }
            },
            error: function() {
                if (callback) {
                    callback(false);
                }
            }
        });
    };

    //export data for user based on passed id
    //callback(error, fileid(if exist), taskid(if exist))
    countlyConsentManager.exportUser = function(query, callback) {
        $.ajax({
            type: "POST",
            url: countlyCommon.API_PARTS.data.w + "/app_users/export",
            data: {
                "app_id": countlyCommon.ACTIVE_APP_ID,
                "query": query
            },
            success: function(result) {
                var task_id = null;
                var fileid = null;
                if (result && result.result && result.result.task_id) {
                    task_id = result.result.task_id;
                    countlyTaskManager.monitor(task_id);
                }
                else if (result && result.result) {
                    fileid = result.result;
                }
                callback(null, fileid, task_id);
            },
            error: function(xhr, status, error) {
                var filename = null;
                if (xhr && xhr.responseText && xhr.responseText !== "") {
                    var ob = JSON.parse(xhr.responseText);
                    if (ob.result && ob.result.message) {
                        error = ob.result.message;
                    }
                    if (ob.result && ob.result.filename) {
                        filename = ob.result.filename;
                    }
                }
                callback(error, filename, null);
            }
        });
    };


    countlyConsentManager.deleteExport = function(eid, callback) {
        $.ajax({
            type: "POST",
            url: countlyCommon.API_PARTS.data.w + "/app_users/deleteExport/appUser_" + countlyCommon.ACTIVE_APP_ID + "_" + eid,
            data: {
                "app_id": countlyCommon.ACTIVE_APP_ID,
            },
            success: function(result) {
                callback(null, result);
            },
            error: function(xhr, status, error) {
                callback(error, null);
            }
        });
    };

    countlyConsentManager.deleteUserdata = function(query, callback) {
        $.ajax({
            type: "POST",
            url: countlyCommon.API_PARTS.data.w + "/app_users/delete",
            data: {
                "app_id": countlyCommon.ACTIVE_APP_ID,
                "query": query
            },
            success: function(result) {
                callback(null, result);
            },
            error: function(xhr, status, error) {
                callback(error, null);
            }
        });
    };

}(window.countlyConsentManager = window.countlyConsentManager || {}, jQuery));;/*global countlyView,countlyDeviceDetails,countlyAppUsers,countlyDevice,$,countlyConsentManager,countlyGlobal,countlyCommon,moment,CountlyHelpers,jQuery,app,ConsentManagementView,Handlebars,Backbone,countlyUserdata */
window.ConsentManagementView = countlyView.extend({
    curSegment: "",
    initialize: function() {},
    beforeRender: function() {
        if (this.template) {
            return $.when(countlyConsentManager.initialize()).then(function() {});
        }
        else {
            var self = this;
            return $.when(
                $.get(countlyGlobal.path + '/compliance-hub/templates/compliance.html', function(src) {
                    self.template = Handlebars.compile(src);
                }),
                countlyConsentManager.initialize()).then(function() {});
        }
    },
    getExportAPI: function(tableID) {
        var requestPath, apiQueryData;
        if (tableID === 'd-table-users') {
            requestPath = '/o/app_users/consents?api_key=' + countlyGlobal.member.api_key +
            "&app_id=" + countlyCommon.ACTIVE_APP_ID + "&iDisplayStart=0";
            apiQueryData = {
                api_key: countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID,
                path: requestPath,
                method: "GET",
                filename: "Compliance_users_on_" + moment().format("DD-MMM-YYYY"),
                prop: ['aaData']
            };
            return apiQueryData;
        }
        if (tableID === "d-table-history") {
            requestPath = '/o/consent/search?api_key=' + countlyGlobal.member.api_key +
            "&app_id=" + countlyCommon.ACTIVE_APP_ID + "&iDisplayStart=0&filter=" + encodeURIComponent(JSON.stringify(app.activeView.history_filter)) +
            "&period=" + countlyCommon.getPeriodForAjax();
            apiQueryData = {
                api_key: countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID,
                path: requestPath,
                method: "GET",
                filename: "Consent_history_on_" + moment().format("DD-MMM-YYYY"),
                prop: ['aaData']
            };
            return apiQueryData;
        }
        if (tableID === 'd-table-consents') {
            requestPath = '/o/consent/search?api_key=' + countlyGlobal.member.api_key +
            "&app_id=" + countlyCommon.ACTIVE_APP_ID + "&iDisplayStart=0" +
            "&query=" + encodeURIComponent(JSON.stringify({uid: countlyUserdata.getUserdetails().uid}));
            apiQueryData = {
                api_key: countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID,
                path: requestPath,
                method: "GET",
                filename: "User_Consent_history_on_" + moment().format("DD-MMM-YYYY"),
                prop: ['aaData']
            };
            return apiQueryData;
        }
        return null;
    },
    renderCommon: function(isRefresh) {
        var status = {
            "all": jQuery.i18n.map["common.all"],
            "i": jQuery.i18n.map["consent.opt-i"],
            "o": jQuery.i18n.map["consent.opt-o"]
        };
        var types = {
            "all": jQuery.i18n.map["common.all"],
            "sessions": "Sessions",
            "events": "Events",
            "views": "Views",
            "scrolls": "Scrolls",
            "clicks": "Clicks",
            "forms": "Forms",
            "crashes": "Crashes",
            "push": "Push",
            "attribution": "Attribution",
            "users": "Users",
            "star-rating": "Star-rating"
        };
        var data = countlyConsentManager.getBigNumbersData(this.curSegment);
        var epdata = countlyConsentManager.getEPData();
        epdata.e.title = jQuery.i18n.map["consent.userdata-exports"];
        epdata.p.title = jQuery.i18n.map["consent.userdata-purges"];

        this.templateData = {
            "filter0": types,
            "active-filter0": jQuery.i18n.map["consent.feature"],
            "filter1": status,
            "active-filter1": jQuery.i18n.map["consent.type"],
            "filter2": types,
            "active-filter2": jQuery.i18n.map["consent.feature"],
            "big-numbers": {
                "count": 2,
                "items": [
                    {
                        "title": jQuery.i18n.map["consent.opt-i"],
                        "total": data.i.total,
                        "trend": data.i.trend,
                        "change": data.i.change
                    },
                    {
                        "title": jQuery.i18n.map["consent.opt-o"],
                        "total": data.o.total,
                        "trend": data.o.trend,
                        "change": data.o.change,
                        "additionalStyle": "inverse-trend"
                    }
                ]
            },
            "exports": epdata.e,
            "purges": epdata.p
        };

        var self = this;
        if (!isRefresh) {
            this.history_filter = {};
            this.history_user = null;
            this.curSegment = "";
            $(this.el).html(this.template(this.templateData));
            this.drawGraph(true);
            this.tabs = $("#tabs").tabs();
            this.tabs.on("tabsshow", function(event, ui) {
                if (ui && ui.panel) {
                    if ($(ui.panel).find(".widget-header.include-dateselector").length) {
                        $("#date-selector").appendTo($(ui.panel).find(".widget-header"));
                    }
                    if ($(ui.panel).find(".d-table").length && !$(ui.panel).find(".d-table").hasClass("sticky")) {
                        $(ui.panel).find(".d-table").addClass("sticky");
                        setTimeout(function() {
                            $(ui.panel).find(".d-table").stickyTableHeaders();
                        }, 10);
                    }
                    var tab = ($(ui.panel).attr("id") + "").replace("consent-", "");
                    if (tab && tab.length) {
                        if (tab === "metrics") {
                            app.noHistory("#/manage/compliance");
                        }
                        else if (tab === "history") {
                            var title;
                            var fragment = Backbone.history.getFragment().split("/");
                            if (fragment.length === 5) {
                                var id = fragment.pop();
                                self.history_user = id;
                                self.history_filter.uid = id;
                                title = $("#consent-history .widget-header .left .title");
                                title.text(jQuery.i18n.prop("consent.history-for", id));
                                self.dtablehistory.fnDraw(false);
                            }
                            else {
                                app.noHistory("#/manage/compliance/" + tab);
                                self.history_user = null;
                                delete self.history_filter.uid;
                                title = $("#consent-history .widget-header .left .title");
                                title.text(jQuery.i18n.map["consent.history"]);
                                self.dtablehistory.fnDraw(false);
                            }
                        }
                        else {
                            app.noHistory("#/manage/compliance/" + tab);
                        }
                    }
                }
            });

            if (self._tab) {
                setTimeout(function() {
                    var index = $(".ui-tabs-panel", self.tabs).index($("#consent-" + self._tab));
                    if (index !== -1) {
                        self.tabs.tabs("select", index);
                    }
                }, 0);
            }

            this.dtableusers = $('#d-table-users').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "iDisplayLength": 30,
                "aaSorting": [[ 4, "desc" ]],
                "bServerSide": true,
                "sAjaxSource": countlyCommon.API_PARTS.data.r + "/app_users/consents?api_key=" + countlyGlobal.member.api_key + "&app_id=" + countlyCommon.ACTIVE_APP_ID,
                "fnServerData": function(sSource, aoData, fnCallback) {
                    self.request = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "data": aoData,
                        "success": function(dataResult) {
                            fnCallback(dataResult);
                        }
                    });
                },
                "oLanguage": {
                    "sSearch ": jQuery.i18n.map["consent.search-device-id"]
                },
                "aoColumns": [
                    {
                        "mData": function(row) {
                            return row.did + "";
                        },
                        "sType": "string",
                        "sTitle": "ID"
                    },
                    {
                        "mData": function(row) {
                            return (row.d) ? countlyDevice.getDeviceFullName(row.d) : jQuery.i18n.map["common.unknown"];
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["devices.table.device"]
                    },
                    {
                        "mData": function(row) {
                            return (row.av) ? (row.av + "").replace(/:/g, ".") : jQuery.i18n.map["common.unknown"];
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["app-versions.table.app-version"],
                        "sClass": "web-15"
                    },
                    {
                        "mData": function(row) {
                            var str = "";
                            var optin = [];
                            var optout = [];
                            for (var i in row.consent) {
                                if (row.consent[i]) {
                                    optin.push(i.charAt(0).toUpperCase() + i.slice(1));
                                }
                                else {
                                    optout.push(i.charAt(0).toUpperCase() + i.slice(1));
                                }
                            }
                            if (optin.length) {
                                str += "<div style='margin-bottom:10px;'><span class='green-text'>" + jQuery.i18n.map["consent.opt-i"] + ':</span> ' + optin.join(", ") + "</div>";
                            }
                            if (optout.length) {
                                str += "<div><span class='red-text'>" + jQuery.i18n.map["consent.opt-o"] + ':</span> ' + optout.join(", ") + '</div>';
                            }
                            return str;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["consent.title"],
                        "bSortable": false,
                        "sClass": "web-30"
                    },
                    {
                        "mData": function(row, type) {
                            if (type === "display") {
                                return countlyCommon.formatTimeAgo(row.ls || 0) + '<a class="cly-list-options" style="float:right; margin-right:2px;"></a>';
                            }
                            else {
                                return row.ls || 0;
                            }
                        },
                        "sType": "format-ago",
                        "sTitle": jQuery.i18n.map["common.time"]
                    }
                ],
                "fnInitComplete": function(oSettings, json) {
                    $.fn.dataTable.defaults.fnInitComplete(oSettings, json);
                    var tableWrapper = $("#" + oSettings.sTableId + "_wrapper");
                    tableWrapper.find(".dataTables_filter input").attr("placeholder", jQuery.i18n.map["consent.search-device-id"]);
                }
            }));

            this.dtablehistory = $('#d-table-history').dataTable($.extend({}, $.fn.dataTable.defaults, {
                "iDisplayLength": 30,
                "aaSorting": [[ 5, "desc" ]],
                "bServerSide": true,
                "sAjaxSource": countlyCommon.API_PARTS.data.r + "/consent/search?api_key=" + countlyGlobal.member.api_key + "&app_id=" + countlyCommon.ACTIVE_APP_ID,
                "fnServerData": function(sSource, aoData, fnCallback) {
                    self.request = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "data": aoData,
                        "success": function(dataResult) {
                            fnCallback(dataResult);
                            CountlyHelpers.reopenRows(self.dtablehistory, self.formatConsent);
                        }
                    });
                },
                "fnServerParams": function(aoData) {
                    if (self.history_filter) {
                        aoData.push({ "name": "filter", "value": JSON.stringify(self.history_filter) });
                    }
                    aoData.push({ "name": "period", "value": countlyCommon.getPeriodForAjax() });
                },
                "fnRowCallback": function(nRow, aData) {
                    $(nRow).attr("id", aData._id);
                },
                "oLanguage": {
                    "sSearch ": jQuery.i18n.map["consent.search-device-id"]
                },
                "aoColumns": [
                    CountlyHelpers.expandRowIconColumn(),
                    {
                        "mData": function(mData) {
                            return mData.device_id;
                        },
                        "sType": "string",
                        "sTitle": "ID",
                    },
                    {"mData": "uid", "sType": "string", "sTitle": "UID", "sClass": "web-10" },
                    {
                        "mData": function(row) {
                            var str = ""; var arr = (row.type + "").split(","); for (var i = 0; i < arr.length; i++) {
                                str += jQuery.i18n.map["consent.opt-" + arr[i]] + "<br/>";
                            } return str;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["consent.changes"]
                    },
                    {
                        "mData": function(row) {
                            var str = "";
                            var optin = 0;
                            var optout = 0;
                            for (var i in row.change) {
                                if (row.change[i]) {
                                    optin++;
                                }
                                else {
                                    optout++;
                                }
                            }
                            if (optin) {
                                str += jQuery.i18n.prop("consent.opt-in", optin) + "<br/>";
                            }
                            if (optout) {
                                str += jQuery.i18n.prop("consent.opt-out", optout) + "<br/>";
                            }
                            return str;
                        },
                        "sType": "string",
                        "sTitle": jQuery.i18n.map["consent.title"],
                        "bSortable": false
                    },
                    {
                        "mData": function(row, type) {
                            if (type === "display") {
                                return countlyCommon.formatTimeAgo(row.ts);
                            }
                            else {
                                return row.ts;
                            }
                        },
                        "sType": "format-ago",
                        "sTitle": jQuery.i18n.map["common.time"]
                    }
                ],
                "fnInitComplete": function(oSettings, json) {
                    $.fn.dataTable.defaults.fnInitComplete(oSettings, json);
                    var tableWrapper = $("#" + oSettings.sTableId + "_wrapper");
                    tableWrapper.find(".dataTables_filter input").attr("placeholder", jQuery.i18n.map["consent.search-device-id"]);
                }
            }));

            CountlyHelpers.expandRows(this.dtablehistory, this.formatConsent);

            CountlyHelpers.initializeTableOptions();

            $(".cly-button-menu").on("cly-list.click", function(event, clickData) {
                var row = $(clickData.target).parents("tr");
                //user data is in data
                data = self.dtableusers.fnGetData(row[0]);
                //now show hide list options based on user data

                var have_rights = countlyGlobal.member.global_admin || countlyGlobal.member.admin_of.indexOf(+countlyCommon.ACTIVE_APP_ID) > -1;
                $(".cly-button-menu a.export-user").css("display", "none");
                $(".cly-button-menu a.export-download").css("display", "none");
                $(".cly-button-menu a.export-delete").css("display", "none");
                $(".cly-button-menu a.delete-user").css("display", "none");

                $(".cly-button-menu a").data("id", data.uid);
                if (data.appUserExport) {
                    if (data.appUserExport.slice(-7) === ".tar.gz") {
                        $(".cly-button-menu a.export-download").css("display", "block");
                    }
                    if (have_rights) {
                        $(".cly-button-menu a.export-delete").css("display", "block");
                    }
                }
                else {
                    if (have_rights) {
                        $(".cly-button-menu a.export-user").css("display", "block");
                    }
                }

                if (have_rights) {
                    $(".cly-button-menu a.delete-user").css("display", "block");
                }
            });

            $(".cly-button-menu").on("cly-list.item", function(event, domData) {
                var el = $(domData.target);
                var id = el.data("id");
                if (id) {
                    if (el.hasClass("view-history")) {
                        app.noHistory("#/manage/compliance/history/" + id);
                        var index = $(".ui-tabs-panel", self.tabs).index($("#consent-history"));
                        if (index !== -1) {
                            self.tabs.tabs("select", index);
                        }
                        $(document).scrollTop(0);
                    }
                    else if (el.hasClass("export-user")) {
                        countlyAppUsers.exportUser(JSON.stringify({uid: id}), function(error, export_id, task_id) {
                            if (error) {
                                CountlyHelpers.alert(error, "red");
                            }
                            else if (export_id) {
                                CountlyHelpers.notify({
                                    type: "ok",
                                    title: jQuery.i18n.map["common.success"],
                                    message: jQuery.i18n.map["app-users.export-finished"],
                                    info: jQuery.i18n.map["consent.export-finished-click"],
                                    sticky: false,
                                    clearAll: true,
                                    onClick: function() {
                                        var win = window.open(countlyCommon.API_PARTS.data.r + "/app_users/download/" + export_id + "?auth_token=" + countlyGlobal.auth_token + "&app_id=" + countlyCommon.ACTIVE_APP_ID, '_blank');
                                        win.focus();
                                    }
                                });
                                self.dtableusers.fnDraw(false);
                            }
                            else if (task_id) {
                                CountlyHelpers.notify({type: "ok", title: jQuery.i18n.map["common.success"], message: jQuery.i18n.map["app-users.export-started"], sticky: false, clearAll: false});
                                self.dtableusers.fnDraw(false);
                            }
                            else {
                                CountlyHelpers.alert(jQuery.i18n.map["app-users.export-failed"], "red");
                            }
                        });
                    }
                    else if (el.hasClass("export-download")) {
                        var win = window.open(countlyCommon.API_PARTS.data.r + "/app_users/download/appUser_" + countlyCommon.ACTIVE_APP_ID + "_" + id + "?auth_token=" + countlyGlobal.auth_token + "&app_id=" + countlyCommon.ACTIVE_APP_ID, '_blank');
                        win.focus();
                    }
                    else if (el.hasClass("export-delete")) {
                        countlyAppUsers.deleteExport(id, function(error) {
                            if (error) {
                                CountlyHelpers.alert(error, "red");
                            }
                            else {
                                CountlyHelpers.notify({type: "ok", title: jQuery.i18n.map["common.success"], message: jQuery.i18n.map["app-users.export-deleted"], sticky: false, clearAll: true});
                                self.dtableusers.fnDraw(false);
                            }
                        });
                    }
                    else if (el.hasClass("delete-user")) {
                        CountlyHelpers.confirm(jQuery.i18n.map["app-users.delete-userdata-confirm"], "popStyleGreen", function(result) {
                            if (!result) {
                                return true;
                            }
                            countlyAppUsers.deleteUserdata(JSON.stringify({uid: id}), function(error) {
                                if (error) {
                                    CountlyHelpers.alert(error, "red");
                                }
                                else {
                                    CountlyHelpers.notify({type: "ok", title: jQuery.i18n.map["common.success"], message: jQuery.i18n.map["app-users.userdata-deleted"], sticky: false, clearAll: true});
                                    self.dtableusers.fnDraw(false);
                                }
                            });
                        }, [jQuery.i18n.map["app-users.no-dont-purge"], jQuery.i18n.map["app-users.yes-purge-data"]], {title: jQuery.i18n.map["app-users.purge-confirm-title"], image: "purge-user-data"});
                    }
                }
            });

            var setStatusFilter = function(filterStatus) {
                //reset filter
                var type = self.history_filter.type;
                self.history_filter = {};
                if (type) {
                    self.history_filter.type = type;
                }
                if (self.history_user) {
                    self.history_filter.uid = self.history_user;
                }

                //set query based on type
                if (filterStatus && filterStatus !== "all") {
                    if (!self.history_filter.type) {
                        self.history_filter["change." + filterStatus] = {$exists: true};
                    }
                    else if (self.history_filter.type === "i") {
                        self.history_filter["change." + filterStatus] = true;
                    }
                    else if (self.history_filter.type === "o") {
                        self.history_filter["change." + filterStatus] = {$ne: true};
                    }
                }
            };

            $(".filter1-segmentation .segmentation-option").on("click", function() {
                self.history_filter.type = $(this).data("value");
                if (self.history_filter.type === "all") {
                    delete self.history_filter.type;
                }

                setStatusFilter($(".filter2-segmentation .text").data("value"));
                self.dtablehistory.fnDraw(false);
            });

            $(".filter2-segmentation .segmentation-option").on("click", function() {
                setStatusFilter($(this).data("value"));
                self.dtablehistory.fnDraw(false);
            });

            $(".filter0-segmentation .segmentation-option").on("click", function() {
                self.curSegment = $(this).data("value");
                if (self.curSegment === "all") {
                    self.curSegment = "";
                }
                self.drawGraph();
            });
        }
    },
    drawGraph: function(refresh) {
        if (!refresh) {
            this.renderCommon(true);
        }
        var consentDP = countlyConsentManager.getConsentDP(this.curSegment);
        countlyCommon.drawTimeGraph(consentDP.chartDP, "#dashboard-graph");
        var newPage = $("<div>" + this.template(this.templateData) + "</div>");
        $(this.el).find("#big-numbers-container").html(newPage.find("#big-numbers-container").html());
        if (refresh) {
            countlyCommon.drawTimeGraph(countlyConsentManager.getExportDP().chartDP, "#dashboard-export-graph .graph", null, null, true);
            countlyCommon.drawTimeGraph(countlyConsentManager.getPurgeDP().chartDP, "#dashboard-purge-graph .graph", null, null, true);
            $(this.el).find("#dashboard-export-graph .data").html(newPage.find("#dashboard-export-graph .data").html());
            $(this.el).find("#dashboard-purge-graph .data").html(newPage.find("#dashboard-purge-graph .data").html());
        }
    },
    refresh: function() {
        var self = this;
        $.when(this.beforeRender()).then(function() {
            if (app.activeView !== self) {
                return false;
            }
            self.renderCommon(true);
            self.drawGraph(true);
            self.dtableusers.fnDraw(false);
            self.dtablehistory.fnDraw(false);
        });
    },
    formatConsent: function(d) {
        // `d` is the original data object for the row
        var str = '';
        if (d) {
            str += '<div class="datatablesubrow">' +
				'<table cellpadding="5" cellspacing="0" border="0" class="subtable">' +
				'<tr><td>Device ID</td><td>' + d.device_id + '</td></tr>';
            var optin = [];
            var optout = [];
            for (var i in d.after) {
                if (d.after[i]) {
                    optin.push(i.charAt(0).toUpperCase() + i.slice(1));
                }
                else {
                    optout.push(i.charAt(0).toUpperCase() + i.slice(1));
                }
            }
            if (optin.length) {
                str += '<tr><td>' + jQuery.i18n.map["consent.opt-i"] + '</td><td>' + optin.join(", ") + '</td></tr>';
            }
            if (optout.length) {
                str += '<tr><td>' + jQuery.i18n.map["consent.opt-o"] + '</td><td>' + optout.join(", ") + '</td></tr>';
            }

            if (!d.d) {
                d.d = "";
            }
            d.d = countlyDevice.getDeviceFullName(d.d);
            if (d.p) {
                if (d.pv && d.pv !== "") {
                    d.p += " " + countlyDeviceDetails.getCleanVersion(d.pv).replace(/:/g, ".");
                }
                if (d.d !== "") {
                    d.d += " (" + d.p + ")";
                }
                else {
                    d.d = d.p;
                }
            }
            str += '<tr><td>' + jQuery.i18n.map["devices.table.device"] + '</td><td>' + d.d + '</td></tr>';
            if (d.av) {
                str += '<tr><td>' + jQuery.i18n.map["app-versions.table.app-version"] + '</td><td>' + d.av.replace(/:/g, ".") + '</td></tr>';
            }
            str += '</table>' +
			'</div>';
        }
        return str;
    }
});

app.consentManagementView = new ConsentManagementView();

app.route('/manage/compliance/:tab', 'compliance', function(tab) {
    this.consentManagementView._tab = tab;
    this.renderWhenReady(this.consentManagementView);
});
app.route("/manage/compliance", "compliance", function() {
    this.consentManagementView._tab = null;
    this.renderWhenReady(this.consentManagementView);
});

app.addPageScript("/users/#", function() {
    if (app.activeView && app.activeView.tabs) {
        var formatConsent = function(d) {
            // `d` is the original data object for the row
            var str = '';
            if (d) {
                str += '<div class="datatablesubrow">' +
                    '<table cellpadding="5" cellspacing="0" border="0" class="subtable">' +
                    '<tr><td>Device ID</td><td>' + d.device_id + '</td></tr>';
                var optin = [];
                var optout = [];
                for (var i in d.after) {
                    if (d.after[i]) {
                        optin.push(i.charAt(0).toUpperCase() + i.slice(1));
                    }
                    else {
                        optout.push(i.charAt(0).toUpperCase() + i.slice(1));
                    }
                }
                if (optin.length) {
                    str += '<tr><td>' + jQuery.i18n.map["consent.opt-i"] + '</td><td>' + optin.join(", ") + '</td></tr>';
                }
                if (optout.length) {
                    str += '<tr><td>' + jQuery.i18n.map["consent.opt-o"] + '</td><td>' + optout.join(", ") + '</td></tr>';
                }

                if (!d.d) {
                    d.d = "";
                }
                d.d = countlyDevice.getDeviceFullName(d.d);
                if (d.p) {
                    if (d.pv && d.pv !== "") {
                        d.p += " " + countlyDeviceDetails.getCleanVersion(d.pv).replace(/:/g, ".");
                    }
                    if (d.d !== "") {
                        d.d += " (" + d.p + ")";
                    }
                    else {
                        d.d = d.p;
                    }
                }
                str += '<tr><td>' + jQuery.i18n.map["userdata.device-os"] + '</td><td>' + d.d + '</td></tr>';
                if (d.av) {
                    str += '<tr><td>' + jQuery.i18n.map["userdata.app-version"] + '</td><td>' + d.av.replace(/:/g, ".") + '</td></tr>';
                }
                str += '</table>' +
                '</div>';
            }
            return str;
        };
        app.activeView.tabs.tabs('add', '#usertab-consent', jQuery.i18n.map["consent.title"]);
        app.activeView.tabs.tabs("refresh");
        var userDetails = countlyUserdata.getUserdetails();
        $("#usertab-consent").append("<div class='widget-header'><div class='left'><div class='title'>" + jQuery.i18n.map["userdata.consents"] + "</div></div></div><table id='d-table-consents' class='d-table sortable help-zone-vb' cellpadding='0' cellspacing='0' data-view='consentManagementView'></table>");
        app.activeView.dtableconsents = $('#d-table-consents').dataTable($.extend({}, $.fn.dataTable.defaults, {
            "iDisplayLength": 30,
            "aaSorting": [[ 5, "desc" ]],
            "bServerSide": true,
            "bFilter": false,
            "sAjaxSource": countlyCommon.API_PARTS.data.r + "/consent/search?api_key=" + countlyGlobal.member.api_key + "&app_id=" + countlyCommon.ACTIVE_APP_ID + "&query=" + JSON.stringify({uid: userDetails.uid}),
            "fnServerData": function(sSource, aoData, fnCallback) {
                $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    "data": aoData,
                    "success": function(data) {
                        fnCallback(data);
                        CountlyHelpers.reopenRows(app.activeView.dtableconsents, formatConsent);
                    }
                });
            },
            "fnRowCallback": function(nRow, aData) {
                $(nRow).attr("id", aData._id);
            },
            "aoColumns": [
                CountlyHelpers.expandRowIconColumn(),
                {
                    "mData": function(row) {
                        return row.device_id;
                    },
                    "sType": "string",
                    "sTitle": "ID"
                },
                {"mData": "uid", "sType": "string", "sTitle": "UID" },
                {
                    "mData": function(row) {
                        var str = ""; var arr = (row.type + "").split(","); for (var i = 0; i < arr.length; i++) {
                            str += jQuery.i18n.map["consent.opt-" + arr[i]] + "<br/>";
                        } return str;
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map["consent.changes"]
                },
                {
                    "mData": function(row) {
                        var str = "";
                        var optin = 0;
                        var optout = 0;
                        for (var i in row.change) {
                            if (row.change[i]) {
                                optin++;
                            }
                            else {
                                optout++;
                            }
                        }
                        if (optin) {
                            str += jQuery.i18n.prop("consent.opt-in", optin) + "<br/>";
                        }
                        if (optout) {
                            str += jQuery.i18n.prop("consent.opt-out", optout) + "<br/>";
                        }
                        return str;
                    },
                    "sType": "string",
                    "sTitle": jQuery.i18n.map["consent.title"],
                    "bSortable": false
                },
                {
                    "mData": function(row, type) {
                        if (type === "display") {
                            return countlyCommon.formatTimeAgo(row.ts);
                        }
                        else {
                            return row.ts;
                        }
                    },
                    "sType": "format-ago",
                    "sTitle": jQuery.i18n.map["common.time"]
                }
            ]
        }));
        CountlyHelpers.expandRows(app.activeView.dtableconsents, formatConsent);
    }
});

$(document).ready(function() {
    var menu = '<a href="#/manage/compliance" class="item">' +
        '<div class="logo applications"></div>' +
        '<div class="text" data-localize="compliance_hub.title"></div>' +
    '</a>';
    if ($('#management-submenu .help-toggle').length) {
        $('#management-submenu .help-toggle').before(menu);
    }
});;/*global $, jQuery, countlyCommon, moment, countlyGlobal*/

(function(countlyMonetization) {
    /**
    * Stores the events to be shown. It contains a structure for each event type.
    * If 'enabled' is false for an event, it will be hidden only in chart.
    * 'localize' property is basically a reference to the human-readable name of the
    * event type
    * @type {Object}
    */
    var eventMappings = {
        'VI_AdClick': {
            enabled: true,
            localize: 'monetization.adclick',
            color: countlyCommon.GRAPH_COLORS[0]
        },
        'VI_AdStart': {
            enabled: true,
            localize: 'monetization.adstart',
            color: countlyCommon.GRAPH_COLORS[1]
        },
        'VI_AdComplete': {
            enabled: true,
            localize: 'monetization.adcompleted',
            color: countlyCommon.GRAPH_COLORS[2]
        }
    };

    /**
    * API data object. Only the countlyMonetization model module maintains
    * (fetches, stores and manipulates) it. To prevent any inconsistencies,
    * it shouldn't be modified outside of this module.
    * Currently selected period
    * @property {array} bigNumbersData - Used by big numbers, contains an item for each event type
    [
      {title: "Ad Clicked", id: "VI_AdClick", change: "NA", prev-total: 0, total: 0, ...},
      {title: "Ad Started", ...},
      {title: "Ad Completed", ...}
    ]
    * @property {Object} chartDP - Used by chart, contains a key-value pair for each event type
    {
       VI_AdClick : {label: "Ad Clicked", data: Array(LengthOfPeriod), color: ...},
       VI_AdStart : {...},
       VI_AdComplete : {...}
    }
    * @property {array} tableData - Used by table, contains a 'row' for each point in the given period
    [
      {date: "1 Jan, 1970", VI_AdClick: 1, VI_AdStart: 2, VI_AdComplete: 3},
      {date: "2 Jan, 1970", VI_AdClick: 1, VI_AdStart: 2, VI_AdComplete: 3},
      ...
    ]
    * @type {Object}
    */
    var _data = {};

    var getPeriodArray = function() {
        var periodArray = [];
        var periodObject = countlyCommon.getPeriodObj();

        if (parseInt(periodObject.numberOfDays) === 1 || periodObject.currentPeriodArr === undefined) {
            for (var i = periodObject.periodMin; i <= periodObject.periodMax; i++) {
                periodArray.push(periodObject.activePeriod + '.' + i);
            }
        }
        else {
            periodArray = periodObject.currentPeriodArr;
        }

        return periodArray;
    };

    /**
    * Makes the first request and returns Promise
    * @returns {Promise} Returns the data request promise
    **/
    countlyMonetization.initialize = function() {
        return $.when(this.requestMetricData());
    };

    /**
    *  Events can be set enabled/disabled by view. This function sets the status.
    *  If you don't have an enforcing reason, please do NOT use this directly.
    * Instead, use 'enableEvent' to enable an event, and use 'tryDisableEvent' to
    * disable one.
    * @param {string} id - Event name
    * @param {boolean} enabled - Status to be set
    * @returns {undefined} Returns nothing
    **/
    countlyMonetization.setEventStatus = function(id, enabled) {
        eventMappings[id].enabled = enabled;
    };

    /**
    * Tries to disable an event 'safely'. 'Safely' means that, it is guaranteed
    * that there will be at least 1 enabled event in list.
    * @param {string} id - Event name
    * @returns {boolean} Returns the result of request.
    **/
    countlyMonetization.tryDisableEvent = function(id) {
        var count = 0;
        for (var key in eventMappings) {
            if (eventMappings[key].enabled) {
                count++;
            }
            if (count > 1) {
                countlyMonetization.setEventStatus(id, false);
                return true; //means; it is disabled
            }
        }
        return false;
    };

    /**
    * Enables an event.
    * @param {string} id - Event name
    * @returns {undefined} Returns nothing
    **/
    countlyMonetization.enableEvent = function(id) {
        countlyMonetization.setEventStatus(id, true);
    };

    /**
    * Creates an array of names of enabled events.
    * @returns {string[]} Returns names array.
    **/
    countlyMonetization.getEnabledEvents = function() {
        var enabled = [];
        for (var key in eventMappings) {
            if (eventMappings[key].enabled) {
                enabled.push(key);
            }
        }
        return enabled;
    };

    /**
    * Returns the current state of registered events. It immediately processes the data,
    * converts it into renderable forms of each UI component.
    * @returns {Object} Returns eventMappings object.
    **/
    countlyMonetization.requestMetricData = function() {
        var period = countlyCommon.getPeriod();
        var periodString = typeof period === "object" ? "[" + period.toString() + "]" : period;
        return $.ajax({
            type: "GET",
            url: countlyCommon.API_URL + "/o",
            data: {
                api_key: countlyGlobal.member.api_key,
                app_id: countlyCommon.ACTIVE_APP_ID,
                method: 'monetization',
                period: periodString,
            },
            success: function(json) {
                var eventKeys = Object.keys(eventMappings);
                var chartDP = countlyMonetization.convertToChartData(eventKeys, json);
                var tableData = countlyMonetization.convertToTableData(eventKeys, json);
                var bigNumbersData = countlyMonetization.convertToBigNumbersData(eventKeys, json);
                _data = {
                    tableData: tableData,
                    chartDP: chartDP,
                    bigNumbersData: bigNumbersData
                };
            }
        });
    };

    /**
    * Returns the current state of registered events.
    * @returns {Object} Returns eventMappings object.
    **/
    countlyMonetization.getColumns = function() {
        return eventMappings;
    };

    /**
    * This function is intended to be used internally. Called by
    * countlyMonetization.requestMetricData when data successfully arrives.
    * Extracts statistical data from the given 'data' object based on given keys
    * (array of selected events).
    * @param {string[]} keys - Event names
    * @param {object} data - Data object fetched from api
    * @returns {Object[]} Returns an object prepared for big numbers component.
    **/
    countlyMonetization.convertToBigNumbersData = function(keys, data) {
        var container = [];
        keys.forEach(function(key) {
            var overview = data[key].data.count;
            container.push({
                "title": jQuery.i18n.map[eventMappings[key].localize],
                "id": key,
                "change": overview.change,
                "prev-total": overview["prev-total"],
                "total": overview.total,
                "trend": overview.trend,
                "selected": eventMappings[key].enabled ? "selected" : ""
            });
        });
        return container;
    };

    /**
    * This function is intended to be used internally. Called by
    * countlyMonetization.requestMetricData when data successfully arrives.
    * Converts time-series data to a renderable form based on given keys
    * (array of selected events).
    * @param {string[]} keys - Event names
    * @param {object} data - Data object fetched from api
    * @returns {Object[]} Returns an object prepared for chart component.
    **/
    countlyMonetization.convertToChartData = function(keys, data) {
        var lines = {};
        keys.forEach(function(key) {
            var mp = eventMappings[key];
            var obj = {
                label: jQuery.i18n.map[mp.localize],
                data: [],
                color: mp.color
            };
            var i = 0;
            data[key].data.count.sparkline.forEach(function(item) {
                obj.data.push([i++, item]);
            });
            lines[key] = obj;
        });
        return lines;
    };

    /**
    * This function is intended to be used internally. Called by
    * countlyMonetization.requestMetricData when data successfully arrives.
    * Converts time-series data to a datatables plugin accepted form based on
    * given keys (array of selected events).
    * @param {string[]} keys - Event names
    * @param {object} data - Data object fetched from api
    * @returns {Object[]} Returns an object prepared for table component.
    **/
    countlyMonetization.convertToTableData = function(keys, data) {
        if (!keys[0] || !data[keys[0]]) {
            return [];
        }

        var points = [];
        var period = countlyCommon.getPeriod();
        var periodObj = countlyCommon.getPeriodObj();
        var dateFormat = "";
        if (periodObj.numberOfDays === 1) {
            if (period === "hour") {
                dateFormat = 'HH:00';
            }
            else {
                dateFormat = 'D MMM, HH:00';
            }
        }
        else if (period !== "month") {
            if (period === "60days" || period === "30days") {
                dateFormat = 'D MMM, YYYY';
            }
            else {
                dateFormat = 'D MMM';
            }
        }
        else {
            dateFormat = 'MMM';
        }
        var periodArr = getPeriodArray();
        periodArr.forEach(function(date) {
            var empty = {
                date: moment(date, "YYYY.M.D.H").format(dateFormat)
            };
            keys.forEach(function(key) {
                empty[key] = 0;
            });
            points.push(empty);
        });
        var index = 0;
        points.forEach(function(point) {
            keys.forEach(function(key) {
                var overview = data[key].data.count;
                point[key] = overview.sparkline[index];
            });
            index++;
        });
        return points;
    };

    /**
    * Returns the renderable data object. Used by countly.views.js to access
    * data.
    * @returns {Object[]} Returns an object prepared for table component.
    **/
    countlyMonetization.getMetricData = function() {
        return _data;
    };

})(window.countlyMonetization = window.countlyMonetization || {});;/*
 * File: iframeResizer.js
 * Desc: Force iframes to size to content.
 * Requires: iframeResizer.contentWindow.js to be loaded into the target frame.
 * Doc: https://github.com/davidjbradshaw/iframe-resizer
 * Author: David J. Bradshaw - dave@bradshaw.net
 * Contributor: Jure Mav - jure.mav@gmail.com
 * Contributor: Reed Dadoune - reed@dadoune.com
 */


;(function(undefined) {
  'use strict';

  if(typeof window === 'undefined') return; // don't run for server side render

  var
    count                 = 0,
    logEnabled            = false,
    hiddenCheckEnabled    = false,
    msgHeader             = 'message',
    msgHeaderLen          = msgHeader.length,
    msgId                 = '[iFrameSizer]', //Must match iframe msg ID
    msgIdLen              = msgId.length,
    pagePosition          = null,
    requestAnimationFrame = window.requestAnimationFrame,
    resetRequiredMethods  = {max:1,scroll:1,bodyScroll:1,documentElementScroll:1},
    settings              = {},
    timer                 = null,
    logId                 = 'Host Page',

    defaults              = {
      autoResize                : true,
      bodyBackground            : null,
      bodyMargin                : null,
      bodyMarginV1              : 8,
      bodyPadding               : null,
      checkOrigin               : true,
      inPageLinks               : false,
      enablePublicMethods       : true,
      heightCalculationMethod   : 'bodyOffset',
      id                        : 'iFrameResizer',
      interval                  : 32,
      log                       : false,
      maxHeight                 : Infinity,
      maxWidth                  : Infinity,
      minHeight                 : 0,
      minWidth                  : 0,
      resizeFrom                : 'parent',
      scrolling                 : false,
      sizeHeight                : true,
      sizeWidth                 : false,
      warningTimeout            : 5000,
      tolerance                 : 0,
      widthCalculationMethod    : 'scroll',
      closedCallback            : function() {},
      initCallback              : function() {},
      messageCallback           : function() {warn('MessageCallback function not defined');},
      resizedCallback           : function() {},
      scrollCallback            : function() {return true;}
    };

  function addEventListener(obj,evt,func) {
    /* istanbul ignore else */ // Not testable in PhantonJS
    if ('addEventListener' in window) {
      obj.addEventListener(evt,func, false);
    } else if ('attachEvent' in window) {//IE
      obj.attachEvent('on'+evt,func);
    }
  }

  function removeEventListener(el,evt,func) {
    /* istanbul ignore else */ // Not testable in phantonJS
    if ('removeEventListener' in window) {
      el.removeEventListener(evt,func, false);
    } else if ('detachEvent' in window) { //IE
      el.detachEvent('on'+evt,func);
    }
  }

  function setupRequestAnimationFrame() {
    var
      vendors = ['moz', 'webkit', 'o', 'ms'],
      x;

    // Remove vendor prefixing if prefixed and break early if not
    for (x = 0; x < vendors.length && !requestAnimationFrame; x += 1) {
      requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    }

    if (!(requestAnimationFrame)) {
      log('setup','RequestAnimationFrame not supported');
    }
  }

  function getMyID(iframeId) {
    var retStr = 'Host page: '+iframeId;

    if (window.top !== window.self) {
      if (window.parentIFrame && window.parentIFrame.getId) {
        retStr = window.parentIFrame.getId()+': '+iframeId;
      } else {
        retStr = 'Nested host page: '+iframeId;
      }
    }

    return retStr;
  }

  function formatLogHeader(iframeId) {
    return msgId + '[' + getMyID(iframeId) + ']';
  }

  function isLogEnabled(iframeId) {
    return settings[iframeId] ? settings[iframeId].log : logEnabled;
  }

  function log(iframeId,msg) {
    output('log',iframeId,msg,isLogEnabled(iframeId));
  }

  function info(iframeId,msg) {
    output('info',iframeId,msg,isLogEnabled(iframeId));
  }

  function warn(iframeId,msg) {
    output('warn',iframeId,msg,true);
  }

  function output(type,iframeId,msg,enabled) {
    if (true === enabled && 'object' === typeof window.console) {
      console[type](formatLogHeader(iframeId),msg);
    }
  }

  function iFrameListener(event) {
    function resizeIFrame() {
      function resize() {
        setSize(messageData);
        setPagePosition(iframeId);
        callback('resizedCallback',messageData);
      }

      ensureInRange('Height');
      ensureInRange('Width');

      syncResize(resize,messageData,'init');
    }

    function processMsg() {
      var data = msg.substr(msgIdLen).split(':');

      return {
        iframe: settings[data[0]] && settings[data[0]].iframe,
        id:     data[0],
        height: data[1],
        width:  data[2],
        type:   data[3]
      };
    }

    function ensureInRange(Dimension) {
      var
        max  = Number(settings[iframeId]['max' + Dimension]),
        min  = Number(settings[iframeId]['min' + Dimension]),
        dimension = Dimension.toLowerCase(),
        size = Number(messageData[dimension]);

      log(iframeId,'Checking ' + dimension + ' is in range ' + min + '-' + max);

      if (size<min) {
        size=min;
        log(iframeId,'Set ' + dimension + ' to min value');
      }

      if (size>max) {
        size=max;
        log(iframeId,'Set ' + dimension + ' to max value');
      }

      messageData[dimension] = '' + size;
    }


    function isMessageFromIFrame() {
      function checkAllowedOrigin() {
        function checkList() {
          var
            i = 0,
            retCode = false;

          log(iframeId,'Checking connection is from allowed list of origins: ' + checkOrigin);

          for (; i < checkOrigin.length; i++) {
            if (checkOrigin[i] === origin) {
              retCode = true;
              break;
            }
          }
          return retCode;
        }

        function checkSingle() {
          var remoteHost  = settings[iframeId] && settings[iframeId].remoteHost;
          log(iframeId,'Checking connection is from: '+remoteHost);
          return origin === remoteHost;
        }

        return checkOrigin.constructor === Array ? checkList() : checkSingle();
      }

      var
        origin      = event.origin,
        checkOrigin = settings[iframeId] && settings[iframeId].checkOrigin;

      if (checkOrigin && (''+origin !== 'null') && !checkAllowedOrigin()) {
        throw new Error(
          'Unexpected message received from: ' + origin +
          ' for ' + messageData.iframe.id +
          '. Message was: ' + event.data +
          '. This error can be disabled by setting the checkOrigin: false option or by providing of array of trusted domains.'
        );
      }

      return true;
    }

    function isMessageForUs() {
      return msgId === (('' + msg).substr(0,msgIdLen)) && (msg.substr(msgIdLen).split(':')[0] in settings); //''+Protects against non-string msg
    }

    function isMessageFromMetaParent() {
      //Test if this message is from a parent above us. This is an ugly test, however, updating
      //the message format would break backwards compatibity.
      var retCode = messageData.type in {'true':1,'false':1,'undefined':1};

      if (retCode) {
        log(iframeId,'Ignoring init message from meta parent page');
      }

      return retCode;
    }

    function getMsgBody(offset) {
      return msg.substr(msg.indexOf(':')+msgHeaderLen+offset);
    }

    function forwardMsgFromIFrame(msgBody) {
      log(iframeId,'MessageCallback passed: {iframe: '+ messageData.iframe.id + ', message: ' + msgBody + '}');
      callback('messageCallback',{
        iframe: messageData.iframe,
        message: JSON.parse(msgBody)
      });
      log(iframeId,'--');
    }

    function getPageInfo() {
      var
        bodyPosition   = document.body.getBoundingClientRect(),
        iFramePosition = messageData.iframe.getBoundingClientRect();

      return JSON.stringify({
        iframeHeight: iFramePosition.height,
        iframeWidth:  iFramePosition.width,
        clientHeight: Math.max(document.documentElement.clientHeight, window.innerHeight || 0),
        clientWidth:  Math.max(document.documentElement.clientWidth,  window.innerWidth  || 0),
        offsetTop:    parseInt(iFramePosition.top  - bodyPosition.top,  10),
        offsetLeft:   parseInt(iFramePosition.left - bodyPosition.left, 10),
        scrollTop:    window.pageYOffset,
        scrollLeft:   window.pageXOffset
      });
    }

    function sendPageInfoToIframe(iframe,iframeId) {
      function debouncedTrigger() {
        trigger(
          'Send Page Info',
          'pageInfo:' + getPageInfo(),
          iframe,
          iframeId
        );
      }
      debounceFrameEvents(debouncedTrigger,32,iframeId);
    }


    function startPageInfoMonitor() {
      function setListener(type,func) {
        function sendPageInfo() {
          if (settings[id]) {
            sendPageInfoToIframe(settings[id].iframe,id);
          } else {
            stop();
          }
        }

        ['scroll','resize'].forEach(function(evt) {
          log(id, type +  evt + ' listener for sendPageInfo');
          func(window,evt,sendPageInfo);
        });
      }

      function stop() {
        setListener('Remove ', removeEventListener);
      }

      function start() {
        setListener('Add ', addEventListener);
      }

      var id = iframeId; //Create locally scoped copy of iFrame ID

      start();

      if (settings[id]) {
        settings[id].stopPageInfo = stop;
      }
    }

    function stopPageInfoMonitor() {
      if (settings[iframeId] && settings[iframeId].stopPageInfo) {
        settings[iframeId].stopPageInfo();
        delete settings[iframeId].stopPageInfo;
      }
    }

    function checkIFrameExists() {
      var retBool = true;

      if (null === messageData.iframe) {
        warn(iframeId,'IFrame ('+messageData.id+') not found');
        retBool = false;
      }
      return retBool;
    }

    function getElementPosition(target) {
      var iFramePosition = target.getBoundingClientRect();

      getPagePosition(iframeId);

      return {
        x: Math.floor( Number(iFramePosition.left) + Number(pagePosition.x) ),
        y: Math.floor( Number(iFramePosition.top)  + Number(pagePosition.y) )
      };
    }

    function scrollRequestFromChild(addOffset) {
      /* istanbul ignore next */  //Not testable in Karma
      function reposition() {
        pagePosition = newPosition;
        scrollTo();
        log(iframeId,'--');
      }

      function calcOffset() {
        return {
          x: Number(messageData.width) + offset.x,
          y: Number(messageData.height) + offset.y
        };
      }

      function scrollParent() {
        if (window.parentIFrame) {
          window.parentIFrame['scrollTo'+(addOffset?'Offset':'')](newPosition.x,newPosition.y);
        } else {
          warn(iframeId,'Unable to scroll to requested position, window.parentIFrame not found');
        }
      }

      var
        offset = addOffset ? getElementPosition(messageData.iframe) : {x:0,y:0},
        newPosition = calcOffset();

      log(iframeId,'Reposition requested from iFrame (offset x:'+offset.x+' y:'+offset.y+')');

      if(window.top !== window.self) {
        scrollParent();
      } else {
        reposition();
      }
    }

    function scrollTo() {
      if (false !== callback('scrollCallback',pagePosition)) {
        setPagePosition(iframeId);
      } else {
        unsetPagePosition();
      }
    }

    function findTarget(location) {
      function jumpToTarget() {
        var jumpPosition = getElementPosition(target);

        log(iframeId,'Moving to in page link (#'+hash+') at x: '+jumpPosition.x+' y: '+jumpPosition.y);
        pagePosition = {
          x: jumpPosition.x,
          y: jumpPosition.y
        };

        scrollTo();
        log(iframeId,'--');
      }

      function jumpToParent() {
        if (window.parentIFrame) {
          window.parentIFrame.moveToAnchor(hash);
        } else {
          log(iframeId,'In page link #'+hash+' not found and window.parentIFrame not found');
        }
      }

      var
        hash     = location.split('#')[1] || '',
        hashData = decodeURIComponent(hash),
        target   = document.getElementById(hashData) || document.getElementsByName(hashData)[0];

      if (target) {
        jumpToTarget();
      } else if(window.top!==window.self) {
        jumpToParent();
      } else {
        log(iframeId,'In page link #'+hash+' not found');
      }
    }

    function callback(funcName,val) {
      return chkCallback(iframeId,funcName,val);
    }

    function actionMsg() {

      if(settings[iframeId] && settings[iframeId].firstRun) firstRun();

      switch(messageData.type) {
      case 'close':
        if(settings[iframeId].closeRequestCallback) chkCallback(iframeId, 'closeRequestCallback', settings[iframeId].iframe);
        else closeIFrame(messageData.iframe);
        break;
      case 'message':
        forwardMsgFromIFrame(getMsgBody(6));
        break;
      case 'scrollTo':
        scrollRequestFromChild(false);
        break;
      case 'scrollToOffset':
        scrollRequestFromChild(true);
        break;
      case 'pageInfo':
        sendPageInfoToIframe(settings[iframeId] && settings[iframeId].iframe,iframeId);
        startPageInfoMonitor();
        break;
      case 'pageInfoStop':
        stopPageInfoMonitor();
        break;
      case 'inPageLink':
        findTarget(getMsgBody(9));
        break;
      case 'reset':
        resetIFrame(messageData);
        break;
      case 'init':
        resizeIFrame();
        callback('initCallback',messageData.iframe);
        break;
      default:
        resizeIFrame();
      }
    }

    function hasSettings(iframeId) {
      var retBool = true;

      if (!settings[iframeId]) {
        retBool = false;
        warn(messageData.type + ' No settings for ' + iframeId + '. Message was: ' + msg);
      }

      return retBool;
    }

    function iFrameReadyMsgReceived() {
      for (var iframeId in settings) {
        trigger('iFrame requested init',createOutgoingMsg(iframeId),document.getElementById(iframeId),iframeId);
      }
    }

    function firstRun() {
      if (settings[iframeId]) {
        settings[iframeId].firstRun = false;
      }
    }

    function clearWarningTimeout() {
      if (settings[iframeId]) {
        clearTimeout(settings[iframeId].msgTimeout);
        settings[iframeId].warningTimeout = 0;
      }
    }

    var
      msg = event.data,
      messageData = {},
      iframeId = null;

    if('[iFrameResizerChild]Ready' === msg) {
      iFrameReadyMsgReceived();
    } else if (isMessageForUs()) {
      messageData = processMsg();
      iframeId    = logId = messageData.id;
      if (settings[iframeId]) {
        settings[iframeId].loaded = true;
      }

      if (!isMessageFromMetaParent() && hasSettings(iframeId)) {
        log(iframeId,'Received: '+msg);

        if ( checkIFrameExists() && isMessageFromIFrame() ) {
          actionMsg();
        }
      }
    } else {
      info(iframeId,'Ignored: '+msg);
    }

  }


  function chkCallback(iframeId,funcName,val) {
    var
      func = null,
      retVal = null;

    if(settings[iframeId]) {
      func = settings[iframeId][funcName];

      if( 'function' === typeof func) {
        retVal = func(val);
      } else {
        throw new TypeError(funcName+' on iFrame['+iframeId+'] is not a function');
      }
    }

    return retVal;
  }

  function closeIFrame(iframe) {
    var iframeId = iframe.id;

    log(iframeId,'Removing iFrame: '+iframeId);
    if (iframe.parentNode) { iframe.parentNode.removeChild(iframe); }
    chkCallback(iframeId,'closedCallback',iframeId);
    log(iframeId,'--');
    delete settings[iframeId];
  }

  function getPagePosition(iframeId) {
    if(null === pagePosition) {
      pagePosition = {
        x: (window.pageXOffset !== undefined) ? window.pageXOffset : document.documentElement.scrollLeft,
        y: (window.pageYOffset !== undefined) ? window.pageYOffset : document.documentElement.scrollTop
      };
      log(iframeId,'Get page position: '+pagePosition.x+','+pagePosition.y);
    }
  }

  function setPagePosition(iframeId) {
    if(null !== pagePosition) {
      window.scrollTo(pagePosition.x,pagePosition.y);
      log(iframeId,'Set page position: '+pagePosition.x+','+pagePosition.y);
      unsetPagePosition();
    }
  }

  function unsetPagePosition() {
    pagePosition = null;
  }

  function resetIFrame(messageData) {
    function reset() {
      setSize(messageData);
      trigger('reset','reset',messageData.iframe,messageData.id);
    }

    log(messageData.id,'Size reset requested by '+('init'===messageData.type?'host page':'iFrame'));
    getPagePosition(messageData.id);
    syncResize(reset,messageData,'reset');
  }

  function setSize(messageData) {
    function setDimension(dimension) {
      messageData.iframe.style[dimension] = messageData[dimension] + 'px';
      log(
        messageData.id,
        'IFrame (' + iframeId +
        ') ' + dimension +
        ' set to ' + messageData[dimension] + 'px'
      );
    }

    function chkZero(dimension) {
      //FireFox sets dimension of hidden iFrames to zero.
      //So if we detect that set up an event to check for
      //when iFrame becomes visible.

      /* istanbul ignore next */  //Not testable in PhantomJS
      if (!hiddenCheckEnabled && '0' === messageData[dimension]) {
        hiddenCheckEnabled = true;
        log(iframeId,'Hidden iFrame detected, creating visibility listener');
        fixHiddenIFrames();
      }
    }

    function processDimension(dimension) {
      setDimension(dimension);
      chkZero(dimension);
    }

    var iframeId = messageData.iframe.id;

    if(settings[iframeId]) {
      if( settings[iframeId].sizeHeight) { processDimension('height'); }
      if( settings[iframeId].sizeWidth ) { processDimension('width'); }
    }
  }

  function syncResize(func,messageData,doNotSync) {
    /* istanbul ignore if */  //Not testable in PhantomJS
    if(doNotSync!==messageData.type && requestAnimationFrame) {
      log(messageData.id,'Requesting animation frame');
      requestAnimationFrame(func);
    } else {
      func();
    }
  }

  function trigger(calleeMsg, msg, iframe, id, noResponseWarning) {
    function postMessageToIFrame() {
      var target = settings[id] && settings[id].targetOrigin;
      log(id,'[' + calleeMsg + '] Sending msg to iframe['+id+'] ('+msg+') targetOrigin: '+target);
      iframe.contentWindow.postMessage( msgId + msg, target );
    }

    function iFrameNotFound() {
      warn(id,'[' + calleeMsg + '] IFrame('+id+') not found');
    }

    function chkAndSend() {
      if(iframe && 'contentWindow' in iframe && (null !== iframe.contentWindow)) { //Null test for PhantomJS
        postMessageToIFrame();
      } else {
        iFrameNotFound();
      }
    }

    function warnOnNoResponse() {
      function warning() {
        if (settings[id] && !settings[id].loaded && !errorShown) {
          errorShown = true;
          warn(id, 'IFrame has not responded within '+ settings[id].warningTimeout/1000 +' seconds. Check iFrameResizer.contentWindow.js has been loaded in iFrame. This message can be ingored if everything is working, or you can set the warningTimeout option to a higher value or zero to suppress this warning.');
        }
      }

      if (!!noResponseWarning && settings[id] && !!settings[id].warningTimeout) {
        settings[id].msgTimeout = setTimeout(warning, settings[id].warningTimeout);
      }
    }

    var errorShown = false;

    id = id || iframe.id;

    if(settings[id]) {
      chkAndSend();
      warnOnNoResponse();
    }

  }

  function createOutgoingMsg(iframeId) {
    return iframeId +
      ':' + settings[iframeId].bodyMarginV1 +
      ':' + settings[iframeId].sizeWidth +
      ':' + settings[iframeId].log +
      ':' + settings[iframeId].interval +
      ':' + settings[iframeId].enablePublicMethods +
      ':' + settings[iframeId].autoResize +
      ':' + settings[iframeId].bodyMargin +
      ':' + settings[iframeId].heightCalculationMethod +
      ':' + settings[iframeId].bodyBackground +
      ':' + settings[iframeId].bodyPadding +
      ':' + settings[iframeId].tolerance +
      ':' + settings[iframeId].inPageLinks +
      ':' + settings[iframeId].resizeFrom +
      ':' + settings[iframeId].widthCalculationMethod;
  }

  function setupIFrame(iframe,options) {
    function setLimits() {
      function addStyle(style) {
        if ((Infinity !== settings[iframeId][style]) && (0 !== settings[iframeId][style])) {
          iframe.style[style] = settings[iframeId][style] + 'px';
          log(iframeId,'Set '+style+' = '+settings[iframeId][style]+'px');
        }
      }

      function chkMinMax(dimension) {
        if (settings[iframeId]['min'+dimension]>settings[iframeId]['max'+dimension]) {
          throw new Error('Value for min'+dimension+' can not be greater than max'+dimension);
        }
      }

      chkMinMax('Height');
      chkMinMax('Width');

      addStyle('maxHeight');
      addStyle('minHeight');
      addStyle('maxWidth');
      addStyle('minWidth');
    }

    function newId() {
      var id = ((options && options.id) || defaults.id + count++);
      if  (null !== document.getElementById(id)) {
        id = id + count++;
      }
      return id;
    }

    function ensureHasId(iframeId) {
      logId=iframeId;
      if (''===iframeId) {
        iframe.id = iframeId =  newId();
        logEnabled = (options || {}).log;
        logId=iframeId;
        log(iframeId,'Added missing iframe ID: '+ iframeId +' (' + iframe.src + ')');
      }


      return iframeId;
    }

    function setScrolling() {
      log(iframeId,'IFrame scrolling ' + (settings[iframeId] && settings[iframeId].scrolling ? 'enabled' : 'disabled') + ' for ' + iframeId);
      iframe.style.overflow = false === (settings[iframeId] && settings[iframeId].scrolling) ? 'hidden' : 'auto';
      switch(settings[iframeId] && settings[iframeId].scrolling) {
        case true:
          iframe.scrolling = 'yes';
          break;
        case false:
          iframe.scrolling = 'no';
          break;
        default:
          iframe.scrolling = settings[iframeId] ? settings[iframeId].scrolling : 'no';
      }
    }

    //The V1 iFrame script expects an int, where as in V2 expects a CSS
    //string value such as '1px 3em', so if we have an int for V2, set V1=V2
    //and then convert V2 to a string PX value.
    function setupBodyMarginValues() {
      if (('number'===typeof(settings[iframeId] && settings[iframeId].bodyMargin)) || ('0'===(settings[iframeId] && settings[iframeId].bodyMargin))) {
        settings[iframeId].bodyMarginV1 = settings[iframeId].bodyMargin;
        settings[iframeId].bodyMargin   = '' + settings[iframeId].bodyMargin + 'px';
      }
    }

    function checkReset() {
      // Reduce scope of firstRun to function, because IE8's JS execution
      // context stack is borked and this value gets externally
      // changed midway through running this function!!!
      var
        firstRun           = settings[iframeId] && settings[iframeId].firstRun,
        resetRequertMethod = settings[iframeId] && settings[iframeId].heightCalculationMethod in resetRequiredMethods;

      if (!firstRun && resetRequertMethod) {
        resetIFrame({iframe:iframe, height:0, width:0, type:'init'});
      }
    }

    function setupIFrameObject() {
      if(Function.prototype.bind && settings[iframeId]) { //Ignore unpolyfilled IE8.
        settings[iframeId].iframe.iFrameResizer = {

          close        : closeIFrame.bind(null,settings[iframeId].iframe),

          resize       : trigger.bind(null,'Window resize', 'resize', settings[iframeId].iframe),

          moveToAnchor : function(anchor) {
            trigger('Move to anchor','moveToAnchor:'+anchor, settings[iframeId].iframe,iframeId);
          },

          sendMessage  : function(message) {
            message = JSON.stringify(message);
            trigger('Send Message','message:'+message, settings[iframeId].iframe, iframeId);
          }
        };
      }
    }

    //We have to call trigger twice, as we can not be sure if all
    //iframes have completed loading when this code runs. The
    //event listener also catches the page changing in the iFrame.
    function init(msg) {
      function iFrameLoaded() {
        trigger('iFrame.onload', msg, iframe, undefined , true);
        checkReset();
      }

      addEventListener(iframe,'load',iFrameLoaded);
      trigger('init', msg, iframe, undefined, true);
    }

    function checkOptions(options) {
      if ('object' !== typeof options) {
        throw new TypeError('Options is not an object');
      }
    }

    function copyOptions(options) {
      for (var option in defaults) {
        if (defaults.hasOwnProperty(option)) {
          settings[iframeId][option] = options.hasOwnProperty(option) ? options[option] : defaults[option];
        }
      }
    }

    function getTargetOrigin (remoteHost) {
      return ('' === remoteHost || 'file://' === remoteHost) ? '*' : remoteHost;
    }

    function processOptions(options) {
      options = options || {};
      settings[iframeId] = {
        firstRun	: true,
        iframe		: iframe,
        remoteHost	: iframe.src.split('/').slice(0,3).join('/')
      };

      checkOptions(options);
      copyOptions(options);

      if (settings[iframeId]) {
        settings[iframeId].targetOrigin = true === settings[iframeId].checkOrigin ? getTargetOrigin(settings[iframeId].remoteHost) : '*';
      }
    }

    function beenHere() {
      return (iframeId in settings && 'iFrameResizer' in iframe);
    }

    var iframeId = ensureHasId(iframe.id);

    if (!beenHere()) {
      processOptions(options);
      setScrolling();
      setLimits();
      setupBodyMarginValues();
      init(createOutgoingMsg(iframeId));
      setupIFrameObject();
    } else {
      warn(iframeId,'Ignored iFrame, already setup.');
    }
  }

  function debouce(fn,time) {
    if (null === timer) {
      timer = setTimeout(function() {
        timer = null;
        fn();
      }, time);
    }
  }
  
  var frameTimer = {};
  function debounceFrameEvents(fn,time,frameId) {
    if (!frameTimer[frameId]) {
      frameTimer[frameId] = setTimeout(function() {
        frameTimer[frameId] = null;
        fn();
      }, time);
    }
  }

  /* istanbul ignore next */  //Not testable in PhantomJS
  function fixHiddenIFrames() {
    function checkIFrames() {
      function checkIFrame(settingId) {
        function chkDimension(dimension) {
          return '0px' === (settings[settingId] && settings[settingId].iframe.style[dimension]);
        }

        function isVisible(el) {
          return (null !== el.offsetParent);
        }

        if (settings[settingId] && isVisible(settings[settingId].iframe) && (chkDimension('height') || chkDimension('width'))) {
          trigger('Visibility change', 'resize', settings[settingId].iframe, settingId);
        }
      }

      for (var settingId in settings) {
        checkIFrame(settingId);
      }
    }

    function mutationObserved(mutations) {
      log('window','Mutation observed: ' + mutations[0].target + ' ' + mutations[0].type);
      debouce(checkIFrames,16);
    }

    function createMutationObserver() {
      var
        target = document.querySelector('body'),

        config = {
          attributes            : true,
          attributeOldValue     : false,
          characterData         : true,
          characterDataOldValue : false,
          childList             : true,
          subtree               : true
        },

        observer = new MutationObserver(mutationObserved);

      observer.observe(target, config);
    }

    var MutationObserver = window.MutationObserver || window.WebKitMutationObserver;

    if (MutationObserver) createMutationObserver();
  }


  function resizeIFrames(event) {
    function resize() {
      sendTriggerMsg('Window '+event,'resize');
    }

    log('window','Trigger event: '+event);
    debouce(resize,16);
  }

  /* istanbul ignore next */  //Not testable in PhantomJS
  function tabVisible() {
    function resize() {
      sendTriggerMsg('Tab Visable','resize');
    }

    if('hidden' !== document.visibilityState) {
      log('document','Trigger event: Visiblity change');
      debouce(resize,16);
    }
  }

  function sendTriggerMsg(eventName,event) {
    function isIFrameResizeEnabled(iframeId) {
      return	settings[iframeId] &&
          'parent' === settings[iframeId].resizeFrom &&
          settings[iframeId].autoResize &&
          !settings[iframeId].firstRun;
    }

    for (var iframeId in settings) {
      if(isIFrameResizeEnabled(iframeId)) {
        trigger(eventName, event, document.getElementById(iframeId), iframeId);
      }
    }
  }

  function setupEventListeners() {
    addEventListener(window,'message',iFrameListener);

    addEventListener(window,'resize', function() {resizeIFrames('resize');});

    addEventListener(document,'visibilitychange',tabVisible);
    addEventListener(document,'-webkit-visibilitychange',tabVisible); //Andriod 4.4
    addEventListener(window,'focusin',function() {resizeIFrames('focus');}); //IE8-9
    addEventListener(window,'focus',function() {resizeIFrames('focus');});
  }


  function factory() {
    function init(options,element) {
      function chkType() {
        if(!element.tagName) {
          throw new TypeError('Object is not a valid DOM element');
        } else if ('IFRAME' !== element.tagName.toUpperCase()) {
          throw new TypeError('Expected <IFRAME> tag, found <'+element.tagName+'>');
        }
      }

      if(element) {
        chkType();
        setupIFrame(element, options);
        iFrames.push(element);
      }
    }

    function warnDeprecatedOptions(options) {
      if (options && options.enablePublicMethods) {
        warn('enablePublicMethods option has been removed, public methods are now always available in the iFrame');
      }
    }

    var iFrames;

    setupRequestAnimationFrame();
    setupEventListeners();

    return function iFrameResizeF(options,target) {
      iFrames = []; //Only return iFrames past in on this call

      warnDeprecatedOptions(options);

      switch (typeof(target)) {
      case 'undefined':
      case 'string':
        Array.prototype.forEach.call(
          document.querySelectorAll( target || 'iframe' ),
          init.bind(undefined, options)
        );
        break;
      case 'object':
        init(options,target);
        break;
      default:
        throw new TypeError('Unexpected data type ('+typeof(target)+')');
      }

      return iFrames;
    };
  }

  function createJQueryPublicMethod($) {
    if (!$.fn) {
      info('','Unable to bind to jQuery, it is not fully loaded.');
    } else if (!$.fn.iFrameResize) {
      $.fn.iFrameResize = function $iFrameResizeF(options) {
        function init(index, element) {
          setupIFrame(element, options);
        }

        return this.filter('iframe').each(init).end();
      };
    }
  }

  if (window.jQuery) { createJQueryPublicMethod(window.jQuery); }

  if (typeof define === 'function' && define.amd) {
    define([],factory);
  } else if (typeof module === 'object' && typeof module.exports === 'object') { //Node for browserfy
    module.exports = factory();
  } else {
    window.iFrameResize = window.iFrameResize || factory();
  }

})();
;/*global $, jQuery, app, production, countlyView, countlyCommon, countlyGlobal, Handlebars, CountlyHelpers, countlyMonetization, MonetizationIntegrationView, MonetizationMetricsView, iFrameResize */

window.MonetizationMetricsView = countlyView.extend({
    templateData: {},

    /**
    * beforeRender view hook, initializes the template load request.
    * @returns {Promise} Returns a promise which will be resolved when templates and/or data are ready.
    **/
    beforeRender: function() {

        var self = this;

        if (self.template && self.bigNumbersTemplate) {
            return $.when(countlyMonetization.initialize());
        }
        else {
            return $.when($.get(countlyGlobal.path + '/video-intelligence-monetization/templates/metrics.html', function(src) {
                self.template = Handlebars.compile(src);
            }), $.get(countlyGlobal.path + '/video-intelligence-monetization/templates/bignumbers.html', function(src) {
                self.bigNumbersTemplate = Handlebars.compile(src);
            }), countlyMonetization.initialize());
        }
    },

    /**
    * Event types rendered in chart are togglable. This initializes the buttons
    * which manage that event states.
    * @returns {undefined} Returns nothing
    **/
    initializeEventSelector: function() {
        var self = this;
        $("#big-numbers-container").on("click", ".check", function() {
            var classes = $(this).attr('class');
            var id = $(this).attr('data-id');

            if (classes.indexOf('selected') >= 0) {
                if (countlyMonetization.tryDisableEvent(id)) {
                    $(this).removeClass("selected");
                }
            }
            else {
                $(this).addClass("selected");
                countlyMonetization.enableEvent(id);
            }

            self.updateChart();
        });
    },

    /**
    * renderCommon view hook, initializes the template load request.
    * @param {boolean} isRefresh - ensures that it is the first render
    * @returns {undefined} Returns nothing
    **/
    renderCommon: function(isRefresh) {
        var self = this;
        if (!isRefresh) {
            $(this.el).html(self.template(this.templateData));
            self.initializeEventSelector();
            self.updateView(false);
        }
    },

    /**
    * Chart needs to be updated independently, so the only responsibility is that.
    * @returns {undefined} Returns nothing
    **/
    updateChart: function() {
        var self = this;
        var data = self.getData();
        self.renderChart(data.chartDP);
    },

    /**
    * Updates three fundamental components, should be called when data is ready.
    * @param {boolean} isRefresh - renderTable works differently if it is only a refresh, that's why the function needs it
    * @returns {undefined} Returns nothing
    **/
    updateView: function(isRefresh) {
        var self = this;
        var data = self.getData();
        self.renderChart(data.chartDP);
        self.renderNumbers(data.bigNumbersData);
        self.renderTable(data.tableData, isRefresh);
    },

    /**
    * Requests the data, updates view when the data arrives.
    * @returns {undefined} Returns nothing
    **/
    refresh: function() {
        var self = this;
        $.when(
            countlyMonetization.requestMetricData()
        ).done(function() {
            self.updateView(true);
        });
    },

    /**
    * Renders the chart using the passed data. Only renders enabled events.
    * @param {object} data - Processed data from model.
    * @returns {undefined} Returns nothing
    **/
    renderChart: function(data) {
        var enabledLines = countlyMonetization.getEnabledEvents();
        var dataToBeRendered = [];
        enabledLines.forEach(function(key) {
            dataToBeRendered.push(data[key]);
        });
        countlyCommon.drawTimeGraph(dataToBeRendered, "#chartContainer");
    },

    /**
    * Renders the big numbers. Default number of boxes is 3 and less or more boxes
    * would cause design changes.
    * @param {object[]} data - Array of event data objects.
    * @returns {undefined} Returns nothing
    **/
    renderNumbers: function(data) {
        var self = this;
        var compiled = self.bigNumbersTemplate({
            "bignumbers": data
        });

        $("#big-numbers-container").html(compiled);
    },

    /**
    * Renders the table with given data.
    * @param {object} data - Processed data from model.
    * @param {boolean} isRefresh - If it is NOT a refresh, table needs to be created from scratch.
    Otherwise, it should just be refreshed using CountlyHelpers. This guarantees that search works
    well even a refresh() call occurs.
    * @returns {undefined} Returns nothing
    **/
    renderTable: function(data, isRefresh) {
        var self = this;

        var tableData = data;
        if (isRefresh) {
            CountlyHelpers.refreshTable($('#dataTable').dataTable(), tableData);
        }
        else {
            self.createTable(data);
        }
    },

    /**
    * Initializes the table. Should be called only once, view may crash otherwise.
    * @param {object} data - Processed data from model.
    * @returns {undefined} Returns nothing
    **/
    createTable: function(data) {
        var aoColumns = [{
            "mData": "date",
            "sType": "customDate",
            "sTitle": jQuery.i18n.map["common.date"]
        }];

        var eventColumns = countlyMonetization.getColumns();

        for (var ekey in eventColumns) {
            aoColumns.push({
                "mData": ekey,
                sType: "formatted-num",
                "mRender": function(d) {
                    return countlyCommon.formatNumber(d);
                },
                "sTitle": jQuery.i18n.map[eventColumns[ekey].localize]
            });
        }

        this.dtable = $('#dataTable').dataTable($.extend({}, $.fn.dataTable.defaults, {
            "aaData": data,
            "aoColumns": aoColumns
        }));

        $("#dataTable").stickyTableHeaders();
    },

    /**
    * The only way to access to model data.
    * @returns {object} Returns model data
    **/
    getData: function() {
        return countlyMonetization.getMetricData();
    },
});

window.MonetizationIntegrationView = countlyView.extend({
    /**
    * Integration view is almost empty. It only contains an iframe.
    * @returns {undefined} Returns nothing
    **/
    beforeRender: function() {
        var self = this;
        if (!self.integrationTemplate) {
            return $.when($.get(countlyGlobal.path + '/video-intelligence-monetization/templates/integration.html', function(src) {
                self.integrationTemplate = Handlebars.compile(src);
            })).then(function() {});
        }
    },

    /**
    * The iframe needs to be resized w.r.t. screen size. Since iframe operations
    * are a bit complicated, iFrameResizer --an external plugin-- handles that.
    * @returns {undefined} Returns nothing
    **/
    renderCommon: function() {
        $(this.el).html(this.integrationTemplate({}));
        if (!window.monetization_iFrameResize) {
            window.monetization_iFrameResize = function() {
                var ifrm = iFrameResize({
                    interval: 5000,
                    log: false
                }, '#vi-integration');
                if (ifrm[0].iFrameResizer) {
                    window.monetization_iFrame = ifrm[0].iFrameResizer;
                }
            };
        }
    },

    /**
    *
    * @returns {undefined} Returns nothing
    **/
    refresh: function() {

    },

    /**
    * iFrameResizer contains an interval-based checker that needs to be destroyed when
    * the view is disposed.
    * @returns {undefined} Returns nothing
    **/
    destroy: function() {
        if (window.monetization_iFrame) {
            window.monetization_iFrame.close();
            window.monetization_iFrame = null;
        }
        window.monetization_iFrameResize = undefined;
    }
});

app.monetizationIntegrationView = new MonetizationIntegrationView();
app.monetizationMetricsView = new MonetizationMetricsView();

app.route("/monetization/integration", 'monetization-integration', function() {
    this.renderWhenReady(this.monetizationIntegrationView);
});

app.route("/monetization/metrics", 'monetization-metrics', function() {
    this.renderWhenReady(this.monetizationMetricsView);
});

$(document).ready(function() {

    var folder = '<a class="item" id="sidebar-monetization"><div class="logo ion-social-usd"></div><div class="text" data-localize="monetization.title"></div><span class="ion-chevron-right"></span></a>';
    var items = [
        '<a href="#/monetization/integration" class="item"><div class="text" data-localize="monetization.integration">Integration</div></a>',
        '<a href="#/monetization/metrics" class="item"><div class="text" data-localize="monetization.metrics">Metrics</div></a>'
    ];
    var wrapper = '<div class="sidebar-submenu" id="monetization-submenu">' + items.join('') + '</div>';

    if (!production) {
        CountlyHelpers.loadJS("video-intelligence-monetization/javascripts/iframeResizer.js");
    }
    if ($('.sidebar-menu #management-menu').length) {
        $('.sidebar-menu #management-menu').before(folder + wrapper);
    }
    else {
        $('.sidebar-menu').append(folder + wrapper);
    }
});;/*global
    jQuery
 */

(function(alertsPlugin, $) {
    var _alertsList = {};
    var eventMaps = {};
    var _count = {};
    var countlyCommon = window.countlyCommon;
    var countlyGlobal = window.countlyGlobal;
    var _ = window._;
    /**
	* Save alert settings 
    * @param {object} alertConfig - alertConfig record
    * @param {function} callback - callback function 
	*/
    alertsPlugin.saveAlert = function saveAlert(alertConfig, callback) {
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + "/alert/save",
            data: {
                "api_key": countlyGlobal.member.api_key,
                "alert_config": JSON.stringify(alertConfig)
            },
            dataType: "jsonp",
            success: function(res) {
                if (callback) {
                    callback(res);
                }
            }
        });
    };

    /**
	* request alert list 
    * @param {function} callback - callback function 
    * @returns {function} promise
	*/
    alertsPlugin.requestAlertsList = function requestAlertsList(callback) {
        var dfd = jQuery.Deferred();
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r + '/alert/list',
            data: {
                "api_key": countlyGlobal.member.api_key,
            },
            dataType: "jsonp",
            success: function(data) {
                _alertsList = data.alertsList;
                _count = data.count;
                if (callback) {
                    callback();
                }
                dfd.resolve();
            }
        });

        return dfd.promise();
    };

    alertsPlugin.getAlertsList = function getAlertsList() {
        return _alertsList;
    };
    alertsPlugin.getCount = function getCount() {
        return _count;
    };

    alertsPlugin.getAlert = function getAlert(alertID) {
        for (var i = 0; i < _alertsList.length; i++) {
            if (_alertsList[i]._id === alertID) {
                return _alertsList[i];
            }
        }
    };

    alertsPlugin.deleteAlert = function deleteAlert(alertID, callback) {
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.w + "/alert/delete",
            data: {
                "api_key": countlyGlobal.member.api_key,
                "alertID": alertID
            },
            dataType: "jsonp",
            success: function(res) {
                if (callback) {
                    callback(res);
                }
            }
        });

    };

    alertsPlugin.updateAlertStatus = function deleteAlert(status, callback) {
        $.ajax({
            type: "post",
            url: countlyCommon.API_PARTS.data.w + "/alert/status",
            data: {
                "api_key": countlyGlobal.member.api_key,
                "status": JSON.stringify(status)
            },
            dataType: "jsonp",
            success: function(res) {
                if (callback) {
                    callback(res);
                }
            }
        });
    };


    /**
	* extract event name & value
    * @param {array} data - original event list
    * @param {array} returnArray - target format
	*/
    function extractEvents(data, returnArray) {
        var eventData = (_.isArray(data)) ? data[0] : data;
        if (eventData && eventData.list) {
            for (var i = 0; i < eventData.list.length; i++) {
                // var eventNamePostfix = " (" + countlyGlobal.apps[eventData._id].name + ")";
                returnArray.push({
                    value: eventData.list[i],
                    name: getEventLongName(eventData.list[i], eventData.map)
                });
            }
        }
    }

    /**
	* extract getEventLongName
    * @param {string} eventKey - event key in db
    * @param {object} eventMap - for caching
    * @return {string} eventKey - return event parsed key name
	*/
    function getEventLongName(eventKey, eventMap) {
        var mapKey = eventKey.replace("\\", "\\\\").replace('$', "\\u0024").replace(".", "\\u002e");
        if (eventMap && eventMap[mapKey] && eventMap[mapKey].name) {
            return eventMap[mapKey].name;
        }
        else {
            return eventKey;
        }
    }
    /**
	* get event definition
    * @param {string} appId - which app to fetch
    * @param {array} results - for store fetch result
    * @return {object} promise - return request promise object
	*/
    function getEventsDfd(appId, results) {
        var dfd = jQuery.Deferred();

        if (eventMaps[appId]) {
            results.push(eventMaps[appId]);
            dfd.resolve();
        }
        else {
            $.ajax({
                type: "GET",
                url: countlyCommon.API_PARTS.data.r,
                data: {
                    "api_key": countlyGlobal.member.api_key,
                    "app_id": appId,
                    "method": "get_events"
                },
                dataType: "jsonp",
                success: function(data) {
                    if (data && data._id) {
                        eventMaps[data._id] = data;
                    }
                    results.push(data);
                    dfd.resolve();
                }
            });
        }

        return dfd.promise();
    }

    alertsPlugin.getEventName = function(eventId, callback) {
        var eventKey = eventId.split("***")[1],
            appId = eventId.split("***")[0],
            results = [];

        $.when(getEventsDfd(appId, results)).then(function() {
            callback(getEventLongName(eventKey, (results[0].map) ? results[0].map : null));
        });
    };

    alertsPlugin.getEventsForApps = function(appId, callback) {
        if (!appId) {
            callback([]);
            return;
        }
        var results = [];
        var ret = [];
        getEventsDfd(appId, results).then(function() {
            extractEvents(results, ret);
            callback(ret);
        });
    };

    alertsPlugin.getViewForApp = function(appId, callback) {
        if (!appId) {
            callback([]);
            return;
        }
        $.ajax({
            type: "GET",
            url: countlyCommon.API_PARTS.data.r,
            data: {
                "api_key": countlyGlobal.member.api_key,
                "app_id": appId,
                "method": "views"
            },
            dataType: "jsonp",
            success: function(res) {
                if (res && res.meta && res.meta.views && callback) {
                    var data = [];
                    for (var i = 0; i < res.meta.views.length; i++) {
                        data.push({
                            value: res.meta.views[i],
                            name: res.meta.views[i]
                        });
                    }
                    callback(data);
                }
            }
        });
    };
}(window.alertsPlugin = window.alertsPlugin || {}, jQuery));;/*global 
    countlyView,
    countlyGlobal,
    CountlyHelpers,
    Handlebars,
    alertsPlugin,
    _,
    jQuery,
    $,
    app
 */


var alertDefine = {
    metric: {
        target: [
            { value: 'Total users', name: 'Total users' },
            { value: 'New users', name: 'New users' },
            { value: 'Total sessions', name: 'Total sessions' },
            { value: 'Average session duration', name: 'Average session duration' },
            { value: 'Bounce rate', name: 'Bounce rate (%)' },
            { value: 'Number of page views', name: 'Number of page views' },
            { value: 'Purchases', name: 'Purchases' }
        ],
        condition: [
            { value: 'increased by at least', name: 'increased by at least' },
            { value: 'decreased by at least', name: 'decreased by at least' },
        ]
    },
    event: {
        target: [],
        condition: [
            { value: 'increased by at least', name: 'increased by at least' },
            { value: 'decreased by at least', name: 'decreased by at least' },
        ]
    },
    crash: {
        target: [
            { value: 'Total crashes', name: 'Total crashes' },
            { value: 'New crash occurence', name: 'New crash occurence' },
            { value: 'None fatal crash per session', name: 'None fatal crash per session' },
            { value: 'Fatal crash per session', name: 'Fatal crash per session' },
        ],
        condition: [
            { value: 'increased by at least', name: 'increased by at least' },
            { value: 'decreased by at least', name: 'decreased by at least' },
        ]
    }
};

// dynamic to get value for different settings properties.
var dict = {
    crash: {
        'New crash occurence': {
            compareDescribe: function(settings) {
                return settings.alertDataSubType ;
            },
            period: function() {
                return 'every 5 minutes';
            }
        },
    },
};



window.AlertsView = countlyView.extend({
    initialize: function() {
    },
    statusChanged: {},
    beforeRender: function() {
        var self = this;
        return $.when(
            $.get(countlyGlobal.path + '/alerts/templates/alert-widget-drawer.html', function(src) {
                Handlebars.registerPartial("alert-widget-drawer", src);
            }),
            $.get(countlyGlobal.path + '/alerts/templates/alert-types-config-template.html', function(src) {
                Handlebars.registerPartial("alert-types-config-template", src);
            }),
            $.get(countlyGlobal.path + '/alerts/templates/form.html', function(src) {
                self.template = Handlebars.compile(src);
            }),
            alertsPlugin.requestAlertsList()
        ).then(function() {
        });
    },
    prepareDrawer: function() {
        this.widgetDrawer.init();
        var self = this;
        $("#create-alert").off("click").on("click", function() {
            self.widgetDrawer.init();
            $("#current_alert_id").text('');
            $("#alert-widget-drawer").removeClass("open editing");
            $("#alert-widget-drawer").find("#widget-types .opt").removeClass("disabled");
            $("#alert-widget-drawer").addClass("open");
            $("#create-widget").removeClass("disabled");
            $(($('#alert-data-types').find("[data-data-type='metric']"))).trigger("click");
        });

        $('#alert-widge-close').off("click").on("click", function() {
            $("#alert-widget-drawer").removeClass("open");
        });
    },

    renderTable: function() {
        var pluginsData = [];
        var self = this;
        var alertsList = alertsPlugin.getAlertsList();
        app.alertsView.updateCount();

        for (var i = 0; i < alertsList.length; i++) {
            var appNameList = [];
            if (alertsList[i].selectedApps) {
                appNameList = _.map(alertsList[i].selectedApps, function(appID) {
                    return countlyGlobal.apps[appID] && countlyGlobal.apps[appID].name;
                });
            }


            pluginsData.push({
                id: alertsList[i]._id,
                appNameList: appNameList.join(', '),
                alertName: alertsList[i].alertName || '',
                type: alertsList[i].alertDataSubType || '',
                condtionText: alertsList[i].compareDescribe || '',
                enabled: alertsList[i].enabled || false,
                createdByUser: alertsList[i].createdByUser || ''
            });
        }
        var isAdmin = countlyGlobal.member.global_admin;
        var dataTableDefine = {
            "aaData": pluginsData,
            "aoColumns": [
                {
                    "mData": 'alertName',
                    "sType": "string",
                    "sTitle": 'Alert Name'
                },
                {
                    "mData": function(row, type) {
                        if (type === "display") {
                            var disabled = (row.prepackaged) ? 'disabled' : '';
                            var input = '<div class="on-off-switch ' + disabled + '">';
                            if (row.enabled) {
                                input += '<input type="checkbox" class="on-off-switch-checkbox alert-switcher" id="plugin-' + row.id + '" checked ' + disabled + '>';
                            }
                            else {
                                input += '<input type="checkbox" class="on-off-switch-checkbox alert-switcher" id="plugin-' + row.id + '" ' + disabled + '>';
                            }
                            input += '<label class="on-off-switch-label" for="plugin-' + row.id + '"></label>';
                            input += '<span class="text">' + 'Enable' + '</span>';
                            return input;
                        }
                        else {
                            return row.enabled;
                        }
                    },
                    "sType": "string",
                    "sTitle": 'Status',
                    "bSortable": false,

                },
                {
                    "mData": 'appNameList',
                    "sType": "string",
                    "sTitle": 'Application',
                    "bSortable": false,

                },
                {
                    "mData": 'condtionText',
                    "sType": "string",
                    "sTitle": 'Condition',
                    "bSortable": false,
                }
            ]
        };
        if (isAdmin) {
            dataTableDefine.aoColumns.push({
                "mData": 'createdByUser',
                "sType": "string",
                "sTitle": 'Created by',
                "bSortable": false
            });
        }
        dataTableDefine.aoColumns.push({
            "mData": function(row) {
                return "<div class='options-item'>" +
					"<div class='edit'></div>" +
					"<div class='edit-menu'>" +
					"<div class='edit-alert item'" + " id='" + row.id + "'" + ">Edit</div>" +
					"<div class='delete-alert item'" + " id='" + row.id + "'" + " data-name='" + row.alertName + "'" + ">Delete</div></div>" +
					"</div>";
            },
            "bSortable": false,
        });

        this.dtable = $('#alerts-table').dataTable($.extend({}, $.fn.dataTable.defaults, dataTableDefine));
        this.dtable.stickyTableHeaders();
        this.dtable.fnSort([[0, 'asc']]);

        $(".alert-switcher").off("click").on("click", function() {
            var pluginId = this.id.toString().replace(/^plugin-/, '');
            var newStatus = $(this).is(":checked");
            var list = alertsPlugin.getAlertsList();
            var alertRecord = _.filter(list, function(item) {
                return item._id === pluginId;
            });
            if (alertRecord) {
                (alertRecord[0].enabled + '' !== newStatus + '') ? (self.statusChanged[pluginId] = newStatus) : (delete self.statusChanged[pluginId]);
            }
            var keys = _.keys(self.statusChanged);
            if (keys && keys.length > 0) {
                $(".data-save-bar-remind").text(' You made ' + keys.length + (keys.length === 1 ? ' change.' : ' changes.'));

                return $(".data-saver-bar").removeClass("data-saver-bar-hide");
            }
            $(".data-saver-bar").addClass("data-saver-bar-hide");
        });
        $(".data-saver-cancel-button").off("click").on("click", function() {
            self.statusChanged = {};
            self.renderTable();
            return $(".data-saver-bar").addClass("data-saver-bar-hide");
        });
        $(".data-saver-button").off("click").on("click", function() {
            alertsPlugin.updateAlertStatus(self.statusChanged, function() {
                alertsPlugin.requestAlertsList(function() {
                    self.renderTable();
                });
            });
            return $(".data-saver-bar").addClass("data-saver-bar-hide");
        });

        // load menu 
        $("body").off("click", ".options-item .edit").on("click", ".options-item .edit", function() {
            $(this).next(".edit-menu").fadeToggle();
            event.stopPropagation();
        });

        $(window).click(function() {
            $(".options-item").find(".edit").next(".edit-menu").fadeOut();
        });

        $(".delete-alert").off("click").on("click", function(e) {
            var alertID = e.target.id;
            var name = $(e.target).attr("data-name");
            return CountlyHelpers.confirm(jQuery.i18n.prop("alert.delete-confirm", "<b>" + name + "</b>"), "popStyleGreen", function(result) {
                if (result) {
                    alertsPlugin.deleteAlert(alertID, function() {
                        alertsPlugin.requestAlertsList(function() {
                            self.renderTable();
                        });
                    });
                }
            }, [jQuery.i18n.map["common.no-dont-delete"], jQuery.i18n.map["alert.yes-delete-alert"]], {title: jQuery.i18n.map["alert.delete-confirm-title"], image: "delete-alert"});
        });

        $(".edit-alert").off("click").on("click", function(e) {
            var alertID = e.target.id;
            var formData = alertsPlugin.getAlert(alertID);
            $("#alert-widget-drawer").addClass("open editing");
            self.widgetDrawer.loadData(formData);
        });

    },
    renderCommon: function() {
        $(this.el).html(this.template());
        this.renderTable();
        this.prepareDrawer();
    },
    updateCount: function() {
        var count = alertsPlugin.getCount();
        $("#alerts-running-sum").text(count.r);
        $("#alerts-total-sum").text(count.t);
        $("#alerts-today-sum").text(count.today);
    },
    widgetDrawer: {
        loadAppViewData: function(selectedView) {
            var appID = $("#single-app-dropdown").clySelectGetSelection();
            if (appID) {
                alertsPlugin.getViewForApp(appID, function(viewList) {
                    $("#single-target2-dropdown").clySelectSetItems(viewList);
                    if (selectedView) {
                        alertsPlugin.getViewForApp(appID, function() {
                            $("#single-target2-dropdown").clySelectSetSelection(selectedView, selectedView);
                        });
                    }
                    else {
                        $("#single-target2-dropdown").clySelectSetSelection("", "Select a View");
                    }
                });
            }
            else {
                $("#single-target2-dropdown").clySelectSetSelection("", "please select app first");

            }

        },
        init: function() {
            var self = this;
            var apps = [];

            // clear alertName 
            $("#alert-name-input").val('');

            // select alert data type : metric , event crash
            var metricClickListner = function() {
                $("#single-target-dropdown").off("cly-select-change").on("cly-select-change", function(e, selected) {
                    var dataType = $(($('#alert-data-types').find(".selected")[0])).data("dataType");
                    var source = $("#" + dataType + "-condition-template").html();
                    $('.alert-condition-block').html(source);

                    if (selected === 'Number of page views') {
                        source = $("#metric2-condition-template").html();
                        $('.alert-condition-block').html(source);
                        $("#single-target-dropdown").clySelectSetItems(alertDefine[dataType].target);
                        self.loadAppViewData();
                    }
                    else if (selected === 'Bounce rate') {
                        source = $("#metric2-condition-template").html();
                        $('.alert-condition-block').html(source);
                        $("#single-target-dropdown").clySelectSetItems(alertDefine[dataType].target);
                        self.loadAppViewData();
                    }
                    else if (selected === 'New crash occurence') {
                        $("#single-target-condition-dropdown").css("visibility", "hidden");
                        $('#alert-compare-value').css("visibility", "hidden");
                    }
                    else {
                        $("#single-target-condition-dropdown").css("visibility", "visible");
                        $('#alert-compare-value').css("visibility", "visible");
                    }


                    $("#single-target-dropdown").clySelectSetItems(alertDefine[dataType].target);
                    $("#single-target-condition-dropdown").clySelectSetItems(alertDefine[dataType].condition);
                    for (var i = 0; i < alertDefine[dataType].target.length; i++) {
                        var item = alertDefine[dataType].target[i];
                        if (item.value === selected) {
                            $("#single-target-dropdown").clySelectSetSelection(item.value, item.name);
                        }
                    }
                    metricClickListner();
                    app.localize();
                });
            };
            $(".alert-data-type").off("click").on("click", function() {
                var dataType = $(this).data("dataType");
                $(".alert-data-type").removeClass('selected');
                $(this).addClass('selected');


                $("#widget-section-single-app").show();
                $("#single-app-dropdown").clySelectSetSelection("", "Select App");

                var source = $("#" + dataType + "-condition-template").html();
                $('.alert-condition-block').html(source);
                $("#single-target-dropdown").clySelectSetItems(alertDefine[dataType].target);
                $("#single-target-condition-dropdown").clySelectSetItems(alertDefine[dataType].condition);

                app.localize();
                switch (dataType) {
                case 'metric':
                case 'crash':
                    metricClickListner();
                    break;
                case 'event':
                    break;
                }

            });
            // init content
            $(".alert-condition-block").html('');


            for (var appId in countlyGlobal.apps) {
                apps.push({ value: appId, name: countlyGlobal.apps[appId].name });
            }
            // $("#multi-app-dropdown").clyMultiSelectSetItems(apps);
            $("#single-app-dropdown").clySelectSetItems(apps);
            $("#single-app-dropdown").off("cly-select-change").on("cly-select-change", function(e, selected) {
                var dataType = $(($('#alert-data-types').find(".selected")[0])).data("dataType");
                var dataSubType = $("#single-target-dropdown").clySelectGetSelection();
                if (selected && dataType === 'event') {
                    alertsPlugin.getEventsForApps(selected, function(eventData) {
                        $("#single-target-dropdown").clySelectSetItems(eventData);
                        $("#single-target-dropdown").clySelectSetSelection("", "Select event");
                    });
                }

                if (selected && (dataSubType === 'Number of page views' || dataSubType === 'Bounce rate')) {
                    self.loadAppViewData();
                }
            });

            // clear app  selected value
            // $("#multi-app-dropdown").clyMultiSelectClearSelection();
            $("#single-app-dropdown").clySelectSetSelection({});


            //alert by 
            $("#email-alert-input").val("");

            $("#alert-widget-drawer").find(".section.settings").hide();

            // $("#alert-widget-drawer").trigger("cly-widget-section-complete");
            $(".cly-drawer").find(".close").off("click").on("click", function() {
                $(".grid-stack-item").removeClass("marked-for-editing");
                $(this).parents(".cly-drawer").removeClass("open");
            });

            $("#create-widget").off().on("click", function() {
                var alertConfig = self.getWidgetSettings(true);
                for (var key in alertConfig) {
                    if (!alertConfig[key]) {
                        return CountlyHelpers.alert("Please complete all required fields",
                            "green",
                            function() { });
                    }
                }
                $("#alert-widget-drawer").removeClass("open");
                alertsPlugin.saveAlert(alertConfig, function callback() {
                    alertsPlugin.requestAlertsList(function() {
                        app.alertsView.renderTable();
                    });
                });
            });

            $("#save-widget").off("click").on("click", function() {
                var alertConfig = self.getWidgetSettings();
                for (var key in alertConfig) {
                    if (!alertConfig[key]) {
                        return CountlyHelpers.confirm("Please input all the fields", "green", function() {
                        });
                    }
                }
                $("#alert-widget-drawer").removeClass("open");
                alertsPlugin.saveAlert(alertConfig, function callback() {
                    alertsPlugin.requestAlertsList(function() {
                        app.alertsView.renderTable();
                    });
                });
            });
        },

        loadData: function(data) {
            $(($('#alert-data-types').find("[data-data-type='" + data.alertDataType + "']"))).trigger("click");
            $("#current_alert_id").text(data._id);
            $("#alert-name-input").val(data.alertName);
            switch (data.alertDataType) {
            case 'metric':
            case 'crash':
                var appSelected = [];
                for (var index in data.selectedApps) {
                    var appId = data.selectedApps[index];
                    countlyGlobal.apps[appId] && appSelected.push({ value: appId, name: countlyGlobal.apps[appId].name });
                    countlyGlobal.apps[appId] && $("#single-app-dropdown").clySelectSetSelection(appId, countlyGlobal.apps[appId].name);

                }
                // $("#multi-app-dropdown").clyMultiSelectSetSelection(appSelected);
                var target = _.find(alertDefine[data.alertDataType].target, function(m) {
                    return m.value === data.alertDataSubType;
                });
                if (target) {
                    $("#single-target-dropdown").clySelectSetSelection(target.value, target.name);
                }

                if (data.alertDataSubType2 && (data.alertDataSubType === 'Number of page views' || data.alertDataSubType === 'Bounce rate')) {
                    this.loadAppViewData(data.alertDataSubType2);
                }
                break;
            case 'event':
                $("#single-target-dropdown").off("cly-select-change").on("cly-select-change", function() {
                    $("#single-target-dropdown").off("cly-select-change");
                    $("#single-target-dropdown").clySelectSetSelection(data.alertDataSubType, data.alertDataSubType);
                });
                for (index in data.selectedApps) {
                    appId = data.selectedApps[index];
                    countlyGlobal.apps[appId] && $("#single-app-dropdown").clySelectSetSelection(appId, countlyGlobal.apps[appId].name);
                }
                break;
            }
            var condition = _.find(alertDefine[data.alertDataType].condition, function(m) {
                return m.value === data.compareType;
            });
            if (condition) {
                $("#single-target-condition-dropdown").clySelectSetSelection(condition.value, condition.name);
            }
            $('#alert-compare-value-input').val(data.compareValue);
            for (var key in dict[data.alertDataSubType]) {
                if (typeof dict[data.alertDataSubType][key] === 'string') {
                    $("#" + dict[data.alertDataSubType][key]).val(data[key]);
                }
            }


            $("#save-widget").removeClass("disabled");
        },

        getWidgetSettings: function(enabled) {
            var dataType = $(($('#alert-data-types').find(".selected")[0])).data("dataType");
            var settings = {
                alertName: $("#alert-name-input").val(),
                alertDataType: dataType,
                alertDataSubType: $("#single-target-dropdown").clySelectGetSelection(),
                compareType: $('#single-target-condition-dropdown').clySelectGetSelection(),
                compareValue: $('#alert-compare-value-input').val(),
                period: 'every 59 mins starting on the 59 min', // 'every 10 seconds',    //'at 23:59 everyday',
                alertBy: 'email',
            };
            if (enabled) {
                settings.enabled = true;
            }
            if ($("#single-target2-dropdown").clySelectGetSelection()) {
                settings.alertDataSubType2 = $("#single-target2-dropdown").clySelectGetSelection();
            }
            switch (dataType) {
            case 'metric':
            case 'crash':
                if (settings.alertDataSubType === 'New crash occurence') {
                    delete settings.compareType;
                    delete settings.compareValue;
                }
                break;

            case 'event':
                break;
            }
            var selectedSingleAPP = $("#single-app-dropdown").clySelectGetSelection();
            settings.selectedApps = selectedSingleAPP ? [selectedSingleAPP] : null;

            settings.compareDescribe = settings.alertDataSubType + (settings.alertDataSubType2 ? ' (' + settings.alertDataSubType2 + ')' : '') +
				' ' + settings.compareType +
				' ' + settings.compareValue + "%";

            var dictObject = dict[settings.alertDataType] && dict[settings.alertDataType][settings.alertDataSubType];
            if (dictObject) {
                for (var key in dictObject) {
                    settings[key] = typeof dictObject[key] === 'string' ?
                        $("#" + dictObject[key]).val() : dictObject[key](settings);
                }
            }

            var emailList = [countlyGlobal.member._id];
            settings.alertValues = emailList && emailList.length > 0 ? emailList : null;
            var currentId = $("#current_alert_id").text();
            currentId && (settings._id = currentId);
            return settings;
        }
    }
});

app.alertsView = new window.AlertsView();

if (countlyGlobal.member.global_admin || countlyGlobal.member.admin_of.length) {
    app.route('/manage/alerts', 'alerts', function() {
        this.renderWhenReady(this.alertsView);
    });
}

$(document).ready(function() {
    if (countlyGlobal.member.global_admin || countlyGlobal.member.admin_of.length) {
        var menu = '<a href="#/manage/alerts" class="item">' +
			'<div class="logo-icon fa fa-envelope"></div>' +
			'<div class="text" data-localize="alert.plugin-title"></div>' +
			'</a>';
        if ($('#management-submenu .help-toggle').length) {
            $('#management-submenu .help-toggle').before(menu);
        }

    }

});;;(function(k,f,c,j,d,l,g){/*! Jssor */
    new(function(){this.$DebugMode=d;this.$Log=function(c,d){var a=k.console||{},b=this.$DebugMode;if(b&&a.log)a.log(c);else b&&d&&alert(c)};this.$Error=function(b,d){var c=k.console||{},a=this.$DebugMode;if(a&&c.error)c.error(b);else a&&alert(b);if(a)throw d||new Error(b);};this.$Fail=function(a){throw new Error(a);};this.$Assert=function(b,c){var a=this.$DebugMode;if(a)if(!b)throw new Error("Assert failed "+c||"");};this.$Trace=function(c){var a=k.console||{},b=this.$DebugMode;b&&a.log&&a.log(c)};this.$Execute=function(b){var a=this.$DebugMode;a&&b()};this.$LiveStamp=function(c,d){var b=this.$DebugMode;if(b){var a=f.createElement("DIV");a.setAttribute("id",d);c.$Live=a}};this.$C_AbstractProperty=function(){throw new Error("The property is abstract, it should be implemented by subclass.");};this.$C_AbstractMethod=function(){throw new Error("The method is abstract, it should be implemented by subclass.");};function a(b){if(b.constructor===a.caller)throw new Error("Cannot create instance of an abstract class.");}this.$C_AbstractClass=a});var e=k.$JssorEasing$={$EaseSwing:function(a){return-c.cos(a*c.PI)/2+.5},$EaseLinear:function(a){return a},$EaseInQuad:function(a){return a*a},$EaseOutQuad:function(a){return-a*(a-2)},$EaseInOutQuad:function(a){return(a*=2)<1?1/2*a*a:-1/2*(--a*(a-2)-1)},$EaseInCubic:function(a){return a*a*a},$EaseOutCubic:function(a){return(a-=1)*a*a+1},$EaseInOutCubic:function(a){return(a*=2)<1?1/2*a*a*a:1/2*((a-=2)*a*a+2)},$EaseInQuart:function(a){return a*a*a*a},$EaseOutQuart:function(a){return-((a-=1)*a*a*a-1)},$EaseInOutQuart:function(a){return(a*=2)<1?1/2*a*a*a*a:-1/2*((a-=2)*a*a*a-2)},$EaseInQuint:function(a){return a*a*a*a*a},$EaseOutQuint:function(a){return(a-=1)*a*a*a*a+1},$EaseInOutQuint:function(a){return(a*=2)<1?1/2*a*a*a*a*a:1/2*((a-=2)*a*a*a*a+2)},$EaseInSine:function(a){return 1-c.cos(a*c.PI/2)},$EaseOutSine:function(a){return c.sin(a*c.PI/2)},$EaseInOutSine:function(a){return-1/2*(c.cos(c.PI*a)-1)},$EaseInExpo:function(a){return a==0?0:c.pow(2,10*(a-1))},$EaseOutExpo:function(a){return a==1?1:-c.pow(2,-10*a)+1},$EaseInOutExpo:function(a){return a==0||a==1?a:(a*=2)<1?1/2*c.pow(2,10*(a-1)):1/2*(-c.pow(2,-10*--a)+2)},$EaseInCirc:function(a){return-(c.sqrt(1-a*a)-1)},$EaseOutCirc:function(a){return c.sqrt(1-(a-=1)*a)},$EaseInOutCirc:function(a){return(a*=2)<1?-1/2*(c.sqrt(1-a*a)-1):1/2*(c.sqrt(1-(a-=2)*a)+1)},$EaseInElastic:function(a){if(!a||a==1)return a;var b=.3,d=.075;return-(c.pow(2,10*(a-=1))*c.sin((a-d)*2*c.PI/b))},$EaseOutElastic:function(a){if(!a||a==1)return a;var b=.3,d=.075;return c.pow(2,-10*a)*c.sin((a-d)*2*c.PI/b)+1},$EaseInOutElastic:function(a){if(!a||a==1)return a;var b=.45,d=.1125;return(a*=2)<1?-.5*c.pow(2,10*(a-=1))*c.sin((a-d)*2*c.PI/b):c.pow(2,-10*(a-=1))*c.sin((a-d)*2*c.PI/b)*.5+1},$EaseInBack:function(a){var b=1.70158;return a*a*((b+1)*a-b)},$EaseOutBack:function(a){var b=1.70158;return(a-=1)*a*((b+1)*a+b)+1},$EaseInOutBack:function(a){var b=1.70158;return(a*=2)<1?1/2*a*a*(((b*=1.525)+1)*a-b):1/2*((a-=2)*a*(((b*=1.525)+1)*a+b)+2)},$EaseInBounce:function(a){return 1-e.$EaseOutBounce(1-a)},$EaseOutBounce:function(a){return a<1/2.75?7.5625*a*a:a<2/2.75?7.5625*(a-=1.5/2.75)*a+.75:a<2.5/2.75?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375},$EaseInOutBounce:function(a){return a<1/2?e.$EaseInBounce(a*2)*.5:e.$EaseOutBounce(a*2-1)*.5+.5},$EaseGoBack:function(a){return 1-c.abs(2-1)},$EaseInWave:function(a){return 1-c.cos(a*c.PI*2)},$EaseOutWave:function(a){return c.sin(a*c.PI*2)},$EaseOutJump:function(a){return 1-((a*=2)<1?(a=1-a)*a*a:(a-=1)*a*a)},$EaseInJump:function(a){return(a*=2)<1?a*a*a:(a=2-a)*a*a}},h=k.$Jease$={$Swing:e.$EaseSwing,$Linear:e.$EaseLinear,$InQuad:e.$EaseInQuad,$OutQuad:e.$EaseOutQuad,$InOutQuad:e.$EaseInOutQuad,$InCubic:e.$EaseInCubic,$OutCubic:e.$EaseOutCubic,$InOutCubic:e.$EaseInOutCubic,$InQuart:e.$EaseInQuart,$OutQuart:e.$EaseOutQuart,$InOutQuart:e.$EaseInOutQuart,$InQuint:e.$EaseInQuint,$OutQuint:e.$EaseOutQuint,$InOutQuint:e.$EaseInOutQuint,$InSine:e.$EaseInSine,$OutSine:e.$EaseOutSine,$InOutSine:e.$EaseInOutSine,$InExpo:e.$EaseInExpo,$OutExpo:e.$EaseOutExpo,$InOutExpo:e.$EaseInOutExpo,$InCirc:e.$EaseInCirc,$OutCirc:e.$EaseOutCirc,$InOutCirc:e.$EaseInOutCirc,$InElastic:e.$EaseInElastic,$OutElastic:e.$EaseOutElastic,$InOutElastic:e.$EaseInOutElastic,$InBack:e.$EaseInBack,$OutBack:e.$EaseOutBack,$InOutBack:e.$EaseInOutBack,$InBounce:e.$EaseInBounce,$OutBounce:e.$EaseOutBounce,$InOutBounce:e.$EaseInOutBounce,$GoBack:e.$EaseGoBack,$InWave:e.$EaseInWave,$OutWave:e.$EaseOutWave,$OutJump:e.$EaseOutJump,$InJump:e.$EaseInJump};k.$JssorDirection$={$TO_LEFT:1,$TO_RIGHT:2,$TO_TOP:4,$TO_BOTTOM:8,$HORIZONTAL:3,$VERTICAL:12,$GetDirectionHorizontal:function(a){return a&3},$GetDirectionVertical:function(a){return a&12},$IsHorizontal:function(a){return a&3},$IsVertical:function(a){return a&12}};var b=k.$Jssor$=new function(){var h=this,Ab=/\S+/g,L=1,jb=2,nb=3,mb=4,rb=5,M,s=0,i=0,t=0,z=0,A=0,D=navigator,vb=D.appName,o=D.userAgent,y=f.documentElement,q=parseFloat;function Jb(){if(!M){M={$Touchable:"ontouchstart"in k||"createTouch"in f};var a;if(D.pointerEnabled||(a=D.msPointerEnabled))M.$TouchActionAttr=a?"msTouchAction":"touchAction"}return M}function v(h){if(!s){s=-1;if(vb=="Microsoft Internet Explorer"&&!!k.attachEvent&&!!k.ActiveXObject){var e=o.indexOf("MSIE");s=L;t=q(o.substring(e+5,o.indexOf(";",e)));/*@cc_on z=@_jscript_version@*/;i=f.documentMode||t}else if(vb=="Netscape"&&!!k.addEventListener){var d=o.indexOf("Firefox"),b=o.indexOf("Safari"),g=o.indexOf("Chrome"),c=o.indexOf("AppleWebKit");if(d>=0){s=jb;i=q(o.substring(d+8))}else if(b>=0){var j=o.substring(0,b).lastIndexOf("/");s=g>=0?mb:nb;i=q(o.substring(j+1,b))}else{var a=/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/i.exec(o);if(a){s=L;i=t=q(a[1])}}if(c>=0)A=q(o.substring(c+12))}else{var a=/(opera)(?:.*version|)[ \/]([\w.]+)/i.exec(o);if(a){s=rb;i=q(a[2])}}}return h==s}function r(){return v(L)}function T(){return r()&&(i<6||f.compatMode=="BackCompat")}function Bb(){return v(jb)}function lb(){return v(nb)}function Eb(){return v(mb)}function qb(){return v(rb)}function gb(){return lb()&&A>534&&A<535}function H(){v();return A>537||i>42||s==L&&i>=11}function R(){return r()&&i<9}function hb(a){var b,c;return function(f){if(!b){b=d;var e=a.substr(0,1).toUpperCase()+a.substr(1);n([a].concat(["WebKit","ms","Moz","O","webkit"]),function(h,d){var b=a;if(d)b=h+e;if(f.style[b]!=g)return c=b})}return c}}function fb(b){var a;return function(c){a=a||hb(b)(c)||b;return a}}var N=fb("transform");function ub(a){return{}.toString.call(a)}var K;function Gb(){if(!K){K={};n(["Boolean","Number","String","Function","Array","Date","RegExp","Object"],function(a){K["[object "+a+"]"]=a.toLowerCase()})}return K}function n(b,d){var a,c;if(ub(b)=="[object Array]"){for(a=0;a<b.length;a++)if(c=d(b[a],a,b))return c}else for(a in b)if(c=d(b[a],a,b))return c}function F(a){return a==j?String(a):Gb()[ub(a)]||"object"}function sb(a){for(var b in a)return d}function B(a){try{return F(a)=="object"&&!a.nodeType&&a!=a.window&&(!a.constructor||{}.hasOwnProperty.call(a.constructor.prototype,"isPrototypeOf"))}catch(b){}}function p(a,b){return{x:a,y:b}}function yb(b,a){setTimeout(b,a||0)}function C(b,d,c){var a=!b||b=="inherit"?"":b;n(d,function(c){var b=c.exec(a);if(b){var d=a.substr(0,b.index),e=a.substr(b.index+b[0].length+1,a.length-1);a=d+e}});a=c+(!a.indexOf(" ")?"":" ")+a;return a}function U(b,a){if(i<9)b.style.filter=a}h.$Device=Jb;h.$IsBrowserIE=r;h.$IsBrowserIeQuirks=T;h.$IsBrowserFireFox=Bb;h.$IsBrowserSafari=lb;h.$IsBrowserChrome=Eb;h.$IsBrowserOpera=qb;h.$IsBrowserBadTransform=gb;h.$IsBrowser3dSafe=H;h.$IsBrowserIe9Earlier=R;h.$GetTransformProperty=hb("transform");h.$BrowserVersion=function(){return i};h.$BrowserEngineVersion=function(){return t||i};h.$WebKitVersion=function(){v();return A};h.$Delay=yb;h.$Inherit=function(a,b){b.call(a);return E({},a)};function bb(a){a.constructor===bb.caller&&a.$Construct&&a.$Construct.apply(a,bb.caller.arguments)}h.$Construct=bb;h.$GetElement=function(a){if(h.$IsString(a))a=f.getElementById(a);return a};function u(a){return a||k.event}h.$GetEvent=u;h.$EvtSrc=function(b){b=u(b);var a=b.target||b.srcElement||f;if(a.nodeType==3)a=h.$ParentNode(a);return a};h.$EvtTarget=function(a){a=u(a);return a.relatedTarget||a.toElement};h.$EvtWhich=function(a){a=u(a);return a.which||([0,1,3,0,2])[a.button]||a.charCode||a.keyCode};h.$MousePosition=function(a){a=u(a);return{x:a.pageX||a.clientX||0,y:a.pageY||a.clientY||0}};h.$PageScroll=function(){var a=f.body;return{x:(k.pageXOffset||y.scrollLeft||a.scrollLeft||0)-(y.clientLeft||a.clientLeft||0),y:(k.pageYOffset||y.scrollTop||a.scrollTop||0)-(y.clientTop||a.clientTop||0)}};h.$WindowSize=function(){var a=f.body;return{x:a.clientWidth||y.clientWidth,y:a.clientHeight||y.clientHeight}};function G(c,d,a){if(a!==g)c.style[d]=a==g?"":a;else{var b=c.currentStyle||c.style;a=b[d];if(a==""&&k.getComputedStyle){b=c.ownerDocument.defaultView.getComputedStyle(c,j);b&&(a=b.getPropertyValue(d)||b[d])}return a}}function db(b,c,a,d){if(a!==g){if(a==j)a="";else d&&(a+="px");G(b,c,a)}else return q(G(b,c))}function Kb(b,c,a){return db(b,c,a,d)}function m(c,a){var d=a?db:G,b;if(a&4)b=fb(c);return function(e,f){return d(e,b?b(e):c,f,a&2)}}function Db(b){if(r()&&t<9){var a=/opacity=([^)]*)/.exec(b.style.filter||"");return a?q(a[1])/100:1}else return q(b.style.opacity||"1")}function Fb(b,a,f){if(r()&&t<9){var h=b.style.filter||"",i=new RegExp(/[\s]*alpha\([^\)]*\)/g),e=c.round(100*a),d="";if(e<100||f)d="alpha(opacity="+e+") ";var g=C(h,[i],d);U(b,g)}else b.style.opacity=a==1?"":c.round(a*100)/100}var O={$Rotate:["rotate"],$RotateX:["rotateX"],$RotateY:["rotateY"],$SkewX:["skewX"],$SkewY:["skewY"]};if(!H())O=E(O,{$ScaleX:["scaleX",2],$ScaleY:["scaleY",2],$TranslateZ:["translateZ",1]});function P(d,a){var c="";if(a){if(r()&&i&&i<10){delete a.$RotateX;delete a.$RotateY;delete a.$TranslateZ}b.$Each(a,function(d,b){var a=O[b];if(a){var e=a[1]||0;if(Q[b]!=d)c+=" "+a[0]+"("+d+(["deg","px",""])[e]+")"}});if(H()){if(a.$TranslateX||a.$TranslateY||a.$TranslateZ)c+=" translate3d("+(a.$TranslateX||0)+"px,"+(a.$TranslateY||0)+"px,"+(a.$TranslateZ||0)+"px)";if(a.$ScaleX==g)a.$ScaleX=1;if(a.$ScaleY==g)a.$ScaleY=1;if(a.$ScaleX!=1||a.$ScaleY!=1)c+=" scale3d("+a.$ScaleX+", "+a.$ScaleY+", 1)"}}d.style[N(d)]=c}h.$CssTransformOrigin=m("transformOrigin",4);h.$CssBackfaceVisibility=m("backfaceVisibility",4);h.$CssTransformStyle=m("transformStyle",4);h.$CssPerspective=m("perspective",6);h.$CssPerspectiveOrigin=m("perspectiveOrigin",4);h.$CssScale=function(a,b){if(r()&&t<9||t<10&&T())a.style.zoom=b==1?"":b;else{var c=N(a),f="scale("+b+")",e=a.style[c],g=new RegExp(/[\s]*scale\(.*?\)/g),d=C(e,[g],f);a.style[c]=d}};var pb=0,kb=0;h.$WindowResizeFilter=function(b,a){return R()?function(){var g=d,c=T()?b.document.body:b.document.documentElement;if(c){var f=c.offsetWidth-pb,e=c.offsetHeight-kb;if(f||e){pb+=f;kb+=e}else g=l}g&&a()}:a};h.$MouseOverOutFilter=function(b,a){return function(c){c=u(c);var e=c.type,d=c.relatedTarget||(e=="mouseout"?c.toElement:c.fromElement);(!d||d!==a&&!h.$IsChild(a,d))&&b(c)}};h.$AddEvent=function(a,c,d,b){a=h.$GetElement(a);if(a.addEventListener){c=="mousewheel"&&a.addEventListener("DOMMouseScroll",d,b);a.addEventListener(c,d,b)}else if(a.attachEvent){a.attachEvent("on"+c,d);b&&a.setCapture&&a.setCapture()}};h.$RemoveEvent=function(a,c,d,b){a=h.$GetElement(a);if(a.removeEventListener){c=="mousewheel"&&a.removeEventListener("DOMMouseScroll",d,b);a.removeEventListener(c,d,b)}else if(a.detachEvent){a.detachEvent("on"+c,d);b&&a.releaseCapture&&a.releaseCapture()}};h.$FireEvent=function(c,b){var a;if(f.createEvent){a=f.createEvent("HTMLEvents");a.initEvent(b,l,l);c.dispatchEvent(a)}else{var d="on"+b;a=f.createEventObject();c.fireEvent(d,a)}};h.$CancelEvent=function(a){a=u(a);a.preventDefault&&a.preventDefault();a.cancel=d;a.returnValue=l};h.$StopEvent=function(a){a=u(a);a.stopPropagation&&a.stopPropagation();a.cancelBubble=d};h.$CreateCallback=function(d,c){var a=[].slice.call(arguments,2),b=function(){var b=a.concat([].slice.call(arguments,0));return c.apply(d,b)};return b};h.$InnerText=function(a,b){if(b==g)return a.textContent||a.innerText;var c=f.createTextNode(b);h.$Empty(a);a.appendChild(c)};h.$InnerHtml=function(a,b){if(b==g)return a.innerHTML;a.innerHTML=b};h.$GetClientRect=function(b){var a=b.getBoundingClientRect();return{x:a.left,y:a.top,w:a.right-a.left,h:a.bottom-a.top}};h.$ClearInnerHtml=function(a){a.innerHTML=""};h.$EncodeHtml=function(b){var a=h.$CreateDiv();h.$InnerText(a,b);return h.$InnerHtml(a)};h.$DecodeHtml=function(b){var a=h.$CreateDiv();h.$InnerHtml(a,b);return h.$InnerText(a)};h.$SelectElement=function(c){var b;if(k.getSelection)b=k.getSelection();var a=j;if(f.createRange){a=f.createRange();a.selectNode(c)}else{a=f.body.createTextRange();a.moveToElementText(c);a.select()}b&&b.addRange(a)};h.$DeselectElements=function(){if(f.selection)f.selection.empty();else k.getSelection&&k.getSelection().removeAllRanges()};h.$Children=function(d,c){for(var b=[],a=d.firstChild;a;a=a.nextSibling)(c||a.nodeType==1)&&b.push(a);return b};function tb(a,c,e,b){b=b||"u";for(a=a?a.firstChild:j;a;a=a.nextSibling)if(a.nodeType==1){if(Y(a,b)==c)return a;if(!e){var d=tb(a,c,e,b);if(d)return d}}}h.$FindChild=tb;function W(a,d,f,b){b=b||"u";var c=[];for(a=a?a.firstChild:j;a;a=a.nextSibling)if(a.nodeType==1){Y(a,b)==d&&c.push(a);if(!f){var e=W(a,d,f,b);if(e.length)c=c.concat(e)}}return c}function ob(a,c,d){for(a=a?a.firstChild:j;a;a=a.nextSibling)if(a.nodeType==1){if(a.tagName==c)return a;if(!d){var b=ob(a,c,d);if(b)return b}}}h.$FindChildByTag=ob;function ib(a,c,e){var b=[];for(a=a?a.firstChild:j;a;a=a.nextSibling)if(a.nodeType==1){(!c||a.tagName==c)&&b.push(a);if(!e){var d=ib(a,c,e);if(d.length)b=b.concat(d)}}return b}h.$FindChildrenByTag=ib;h.$GetElementsByTag=function(b,a){return b.getElementsByTagName(a)};function E(){var e=arguments,d,c,b,a,h=1&e[0],f=1+h;d=e[f-1]||{};for(;f<e.length;f++)if(c=e[f])for(b in c){a=c[b];if(a!==g){a=c[b];var i=d[b];d[b]=h&&(B(i)||B(a))?E(h,{},i,a):a}}return d}h.$Extend=E;function cb(f,g){var d={},c,a,b;for(c in f){a=f[c];b=g[c];if(a!==b){var e;if(B(a)&&B(b)){a=cb(a,b);e=!sb(a)}!e&&(d[c]=a)}}return d}h.$Unextend=cb;h.$IsFunction=function(a){return F(a)=="function"};h.$IsArray=function(a){return F(a)=="array"};h.$IsString=function(a){return F(a)=="string"};h.$IsNumeric=function(a){return!isNaN(q(a))&&isFinite(a)};h.$Type=F;h.$Each=n;h.$IsNotEmpty=sb;h.$IsPlainObject=B;function V(a){return f.createElement(a)}h.$CreateElement=V;h.$CreateDiv=function(){return V("DIV")};h.$CreateSpan=function(){return V("SPAN")};h.$EmptyFunction=function(){};function Z(b,c,a){if(a==g)return b.getAttribute(c);b.setAttribute(c,a)}function Y(a,b){return Z(a,b)||Z(a,"data-"+b)}h.$Attribute=Z;h.$AttributeEx=Y;function x(b,a){if(a==g)return b.className;b.className=a}h.$ClassName=x;function xb(b){var a={};n(b,function(b){a[b]=b});return a}function Ib(b){var a=[];n(b,function(b){a.push(b)});return a}function zb(b,a){return b.match(a||Ab)}function S(b,a){return xb(zb(b||"",a))}h.$ToHash=xb;h.$FromHash=Ib;h.$Split=zb;function eb(b,c){var a="";n(c,function(c){a&&(a+=b);a+=c});return a}function J(a,c,b){x(a,eb(" ",E(cb(S(x(a)),S(c)),S(b))))}h.$Join=eb;h.$AddClass=function(b,a){J(b,j,a)};h.$RemoveClass=J;h.$ReplaceClass=J;h.$ParentNode=function(a){return a.parentNode};h.$HideElement=function(a){h.$CssDisplay(a,"none")};h.$EnableElement=function(a,b){if(b)h.$Attribute(a,"disabled",d);else h.$RemoveAttribute(a,"disabled")};h.$HideElements=function(b){for(var a=0;a<b.length;a++)h.$HideElement(b[a])};h.$ShowElement=function(a,b){h.$CssDisplay(a,b?"none":"")};h.$ShowElements=function(b,c){for(var a=0;a<b.length;a++)h.$ShowElement(b[a],c)};h.$RemoveAttribute=function(b,a){b.removeAttribute(a)};h.$CanClearClip=function(){return r()&&i<10};h.$SetStyleClip=function(d,a){if(a)d.style.clip="rect("+c.round(a.$Top)+"px "+c.round(a.$Right)+"px "+c.round(a.$Bottom)+"px "+c.round(a.$Left)+"px)";else if(a!==g){var h=d.style.cssText,f=[new RegExp(/[\s]*clip: rect\(.*?\)[;]?/i),new RegExp(/[\s]*cliptop: .*?[;]?/i),new RegExp(/[\s]*clipright: .*?[;]?/i),new RegExp(/[\s]*clipbottom: .*?[;]?/i),new RegExp(/[\s]*clipleft: .*?[;]?/i)],e=C(h,f,"");b.$CssCssText(d,e)}};h.$GetNow=function(){return+new Date};h.$AppendChild=function(b,a){b.appendChild(a)};h.$AppendChildren=function(b,a){n(a,function(a){h.$AppendChild(b,a)})};h.$InsertBefore=function(b,a,c){(c||a.parentNode).insertBefore(b,a)};h.$InsertAfter=function(b,a,c){h.$InsertBefore(b,a.nextSibling,c||a.parentNode)};h.$InsertAdjacentHtml=function(b,a,c){b.insertAdjacentHTML(a,c)};h.$RemoveElement=function(b,a){a=a||b.parentNode;a&&a.removeChild(b)};h.$RemoveElements=function(a,b){n(a,function(a){h.$RemoveElement(a,b)})};h.$Empty=function(a){h.$RemoveElements(h.$Children(a,d),a)};h.$CenterElement=function(a,b){var c=h.$ParentNode(a);b&1&&h.$CssLeft(a,(h.$CssWidth(c)-h.$CssWidth(a))/2);b&2&&h.$CssTop(a,(h.$CssHeight(c)-h.$CssHeight(a))/2)};h.$ParseInt=function(b,a){return parseInt(b,a||10)};h.$ParseFloat=q;h.$IsChild=function(b,a){var c=f.body;while(a&&b!==a&&c!==a)try{a=a.parentNode}catch(d){return l}return b===a};function ab(d,c,b){var a=d.cloneNode(!c);!b&&h.$RemoveAttribute(a,"id");return a}h.$CloneNode=ab;h.$LoadImage=function(e,f){var a=new Image;function b(e,d){h.$RemoveEvent(a,"load",b);h.$RemoveEvent(a,"abort",c);h.$RemoveEvent(a,"error",c);f&&f(a,d)}function c(a){b(a,d)}if(qb()&&i<11.6||!e)b(!e);else{h.$AddEvent(a,"load",b);h.$AddEvent(a,"abort",c);h.$AddEvent(a,"error",c);a.src=e}};h.$LoadImages=function(d,a,e){var c=d.length+1;function b(b){c--;if(a&&b&&b.src==a.src)a=b;!c&&e&&e(a)}n(d,function(a){h.$LoadImage(a.src,b)});b()};h.$BuildElement=function(a,g,i,h){if(h)a=ab(a);var c=W(a,g);if(!c.length)c=b.$GetElementsByTag(a,g);for(var f=c.length-1;f>-1;f--){var d=c[f],e=ab(i);x(e,x(d));b.$CssCssText(e,d.style.cssText);b.$InsertBefore(e,d);b.$RemoveElement(d)}return a};function Hb(a){var l=this,p="",r=["av","pv","ds","dn"],e=[],q,k=0,i=0,d=0;function j(){J(a,q,e[d||k||i&2||i]);b.$Css(a,"pointer-events",d?"none":"")}function c(){k=0;j();h.$RemoveEvent(f,"mouseup",c);h.$RemoveEvent(f,"touchend",c);h.$RemoveEvent(f,"touchcancel",c)}function o(a){if(d)h.$CancelEvent(a);else{k=4;j();h.$AddEvent(f,"mouseup",c);h.$AddEvent(f,"touchend",c);h.$AddEvent(f,"touchcancel",c)}}l.$Selected=function(a){if(a===g)return i;i=a&2||a&1;j()};l.$Enable=function(a){if(a===g)return!d;d=a?0:3;j()};l.$Elmt=a=h.$GetElement(a);var m=b.$Split(x(a));if(m)p=m.shift();n(r,function(a){e.push(p+a)});q=eb(" ",e);e.unshift("");h.$AddEvent(a,"mousedown",o);h.$AddEvent(a,"touchstart",o)}h.$Buttonize=function(a){return new Hb(a)};h.$Css=G;h.$CssN=db;h.$CssP=Kb;h.$CssOverflow=m("overflow");h.$CssTop=m("top",2);h.$CssLeft=m("left",2);h.$CssWidth=m("width",2);h.$CssHeight=m("height",2);h.$CssMarginLeft=m("marginLeft",2);h.$CssMarginTop=m("marginTop",2);h.$CssPosition=m("position");h.$CssDisplay=m("display");h.$CssZIndex=m("zIndex",1);h.$CssFloat=function(b,a){return G(b,r()?"styleFloat":"cssFloat",a)};h.$CssOpacity=function(b,a,c){if(a!=g)Fb(b,a,c);else return Db(b)};h.$CssCssText=function(a,b){if(b!=g)a.style.cssText=b;else return a.style.cssText};var X={$Opacity:h.$CssOpacity,$Top:h.$CssTop,$Left:h.$CssLeft,$Width:h.$CssWidth,$Height:h.$CssHeight,$Position:h.$CssPosition,$Display:h.$CssDisplay,$ZIndex:h.$CssZIndex};h.$GetStyles=function(c,b){var a={};n(b,function(d,b){if(X[b])a[b]=X[b](c)});return a};function w(f,l){var e=R(),b=H(),d=gb(),i=N(f);function k(b,d,a){var e=b.$TransformPoint(p(-d/2,-a/2)),f=b.$TransformPoint(p(d/2,-a/2)),g=b.$TransformPoint(p(d/2,a/2)),h=b.$TransformPoint(p(-d/2,a/2));b.$TransformPoint(p(300,300));return p(c.min(e.x,f.x,g.x,h.x)+d/2,c.min(e.y,f.y,g.y,h.y)+a/2)}function a(d,a){a=a||{};var f=a.$TranslateZ||0,l=(a.$RotateX||0)%360,m=(a.$RotateY||0)%360,o=(a.$Rotate||0)%360,p=a.$ScaleZ;if(e){f=0;l=0;m=0;p=0}var c=new Cb(a.$TranslateX,a.$TranslateY,f);c.$RotateX(l);c.$RotateY(m);c.$RotateZ(o);c.$Skew(a.$SkewX,a.$SkewY);c.$Scale(a.$ScaleX,a.$ScaleY,p);if(b){c.$Move(a.$MoveX,a.$MoveY);d.style[i]=c.$Format3d()}else if(!z||z<9){var j="";if(o||a.$ScaleX!=g&&a.$ScaleX!=1||a.$ScaleY!=g&&a.$ScaleY!=1){var n=k(c,a.$OriginalWidth,a.$OriginalHeight);h.$CssMarginTop(d,n.y);h.$CssMarginLeft(d,n.x);j=c.$Format2d()}var r=d.style.filter,s=new RegExp(/[\s]*progid:DXImageTransform\.Microsoft\.Matrix\([^\)]*\)/g),q=C(r,[s],j);U(d,q)}}w=function(e,c){c=c||{};var i=c.$MoveX,k=c.$MoveY,f;n(X,function(a,b){f=c[b];f!==g&&a(e,f)});h.$SetStyleClip(e,c.$Clip);if(!b){i!=g&&h.$CssLeft(e,c.$OriginalX+i);k!=g&&h.$CssTop(e,c.$OriginalY+k)}if(c.$Transform)if(d)yb(h.$CreateCallback(j,P,e,c));else a(e,c)};h.$SetStyleTransform=P;if(d)h.$SetStyleTransform=w;if(e)h.$SetStyleTransform=a;else if(!b)a=P;h.$SetStyles=w;w(f,l)}h.$SetStyleTransform=w;h.$SetStyles=w;function Cb(k,l,p){var d=this,b=[1,0,0,0,0,1,0,0,0,0,1,0,k||0,l||0,p||0,1],i=c.sin,h=c.cos,m=c.tan;function f(a){return a*c.PI/180}function o(a,b){return{x:a,y:b}}function n(b,c,f,g,i,l,n,o,q,t,u,w,y,A,C,F,a,d,e,h,j,k,m,p,r,s,v,x,z,B,D,E){return[b*a+c*j+f*r+g*z,b*d+c*k+f*s+g*B,b*e+c*m+f*v+g*D,b*h+c*p+f*x+g*E,i*a+l*j+n*r+o*z,i*d+l*k+n*s+o*B,i*e+l*m+n*v+o*D,i*h+l*p+n*x+o*E,q*a+t*j+u*r+w*z,q*d+t*k+u*s+w*B,q*e+t*m+u*v+w*D,q*h+t*p+u*x+w*E,y*a+A*j+C*r+F*z,y*d+A*k+C*s+F*B,y*e+A*m+C*v+F*D,y*h+A*p+C*x+F*E]}function e(c,a){return n.apply(j,(a||b).concat(c))}d.$Matrix=function(){return b};d.$Scale=function(a,c,d){if(a==g)a=1;if(c==g)c=1;if(d==g)d=1;if(a!=1||c!=1||d!=1)b=e([a,0,0,0,0,c,0,0,0,0,d,0,0,0,0,1])};d.$Translate=function(a,c,d){if(a||c||d)b=e([1,0,0,0,0,1,0,0,0,0,1,0,a||0,c||0,d||0,1])};d.$Move=function(a,c,d){b[12]+=a||0;b[13]+=c||0;b[14]+=d||0};d.$RotateX=function(c){if(c){a=f(c);var d=h(a),g=i(a);b=e([1,0,0,0,0,d,g,0,0,-g,d,0,0,0,0,1])}};d.$RotateY=function(c){if(c){a=f(c);var d=h(a),g=i(a);b=e([d,0,-g,0,0,1,0,0,g,0,d,0,0,0,0,1])}};d.$RotateZ=function(c){if(c){a=f(c);var d=h(a),g=i(a);b=e([d,g,0,0,-g,d,0,0,0,0,1,0,0,0,0,1])}};d.$Skew=function(a,c){if(a||c){k=f(a);l=f(c);b=e([1,m(l),0,0,m(k),1,0,0,0,0,1,0,0,0,0,1])}};d.$TransformPoint=function(c){var a=e(b,[1,0,0,0,0,1,0,0,0,0,1,0,c.x,c.y,0,1]);return o(a[12],a[13])};d.$Format3d=function(){return"matrix3d("+b.join(",")+")"};d.$Format2d=function(){return"progid:DXImageTransform.Microsoft.Matrix(M11="+b[0]+", M12="+b[4]+", M21="+b[1]+", M22="+b[5]+", SizingMethod='auto expand')"}}new(function(){var a=this;function b(d,g){for(var j=d[0].length,i=d.length,h=g[0].length,f=[],c=0;c<i;c++)for(var k=f[c]=[],b=0;b<h;b++){for(var e=0,a=0;a<j;a++)e+=d[c][a]*g[a][b];k[b]=e}return f}a.$ScaleX=function(b,c){return a.$ScaleXY(b,c,0)};a.$ScaleY=function(b,c){return a.$ScaleXY(b,0,c)};a.$ScaleXY=function(a,c,d){return b(a,[[c,0],[0,d]])};a.$TransformPoint=function(d,c){var a=b(d,[[c.x],[c.y]]);return p(a[0][0],a[1][0])}});var Q={$OriginalX:0,$OriginalY:0,$MoveX:0,$MoveY:0,$Zoom:1,$ScaleX:1,$ScaleY:1,$Rotate:0,$RotateX:0,$RotateY:0,$TranslateX:0,$TranslateY:0,$TranslateZ:0,$SkewX:0,$SkewY:0};h.$FormatEasings=function(a){var c=a||{};if(a)if(b.$IsFunction(a))c={$Default:c};else if(b.$IsFunction(a.$Clip))c.$Clip={$Default:a.$Clip};return c};function wb(c,a){var b={};n(c,function(c,d){var e=c;if(a[d]!=g)if(h.$IsNumeric(c))e=c+a[d];else e=wb(c,a[d]);b[d]=e});return b}h.$AddDif=wb;h.$Cast=function(l,m,w,n,y,z,o){var a=m;if(l){a={};for(var h in m){var A=z[h]||1,v=y[h]||[0,1],f=(w-v[0])/v[1];f=c.min(c.max(f,0),1);f=f*A;var u=c.floor(f);if(f!=u)f-=u;var i=n.$Default||e.$EaseSwing,k,B=l[h],q=m[h];if(b.$IsNumeric(q)){i=n[h]||i;var x=i(f);k=B+q*x}else{k=b.$Extend({$Offset:{}},l[h]);b.$Each(q.$Offset||q,function(d,a){if(n.$Clip)i=n.$Clip[a]||n.$Clip.$Default||i;var c=i(f),b=d*c;k.$Offset[a]=b;k[a]+=b})}a[h]=k}var t=b.$Each(m,function(b,a){return Q[a]!=g});t&&b.$Each(Q,function(c,b){if(a[b]==g&&l[b]!==g)a[b]=l[b]});if(t){if(a.$Zoom)a.$ScaleX=a.$ScaleY=a.$Zoom;a.$OriginalWidth=o.$OriginalWidth;a.$OriginalHeight=o.$OriginalHeight;a.$Transform=d}}if(m.$Clip&&o.$Move){var p=a.$Clip.$Offset,s=(p.$Top||0)+(p.$Bottom||0),r=(p.$Left||0)+(p.$Right||0);a.$Left=(a.$Left||0)+r;a.$Top=(a.$Top||0)+s;a.$Clip.$Left-=r;a.$Clip.$Right-=r;a.$Clip.$Top-=s;a.$Clip.$Bottom-=s}if(a.$Clip&&b.$CanClearClip()&&!a.$Clip.$Top&&!a.$Clip.$Left&&a.$Clip.$Right==o.$OriginalWidth&&a.$Clip.$Bottom==o.$OriginalHeight)a.$Clip=j;return a}};function n(){var a=this,d=[],c=[];function h(a,b){d.push({$EventName:a,$Handler:b})}function g(a,c){b.$Each(d,function(b,e){b.$EventName==a&&b.$Handler===c&&d.splice(e,1)})}function f(){d=[]}function e(){b.$Each(c,function(a){b.$RemoveEvent(a.$Obj,a.$EventName,a.$Handler)});c=[]}a.$Listen=function(e,a,d,f){b.$AddEvent(e,a,d,f);c.push({$Obj:e,$EventName:a,$Handler:d})};a.$Unlisten=function(e,a,d){b.$Each(c,function(f,g){if(f.$Obj===e&&f.$EventName==a&&f.$Handler===d){b.$RemoveEvent(e,a,d);c.splice(g,1)}})};a.$UnlistenAll=e;a.$On=a.addEventListener=h;a.$Off=a.removeEventListener=g;a.$TriggerEvent=function(a){var c=[].slice.call(arguments,1);b.$Each(d,function(b){b.$EventName==a&&b.$Handler.apply(k,c)})};a.$Destroy=function(){e();f();for(var b in a)delete a[b]}}var m=k.$JssorAnimator$=function(z,C,h,L,O,J){z=z||0;var a=this,q,N,n,o,v,A=0,H,I,G,B,y=0,g=0,m=0,D,i,s,f,e,p,w=[],x;function P(a){f+=a;e+=a;i+=a;s+=a;g+=a;m+=a;y+=a}function u(o){var j=o;if(p&&(j>=e||j<=f))j=((j-f)%p+p)%p+f;if(!D||v||g!=j){var k=c.min(j,e);k=c.max(k,f);if(!D||v||k!=m){if(J){var l=(k-i)/(C||1);if(h.$Reverse)l=1-l;var n=b.$Cast(O,J,l,H,G,I,h);if(x)b.$Each(n,function(b,a){x[a]&&x[a](L,b)});else b.$SetStyles(L,n)}a.$OnInnerOffsetChange(m-i,k-i);m=k;b.$Each(w,function(b,c){var a=o<g?w[w.length-c-1]:b;a.$GoToPosition(m-y)});var r=g,q=m;g=j;D=d;a.$OnPositionChange(r,q)}}}function E(a,b,d){b&&a.$Shift(e);if(!d){f=c.min(f,a.$GetPosition_OuterBegin()+y);e=c.max(e,a.$GetPosition_OuterEnd()+y)}w.push(a)}var r=k.requestAnimationFrame||k.webkitRequestAnimationFrame||k.mozRequestAnimationFrame||k.msRequestAnimationFrame;if(b.$IsBrowserSafari()&&b.$BrowserVersion()<7)r=j;r=r||function(a){b.$Delay(a,h.$Interval)};function K(){if(q){var d=b.$GetNow(),e=c.min(d-A,h.$IntervalMax),a=g+e*o;A=d;if(a*o>=n*o)a=n;u(a);if(!v&&a*o>=n*o)M(B);else r(K)}}function t(h,i,j){if(!q){q=d;v=j;B=i;h=c.max(h,f);h=c.min(h,e);n=h;o=n<g?-1:1;a.$OnStart();A=b.$GetNow();r(K)}}function M(b){if(q){v=q=B=l;a.$OnStop();b&&b()}}a.$Play=function(a,b,c){t(a?g+a:e,b,c)};a.$PlayToPosition=t;a.$PlayToBegin=function(a,b){t(f,a,b)};a.$PlayToEnd=function(a,b){t(e,a,b)};a.$Stop=M;a.$Continue=function(a){t(a)};a.$GetPosition=function(){return g};a.$GetPlayToPosition=function(){return n};a.$GetPosition_Display=function(){return m};a.$GoToPosition=u;a.$GoToBegin=function(){u(f,d)};a.$GoToEnd=function(){u(e,d)};a.$Move=function(a){u(g+a)};a.$CombineMode=function(){return N};a.$GetDuration=function(){return C};a.$IsPlaying=function(){return q};a.$IsOnTheWay=function(){return g>i&&g<=s};a.$SetLoopLength=function(a){p=a};a.$Shift=P;a.$Join=E;a.$Combine=function(a,b){E(a,0,b)};a.$Chain=function(a){E(a,1)};a.$Expand=function(a){e+=a};a.$GetPosition_InnerBegin=function(){return i};a.$GetPosition_InnerEnd=function(){return s};a.$GetPosition_OuterBegin=function(){return f};a.$GetPosition_OuterEnd=function(){return e};a.$OnPositionChange=a.$OnStart=a.$OnStop=a.$OnInnerOffsetChange=b.$EmptyFunction;a.$Version=b.$GetNow();h=b.$Extend({$Interval:16,$IntervalMax:50},h);p=h.$LoopLength;x=h.$Setter;f=i=z;e=s=z+C;I=h.$Round||{};G=h.$During||{};H=b.$FormatEasings(h.$Easing)};var p=k.$JssorSlideshowFormations$=new function(){var h=this,b=0,a=1,f=2,e=3,s=1,r=2,t=4,q=8,w=256,x=512,v=1024,u=2048,j=u+s,i=u+r,o=x+s,m=x+r,n=w+t,k=w+q,l=v+t,p=v+q;function y(a){return(a&r)==r}function z(a){return(a&t)==t}function g(b,a,c){c.push(a);b[a]=b[a]||[];b[a].push(c)}h.$FormationStraight=function(f){for(var d=f.$Cols,e=f.$Rows,s=f.$Assembly,t=f.$Count,r=[],a=0,b=0,p=d-1,q=e-1,h=t-1,c,b=0;b<e;b++)for(a=0;a<d;a++){switch(s){case j:c=h-(a*e+(q-b));break;case l:c=h-(b*d+(p-a));break;case o:c=h-(a*e+b);case n:c=h-(b*d+a);break;case i:c=a*e+b;break;case k:c=b*d+(p-a);break;case m:c=a*e+(q-b);break;default:c=b*d+a}g(r,c,[b,a])}return r};h.$FormationSwirl=function(q){var x=q.$Cols,y=q.$Rows,B=q.$Assembly,w=q.$Count,A=[],z=[],u=0,c=0,h=0,r=x-1,s=y-1,t,p,v=0;switch(B){case j:c=r;h=0;p=[f,a,e,b];break;case l:c=0;h=s;p=[b,e,a,f];break;case o:c=r;h=s;p=[e,a,f,b];break;case n:c=r;h=s;p=[a,e,b,f];break;case i:c=0;h=0;p=[f,b,e,a];break;case k:c=r;h=0;p=[a,f,b,e];break;case m:c=0;h=s;p=[e,b,f,a];break;default:c=0;h=0;p=[b,f,a,e]}u=0;while(u<w){t=h+","+c;if(c>=0&&c<x&&h>=0&&h<y&&!z[t]){z[t]=d;g(A,u++,[h,c])}else switch(p[v++%p.length]){case b:c--;break;case f:h--;break;case a:c++;break;case e:h++}switch(p[v%p.length]){case b:c++;break;case f:h++;break;case a:c--;break;case e:h--}}return A};h.$FormationZigZag=function(p){var w=p.$Cols,x=p.$Rows,z=p.$Assembly,v=p.$Count,t=[],u=0,c=0,d=0,q=w-1,r=x-1,y,h,s=0;switch(z){case j:c=q;d=0;h=[f,a,e,a];break;case l:c=0;d=r;h=[b,e,a,e];break;case o:c=q;d=r;h=[e,a,f,a];break;case n:c=q;d=r;h=[a,e,b,e];break;case i:c=0;d=0;h=[f,b,e,b];break;case k:c=q;d=0;h=[a,f,b,f];break;case m:c=0;d=r;h=[e,b,f,b];break;default:c=0;d=0;h=[b,f,a,f]}u=0;while(u<v){y=d+","+c;if(c>=0&&c<w&&d>=0&&d<x&&typeof t[y]=="undefined"){g(t,u++,[d,c]);switch(h[s%h.length]){case b:c++;break;case f:d++;break;case a:c--;break;case e:d--}}else{switch(h[s++%h.length]){case b:c--;break;case f:d--;break;case a:c++;break;case e:d++}switch(h[s++%h.length]){case b:c++;break;case f:d++;break;case a:c--;break;case e:d--}}}return t};h.$FormationStraightStairs=function(q){var u=q.$Cols,v=q.$Rows,e=q.$Assembly,t=q.$Count,r=[],s=0,c=0,d=0,f=u-1,h=v-1,x=t-1;switch(e){case j:case m:case o:case i:var a=0,b=0;break;case k:case l:case n:case p:var a=f,b=0;break;default:e=p;var a=f,b=0}c=a;d=b;while(s<t){if(z(e)||y(e))g(r,x-s++,[d,c]);else g(r,s++,[d,c]);switch(e){case j:case m:c--;d++;break;case o:case i:c++;d--;break;case k:case l:c--;d--;break;case p:case n:default:c++;d++}if(c<0||d<0||c>f||d>h){switch(e){case j:case m:a++;break;case k:case l:case o:case i:b++;break;case p:case n:default:a--}if(a<0||b<0||a>f||b>h){switch(e){case j:case m:a=f;b++;break;case o:case i:b=h;a++;break;case k:case l:b=h;a--;break;case p:case n:default:a=0;b++}if(b>h)b=h;else if(b<0)b=0;else if(a>f)a=f;else if(a<0)a=0}d=b;c=a}}return r};h.$FormationSquare=function(i){var a=i.$Cols||1,b=i.$Rows||1,j=[],d,e,f,h,k;f=a<b?(b-a)/2:0;h=a>b?(a-b)/2:0;k=c.round(c.max(a/2,b/2))+1;for(d=0;d<a;d++)for(e=0;e<b;e++)g(j,k-c.min(d+1+f,e+1+h,a-d+f,b-e+h),[e,d]);return j};h.$FormationRectangle=function(f){var d=f.$Cols||1,e=f.$Rows||1,h=[],a,b,i;i=c.round(c.min(d/2,e/2))+1;for(a=0;a<d;a++)for(b=0;b<e;b++)g(h,i-c.min(a+1,b+1,d-a,e-b),[b,a]);return h};h.$FormationRandom=function(d){for(var e=[],a,b=0;b<d.$Rows;b++)for(a=0;a<d.$Cols;a++)g(e,c.ceil(1e5*c.random())%13,[b,a]);return e};h.$FormationCircle=function(d){for(var e=d.$Cols||1,f=d.$Rows||1,h=[],a,i=e/2-.5,j=f/2-.5,b=0;b<e;b++)for(a=0;a<f;a++)g(h,c.round(c.sqrt(c.pow(b-i,2)+c.pow(a-j,2))),[a,b]);return h};h.$FormationCross=function(d){for(var e=d.$Cols||1,f=d.$Rows||1,h=[],a,i=e/2-.5,j=f/2-.5,b=0;b<e;b++)for(a=0;a<f;a++)g(h,c.round(c.min(c.abs(b-i),c.abs(a-j))),[a,b]);return h};h.$FormationRectangleCross=function(f){for(var h=f.$Cols||1,i=f.$Rows||1,j=[],a,d=h/2-.5,e=i/2-.5,k=c.max(d,e)+1,b=0;b<h;b++)for(a=0;a<i;a++)g(j,c.round(k-c.max(d-c.abs(b-d),e-c.abs(a-e)))-1,[a,b]);return j}};k.$JssorSlideshowRunner$=function(k,s,q,t,y){var f=this,u,g,a,x=0,w=t.$TransitionsOrder,r,h=8;function i(g,f){var a={$Interval:f,$Duration:1,$Delay:0,$Cols:1,$Rows:1,$Opacity:0,$Zoom:0,$Clip:0,$Move:l,$SlideOut:l,$Reverse:l,$Formation:p.$FormationRandom,$Assembly:1032,$ChessMode:{$Column:0,$Row:0},$Easing:e.$EaseSwing,$Round:{},$Blocks:[],$During:{}};b.$Extend(a,g);a.$Count=a.$Cols*a.$Rows;a.$Easing=b.$FormatEasings(a.$Easing);a.$FramesCount=c.ceil(a.$Duration/a.$Interval);a.$GetBlocks=function(c,b){c/=a.$Cols;b/=a.$Rows;var f=c+"x"+b;if(!a.$Blocks[f]){a.$Blocks[f]={$Width:c,$Height:b};for(var d=0;d<a.$Cols;d++)for(var e=0;e<a.$Rows;e++)a.$Blocks[f][e+","+d]={$Top:e*b,$Right:d*c+c,$Bottom:e*b+b,$Left:d*c}}return a.$Blocks[f]};if(a.$Brother){a.$Brother=i(a.$Brother,f);a.$SlideOut=d}return a}function o(B,h,a,w,o,m){var z=this,u,v={},i={},n=[],f,e,s,q=a.$ChessMode.$Column||0,r=a.$ChessMode.$Row||0,g=a.$GetBlocks(o,m),p=C(a),D=p.length-1,t=a.$Duration+a.$Delay*D,x=w+t,k=a.$SlideOut,y;x+=50;function C(a){var b=a.$Formation(a);return a.$Reverse?b.reverse():b}z.$EndTime=x;z.$ShowFrame=function(d){d-=w;var e=d<t;if(e||y){y=e;if(!k)d=t-d;var f=c.ceil(d/a.$Interval);b.$Each(i,function(a,e){var d=c.max(f,a.$Min);d=c.min(d,a.length-1);if(a.$LastFrameIndex!=d){if(!a.$LastFrameIndex&&!k)b.$ShowElement(n[e]);else d==a.$Max&&k&&b.$HideElement(n[e]);a.$LastFrameIndex=d;b.$SetStyles(n[e],a[d])}})}};h=b.$CloneNode(h);b.$SetStyleTransform(h,j);if(b.$IsBrowserIe9Earlier()){var E=!h["no-image"],A=b.$FindChildrenByTag(h);b.$Each(A,function(a){(E||a["jssor-slider"])&&b.$CssOpacity(a,b.$CssOpacity(a),d)})}b.$Each(p,function(h,j){b.$Each(h,function(G){var K=G[0],J=G[1],t=K+","+J,n=l,p=l,x=l;if(q&&J%2){if(q&3)n=!n;if(q&12)p=!p;if(q&16)x=!x}if(r&&K%2){if(r&3)n=!n;if(r&12)p=!p;if(r&16)x=!x}a.$Top=a.$Top||a.$Clip&4;a.$Bottom=a.$Bottom||a.$Clip&8;a.$Left=a.$Left||a.$Clip&1;a.$Right=a.$Right||a.$Clip&2;var C=p?a.$Bottom:a.$Top,z=p?a.$Top:a.$Bottom,B=n?a.$Right:a.$Left,A=n?a.$Left:a.$Right;a.$Clip=C||z||B||A;s={};e={$Top:0,$Left:0,$Opacity:1,$Width:o,$Height:m};f=b.$Extend({},e);u=b.$Extend({},g[t]);if(a.$Opacity)e.$Opacity=2-a.$Opacity;if(a.$ZIndex){e.$ZIndex=a.$ZIndex;f.$ZIndex=0}var I=a.$Cols*a.$Rows>1||a.$Clip;if(a.$Zoom||a.$Rotate){var H=d;if(b.$IsBrowserIe9Earlier())if(a.$Cols*a.$Rows>1)H=l;else I=l;if(H){e.$Zoom=a.$Zoom?a.$Zoom-1:1;f.$Zoom=1;if(b.$IsBrowserIe9Earlier()||b.$IsBrowserOpera())e.$Zoom=c.min(e.$Zoom,2);var N=a.$Rotate||0;e.$Rotate=N*360*(x?-1:1);f.$Rotate=0}}if(I){var h=u.$Offset={};if(a.$Clip){var w=a.$ScaleClip||1;if(C&&z){h.$Top=g.$Height/2*w;h.$Bottom=-h.$Top}else if(C)h.$Bottom=-g.$Height*w;else if(z)h.$Top=g.$Height*w;if(B&&A){h.$Left=g.$Width/2*w;h.$Right=-h.$Left}else if(B)h.$Right=-g.$Width*w;else if(A)h.$Left=g.$Width*w}s.$Clip=u;f.$Clip=g[t]}var L=n?1:-1,M=p?1:-1;if(a.x)e.$Left+=o*a.x*L;if(a.y)e.$Top+=m*a.y*M;b.$Each(e,function(a,c){if(b.$IsNumeric(a))if(a!=f[c])s[c]=a-f[c]});v[t]=k?f:e;var D=a.$FramesCount,y=c.round(j*a.$Delay/a.$Interval);i[t]=new Array(y);i[t].$Min=y;i[t].$Max=y+D-1;for(var F=0;F<=D;F++){var E=b.$Cast(f,s,F/D,a.$Easing,a.$During,a.$Round,{$Move:a.$Move,$OriginalWidth:o,$OriginalHeight:m});E.$ZIndex=E.$ZIndex||1;i[t].push(E)}})});p.reverse();b.$Each(p,function(a){b.$Each(a,function(c){var f=c[0],e=c[1],d=f+","+e,a=h;if(e||f)a=b.$CloneNode(h);b.$SetStyles(a,v[d]);b.$CssOverflow(a,"hidden");b.$CssPosition(a,"absolute");B.$AddClipElement(a);n[d]=a;b.$ShowElement(a,!k)})})}function v(){var b=this,c=0;m.call(b,0,u);b.$OnPositionChange=function(d,b){if(b-c>h){c=b;a&&a.$ShowFrame(b);g&&g.$ShowFrame(b)}};b.$Transition=r}f.$GetTransition=function(){var a=0,b=t.$Transitions,d=b.length;if(w)a=x++%d;else a=c.floor(c.random()*d);b[a]&&(b[a].$Index=a);return b[a]};f.$Initialize=function(w,x,l,m,b){r=b;b=i(b,h);var j=m.$Item,e=l.$Item;j["no-image"]=!m.$Image;e["no-image"]=!l.$Image;var n=j,p=e,v=b,d=b.$Brother||i({},h);if(!b.$SlideOut){n=e;p=j}var t=d.$Shift||0;g=new o(k,p,d,c.max(t-d.$Interval,0),s,q);a=new o(k,n,v,c.max(d.$Interval-t,0),s,q);g.$ShowFrame(0);a.$ShowFrame(0);u=c.max(g.$EndTime,a.$EndTime);f.$Index=w};f.$Clear=function(){k.$Clear();g=j;a=j};f.$GetProcessor=function(){var b=j;if(a)b=new v;return b};if(b.$IsBrowserIe9Earlier()||b.$IsBrowserOpera()||y&&b.$WebKitVersion()<537)h=16;n.call(f);m.call(f,-1e7,1e7)};var i=k.$JssorSlider$=function(p,hc){var h=this;function Fc(){var a=this;m.call(a,-1e8,2e8);a.$GetCurrentSlideInfo=function(){var b=a.$GetPosition_Display(),d=c.floor(b),f=t(d),e=b-c.floor(b);return{$Index:f,$VirtualIndex:d,$Position:e}};a.$OnPositionChange=function(b,a){var e=c.floor(a);if(e!=a&&a>b)e++;Wb(e,d);h.$TriggerEvent(i.$EVT_POSITION_CHANGE,t(a),t(b),a,b)}}function Ec(){var a=this;m.call(a,0,0,{$LoopLength:r});b.$Each(C,function(b){D&1&&b.$SetLoopLength(r);a.$Chain(b);b.$Shift(fb/dc)})}function Dc(){var a=this,b=Vb.$Elmt;m.call(a,-1,2,{$Easing:e.$EaseLinear,$Setter:{$Position:bc},$LoopLength:r},b,{$Position:1},{$Position:-2});a.$Wrapper=b}function rc(o,n){var b=this,e,f,g,k,c;m.call(b,-1e8,2e8,{$IntervalMax:100});b.$OnStart=function(){O=d;R=j;h.$TriggerEvent(i.$EVT_SWIPE_START,t(w.$GetPosition()),w.$GetPosition())};b.$OnStop=function(){O=l;k=l;var a=w.$GetCurrentSlideInfo();h.$TriggerEvent(i.$EVT_SWIPE_END,t(w.$GetPosition()),w.$GetPosition());!a.$Position&&Hc(a.$VirtualIndex,s)};b.$OnPositionChange=function(i,h){var b;if(k)b=c;else{b=f;if(g){var d=h/g;b=a.$SlideEasing(d)*(f-e)+e}}w.$GoToPosition(b)};b.$PlayCarousel=function(a,d,c,h){e=a;f=d;g=c;w.$GoToPosition(a);b.$GoToPosition(0);b.$PlayToPosition(c,h)};b.$StandBy=function(a){k=d;c=a;b.$Play(a,j,d)};b.$SetStandByPosition=function(a){c=a};b.$MoveCarouselTo=function(a){w.$GoToPosition(a)};w=new Fc;w.$Combine(o);w.$Combine(n)}function sc(){var c=this,a=Zb();b.$CssZIndex(a,0);b.$Css(a,"pointerEvents","none");c.$Elmt=a;c.$AddClipElement=function(c){b.$AppendChild(a,c);b.$ShowElement(a)};c.$Clear=function(){b.$HideElement(a);b.$Empty(a)}}function Bc(k,f){var e=this,q,H,x,o,y=[],w,B,W,G,Q,F,g,v,p,eb;m.call(e,-u,u+1,{$SlideItemAnimator:d});function E(a){q&&q.$Revert();T(k,a,0);F=d;q=new I.$Class(k,I,b.$ParseFloat(b.$AttributeEx(k,"idle"))||qc);q.$GoToPosition(0)}function Y(){q.$Version<I.$Version&&E()}function N(p,r,n){if(!G){G=d;if(o&&n){var g=n.width,c=n.height,m=g,k=c;if(g&&c&&a.$FillMode){if(a.$FillMode&3&&(!(a.$FillMode&4)||g>K||c>J)){var j=l,q=K/J*c/g;if(a.$FillMode&1)j=q>1;else if(a.$FillMode&2)j=q<1;m=j?g*J/c:K;k=j?J:c*K/g}b.$CssWidth(o,m);b.$CssHeight(o,k);b.$CssTop(o,(J-k)/2);b.$CssLeft(o,(K-m)/2)}b.$CssPosition(o,"absolute");h.$TriggerEvent(i.$EVT_LOAD_END,f)}}b.$HideElement(r);p&&p(e)}function X(b,c,d,g){if(g==R&&s==f&&P)if(!Gc){var a=t(b);A.$Initialize(a,f,c,e,d);c.$HideContentForSlideshow();U.$Shift(a-U.$GetPosition_OuterBegin()-1);U.$GoToPosition(a);z.$PlayCarousel(b,b,0)}}function ab(b){if(b==R&&s==f){if(!g){var a=j;if(A)if(A.$Index==f)a=A.$GetProcessor();else A.$Clear();Y();g=new zc(k,f,a,q);g.$SetPlayer(p)}!g.$IsPlaying()&&g.$Replay()}}function S(d,h,l){if(d==f){if(d!=h)C[h]&&C[h].$ParkOut();else!l&&g&&g.$AdjustIdleOnPark();p&&p.$Enable();var m=R=b.$GetNow();e.$LoadImage(b.$CreateCallback(j,ab,m))}else{var k=c.min(f,d),i=c.max(f,d),o=c.min(i-k,k+r-i),n=u+a.$LazyLoading-1;(!Q||o<=n)&&e.$LoadImage()}}function bb(){if(s==f&&g){g.$Stop();p&&p.$Quit();p&&p.$Disable();g.$OpenSlideshowPanel()}}function db(){s==f&&g&&g.$Stop()}function Z(a){!M&&h.$TriggerEvent(i.$EVT_CLICK,f,a)}function O(){p=v.pInstance;g&&g.$SetPlayer(p)}e.$LoadImage=function(c,a){a=a||x;if(y.length&&!G){b.$ShowElement(a);if(!W){W=d;h.$TriggerEvent(i.$EVT_LOAD_START,f);b.$Each(y,function(a){if(!b.$Attribute(a,"src")){a.src=b.$AttributeEx(a,"src2");b.$CssDisplay(a,a["display-origin"])}})}b.$LoadImages(y,o,b.$CreateCallback(j,N,c,a))}else N(c,a)};e.$GoForNextSlide=function(){var h=f;if(a.$AutoPlaySteps<0)h-=r;var d=h+a.$AutoPlaySteps*xc;if(D&2)d=t(d);if(!(D&1))d=c.max(0,c.min(d,r-u));if(d!=f){if(A){var e=A.$GetTransition(r);if(e){var i=R=b.$GetNow(),g=C[t(d)];return g.$LoadImage(b.$CreateCallback(j,X,d,g,e,i),x)}}nb(d)}};e.$TryActivate=function(){S(f,f,d)};e.$ParkOut=function(){p&&p.$Quit();p&&p.$Disable();e.$UnhideContentForSlideshow();g&&g.$Abort();g=j;E()};e.$StampSlideItemElements=function(a){a=eb+"_"+a};e.$HideContentForSlideshow=function(){b.$HideElement(k)};e.$UnhideContentForSlideshow=function(){b.$ShowElement(k)};e.$EnablePlayer=function(){p&&p.$Enable()};function T(a,c,e){if(b.$Attribute(a,"jssor-slider"))return;if(!F){if(a.tagName=="IMG"){y.push(a);if(!b.$Attribute(a,"src")){Q=d;a["display-origin"]=b.$CssDisplay(a);b.$HideElement(a)}}b.$IsBrowserIe9Earlier()&&b.$CssZIndex(a,(b.$CssZIndex(a)||0)+1)}var f=b.$Children(a);b.$Each(f,function(f){var h=f.tagName,i=b.$AttributeEx(f,"u");if(i=="player"&&!v){v=f;if(v.pInstance)O();else b.$AddEvent(v,"dataavailable",O)}if(i=="caption"){if(c){b.$CssTransformOrigin(f,b.$AttributeEx(f,"to"));b.$CssBackfaceVisibility(f,b.$AttributeEx(f,"bf"));b.$AttributeEx(f,"3d")&&b.$CssTransformStyle(f,"preserve-3d")}else if(!b.$IsBrowserIE()){var g=b.$CloneNode(f,l,d);b.$InsertBefore(g,f,a);b.$RemoveElement(f,a);f=g;c=d}}else if(!F&&!e&&!o){if(h=="A"){if(b.$AttributeEx(f,"u")=="image")o=b.$FindChildByTag(f,"IMG");else o=b.$FindChild(f,"image",d);if(o){w=f;b.$CssDisplay(w,"block");b.$SetStyles(w,V);B=b.$CloneNode(w,d);b.$CssPosition(w,"relative");b.$CssOpacity(B,0);b.$Css(B,"backgroundColor","#000")}}else if(h=="IMG"&&b.$AttributeEx(f,"u")=="image")o=f;if(o){o.border=0;b.$SetStyles(o,V)}}T(f,c,e+1)})}e.$OnInnerOffsetChange=function(c,b){var a=u-b;bc(H,a)};e.$Index=f;n.call(e);b.$CssPerspective(k,b.$AttributeEx(k,"p"));b.$CssPerspectiveOrigin(k,b.$AttributeEx(k,"po"));var L=b.$FindChild(k,"thumb",d);if(L){e.$Thumb=b.$CloneNode(L);b.$HideElement(L)}b.$ShowElement(k);x=b.$CloneNode(cb);b.$CssZIndex(x,1e3);b.$AddEvent(k,"click",Z);E(d);e.$Image=o;e.$Link=B;e.$Item=k;e.$Wrapper=H=k;b.$AppendChild(H,x);h.$On(203,S);h.$On(28,db);h.$On(24,bb)}function zc(y,f,p,q){var a=this,n=0,u=0,g,j,e,c,k,t,r,o=C[f];m.call(a,0,0);function v(){b.$Empty(N);fc&&k&&o.$Link&&b.$AppendChild(N,o.$Link);b.$ShowElement(N,!k&&o.$Image)}function w(){a.$Replay()}function x(b){r=b;a.$Stop();a.$Replay()}a.$Replay=function(){var b=a.$GetPosition_Display();if(!B&&!O&&!r&&s==f){if(!b){if(g&&!k){k=d;a.$OpenSlideshowPanel(d);h.$TriggerEvent(i.$EVT_SLIDESHOW_START,f,n,u,g,c)}v()}var l,p=i.$EVT_STATE_CHANGE;if(b!=c)if(b==e)l=c;else if(b==j)l=e;else if(!b)l=j;else l=a.$GetPlayToPosition();h.$TriggerEvent(p,f,b,n,j,e,c);var m=P&&(!E||F);if(b==c)(e!=c&&!(E&12)||m)&&o.$GoForNextSlide();else(m||b!=e)&&a.$PlayToPosition(l,w)}};a.$AdjustIdleOnPark=function(){e==c&&e==a.$GetPosition_Display()&&a.$GoToPosition(j)};a.$Abort=function(){A&&A.$Index==f&&A.$Clear();var b=a.$GetPosition_Display();b<c&&h.$TriggerEvent(i.$EVT_STATE_CHANGE,f,-b-1,n,j,e,c)};a.$OpenSlideshowPanel=function(a){p&&b.$CssOverflow(hb,a&&p.$Transition.$Outside?"":"hidden")};a.$OnInnerOffsetChange=function(b,a){if(k&&a>=g){k=l;v();o.$UnhideContentForSlideshow();A.$Clear();h.$TriggerEvent(i.$EVT_SLIDESHOW_END,f,n,u,g,c)}h.$TriggerEvent(i.$EVT_PROGRESS_CHANGE,f,a,n,j,e,c)};a.$SetPlayer=function(a){if(a&&!t){t=a;a.$On($JssorPlayer$.$EVT_SWITCH,x)}};p&&a.$Chain(p);g=a.$GetPosition_OuterEnd();a.$Chain(q);j=g+q.$IdleBegin;e=g+q.$IdleEnd;c=a.$GetPosition_OuterEnd()}function Mb(a,c,d){b.$CssLeft(a,c);b.$CssTop(a,d)}function bc(c,b){var a=x>0?x:gb,d=Bb*b*(a&1),e=Cb*b*(a>>1&1);Mb(c,d,e)}function Rb(){pb=O;Kb=z.$GetPlayToPosition();G=w.$GetPosition()}function ic(){Rb();if(B||!F&&E&12){z.$Stop();h.$TriggerEvent(i.$EVT_FREEZE)}}function gc(f){if(!B&&(F||!(E&12))&&!z.$IsPlaying()){var d=w.$GetPosition(),b=c.ceil(G);if(f&&c.abs(H)>=a.$MinDragOffsetToSlide){b=c.ceil(d);b+=eb}if(!(D&1))b=c.min(r-u,c.max(b,0));var e=c.abs(b-d);e=1-c.pow(1-e,5);if(!M&&pb)z.$Continue(Kb);else if(d==b){tb.$EnablePlayer();tb.$TryActivate()}else z.$PlayCarousel(d,b,e*Xb)}}function Ib(a){!b.$AttributeEx(b.$EvtSrc(a),"nodrag")&&b.$CancelEvent(a)}function vc(a){ac(a,1)}function ac(a,c){a=b.$GetEvent(a);var k=b.$EvtSrc(a);if(!L&&!b.$AttributeEx(k,"nodrag")&&wc()&&(!c||a.touches.length==1)){B=d;Ab=l;R=j;b.$AddEvent(f,c?"touchmove":"mousemove",Db);b.$GetNow();M=0;ic();if(!pb)x=0;if(c){var g=a.touches[0];vb=g.clientX;wb=g.clientY}else{var e=b.$MousePosition(a);vb=e.x;wb=e.y}H=0;bb=0;eb=0;h.$TriggerEvent(i.$EVT_DRAG_START,t(G),G,a)}}function Db(e){if(B){e=b.$GetEvent(e);var f;if(e.type!="mousemove"){var l=e.touches[0];f={x:l.clientX,y:l.clientY}}else f=b.$MousePosition(e);if(f){var j=f.x-vb,k=f.y-wb;if(c.floor(G)!=G)x=x||gb&L;if((j||k)&&!x){if(L==3)if(c.abs(k)>c.abs(j))x=2;else x=1;else x=L;if(jb&&x==1&&c.abs(k)-c.abs(j)>3)Ab=d}if(x){var a=k,i=Cb;if(x==1){a=j;i=Bb}if(!(D&1)){if(a>0){var g=i*s,h=a-g;if(h>0)a=g+c.sqrt(h)*5}if(a<0){var g=i*(r-u-s),h=-a-g;if(h>0)a=-g-c.sqrt(h)*5}}if(H-bb<-2)eb=0;else if(H-bb>2)eb=-1;bb=H;H=a;sb=G-H/i/(Z||1);if(H&&x&&!Ab){b.$CancelEvent(e);if(!O)z.$StandBy(sb);else z.$SetStandByPosition(sb)}}}}}function mb(){tc();if(B){B=l;b.$GetNow();b.$RemoveEvent(f,"mousemove",Db);b.$RemoveEvent(f,"touchmove",Db);M=H;z.$Stop();var a=w.$GetPosition();h.$TriggerEvent(i.$EVT_DRAG_END,t(a),a,t(G),G);E&12&&Rb();gc(d)}}function mc(c){if(M){b.$StopEvent(c);var a=b.$EvtSrc(c);while(a&&v!==a){a.tagName=="A"&&b.$CancelEvent(c);try{a=a.parentNode}catch(d){break}}}}function Lb(a){C[s];s=t(a);tb=C[s];Wb(a);return s}function Hc(a,b){x=0;Lb(a);h.$TriggerEvent(i.$EVT_PARK,t(a),b)}function Wb(a,c){yb=a;b.$Each(S,function(b){b.$SetCurrentIndex(t(a),a,c)})}function wc(){var b=i.$DragRegistry||0,a=Y;if(jb)a&1&&(a&=1);i.$DragRegistry|=a;return L=a&~b}function tc(){if(L){i.$DragRegistry&=~Y;L=0}}function Zb(){var a=b.$CreateDiv();b.$SetStyles(a,V);b.$CssPosition(a,"absolute");return a}function t(a){return(a%r+r)%r}function nc(b,d){if(d)if(!D){b=c.min(c.max(b+yb,0),r-u);d=l}else if(D&2){b=t(b+yb);d=l}nb(b,a.$SlideDuration,d)}function zb(){b.$Each(S,function(a){a.$Show(a.$Options.$ChanceToShow<=F)})}function kc(){if(!F){F=1;zb();if(!B){E&12&&gc();E&3&&C[s].$TryActivate()}}}function jc(){if(F){F=0;zb();B||!(E&12)||ic()}}function lc(){V={$Width:K,$Height:J,$Top:0,$Left:0};b.$Each(T,function(a){b.$SetStyles(a,V);b.$CssPosition(a,"absolute");b.$CssOverflow(a,"hidden");b.$HideElement(a)});b.$SetStyles(cb,V)}function lb(b,a){nb(b,a,d)}function nb(h,f,k){if(Tb&&(!B&&(F||!(E&12))||a.$NaviQuitDrag)){O=d;B=l;z.$Stop();if(f==g)f=Xb;var e=Eb.$GetPosition_Display(),b=h;if(k){b=e+h;if(h>0)b=c.ceil(b);else b=c.floor(b)}if(D&2)b=t(b);if(!(D&1))b=c.max(0,c.min(b,r-u));var j=(b-e)%r;b=e+j;var i=e==b?0:f*c.abs(j);i=c.min(i,f*u*1.5);z.$PlayCarousel(e,b,i||1)}}h.$PlayTo=nb;h.$GoTo=function(a){w.$GoToPosition(Lb(a))};h.$Next=function(){lb(1)};h.$Prev=function(){lb(-1)};h.$Pause=function(){P=l};h.$Play=function(){if(!P){P=d;C[s]&&C[s].$TryActivate()}};h.$SetSlideshowTransitions=function(b){a.$SlideshowOptions.$Transitions=b};h.$SetCaptionTransitions=function(a){I.$Transitions=a;I.$Version=b.$GetNow()};h.$SlidesCount=function(){return T.length};h.$CurrentIndex=function(){return s};h.$IsAutoPlaying=function(){return P};h.$IsDragging=function(){return B};h.$IsSliding=function(){return O};h.$IsMouseOver=function(){return!F};h.$LastDragSucceded=function(){return M};function X(){return b.$CssWidth(y||p)}function ib(){return b.$CssHeight(y||p)}h.$OriginalWidth=h.$GetOriginalWidth=X;h.$OriginalHeight=h.$GetOriginalHeight=ib;function Gb(c,d){if(c==g)return b.$CssWidth(p);if(!y){var a=b.$CreateDiv(f);b.$ClassName(a,b.$ClassName(p));b.$CssCssText(a,b.$CssCssText(p));b.$CssDisplay(a,"block");b.$CssPosition(a,"relative");b.$CssTop(a,0);b.$CssLeft(a,0);b.$CssOverflow(a,"visible");y=b.$CreateDiv(f);b.$CssPosition(y,"absolute");b.$CssTop(y,0);b.$CssLeft(y,0);b.$CssWidth(y,b.$CssWidth(p));b.$CssHeight(y,b.$CssHeight(p));b.$CssTransformOrigin(y,"0 0");b.$AppendChild(y,a);var i=b.$Children(p);b.$AppendChild(p,y);b.$Css(p,"backgroundImage","");b.$Each(i,function(c){b.$AppendChild(b.$AttributeEx(c,"noscale")?p:a,c);b.$AttributeEx(c,"autocenter")&&Nb.push(c)})}Z=c/(d?b.$CssHeight:b.$CssWidth)(y);b.$CssScale(y,Z);var h=d?Z*X():c,e=d?c:Z*ib();b.$CssWidth(p,h);b.$CssHeight(p,e);b.$Each(Nb,function(a){var c=b.$ParseInt(b.$AttributeEx(a,"autocenter"));b.$CenterElement(a,c)})}h.$ScaleHeight=h.$GetScaleHeight=function(a){if(a==g)return b.$CssHeight(p);Gb(a,d)};h.$ScaleWidth=h.$SetScaleWidth=h.$GetScaleWidth=Gb;h.$GetVirtualIndex=function(a){var d=c.ceil(t(fb/dc)),b=t(a-s+d);if(b>u){if(a-s>r/2)a-=r;else if(a-s<=-r/2)a+=r}else a=s+b-d;return a};n.call(h);h.$Elmt=p=b.$GetElement(p);var a=b.$Extend({$FillMode:0,$LazyLoading:1,$ArrowKeyNavigation:1,$StartIndex:0,$AutoPlay:l,$Loop:1,$HWA:d,$NaviQuitDrag:d,$AutoPlaySteps:1,$AutoPlayInterval:3e3,$PauseOnHover:1,$SlideDuration:500,$SlideEasing:e.$EaseOutQuad,$MinDragOffsetToSlide:20,$SlideSpacing:0,$Cols:1,$Align:0,$UISearchMode:1,$PlayOrientation:1,$DragOrientation:1},hc);a.$HWA=a.$HWA&&b.$IsBrowser3dSafe();if(a.$Idle!=g)a.$AutoPlayInterval=a.$Idle;if(a.$ParkingPosition!=g)a.$Align=a.$ParkingPosition;var gb=a.$PlayOrientation&3,xc=(a.$PlayOrientation&4)/-4||1,db=a.$SlideshowOptions,I=b.$Extend({$Class:q,$PlayInMode:1,$PlayOutMode:1,$HWA:a.$HWA},a.$CaptionSliderOptions);I.$Transitions=I.$Transitions||I.$CaptionTransitions;var qb=a.$BulletNavigatorOptions,W=a.$ArrowNavigatorOptions,ab=a.$ThumbnailNavigatorOptions,Q=!a.$UISearchMode,y,v=b.$FindChild(p,"slides",Q),cb=b.$FindChild(p,"loading",Q)||b.$CreateDiv(f),Jb=b.$FindChild(p,"navigator",Q),ec=b.$FindChild(p,"arrowleft",Q),cc=b.$FindChild(p,"arrowright",Q),Hb=b.$FindChild(p,"thumbnavigator",Q),pc=b.$CssWidth(v),oc=b.$CssHeight(v),V,T=[],yc=b.$Children(v);b.$Each(yc,function(a){if(a.tagName=="DIV"&&!b.$AttributeEx(a,"u"))T.push(a);else b.$IsBrowserIe9Earlier()&&b.$CssZIndex(a,(b.$CssZIndex(a)||0)+1)});var s=-1,yb,tb,r=T.length,K=a.$SlideWidth||pc,J=a.$SlideHeight||oc,Yb=a.$SlideSpacing,Bb=K+Yb,Cb=J+Yb,dc=gb&1?Bb:Cb,u=c.min(a.$Cols,r),hb,x,L,Ab,S=[],Sb,Ub,Qb,fc,Gc,P,E=a.$PauseOnHover,qc=a.$AutoPlayInterval,Xb=a.$SlideDuration,rb,ub,fb,Tb=u<r,D=Tb?a.$Loop:0,Y,M,F=1,O,B,R,vb=0,wb=0,H,bb,eb,Eb,w,U,z,Vb=new sc,Z,Nb=[];if(r){if(a.$HWA)Mb=function(a,c,d){b.$SetStyleTransform(a,{$TranslateX:c,$TranslateY:d})};P=a.$AutoPlay;h.$Options=hc;lc();b.$Attribute(p,"jssor-slider",d);b.$CssZIndex(v,b.$CssZIndex(v)||0);b.$CssPosition(v,"absolute");hb=b.$CloneNode(v,d);b.$InsertBefore(hb,v);if(db){fc=db.$ShowLink;rb=db.$Class;ub=u==1&&r>1&&rb&&(!b.$IsBrowserIE()||b.$BrowserVersion()>=8)}fb=ub||u>=r||!(D&1)?0:a.$Align;Y=(u>1||fb?gb:-1)&a.$DragOrientation;var xb=v,C=[],A,N,Fb=b.$Device(),jb=Fb.$Touchable,G,pb,Kb,sb;Fb.$TouchActionAttr&&b.$Css(xb,Fb.$TouchActionAttr,([j,"pan-y","pan-x","none"])[Y]||"");U=new Dc;if(ub)A=new rb(Vb,K,J,db,jb);b.$AppendChild(hb,U.$Wrapper);b.$CssOverflow(v,"hidden");N=Zb();b.$Css(N,"backgroundColor","#000");b.$CssOpacity(N,0);b.$InsertBefore(N,xb.firstChild,xb);for(var ob=0;ob<T.length;ob++){var Ac=T[ob],Cc=new Bc(Ac,ob);C.push(Cc)}b.$HideElement(cb);Eb=new Ec;z=new rc(Eb,U);if(Y){b.$AddEvent(v,"mousedown",ac);b.$AddEvent(v,"touchstart",vc);b.$AddEvent(v,"dragstart",Ib);b.$AddEvent(v,"selectstart",Ib);b.$AddEvent(f,"mouseup",mb);b.$AddEvent(f,"touchend",mb);b.$AddEvent(f,"touchcancel",mb);b.$AddEvent(k,"blur",mb)}E&=jb?10:5;if(Jb&&qb){Sb=new qb.$Class(Jb,qb,X(),ib());S.push(Sb)}if(W&&ec&&cc){W.$Loop=D;W.$Cols=u;Ub=new W.$Class(ec,cc,W,X(),ib());S.push(Ub)}if(Hb&&ab){ab.$StartIndex=a.$StartIndex;Qb=new ab.$Class(Hb,ab);S.push(Qb)}b.$Each(S,function(a){a.$Reset(r,C,cb);a.$On(o.$NAVIGATIONREQUEST,nc)});b.$Css(p,"visibility","visible");Gb(X());b.$AddEvent(v,"click",mc,d);b.$AddEvent(p,"mouseout",b.$MouseOverOutFilter(kc,p));b.$AddEvent(p,"mouseover",b.$MouseOverOutFilter(jc,p));zb();a.$ArrowKeyNavigation&&b.$AddEvent(f,"keydown",function(b){if(b.keyCode==37)lb(-a.$ArrowKeyNavigation);else b.keyCode==39&&lb(a.$ArrowKeyNavigation)});var kb=a.$StartIndex;if(!(D&1))kb=c.max(0,c.min(kb,r-u));z.$PlayCarousel(kb,kb,0)}};i.$EVT_CLICK=21;i.$EVT_DRAG_START=22;i.$EVT_DRAG_END=23;i.$EVT_SWIPE_START=24;i.$EVT_SWIPE_END=25;i.$EVT_LOAD_START=26;i.$EVT_LOAD_END=27;i.$EVT_FREEZE=28;i.$EVT_POSITION_CHANGE=202;i.$EVT_PARK=203;i.$EVT_SLIDESHOW_START=206;i.$EVT_SLIDESHOW_END=207;i.$EVT_PROGRESS_CHANGE=208;i.$EVT_STATE_CHANGE=209;var o={$NAVIGATIONREQUEST:1,$INDEXCHANGE:2,$RESET:3};k.$JssorBulletNavigator$=function(e,C){var f=this;n.call(f);e=b.$GetElement(e);var s,A,z,r,k=0,a,m,i,w,x,h,g,q,p,B=[],y=[];function v(a){a!=-1&&y[a].$Selected(a==k)}function t(a){f.$TriggerEvent(o.$NAVIGATIONREQUEST,a*m)}f.$Elmt=e;f.$GetCurrentIndex=function(){return r};f.$SetCurrentIndex=function(a){if(a!=r){var d=k,b=c.floor(a/m);k=b;r=a;v(d);v(b)}};f.$Show=function(a){b.$ShowElement(e,a)};var u;f.$Reset=function(E){if(!u){s=c.ceil(E/m);k=0;var o=q+w,r=p+x,n=c.ceil(s/i)-1;A=q+o*(!h?n:i-1);z=p+r*(h?n:i-1);b.$CssWidth(e,A);b.$CssHeight(e,z);for(var f=0;f<s;f++){var C=b.$CreateSpan();b.$InnerText(C,f+1);var l=b.$BuildElement(g,"numbertemplate",C,d);b.$CssPosition(l,"absolute");var v=f%(n+1);b.$CssLeft(l,!h?o*v:f%i*o);b.$CssTop(l,h?r*v:c.floor(f/(n+1))*r);b.$AppendChild(e,l);B[f]=l;a.$ActionMode&1&&b.$AddEvent(l,"click",b.$CreateCallback(j,t,f));a.$ActionMode&2&&b.$AddEvent(l,"mouseover",b.$MouseOverOutFilter(b.$CreateCallback(j,t,f),l));y[f]=b.$Buttonize(l)}u=d}};f.$Options=a=b.$Extend({$SpacingX:10,$SpacingY:10,$Orientation:1,$ActionMode:1},C);g=b.$FindChild(e,"prototype");q=b.$CssWidth(g);p=b.$CssHeight(g);b.$RemoveElement(g,e);m=a.$Steps||1;i=a.$Rows||1;w=a.$SpacingX;x=a.$SpacingY;h=a.$Orientation-1;a.$Scale==l&&b.$Attribute(e,"noscale",d);a.$AutoCenter&&b.$Attribute(e,"autocenter",a.$AutoCenter)};k.$JssorArrowNavigator$=function(a,g,h){var c=this;n.call(c);var r,q,e,f,i;b.$CssWidth(a);b.$CssHeight(a);function k(a){c.$TriggerEvent(o.$NAVIGATIONREQUEST,a,d)}function p(c){b.$ShowElement(a,c||!h.$Loop&&e==0);b.$ShowElement(g,c||!h.$Loop&&e>=q-h.$Cols);r=c}c.$GetCurrentIndex=function(){return e};c.$SetCurrentIndex=function(b,a,c){if(c)e=a;else{e=b;p(r)}};c.$Show=p;var m;c.$Reset=function(c){q=c;e=0;if(!m){b.$AddEvent(a,"click",b.$CreateCallback(j,k,-i));b.$AddEvent(g,"click",b.$CreateCallback(j,k,i));b.$Buttonize(a);b.$Buttonize(g);m=d}};c.$Options=f=b.$Extend({$Steps:1},h);i=f.$Steps;if(f.$Scale==l){b.$Attribute(a,"noscale",d);b.$Attribute(g,"noscale",d)}if(f.$AutoCenter){b.$Attribute(a,"autocenter",f.$AutoCenter);b.$Attribute(g,"autocenter",f.$AutoCenter)}};k.$JssorThumbnailNavigator$=function(g,B){var h=this,y,p,a,v=[],z,x,e,q,r,u,t,m,s,f,k;n.call(h);g=b.$GetElement(g);function A(n,f){var g=this,c,m,l;function q(){m.$Selected(p==f)}function i(d){if(d||!s.$LastDragSucceded()){var a=e-f%e,b=s.$GetVirtualIndex((f+a)/e-1),c=b*e+e-a;h.$TriggerEvent(o.$NAVIGATIONREQUEST,c)}}g.$Index=f;g.$Highlight=q;l=n.$Thumb||n.$Image||b.$CreateDiv();g.$Wrapper=c=b.$BuildElement(k,"thumbnailtemplate",l,d);m=b.$Buttonize(c);a.$ActionMode&1&&b.$AddEvent(c,"click",b.$CreateCallback(j,i,0));a.$ActionMode&2&&b.$AddEvent(c,"mouseover",b.$MouseOverOutFilter(b.$CreateCallback(j,i,1),c))}h.$GetCurrentIndex=function(){return p};h.$SetCurrentIndex=function(b,d,f){var a=p;p=b;a!=-1&&v[a].$Highlight();v[b].$Highlight();!f&&s.$PlayTo(s.$GetVirtualIndex(c.floor(d/e)))};h.$Show=function(a){b.$ShowElement(g,a)};var w;h.$Reset=function(F,D){if(!w){y=F;c.ceil(y/e);p=-1;m=c.min(m,D.length);var h=a.$Orientation&1,n=u+(u+q)*(e-1)*(1-h),k=t+(t+r)*(e-1)*h,B=n+(n+q)*(m-1)*h,o=k+(k+r)*(m-1)*(1-h);b.$CssPosition(f,"absolute");b.$CssOverflow(f,"hidden");a.$AutoCenter&1&&b.$CssLeft(f,(z-B)/2);a.$AutoCenter&2&&b.$CssTop(f,(x-o)/2);b.$CssWidth(f,B);b.$CssHeight(f,o);var j=[];b.$Each(D,function(l,g){var i=new A(l,g),d=i.$Wrapper,a=c.floor(g/e),k=g%e;b.$CssLeft(d,(u+q)*k*(1-h));b.$CssTop(d,(t+r)*k*h);if(!j[a]){j[a]=b.$CreateDiv();b.$AppendChild(f,j[a])}b.$AppendChild(j[a],d);v.push(i)});var E=b.$Extend({$AutoPlay:l,$NaviQuitDrag:l,$SlideWidth:n,$SlideHeight:k,$SlideSpacing:q*h+r*(1-h),$MinDragOffsetToSlide:12,$SlideDuration:200,$PauseOnHover:1,$PlayOrientation:a.$Orientation,$DragOrientation:a.$NoDrag||a.$DisableDrag?0:a.$Orientation},a);s=new i(g,E);w=d}};h.$Options=a=b.$Extend({$SpacingX:0,$SpacingY:0,$Cols:1,$Orientation:1,$AutoCenter:3,$ActionMode:1},B);z=b.$CssWidth(g);x=b.$CssHeight(g);f=b.$FindChild(g,"slides",d);k=b.$FindChild(f,"prototype");u=b.$CssWidth(k);t=b.$CssHeight(k);b.$RemoveElement(k,f);e=a.$Rows||1;q=a.$SpacingX;r=a.$SpacingY;m=a.$Cols;a.$Scale==l&&b.$Attribute(g,"noscale",d)};function q(e,d,c){var a=this;m.call(a,0,c);a.$Revert=b.$EmptyFunction;a.$IdleBegin=0;a.$IdleEnd=c}k.$JssorCaptionSlideo$=function(n,f,l){var a=this,o,g={},i=f.$Transitions,c=new m(0,0);m.call(a,0,0);function j(d,c){var a={};b.$Each(d,function(d,f){var e=g[f];if(e){if(b.$IsPlainObject(d))d=j(d,c||f=="e");else if(c)if(b.$IsNumeric(d))d=o[d];a[e]=d}});return a}function k(e,c){var a=[],d=b.$Children(e);b.$Each(d,function(d){var h=b.$AttributeEx(d,"u")=="caption";if(h){var e=b.$AttributeEx(d,"t"),g=i[b.$ParseInt(e)]||i[e],f={$Elmt:d,$Transition:g};a.push(f)}if(c<5)a=a.concat(k(d,c+1))});return a}function r(d,e,a){b.$Each(e,function(g){var e=j(g),f=b.$FormatEasings(e.$Easing);if(e.$Left){e.$MoveX=e.$Left;f.$MoveX=f.$Left;delete e.$Left}if(e.$Top){e.$MoveY=e.$Top;f.$MoveY=f.$Top;delete e.$Top}var h={$Easing:f,$OriginalWidth:a.$Width,$OriginalHeight:a.$Height},i=new m(g.b,g.d,h,d,a,e);c.$Combine(i);a=b.$AddDif(a,e)});return a}function q(a){b.$Each(a,function(f){var a=f.$Elmt,e=b.$CssWidth(a),d=b.$CssHeight(a),c={$Left:b.$CssLeft(a),$Top:b.$CssTop(a),$MoveX:0,$MoveY:0,$Opacity:1,$ZIndex:b.$CssZIndex(a)||0,$Rotate:0,$RotateX:0,$RotateY:0,$ScaleX:1,$ScaleY:1,$TranslateX:0,$TranslateY:0,$TranslateZ:0,$SkewX:0,$SkewY:0,$Width:e,$Height:d,$Clip:{$Top:0,$Right:e,$Bottom:d,$Left:0}};c.$OriginalX=c.$Left;c.$OriginalY=c.$Top;r(a,f.$Transition,c)})}function t(g,f,h){var e=g.b-f;if(e){var b=new m(f,e);b.$Combine(c,d);b.$Shift(h);a.$Combine(b)}a.$Expand(g.d);return e}function s(f){var d=c.$GetPosition_OuterBegin(),e=0;b.$Each(f,function(c,f){c=b.$Extend({d:l},c);t(c,d,e);d=c.b;e+=c.d;if(!f||c.t==2){a.$IdleBegin=d;a.$IdleEnd=d+c.d}})}a.$Revert=function(){a.$GoToPosition(-1,d)};o=[h.$Swing,h.$Linear,h.$InQuad,h.$OutQuad,h.$InOutQuad,h.$InCubic,h.$OutCubic,h.$InOutCubic,h.$InQuart,h.$OutQuart,h.$InOutQuart,h.$InQuint,h.$OutQuint,h.$InOutQuint,h.$InSine,h.$OutSine,h.$InOutSine,h.$InExpo,h.$OutExpo,h.$InOutExpo,h.$InCirc,h.$OutCirc,h.$InOutCirc,h.$InElastic,h.$OutElastic,h.$InOutElastic,h.$InBack,h.$OutBack,h.$InOutBack,h.$InBounce,h.$OutBounce,h.$InOutBounce,h.$GoBack,h.$InWave,h.$OutWave,h.$OutJump,h.$InJump];var u={$Top:"y",$Left:"x",$Bottom:"m",$Right:"t",$Rotate:"r",$RotateX:"rX",$RotateY:"rY",$ScaleX:"sX",$ScaleY:"sY",$TranslateX:"tX",$TranslateY:"tY",$TranslateZ:"tZ",$SkewX:"kX",$SkewY:"kY",$Opacity:"o",$Easing:"e",$ZIndex:"i",$Clip:"c"};b.$Each(u,function(b,a){g[b]=a});q(k(n,1));c.$GoToPosition(-1);var p=f.$Breaks||[],e=[].concat(p[b.$ParseInt(b.$AttributeEx(n,"b"))]||[]);e.push({b:c.$GetPosition_OuterEnd(),d:e.length?0:l});s(e);a.$GoToPosition(-1)}})(window,document,Math,null,true,false);/*globals $,store,countlyGlobal,_,countlyVersionHistoryManager,Handlebars*/
$(document).ready(function() {
    whatsNewPopup();
});

/**
 * Document width check is a hack for certain cases like dashboard email screenshot process, in order not to show the popup
 */
function whatsNewPopup() {
    /*
        Document width check is a hack for certain cases like dashboard email
        screenshot process, in order not to show the popup
     */
    if (countlyVersionHistoryManager && $("body").width() >= 900) {
        $.when(countlyVersionHistoryManager.initialize()).then(function() {

            var versionData = _.sortBy(countlyVersionHistoryManager.getData(), "updated");
            var currentVersionData = versionData[versionData.length - 1];

            // Current version string, e.g. 18.08
            var currentVersion = currentVersionData.version;

            // If Drill is present it should be a Countly Enterprise instance
            var isEE = (countlyGlobal.plugins.indexOf("drill") !== -1);

            // disabled: true disables the entire popup
            // isFirstTime: false disables opening the popup on load
            // showInTopBar: false disabled adding a top bar icon
            var displayParams = {
                disabled: false,
                isFirstTime: true,
                showInTopBar: true
            };

            // Local storage data in {"version":"18.08","seen":1534765533775} format
            var localStorageData = store.get("countly_onboard_whatsnew");

            // Duration to show the top bar icon for the popup trigger (10 days)
            var showInTopBarForMS = 10 * 24 * 60 * 60 * 1000;

            var currentTimeMS = (new Date()).getTime();

            // Popup HTML
            var popupTemplate;


            // User account was created after the version upgrade
            // so we'll only show the top bar icon
            if (countlyGlobal &&
                countlyGlobal.member &&
                countlyGlobal.member.created_at &&
                currentVersionData.updated < (countlyGlobal.member.created_at * 1000)
            ) {
                displayParams.isFirstTime = false;
                displayParams.showInTopBar = true;
            }

            // If there is only one version data, user probably just
            // installed Countly so we won't show a what's new popup
            // if (versionData.length <= 1) {
            //    displayParams.disabled = true;
            // }
            //
            // LOGIC DISABLED FOR NOW BECAUSE VERSION DATA WILL INCLUDE 1 ITEM FOR ALL SERVERS

            if (!displayParams.disabled) {

                if (localStorageData && localStorageData.version && localStorageData.seen && localStorageData.version === currentVersion) {
                    // Since LS object is present for this version
                    // user has seen the popup before so we won't show it on load
                    displayParams.isFirstTime = false;

                    // If it has been more than showInTopBarForMS since the user
                    // first seen the popup, we'll not show the icon in top bar
                    if ((currentTimeMS - localStorageData.seen) > showInTopBarForMS) {
                        displayParams.showInTopBar = false;
                    }
                }
                else {
                    store.set("countly_onboard_whatsnew", {
                        version: currentVersion,
                        seen: currentTimeMS
                    });
                }

                // First we fetch the json file that contains the new features for this version
                $.when($.get(countlyGlobal.path + '/onboarding/data/versions/' + currentVersion + '/features.json', function(featuresJSON) {

                    if (!isEE) {
                        // If this is not an EE instance we look for CE features in the
                        // features array, if we can't find anything we won't show the popup
                        featuresJSON = _.filter(featuresJSON, function(feature) {
                            return feature.showIn === "CE" || feature.showIn === "All";
                        });
                    }
                    else {
                        featuresJSON = _.filter(featuresJSON, function(feature) {
                            return feature.showIn === "EE" || feature.showIn === "All";
                        });
                    }

                    // If there aren't any features to show, disable popup logic completely
                    displayParams.disabled = (featuresJSON.length === 0 || !_.isArray(featuresJSON));

                    var popupData = {
                        features: featuresJSON,
                        version: currentVersion
                    };

                    if (!displayParams.disabled) {
                        $.when($.get(countlyGlobal.path + '/onboarding/templates/whatsnew-popup.html', function(popupHTML) {

                            popupTemplate = Handlebars.compile(popupHTML);
                            popupTemplate = popupTemplate(popupData);

                            // Only show the popup on load for the first time
                            if (displayParams.isFirstTime) {
                                openPopup();
                            }

                            // Attach the gift icon to the top bar if it's not already
                            // there and user meets the conditions to see it
                            if (displayParams.showInTopBar && $("#top-bar").find("#whatsnew-menu").length === 0) {
                                var whatsnewTopBarMenu =
                                    '<div id="whatsnew-menu" class="dropdown icon" style="display: block">' +
                                    '<div class="empty-state">' +
                                    '<i class="fa fa-gift" title="You can access the new features popup from here for the next 10 days"></i>' +
                                    '</div>' +
                                    '</div>';

                                $("#top-bar").find(".right-menu").prepend(whatsnewTopBarMenu);

                                // Initialize the tooltip which will be shown only
                                // when the user closes the popup after first view
                                $("#whatsnew-menu i").tooltipster({
                                    animation: 'fade',
                                    animationDuration: 100,
                                    delay: 100,
                                    maxWidth: 240,
                                    theme: 'tooltipster-borderless',
                                    trigger: 'custom',
                                    triggerOpen: {
                                        mouseenter: false,
                                        touchstart: false
                                    },
                                    triggerClose: {
                                        mouseleave: false,
                                        touchleave: false,
                                        originClick: true
                                    },
                                    side: "bottom"
                                });
                            }

                            $(document).on("click", "#last-step-button", function() {
                                closePopup();
                            });

                            $(document).keyup(function(e) {
                                // Close the popup with ESC
                                if (e.keyCode === 27) {
                                    closePopup();
                                }
                            });

                            $(document).on("click", "#whatsnew-explore", function() {
                                $("#whatsnew-first-time").fadeOut();
                            });

                            $("#whatsnew-menu").on("click", function() {
                                openPopup();
                            });

                            /**
                             * Open Popup
                             */
                            function openPopup() {
                                $("body").append(popupTemplate);
                                $("#whatsnew-overlay").addClass("active");

                                if (displayParams.isFirstTime) {
                                    setTimeout(function() {
                                        $("#whatsnew-popup").addClass("show");
                                    }, 300);
                                }
                                else {
                                    // If it's not the first time, we won't show the
                                    // info view to initiate the carousel
                                    $("#whatsnew-first-time").hide();

                                    setTimeout(function() {
                                        $("#whatsnew-popup").addClass("show");
                                    }, 0);
                                }
                            }

                            /**
                             * Close Popup
                             */
                            function closePopup() {
                                $("#whatsnew-overlay").removeClass("active");
                                $("#whatsnew-popup").removeClass("show");

                                setTimeout(function() {
                                    $("#whatsnew").hide();
                                }, 500);

                                setTimeout(function() {
                                    $("#whatsnew").remove();
                                }, 800);

                                if (displayParams.isFirstTime && displayParams.showInTopBar) {
                                    setTimeout(function() {
                                        $("#whatsnew-menu i").tooltipster('open');
                                    }, 300);

                                    setTimeout(function() {
                                        $("#whatsnew-menu i").tooltipster('close');
                                    }, 5000);

                                    displayParams.isFirstTime = false;
                                }
                            }

                        })).then(function() {});
                    }
                })).then(function() {});
            }
        });
    }
}